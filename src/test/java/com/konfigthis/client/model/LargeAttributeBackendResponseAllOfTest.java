/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumbackendDefaultCacheModeProp;
import com.konfigthis.client.model.EnumbackendDn2idCacheModeProp;
import com.konfigthis.client.model.EnumbackendDn2uriCacheModeProp;
import com.konfigthis.client.model.EnumbackendExternalTxnDefaultBackendLockBehaviorProp;
import com.konfigthis.client.model.EnumbackendId2childrenCacheModeProp;
import com.konfigthis.client.model.EnumbackendId2entryCacheModeProp;
import com.konfigthis.client.model.EnumbackendId2subtreeCacheModeProp;
import com.konfigthis.client.model.EnumbackendPrimeMethodProp;
import com.konfigthis.client.model.EnumbackendSingleWriterLockBehaviorProp;
import com.konfigthis.client.model.EnumbackendSystemIndexToPrimeInternalNodesOnlyProp;
import com.konfigthis.client.model.EnumbackendSystemIndexToPrimeProp;
import com.konfigthis.client.model.EnumbackendWritabilityModeProp;
import com.konfigthis.client.model.EnumlargeAttributeBackendSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for LargeAttributeBackendResponseAllOf
 */
public class LargeAttributeBackendResponseAllOfTest {
    private final LargeAttributeBackendResponseAllOf model = new LargeAttributeBackendResponseAllOf();

    /**
     * Model tests for LargeAttributeBackendResponseAllOf
     */
    @Test
    public void testLargeAttributeBackendResponseAllOf() {
        // TODO: test LargeAttributeBackendResponseAllOf
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'schemas'
     */
    @Test
    public void schemasTest() {
        // TODO: test schemas
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'baseDN'
     */
    @Test
    public void baseDNTest() {
        // TODO: test baseDN
    }

    /**
     * Test the property 'writabilityMode'
     */
    @Test
    public void writabilityModeTest() {
        // TODO: test writabilityMode
    }

    /**
     * Test the property 'isPrivateBackend'
     */
    @Test
    public void isPrivateBackendTest() {
        // TODO: test isPrivateBackend
    }

    /**
     * Test the property 'dbCachePercent'
     */
    @Test
    public void dbCachePercentTest() {
        // TODO: test dbCachePercent
    }

    /**
     * Test the property 'defaultCacheMode'
     */
    @Test
    public void defaultCacheModeTest() {
        // TODO: test defaultCacheMode
    }

    /**
     * Test the property 'dbDirectory'
     */
    @Test
    public void dbDirectoryTest() {
        // TODO: test dbDirectory
    }

    /**
     * Test the property 'dbDirectoryPermissions'
     */
    @Test
    public void dbDirectoryPermissionsTest() {
        // TODO: test dbDirectoryPermissions
    }

    /**
     * Test the property 'compactCommonParentDN'
     */
    @Test
    public void compactCommonParentDNTest() {
        // TODO: test compactCommonParentDN
    }

    /**
     * Test the property 'compressEntries'
     */
    @Test
    public void compressEntriesTest() {
        // TODO: test compressEntries
    }

    /**
     * Test the property 'hashEntries'
     */
    @Test
    public void hashEntriesTest() {
        // TODO: test hashEntries
    }

    /**
     * Test the property 'dbNumCleanerThreads'
     */
    @Test
    public void dbNumCleanerThreadsTest() {
        // TODO: test dbNumCleanerThreads
    }

    /**
     * Test the property 'dbCleanerMinUtilization'
     */
    @Test
    public void dbCleanerMinUtilizationTest() {
        // TODO: test dbCleanerMinUtilization
    }

    /**
     * Test the property 'dbEvictorCriticalPercentage'
     */
    @Test
    public void dbEvictorCriticalPercentageTest() {
        // TODO: test dbEvictorCriticalPercentage
    }

    /**
     * Test the property 'dbCheckpointerWakeupInterval'
     */
    @Test
    public void dbCheckpointerWakeupIntervalTest() {
        // TODO: test dbCheckpointerWakeupInterval
    }

    /**
     * Test the property 'dbBackgroundSyncInterval'
     */
    @Test
    public void dbBackgroundSyncIntervalTest() {
        // TODO: test dbBackgroundSyncInterval
    }

    /**
     * Test the property 'dbUseThreadLocalHandles'
     */
    @Test
    public void dbUseThreadLocalHandlesTest() {
        // TODO: test dbUseThreadLocalHandles
    }

    /**
     * Test the property 'dbLogFileMax'
     */
    @Test
    public void dbLogFileMaxTest() {
        // TODO: test dbLogFileMax
    }

    /**
     * Test the property 'dbLoggingLevel'
     */
    @Test
    public void dbLoggingLevelTest() {
        // TODO: test dbLoggingLevel
    }

    /**
     * Test the property 'jeProperty'
     */
    @Test
    public void jePropertyTest() {
        // TODO: test jeProperty
    }

    /**
     * Test the property 'id2entryCacheMode'
     */
    @Test
    public void id2entryCacheModeTest() {
        // TODO: test id2entryCacheMode
    }

    /**
     * Test the property 'dn2idCacheMode'
     */
    @Test
    public void dn2idCacheModeTest() {
        // TODO: test dn2idCacheMode
    }

    /**
     * Test the property 'id2childrenCacheMode'
     */
    @Test
    public void id2childrenCacheModeTest() {
        // TODO: test id2childrenCacheMode
    }

    /**
     * Test the property 'id2subtreeCacheMode'
     */
    @Test
    public void id2subtreeCacheModeTest() {
        // TODO: test id2subtreeCacheMode
    }

    /**
     * Test the property 'dn2uriCacheMode'
     */
    @Test
    public void dn2uriCacheModeTest() {
        // TODO: test dn2uriCacheMode
    }

    /**
     * Test the property 'primeMethod'
     */
    @Test
    public void primeMethodTest() {
        // TODO: test primeMethod
    }

    /**
     * Test the property 'primeThreadCount'
     */
    @Test
    public void primeThreadCountTest() {
        // TODO: test primeThreadCount
    }

    /**
     * Test the property 'primeTimeLimit'
     */
    @Test
    public void primeTimeLimitTest() {
        // TODO: test primeTimeLimit
    }

    /**
     * Test the property 'primeAllIndexes'
     */
    @Test
    public void primeAllIndexesTest() {
        // TODO: test primeAllIndexes
    }

    /**
     * Test the property 'systemIndexToPrime'
     */
    @Test
    public void systemIndexToPrimeTest() {
        // TODO: test systemIndexToPrime
    }

    /**
     * Test the property 'systemIndexToPrimeInternalNodesOnly'
     */
    @Test
    public void systemIndexToPrimeInternalNodesOnlyTest() {
        // TODO: test systemIndexToPrimeInternalNodesOnly
    }

    /**
     * Test the property 'backgroundPrime'
     */
    @Test
    public void backgroundPrimeTest() {
        // TODO: test backgroundPrime
    }

    /**
     * Test the property 'indexEntryLimit'
     */
    @Test
    public void indexEntryLimitTest() {
        // TODO: test indexEntryLimit
    }

    /**
     * Test the property 'compositeIndexEntryLimit'
     */
    @Test
    public void compositeIndexEntryLimitTest() {
        // TODO: test compositeIndexEntryLimit
    }

    /**
     * Test the property 'id2childrenIndexEntryLimit'
     */
    @Test
    public void id2childrenIndexEntryLimitTest() {
        // TODO: test id2childrenIndexEntryLimit
    }

    /**
     * Test the property 'id2subtreeIndexEntryLimit'
     */
    @Test
    public void id2subtreeIndexEntryLimitTest() {
        // TODO: test id2subtreeIndexEntryLimit
    }

    /**
     * Test the property 'importTempDirectory'
     */
    @Test
    public void importTempDirectoryTest() {
        // TODO: test importTempDirectory
    }

    /**
     * Test the property 'importThreadCount'
     */
    @Test
    public void importThreadCountTest() {
        // TODO: test importThreadCount
    }

    /**
     * Test the property 'exportThreadCount'
     */
    @Test
    public void exportThreadCountTest() {
        // TODO: test exportThreadCount
    }

    /**
     * Test the property 'dbImportCachePercent'
     */
    @Test
    public void dbImportCachePercentTest() {
        // TODO: test dbImportCachePercent
    }

    /**
     * Test the property 'dbTxnWriteNoSync'
     */
    @Test
    public void dbTxnWriteNoSyncTest() {
        // TODO: test dbTxnWriteNoSync
    }

    /**
     * Test the property 'deadlockRetryLimit'
     */
    @Test
    public void deadlockRetryLimitTest() {
        // TODO: test deadlockRetryLimit
    }

    /**
     * Test the property 'externalTxnDefaultBackendLockBehavior'
     */
    @Test
    public void externalTxnDefaultBackendLockBehaviorTest() {
        // TODO: test externalTxnDefaultBackendLockBehavior
    }

    /**
     * Test the property 'singleWriterLockBehavior'
     */
    @Test
    public void singleWriterLockBehaviorTest() {
        // TODO: test singleWriterLockBehavior
    }

    /**
     * Test the property 'subtreeDeleteSizeLimit'
     */
    @Test
    public void subtreeDeleteSizeLimitTest() {
        // TODO: test subtreeDeleteSizeLimit
    }

    /**
     * Test the property 'numRecentChanges'
     */
    @Test
    public void numRecentChangesTest() {
        // TODO: test numRecentChanges
    }

    /**
     * Test the property 'offlineProcessDatabaseOpenTimeout'
     */
    @Test
    public void offlineProcessDatabaseOpenTimeoutTest() {
        // TODO: test offlineProcessDatabaseOpenTimeout
    }

    /**
     * Test the property 'backendID'
     */
    @Test
    public void backendIDTest() {
        // TODO: test backendID
    }

    /**
     * Test the property 'setDegradedAlertWhenDisabled'
     */
    @Test
    public void setDegradedAlertWhenDisabledTest() {
        // TODO: test setDegradedAlertWhenDisabled
    }

    /**
     * Test the property 'returnUnavailableWhenDisabled'
     */
    @Test
    public void returnUnavailableWhenDisabledTest() {
        // TODO: test returnUnavailableWhenDisabled
    }

    /**
     * Test the property 'notificationManager'
     */
    @Test
    public void notificationManagerTest() {
        // TODO: test notificationManager
    }

}
