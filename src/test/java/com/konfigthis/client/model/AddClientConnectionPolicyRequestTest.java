/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumclientConnectionPolicyAllowedAuthTypeProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyAllowedFilterTypeProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyAllowedOperationProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp;
import com.konfigthis.client.model.EnumclientConnectionPolicySchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for AddClientConnectionPolicyRequest
 */
public class AddClientConnectionPolicyRequestTest {
    private final AddClientConnectionPolicyRequest model = new AddClientConnectionPolicyRequest();

    /**
     * Model tests for AddClientConnectionPolicyRequest
     */
    @Test
    public void testAddClientConnectionPolicyRequest() {
        // TODO: test AddClientConnectionPolicyRequest
    }

    /**
     * Test the property 'policyName'
     */
    @Test
    public void policyNameTest() {
        // TODO: test policyName
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'schemas'
     */
    @Test
    public void schemasTest() {
        // TODO: test schemas
    }

    /**
     * Test the property 'policyID'
     */
    @Test
    public void policyIDTest() {
        // TODO: test policyID
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'evaluationOrderIndex'
     */
    @Test
    public void evaluationOrderIndexTest() {
        // TODO: test evaluationOrderIndex
    }

    /**
     * Test the property 'connectionCriteria'
     */
    @Test
    public void connectionCriteriaTest() {
        // TODO: test connectionCriteria
    }

    /**
     * Test the property 'terminateConnection'
     */
    @Test
    public void terminateConnectionTest() {
        // TODO: test terminateConnection
    }

    /**
     * Test the property 'sensitiveAttribute'
     */
    @Test
    public void sensitiveAttributeTest() {
        // TODO: test sensitiveAttribute
    }

    /**
     * Test the property 'excludeGlobalSensitiveAttribute'
     */
    @Test
    public void excludeGlobalSensitiveAttributeTest() {
        // TODO: test excludeGlobalSensitiveAttribute
    }

    /**
     * Test the property 'resultCodeMap'
     */
    @Test
    public void resultCodeMapTest() {
        // TODO: test resultCodeMap
    }

    /**
     * Test the property 'includedBackendBaseDN'
     */
    @Test
    public void includedBackendBaseDNTest() {
        // TODO: test includedBackendBaseDN
    }

    /**
     * Test the property 'excludedBackendBaseDN'
     */
    @Test
    public void excludedBackendBaseDNTest() {
        // TODO: test excludedBackendBaseDN
    }

    /**
     * Test the property 'allowedOperation'
     */
    @Test
    public void allowedOperationTest() {
        // TODO: test allowedOperation
    }

    /**
     * Test the property 'requiredOperationRequestCriteria'
     */
    @Test
    public void requiredOperationRequestCriteriaTest() {
        // TODO: test requiredOperationRequestCriteria
    }

    /**
     * Test the property 'prohibitedOperationRequestCriteria'
     */
    @Test
    public void prohibitedOperationRequestCriteriaTest() {
        // TODO: test prohibitedOperationRequestCriteria
    }

    /**
     * Test the property 'allowedRequestControl'
     */
    @Test
    public void allowedRequestControlTest() {
        // TODO: test allowedRequestControl
    }

    /**
     * Test the property 'deniedRequestControl'
     */
    @Test
    public void deniedRequestControlTest() {
        // TODO: test deniedRequestControl
    }

    /**
     * Test the property 'allowedExtendedOperation'
     */
    @Test
    public void allowedExtendedOperationTest() {
        // TODO: test allowedExtendedOperation
    }

    /**
     * Test the property 'deniedExtendedOperation'
     */
    @Test
    public void deniedExtendedOperationTest() {
        // TODO: test deniedExtendedOperation
    }

    /**
     * Test the property 'allowedAuthType'
     */
    @Test
    public void allowedAuthTypeTest() {
        // TODO: test allowedAuthType
    }

    /**
     * Test the property 'allowedSASLMechanism'
     */
    @Test
    public void allowedSASLMechanismTest() {
        // TODO: test allowedSASLMechanism
    }

    /**
     * Test the property 'deniedSASLMechanism'
     */
    @Test
    public void deniedSASLMechanismTest() {
        // TODO: test deniedSASLMechanism
    }

    /**
     * Test the property 'allowedFilterType'
     */
    @Test
    public void allowedFilterTypeTest() {
        // TODO: test allowedFilterType
    }

    /**
     * Test the property 'allowUnindexedSearches'
     */
    @Test
    public void allowUnindexedSearchesTest() {
        // TODO: test allowUnindexedSearches
    }

    /**
     * Test the property 'allowUnindexedSearchesWithControl'
     */
    @Test
    public void allowUnindexedSearchesWithControlTest() {
        // TODO: test allowUnindexedSearchesWithControl
    }

    /**
     * Test the property 'minimumSubstringLength'
     */
    @Test
    public void minimumSubstringLengthTest() {
        // TODO: test minimumSubstringLength
    }

    /**
     * Test the property 'maximumConcurrentConnections'
     */
    @Test
    public void maximumConcurrentConnectionsTest() {
        // TODO: test maximumConcurrentConnections
    }

    /**
     * Test the property 'maximumConnectionDuration'
     */
    @Test
    public void maximumConnectionDurationTest() {
        // TODO: test maximumConnectionDuration
    }

    /**
     * Test the property 'maximumIdleConnectionDuration'
     */
    @Test
    public void maximumIdleConnectionDurationTest() {
        // TODO: test maximumIdleConnectionDuration
    }

    /**
     * Test the property 'maximumOperationCountPerConnection'
     */
    @Test
    public void maximumOperationCountPerConnectionTest() {
        // TODO: test maximumOperationCountPerConnection
    }

    /**
     * Test the property 'maximumConcurrentOperationsPerConnection'
     */
    @Test
    public void maximumConcurrentOperationsPerConnectionTest() {
        // TODO: test maximumConcurrentOperationsPerConnection
    }

    /**
     * Test the property 'maximumConcurrentOperationWaitTimeBeforeRejecting'
     */
    @Test
    public void maximumConcurrentOperationWaitTimeBeforeRejectingTest() {
        // TODO: test maximumConcurrentOperationWaitTimeBeforeRejecting
    }

    /**
     * Test the property 'maximumConcurrentOperationsPerConnectionExceededBehavior'
     */
    @Test
    public void maximumConcurrentOperationsPerConnectionExceededBehaviorTest() {
        // TODO: test maximumConcurrentOperationsPerConnectionExceededBehavior
    }

    /**
     * Test the property 'maximumConnectionOperationRate'
     */
    @Test
    public void maximumConnectionOperationRateTest() {
        // TODO: test maximumConnectionOperationRate
    }

    /**
     * Test the property 'connectionOperationRateExceededBehavior'
     */
    @Test
    public void connectionOperationRateExceededBehaviorTest() {
        // TODO: test connectionOperationRateExceededBehavior
    }

    /**
     * Test the property 'maximumPolicyOperationRate'
     */
    @Test
    public void maximumPolicyOperationRateTest() {
        // TODO: test maximumPolicyOperationRate
    }

    /**
     * Test the property 'policyOperationRateExceededBehavior'
     */
    @Test
    public void policyOperationRateExceededBehaviorTest() {
        // TODO: test policyOperationRateExceededBehavior
    }

    /**
     * Test the property 'maximumSearchSizeLimit'
     */
    @Test
    public void maximumSearchSizeLimitTest() {
        // TODO: test maximumSearchSizeLimit
    }

    /**
     * Test the property 'maximumSearchTimeLimit'
     */
    @Test
    public void maximumSearchTimeLimitTest() {
        // TODO: test maximumSearchTimeLimit
    }

    /**
     * Test the property 'maximumSearchLookthroughLimit'
     */
    @Test
    public void maximumSearchLookthroughLimitTest() {
        // TODO: test maximumSearchLookthroughLimit
    }

    /**
     * Test the property 'maximumLDAPJoinSizeLimit'
     */
    @Test
    public void maximumLDAPJoinSizeLimitTest() {
        // TODO: test maximumLDAPJoinSizeLimit
    }

    /**
     * Test the property 'maximumSortSizeLimitWithoutVLVIndex'
     */
    @Test
    public void maximumSortSizeLimitWithoutVLVIndexTest() {
        // TODO: test maximumSortSizeLimitWithoutVLVIndex
    }

}
