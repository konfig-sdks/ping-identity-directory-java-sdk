/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumglobalConfigurationAllowedInsecureTLSProtocolProp;
import com.konfigthis.client.model.EnumglobalConfigurationAttributesModifiableWithIgnoreNoUserModificationRequestControlProp;
import com.konfigthis.client.model.EnumglobalConfigurationDisabledPrivilegeProp;
import com.konfigthis.client.model.EnumglobalConfigurationInvalidAttributeSyntaxBehaviorProp;
import com.konfigthis.client.model.EnumglobalConfigurationJmxValueBehaviorProp;
import com.konfigthis.client.model.EnumglobalConfigurationSchemaUrn;
import com.konfigthis.client.model.EnumglobalConfigurationSingleStructuralObjectclassBehaviorProp;
import com.konfigthis.client.model.EnumglobalConfigurationStartupErrorLoggerOutputLocationProp;
import com.konfigthis.client.model.EnumglobalConfigurationUnrecoverableDatabaseErrorModeProp;
import com.konfigthis.client.model.EnumglobalConfigurationWritabilityModeProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for GlobalConfigurationResponseAllOf
 */
public class GlobalConfigurationResponseAllOfTest {
    private final GlobalConfigurationResponseAllOf model = new GlobalConfigurationResponseAllOf();

    /**
     * Model tests for GlobalConfigurationResponseAllOf
     */
    @Test
    public void testGlobalConfigurationResponseAllOf() {
        // TODO: test GlobalConfigurationResponseAllOf
    }

    /**
     * Test the property 'schemas'
     */
    @Test
    public void schemasTest() {
        // TODO: test schemas
    }

    /**
     * Test the property 'instanceName'
     */
    @Test
    public void instanceNameTest() {
        // TODO: test instanceName
    }

    /**
     * Test the property 'location'
     */
    @Test
    public void locationTest() {
        // TODO: test location
    }

    /**
     * Test the property 'configurationServerGroup'
     */
    @Test
    public void configurationServerGroupTest() {
        // TODO: test configurationServerGroup
    }

    /**
     * Test the property 'forceAsMasterForMirroredData'
     */
    @Test
    public void forceAsMasterForMirroredDataTest() {
        // TODO: test forceAsMasterForMirroredData
    }

    /**
     * Test the property 'encryptData'
     */
    @Test
    public void encryptDataTest() {
        // TODO: test encryptData
    }

    /**
     * Test the property 'encryptionSettingsCipherStreamProvider'
     */
    @Test
    public void encryptionSettingsCipherStreamProviderTest() {
        // TODO: test encryptionSettingsCipherStreamProvider
    }

    /**
     * Test the property 'encryptBackupsByDefault'
     */
    @Test
    public void encryptBackupsByDefaultTest() {
        // TODO: test encryptBackupsByDefault
    }

    /**
     * Test the property 'backupEncryptionSettingsDefinitionID'
     */
    @Test
    public void backupEncryptionSettingsDefinitionIDTest() {
        // TODO: test backupEncryptionSettingsDefinitionID
    }

    /**
     * Test the property 'encryptLDIFExportsByDefault'
     */
    @Test
    public void encryptLDIFExportsByDefaultTest() {
        // TODO: test encryptLDIFExportsByDefault
    }

    /**
     * Test the property 'ldifExportEncryptionSettingsDefinitionID'
     */
    @Test
    public void ldifExportEncryptionSettingsDefinitionIDTest() {
        // TODO: test ldifExportEncryptionSettingsDefinitionID
    }

    /**
     * Test the property 'automaticallyCompressEncryptedLDIFExports'
     */
    @Test
    public void automaticallyCompressEncryptedLDIFExportsTest() {
        // TODO: test automaticallyCompressEncryptedLDIFExports
    }

    /**
     * Test the property 'redactSensitiveValuesInConfigLogs'
     */
    @Test
    public void redactSensitiveValuesInConfigLogsTest() {
        // TODO: test redactSensitiveValuesInConfigLogs
    }

    /**
     * Test the property 'sensitiveAttribute'
     */
    @Test
    public void sensitiveAttributeTest() {
        // TODO: test sensitiveAttribute
    }

    /**
     * Test the property 'rejectInsecureRequests'
     */
    @Test
    public void rejectInsecureRequestsTest() {
        // TODO: test rejectInsecureRequests
    }

    /**
     * Test the property 'allowedInsecureRequestCriteria'
     */
    @Test
    public void allowedInsecureRequestCriteriaTest() {
        // TODO: test allowedInsecureRequestCriteria
    }

    /**
     * Test the property 'rejectUnauthenticatedRequests'
     */
    @Test
    public void rejectUnauthenticatedRequestsTest() {
        // TODO: test rejectUnauthenticatedRequests
    }

    /**
     * Test the property 'allowedUnauthenticatedRequestCriteria'
     */
    @Test
    public void allowedUnauthenticatedRequestCriteriaTest() {
        // TODO: test allowedUnauthenticatedRequestCriteria
    }

    /**
     * Test the property 'bindWithDNRequiresPassword'
     */
    @Test
    public void bindWithDNRequiresPasswordTest() {
        // TODO: test bindWithDNRequiresPassword
    }

    /**
     * Test the property 'disabledPrivilege'
     */
    @Test
    public void disabledPrivilegeTest() {
        // TODO: test disabledPrivilege
    }

    /**
     * Test the property 'defaultPasswordPolicy'
     */
    @Test
    public void defaultPasswordPolicyTest() {
        // TODO: test defaultPasswordPolicy
    }

    /**
     * Test the property 'maximumUserDataPasswordPoliciesToCache'
     */
    @Test
    public void maximumUserDataPasswordPoliciesToCacheTest() {
        // TODO: test maximumUserDataPasswordPoliciesToCache
    }

    /**
     * Test the property 'proxiedAuthorizationIdentityMapper'
     */
    @Test
    public void proxiedAuthorizationIdentityMapperTest() {
        // TODO: test proxiedAuthorizationIdentityMapper
    }

    /**
     * Test the property 'verifyEntryDigests'
     */
    @Test
    public void verifyEntryDigestsTest() {
        // TODO: test verifyEntryDigests
    }

    /**
     * Test the property 'allowedInsecureTLSProtocol'
     */
    @Test
    public void allowedInsecureTLSProtocolTest() {
        // TODO: test allowedInsecureTLSProtocol
    }

    /**
     * Test the property 'allowInsecureLocalJMXConnections'
     */
    @Test
    public void allowInsecureLocalJMXConnectionsTest() {
        // TODO: test allowInsecureLocalJMXConnections
    }

    /**
     * Test the property 'defaultInternalOperationClientConnectionPolicy'
     */
    @Test
    public void defaultInternalOperationClientConnectionPolicyTest() {
        // TODO: test defaultInternalOperationClientConnectionPolicy
    }

    /**
     * Test the property 'sizeLimit'
     */
    @Test
    public void sizeLimitTest() {
        // TODO: test sizeLimit
    }

    /**
     * Test the property 'unauthenticatedSizeLimit'
     */
    @Test
    public void unauthenticatedSizeLimitTest() {
        // TODO: test unauthenticatedSizeLimit
    }

    /**
     * Test the property 'timeLimit'
     */
    @Test
    public void timeLimitTest() {
        // TODO: test timeLimit
    }

    /**
     * Test the property 'unauthenticatedTimeLimit'
     */
    @Test
    public void unauthenticatedTimeLimitTest() {
        // TODO: test unauthenticatedTimeLimit
    }

    /**
     * Test the property 'idleTimeLimit'
     */
    @Test
    public void idleTimeLimitTest() {
        // TODO: test idleTimeLimit
    }

    /**
     * Test the property 'unauthenticatedIdleTimeLimit'
     */
    @Test
    public void unauthenticatedIdleTimeLimitTest() {
        // TODO: test unauthenticatedIdleTimeLimit
    }

    /**
     * Test the property 'lookthroughLimit'
     */
    @Test
    public void lookthroughLimitTest() {
        // TODO: test lookthroughLimit
    }

    /**
     * Test the property 'unauthenticatedLookthroughLimit'
     */
    @Test
    public void unauthenticatedLookthroughLimitTest() {
        // TODO: test unauthenticatedLookthroughLimit
    }

    /**
     * Test the property 'ldapJoinSizeLimit'
     */
    @Test
    public void ldapJoinSizeLimitTest() {
        // TODO: test ldapJoinSizeLimit
    }

    /**
     * Test the property 'maximumConcurrentConnections'
     */
    @Test
    public void maximumConcurrentConnectionsTest() {
        // TODO: test maximumConcurrentConnections
    }

    /**
     * Test the property 'maximumConcurrentConnectionsPerIPAddress'
     */
    @Test
    public void maximumConcurrentConnectionsPerIPAddressTest() {
        // TODO: test maximumConcurrentConnectionsPerIPAddress
    }

    /**
     * Test the property 'maximumConcurrentConnectionsPerBindDN'
     */
    @Test
    public void maximumConcurrentConnectionsPerBindDNTest() {
        // TODO: test maximumConcurrentConnectionsPerBindDN
    }

    /**
     * Test the property 'maximumConcurrentUnindexedSearches'
     */
    @Test
    public void maximumConcurrentUnindexedSearchesTest() {
        // TODO: test maximumConcurrentUnindexedSearches
    }

    /**
     * Test the property 'maximumAttributesPerAddRequest'
     */
    @Test
    public void maximumAttributesPerAddRequestTest() {
        // TODO: test maximumAttributesPerAddRequest
    }

    /**
     * Test the property 'maximumModificationsPerModifyRequest'
     */
    @Test
    public void maximumModificationsPerModifyRequestTest() {
        // TODO: test maximumModificationsPerModifyRequest
    }

    /**
     * Test the property 'backgroundThreadForEachPersistentSearch'
     */
    @Test
    public void backgroundThreadForEachPersistentSearchTest() {
        // TODO: test backgroundThreadForEachPersistentSearch
    }

    /**
     * Test the property 'allowAttributeNameExceptions'
     */
    @Test
    public void allowAttributeNameExceptionsTest() {
        // TODO: test allowAttributeNameExceptions
    }

    /**
     * Test the property 'invalidAttributeSyntaxBehavior'
     */
    @Test
    public void invalidAttributeSyntaxBehaviorTest() {
        // TODO: test invalidAttributeSyntaxBehavior
    }

    /**
     * Test the property 'permitSyntaxViolationsForAttribute'
     */
    @Test
    public void permitSyntaxViolationsForAttributeTest() {
        // TODO: test permitSyntaxViolationsForAttribute
    }

    /**
     * Test the property 'singleStructuralObjectclassBehavior'
     */
    @Test
    public void singleStructuralObjectclassBehaviorTest() {
        // TODO: test singleStructuralObjectclassBehavior
    }

    /**
     * Test the property 'attributesModifiableWithIgnoreNoUserModificationRequestControl'
     */
    @Test
    public void attributesModifiableWithIgnoreNoUserModificationRequestControlTest() {
        // TODO: test attributesModifiableWithIgnoreNoUserModificationRequestControl
    }

    /**
     * Test the property 'maximumServerOutLogFileSize'
     */
    @Test
    public void maximumServerOutLogFileSizeTest() {
        // TODO: test maximumServerOutLogFileSize
    }

    /**
     * Test the property 'maximumServerOutLogFileCount'
     */
    @Test
    public void maximumServerOutLogFileCountTest() {
        // TODO: test maximumServerOutLogFileCount
    }

    /**
     * Test the property 'startupErrorLoggerOutputLocation'
     */
    @Test
    public void startupErrorLoggerOutputLocationTest() {
        // TODO: test startupErrorLoggerOutputLocation
    }

    /**
     * Test the property 'exitOnJVMError'
     */
    @Test
    public void exitOnJVMErrorTest() {
        // TODO: test exitOnJVMError
    }

    /**
     * Test the property 'serverErrorResultCode'
     */
    @Test
    public void serverErrorResultCodeTest() {
        // TODO: test serverErrorResultCode
    }

    /**
     * Test the property 'resultCodeMap'
     */
    @Test
    public void resultCodeMapTest() {
        // TODO: test resultCodeMap
    }

    /**
     * Test the property 'returnBindErrorMessages'
     */
    @Test
    public void returnBindErrorMessagesTest() {
        // TODO: test returnBindErrorMessages
    }

    /**
     * Test the property 'notifyAbandonedOperations'
     */
    @Test
    public void notifyAbandonedOperationsTest() {
        // TODO: test notifyAbandonedOperations
    }

    /**
     * Test the property 'duplicateErrorLogLimit'
     */
    @Test
    public void duplicateErrorLogLimitTest() {
        // TODO: test duplicateErrorLogLimit
    }

    /**
     * Test the property 'duplicateErrorLogTimeLimit'
     */
    @Test
    public void duplicateErrorLogTimeLimitTest() {
        // TODO: test duplicateErrorLogTimeLimit
    }

    /**
     * Test the property 'duplicateAlertLimit'
     */
    @Test
    public void duplicateAlertLimitTest() {
        // TODO: test duplicateAlertLimit
    }

    /**
     * Test the property 'duplicateAlertTimeLimit'
     */
    @Test
    public void duplicateAlertTimeLimitTest() {
        // TODO: test duplicateAlertTimeLimit
    }

    /**
     * Test the property 'writabilityMode'
     */
    @Test
    public void writabilityModeTest() {
        // TODO: test writabilityMode
    }

    /**
     * Test the property 'useSharedDatabaseCacheAcrossAllLocalDBBackends'
     */
    @Test
    public void useSharedDatabaseCacheAcrossAllLocalDBBackendsTest() {
        // TODO: test useSharedDatabaseCacheAcrossAllLocalDBBackends
    }

    /**
     * Test the property 'sharedLocalDBBackendDatabaseCachePercent'
     */
    @Test
    public void sharedLocalDBBackendDatabaseCachePercentTest() {
        // TODO: test sharedLocalDBBackendDatabaseCachePercent
    }

    /**
     * Test the property 'unrecoverableDatabaseErrorMode'
     */
    @Test
    public void unrecoverableDatabaseErrorModeTest() {
        // TODO: test unrecoverableDatabaseErrorMode
    }

    /**
     * Test the property 'databaseOnVirtualizedOrNetworkStorage'
     */
    @Test
    public void databaseOnVirtualizedOrNetworkStorageTest() {
        // TODO: test databaseOnVirtualizedOrNetworkStorage
    }

    /**
     * Test the property 'autoNameWithEntryUUIDConnectionCriteria'
     */
    @Test
    public void autoNameWithEntryUUIDConnectionCriteriaTest() {
        // TODO: test autoNameWithEntryUUIDConnectionCriteria
    }

    /**
     * Test the property 'autoNameWithEntryUUIDRequestCriteria'
     */
    @Test
    public void autoNameWithEntryUUIDRequestCriteriaTest() {
        // TODO: test autoNameWithEntryUUIDRequestCriteria
    }

    /**
     * Test the property 'softDeletePolicy'
     */
    @Test
    public void softDeletePolicyTest() {
        // TODO: test softDeletePolicy
    }

    /**
     * Test the property 'subtreeAccessibilityAlertTimeLimit'
     */
    @Test
    public void subtreeAccessibilityAlertTimeLimitTest() {
        // TODO: test subtreeAccessibilityAlertTimeLimit
    }

    /**
     * Test the property 'warnForBackendsWithMultipleBaseDns'
     */
    @Test
    public void warnForBackendsWithMultipleBaseDnsTest() {
        // TODO: test warnForBackendsWithMultipleBaseDns
    }

    /**
     * Test the property 'forcedGCPrimeDuration'
     */
    @Test
    public void forcedGCPrimeDurationTest() {
        // TODO: test forcedGCPrimeDuration
    }

    /**
     * Test the property 'replicationSetName'
     */
    @Test
    public void replicationSetNameTest() {
        // TODO: test replicationSetName
    }

    /**
     * Test the property 'startupMinReplicationBacklogCount'
     */
    @Test
    public void startupMinReplicationBacklogCountTest() {
        // TODO: test startupMinReplicationBacklogCount
    }

    /**
     * Test the property 'replicationBacklogCountAlertThreshold'
     */
    @Test
    public void replicationBacklogCountAlertThresholdTest() {
        // TODO: test replicationBacklogCountAlertThreshold
    }

    /**
     * Test the property 'replicationBacklogDurationAlertThreshold'
     */
    @Test
    public void replicationBacklogDurationAlertThresholdTest() {
        // TODO: test replicationBacklogDurationAlertThreshold
    }

    /**
     * Test the property 'replicationAssuranceSourceTimeoutSuspendDuration'
     */
    @Test
    public void replicationAssuranceSourceTimeoutSuspendDurationTest() {
        // TODO: test replicationAssuranceSourceTimeoutSuspendDuration
    }

    /**
     * Test the property 'replicationAssuranceSourceBacklogFastStartThreshold'
     */
    @Test
    public void replicationAssuranceSourceBacklogFastStartThresholdTest() {
        // TODO: test replicationAssuranceSourceBacklogFastStartThreshold
    }

    /**
     * Test the property 'replicationHistoryLimit'
     */
    @Test
    public void replicationHistoryLimitTest() {
        // TODO: test replicationHistoryLimit
    }

    /**
     * Test the property 'allowInheritedReplicationOfSubordinateBackends'
     */
    @Test
    public void allowInheritedReplicationOfSubordinateBackendsTest() {
        // TODO: test allowInheritedReplicationOfSubordinateBackends
    }

    /**
     * Test the property 'replicationPurgeObsoleteReplicas'
     */
    @Test
    public void replicationPurgeObsoleteReplicasTest() {
        // TODO: test replicationPurgeObsoleteReplicas
    }

    /**
     * Test the property 'smtpServer'
     */
    @Test
    public void smtpServerTest() {
        // TODO: test smtpServer
    }

    /**
     * Test the property 'maxSMTPConnectionCount'
     */
    @Test
    public void maxSMTPConnectionCountTest() {
        // TODO: test maxSMTPConnectionCount
    }

    /**
     * Test the property 'maxSMTPConnectionAge'
     */
    @Test
    public void maxSMTPConnectionAgeTest() {
        // TODO: test maxSMTPConnectionAge
    }

    /**
     * Test the property 'smtpConnectionHealthCheckInterval'
     */
    @Test
    public void smtpConnectionHealthCheckIntervalTest() {
        // TODO: test smtpConnectionHealthCheckInterval
    }

    /**
     * Test the property 'allowedTask'
     */
    @Test
    public void allowedTaskTest() {
        // TODO: test allowedTask
    }

    /**
     * Test the property 'enableSubOperationTimer'
     */
    @Test
    public void enableSubOperationTimerTest() {
        // TODO: test enableSubOperationTimer
    }

    /**
     * Test the property 'maximumShutdownTime'
     */
    @Test
    public void maximumShutdownTimeTest() {
        // TODO: test maximumShutdownTime
    }

    /**
     * Test the property 'networkAddressCacheTTL'
     */
    @Test
    public void networkAddressCacheTTLTest() {
        // TODO: test networkAddressCacheTTL
    }

    /**
     * Test the property 'networkAddressOutageCacheEnabled'
     */
    @Test
    public void networkAddressOutageCacheEnabledTest() {
        // TODO: test networkAddressOutageCacheEnabled
    }

    /**
     * Test the property 'trackedApplication'
     */
    @Test
    public void trackedApplicationTest() {
        // TODO: test trackedApplication
    }

    /**
     * Test the property 'jmxValueBehavior'
     */
    @Test
    public void jmxValueBehaviorTest() {
        // TODO: test jmxValueBehavior
    }

    /**
     * Test the property 'jmxUseLegacyMbeanNames'
     */
    @Test
    public void jmxUseLegacyMbeanNamesTest() {
        // TODO: test jmxUseLegacyMbeanNames
    }

}
