/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumconnectionHandlerSslClientAuthPolicyProp;
import com.konfigthis.client.model.EnumldapConnectionHandlerSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for AddLdapConnectionHandlerRequest
 */
public class AddLdapConnectionHandlerRequestTest {
    private final AddLdapConnectionHandlerRequest model = new AddLdapConnectionHandlerRequest();

    /**
     * Model tests for AddLdapConnectionHandlerRequest
     */
    @Test
    public void testAddLdapConnectionHandlerRequest() {
        // TODO: test AddLdapConnectionHandlerRequest
    }

    /**
     * Test the property 'handlerName'
     */
    @Test
    public void handlerNameTest() {
        // TODO: test handlerName
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'schemas'
     */
    @Test
    public void schemasTest() {
        // TODO: test schemas
    }

    /**
     * Test the property 'listenAddress'
     */
    @Test
    public void listenAddressTest() {
        // TODO: test listenAddress
    }

    /**
     * Test the property 'listenPort'
     */
    @Test
    public void listenPortTest() {
        // TODO: test listenPort
    }

    /**
     * Test the property 'useSSL'
     */
    @Test
    public void useSSLTest() {
        // TODO: test useSSL
    }

    /**
     * Test the property 'allowStartTLS'
     */
    @Test
    public void allowStartTLSTest() {
        // TODO: test allowStartTLS
    }

    /**
     * Test the property 'sslCertNickname'
     */
    @Test
    public void sslCertNicknameTest() {
        // TODO: test sslCertNickname
    }

    /**
     * Test the property 'keyManagerProvider'
     */
    @Test
    public void keyManagerProviderTest() {
        // TODO: test keyManagerProvider
    }

    /**
     * Test the property 'trustManagerProvider'
     */
    @Test
    public void trustManagerProviderTest() {
        // TODO: test trustManagerProvider
    }

    /**
     * Test the property 'allowLDAPV2'
     */
    @Test
    public void allowLDAPV2Test() {
        // TODO: test allowLDAPV2
    }

    /**
     * Test the property 'useTCPKeepAlive'
     */
    @Test
    public void useTCPKeepAliveTest() {
        // TODO: test useTCPKeepAlive
    }

    /**
     * Test the property 'sendRejectionNotice'
     */
    @Test
    public void sendRejectionNoticeTest() {
        // TODO: test sendRejectionNotice
    }

    /**
     * Test the property 'failedBindResponseDelay'
     */
    @Test
    public void failedBindResponseDelayTest() {
        // TODO: test failedBindResponseDelay
    }

    /**
     * Test the property 'maxRequestSize'
     */
    @Test
    public void maxRequestSizeTest() {
        // TODO: test maxRequestSize
    }

    /**
     * Test the property 'maxCancelHandlers'
     */
    @Test
    public void maxCancelHandlersTest() {
        // TODO: test maxCancelHandlers
    }

    /**
     * Test the property 'numAcceptHandlers'
     */
    @Test
    public void numAcceptHandlersTest() {
        // TODO: test numAcceptHandlers
    }

    /**
     * Test the property 'numRequestHandlers'
     */
    @Test
    public void numRequestHandlersTest() {
        // TODO: test numRequestHandlers
    }

    /**
     * Test the property 'requestHandlerPerConnection'
     */
    @Test
    public void requestHandlerPerConnectionTest() {
        // TODO: test requestHandlerPerConnection
    }

    /**
     * Test the property 'sslClientAuthPolicy'
     */
    @Test
    public void sslClientAuthPolicyTest() {
        // TODO: test sslClientAuthPolicy
    }

    /**
     * Test the property 'acceptBacklog'
     */
    @Test
    public void acceptBacklogTest() {
        // TODO: test acceptBacklog
    }

    /**
     * Test the property 'sslProtocol'
     */
    @Test
    public void sslProtocolTest() {
        // TODO: test sslProtocol
    }

    /**
     * Test the property 'sslCipherSuite'
     */
    @Test
    public void sslCipherSuiteTest() {
        // TODO: test sslCipherSuite
    }

    /**
     * Test the property 'maxBlockedWriteTimeLimit'
     */
    @Test
    public void maxBlockedWriteTimeLimitTest() {
        // TODO: test maxBlockedWriteTimeLimit
    }

    /**
     * Test the property 'autoAuthenticateUsingClientCertificate'
     */
    @Test
    public void autoAuthenticateUsingClientCertificateTest() {
        // TODO: test autoAuthenticateUsingClientCertificate
    }

    /**
     * Test the property 'closeConnectionsWhenUnavailable'
     */
    @Test
    public void closeConnectionsWhenUnavailableTest() {
        // TODO: test closeConnectionsWhenUnavailable
    }

    /**
     * Test the property 'closeConnectionsOnExplicitGC'
     */
    @Test
    public void closeConnectionsOnExplicitGCTest() {
        // TODO: test closeConnectionsOnExplicitGC
    }

    /**
     * Test the property 'enabled'
     */
    @Test
    public void enabledTest() {
        // TODO: test enabled
    }

    /**
     * Test the property 'allowedClient'
     */
    @Test
    public void allowedClientTest() {
        // TODO: test allowedClient
    }

    /**
     * Test the property 'deniedClient'
     */
    @Test
    public void deniedClientTest() {
        // TODO: test deniedClient
    }

}
