/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumpasswordPolicyAllowPreEncodedPasswordsProp;
import com.konfigthis.client.model.EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp;
import com.konfigthis.client.model.EnumpasswordPolicyBindPasswordValidationFailureActionProp;
import com.konfigthis.client.model.EnumpasswordPolicyPasswordRetirementBehaviorProp;
import com.konfigthis.client.model.EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp;
import com.konfigthis.client.model.EnumpasswordPolicyReturnPasswordExpirationControlsProp;
import com.konfigthis.client.model.EnumpasswordPolicySchemaUrn;
import com.konfigthis.client.model.EnumpasswordPolicyStateUpdateFailurePolicyProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for PasswordPolicyShared
 */
public class PasswordPolicySharedTest {
    private final PasswordPolicyShared model = new PasswordPolicyShared();

    /**
     * Model tests for PasswordPolicyShared
     */
    @Test
    public void testPasswordPolicyShared() {
        // TODO: test PasswordPolicyShared
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'schemas'
     */
    @Test
    public void schemasTest() {
        // TODO: test schemas
    }

    /**
     * Test the property 'requireSecureAuthentication'
     */
    @Test
    public void requireSecureAuthenticationTest() {
        // TODO: test requireSecureAuthentication
    }

    /**
     * Test the property 'requireSecurePasswordChanges'
     */
    @Test
    public void requireSecurePasswordChangesTest() {
        // TODO: test requireSecurePasswordChanges
    }

    /**
     * Test the property 'accountStatusNotificationHandler'
     */
    @Test
    public void accountStatusNotificationHandlerTest() {
        // TODO: test accountStatusNotificationHandler
    }

    /**
     * Test the property 'stateUpdateFailurePolicy'
     */
    @Test
    public void stateUpdateFailurePolicyTest() {
        // TODO: test stateUpdateFailurePolicy
    }

    /**
     * Test the property 'enableDebug'
     */
    @Test
    public void enableDebugTest() {
        // TODO: test enableDebug
    }

    /**
     * Test the property 'passwordAttribute'
     */
    @Test
    public void passwordAttributeTest() {
        // TODO: test passwordAttribute
    }

    /**
     * Test the property 'defaultPasswordStorageScheme'
     */
    @Test
    public void defaultPasswordStorageSchemeTest() {
        // TODO: test defaultPasswordStorageScheme
    }

    /**
     * Test the property 'deprecatedPasswordStorageScheme'
     */
    @Test
    public void deprecatedPasswordStorageSchemeTest() {
        // TODO: test deprecatedPasswordStorageScheme
    }

    /**
     * Test the property 'reEncodePasswordsOnSchemeConfigChange'
     */
    @Test
    public void reEncodePasswordsOnSchemeConfigChangeTest() {
        // TODO: test reEncodePasswordsOnSchemeConfigChange
    }

    /**
     * Test the property 'allowMultiplePasswordValues'
     */
    @Test
    public void allowMultiplePasswordValuesTest() {
        // TODO: test allowMultiplePasswordValues
    }

    /**
     * Test the property 'allowPreEncodedPasswords'
     */
    @Test
    public void allowPreEncodedPasswordsTest() {
        // TODO: test allowPreEncodedPasswords
    }

    /**
     * Test the property 'passwordValidator'
     */
    @Test
    public void passwordValidatorTest() {
        // TODO: test passwordValidator
    }

    /**
     * Test the property 'bindPasswordValidator'
     */
    @Test
    public void bindPasswordValidatorTest() {
        // TODO: test bindPasswordValidator
    }

    /**
     * Test the property 'minimumBindPasswordValidationFrequency'
     */
    @Test
    public void minimumBindPasswordValidationFrequencyTest() {
        // TODO: test minimumBindPasswordValidationFrequency
    }

    /**
     * Test the property 'bindPasswordValidationFailureAction'
     */
    @Test
    public void bindPasswordValidationFailureActionTest() {
        // TODO: test bindPasswordValidationFailureAction
    }

    /**
     * Test the property 'passwordGenerator'
     */
    @Test
    public void passwordGeneratorTest() {
        // TODO: test passwordGenerator
    }

    /**
     * Test the property 'passwordHistoryCount'
     */
    @Test
    public void passwordHistoryCountTest() {
        // TODO: test passwordHistoryCount
    }

    /**
     * Test the property 'passwordHistoryDuration'
     */
    @Test
    public void passwordHistoryDurationTest() {
        // TODO: test passwordHistoryDuration
    }

    /**
     * Test the property 'minPasswordAge'
     */
    @Test
    public void minPasswordAgeTest() {
        // TODO: test minPasswordAge
    }

    /**
     * Test the property 'maxPasswordAge'
     */
    @Test
    public void maxPasswordAgeTest() {
        // TODO: test maxPasswordAge
    }

    /**
     * Test the property 'passwordExpirationWarningInterval'
     */
    @Test
    public void passwordExpirationWarningIntervalTest() {
        // TODO: test passwordExpirationWarningInterval
    }

    /**
     * Test the property 'expirePasswordsWithoutWarning'
     */
    @Test
    public void expirePasswordsWithoutWarningTest() {
        // TODO: test expirePasswordsWithoutWarning
    }

    /**
     * Test the property 'returnPasswordExpirationControls'
     */
    @Test
    public void returnPasswordExpirationControlsTest() {
        // TODO: test returnPasswordExpirationControls
    }

    /**
     * Test the property 'allowExpiredPasswordChanges'
     */
    @Test
    public void allowExpiredPasswordChangesTest() {
        // TODO: test allowExpiredPasswordChanges
    }

    /**
     * Test the property 'graceLoginCount'
     */
    @Test
    public void graceLoginCountTest() {
        // TODO: test graceLoginCount
    }

    /**
     * Test the property 'requireChangeByTime'
     */
    @Test
    public void requireChangeByTimeTest() {
        // TODO: test requireChangeByTime
    }

    /**
     * Test the property 'lockoutFailureCount'
     */
    @Test
    public void lockoutFailureCountTest() {
        // TODO: test lockoutFailureCount
    }

    /**
     * Test the property 'lockoutDuration'
     */
    @Test
    public void lockoutDurationTest() {
        // TODO: test lockoutDuration
    }

    /**
     * Test the property 'lockoutFailureExpirationInterval'
     */
    @Test
    public void lockoutFailureExpirationIntervalTest() {
        // TODO: test lockoutFailureExpirationInterval
    }

    /**
     * Test the property 'ignoreDuplicatePasswordFailures'
     */
    @Test
    public void ignoreDuplicatePasswordFailuresTest() {
        // TODO: test ignoreDuplicatePasswordFailures
    }

    /**
     * Test the property 'failureLockoutAction'
     */
    @Test
    public void failureLockoutActionTest() {
        // TODO: test failureLockoutAction
    }

    /**
     * Test the property 'idleLockoutInterval'
     */
    @Test
    public void idleLockoutIntervalTest() {
        // TODO: test idleLockoutInterval
    }

    /**
     * Test the property 'allowUserPasswordChanges'
     */
    @Test
    public void allowUserPasswordChangesTest() {
        // TODO: test allowUserPasswordChanges
    }

    /**
     * Test the property 'passwordChangeRequiresCurrentPassword'
     */
    @Test
    public void passwordChangeRequiresCurrentPasswordTest() {
        // TODO: test passwordChangeRequiresCurrentPassword
    }

    /**
     * Test the property 'passwordRetirementBehavior'
     */
    @Test
    public void passwordRetirementBehaviorTest() {
        // TODO: test passwordRetirementBehavior
    }

    /**
     * Test the property 'maxRetiredPasswordAge'
     */
    @Test
    public void maxRetiredPasswordAgeTest() {
        // TODO: test maxRetiredPasswordAge
    }

    /**
     * Test the property 'allowedPasswordResetTokenUseCondition'
     */
    @Test
    public void allowedPasswordResetTokenUseConditionTest() {
        // TODO: test allowedPasswordResetTokenUseCondition
    }

    /**
     * Test the property 'forceChangeOnAdd'
     */
    @Test
    public void forceChangeOnAddTest() {
        // TODO: test forceChangeOnAdd
    }

    /**
     * Test the property 'forceChangeOnReset'
     */
    @Test
    public void forceChangeOnResetTest() {
        // TODO: test forceChangeOnReset
    }

    /**
     * Test the property 'maxPasswordResetAge'
     */
    @Test
    public void maxPasswordResetAgeTest() {
        // TODO: test maxPasswordResetAge
    }

    /**
     * Test the property 'skipValidationForAdministrators'
     */
    @Test
    public void skipValidationForAdministratorsTest() {
        // TODO: test skipValidationForAdministrators
    }

    /**
     * Test the property 'maximumRecentLoginHistorySuccessfulAuthenticationCount'
     */
    @Test
    public void maximumRecentLoginHistorySuccessfulAuthenticationCountTest() {
        // TODO: test maximumRecentLoginHistorySuccessfulAuthenticationCount
    }

    /**
     * Test the property 'maximumRecentLoginHistorySuccessfulAuthenticationDuration'
     */
    @Test
    public void maximumRecentLoginHistorySuccessfulAuthenticationDurationTest() {
        // TODO: test maximumRecentLoginHistorySuccessfulAuthenticationDuration
    }

    /**
     * Test the property 'maximumRecentLoginHistoryFailedAuthenticationCount'
     */
    @Test
    public void maximumRecentLoginHistoryFailedAuthenticationCountTest() {
        // TODO: test maximumRecentLoginHistoryFailedAuthenticationCount
    }

    /**
     * Test the property 'maximumRecentLoginHistoryFailedAuthenticationDuration'
     */
    @Test
    public void maximumRecentLoginHistoryFailedAuthenticationDurationTest() {
        // TODO: test maximumRecentLoginHistoryFailedAuthenticationDuration
    }

    /**
     * Test the property 'recentLoginHistorySimilarAttemptBehavior'
     */
    @Test
    public void recentLoginHistorySimilarAttemptBehaviorTest() {
        // TODO: test recentLoginHistorySimilarAttemptBehavior
    }

    /**
     * Test the property 'lastLoginIPAddressAttribute'
     */
    @Test
    public void lastLoginIPAddressAttributeTest() {
        // TODO: test lastLoginIPAddressAttribute
    }

    /**
     * Test the property 'lastLoginTimeAttribute'
     */
    @Test
    public void lastLoginTimeAttributeTest() {
        // TODO: test lastLoginTimeAttribute
    }

    /**
     * Test the property 'lastLoginTimeFormat'
     */
    @Test
    public void lastLoginTimeFormatTest() {
        // TODO: test lastLoginTimeFormat
    }

    /**
     * Test the property 'previousLastLoginTimeFormat'
     */
    @Test
    public void previousLastLoginTimeFormatTest() {
        // TODO: test previousLastLoginTimeFormat
    }

}
