/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddGenericWebApplicationExtensionRequest;
import com.konfigthis.client.model.EnumgenericWebApplicationExtensionSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;
import com.konfigthis.client.model.WebApplicationExtensionListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebApplicationExtensionApi
 */
@Disabled
public class WebApplicationExtensionApiTest {

    private static WebApplicationExtensionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WebApplicationExtensionApi(apiClient);
    }

    /**
     * Add a new Web Application Extension to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewExtensionTest() throws ApiException {
        String extensionName = null;
        String description = null;
        List<EnumgenericWebApplicationExtensionSchemaUrn> schemas = null;
        String baseContextPath = null;
        String warFile = null;
        String documentRootDirectory = null;
        String deploymentDescriptorFile = null;
        String temporaryDirectory = null;
        List<String> initParameter = null;
        Object response = api.addNewExtension(extensionName)
                .description(description)
                .schemas(schemas)
                .baseContextPath(baseContextPath)
                .warFile(warFile)
                .documentRootDirectory(documentRootDirectory)
                .deploymentDescriptorFile(deploymentDescriptorFile)
                .temporaryDirectory(temporaryDirectory)
                .initParameter(initParameter)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Web Application Extension
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExtensionTest() throws ApiException {
        String webApplicationExtensionName = null;
        api.deleteExtension(webApplicationExtensionName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Web Application Extension
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleTest() throws ApiException {
        String webApplicationExtensionName = null;
        Object response = api.getSingle(webApplicationExtensionName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Web Application Extension objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllObjectsTest() throws ApiException {
        String filter = null;
        WebApplicationExtensionListResponse response = api.listAllObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Web Application Extension by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String webApplicationExtensionName = null;
        Object response = api.updateByName(operations, webApplicationExtensionName)
                .execute();
        // TODO: test validations
    }

}
