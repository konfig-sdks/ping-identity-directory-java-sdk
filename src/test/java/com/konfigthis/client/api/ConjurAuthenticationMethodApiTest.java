/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddApiKeyConjurAuthenticationMethodRequest;
import com.konfigthis.client.model.ApiKeyConjurAuthenticationMethodResponse;
import com.konfigthis.client.model.ConjurAuthenticationMethodListResponse;
import com.konfigthis.client.model.EnumapiKeyConjurAuthenticationMethodSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConjurAuthenticationMethodApi
 */
@Disabled
public class ConjurAuthenticationMethodApiTest {

    private static ConjurAuthenticationMethodApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ConjurAuthenticationMethodApi(apiClient);
    }

    /**
     * Add a new Conjur Authentication Method to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewMethodTest() throws ApiException {
        String methodName = null;
        String description = null;
        List<EnumapiKeyConjurAuthenticationMethodSchemaUrn> schemas = null;
        String username = null;
        String password = null;
        String apiKey = null;
        ApiKeyConjurAuthenticationMethodResponse response = api.addNewMethod(methodName)
                .description(description)
                .schemas(schemas)
                .username(username)
                .password(password)
                .apiKey(apiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Conjur Authentication Method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMethodTest() throws ApiException {
        String conjurAuthenticationMethodName = null;
        api.deleteMethod(conjurAuthenticationMethodName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Conjur Authentication Method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMethodTest() throws ApiException {
        String conjurAuthenticationMethodName = null;
        ApiKeyConjurAuthenticationMethodResponse response = api.getMethod(conjurAuthenticationMethodName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Conjur Authentication Method objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllMethodsTest() throws ApiException {
        String filter = null;
        ConjurAuthenticationMethodListResponse response = api.listAllMethods()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Conjur Authentication Method by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByMethodNameTest() throws ApiException {
        List<Operation> operations = null;
        String conjurAuthenticationMethodName = null;
        ApiKeyConjurAuthenticationMethodResponse response = api.updateByMethodName(operations, conjurAuthenticationMethodName)
                .execute();
        // TODO: test validations
    }

}
