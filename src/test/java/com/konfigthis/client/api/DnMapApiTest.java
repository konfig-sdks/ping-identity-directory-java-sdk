/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddDnMapRequest;
import com.konfigthis.client.model.DnMapListResponse;
import com.konfigthis.client.model.DnMapResponse;
import com.konfigthis.client.model.EnumdnMapSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DnMapApi
 */
@Disabled
public class DnMapApiTest {

    private static DnMapApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DnMapApi(apiClient);
    }

    /**
     * Add a new DN Map to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewDnMapTest() throws ApiException {
        String mapName = null;
        String description = null;
        List<EnumdnMapSchemaUrn> schemas = null;
        String fromDNPattern = null;
        String toDNPattern = null;
        DnMapResponse response = api.createNewDnMap(mapName)
                .description(description)
                .schemas(schemas)
                .fromDNPattern(fromDNPattern)
                .toDNPattern(toDNPattern)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a DN Map
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDnMapTest() throws ApiException {
        String dnMapName = null;
        api.deleteDnMap(dnMapName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single DN Map
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleDnMapTest() throws ApiException {
        String dnMapName = null;
        DnMapResponse response = api.getSingleDnMap(dnMapName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all DN Map objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObjectsTest() throws ApiException {
        String filter = null;
        DnMapListResponse response = api.listObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing DN Map by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDnMapByNameTest() throws ApiException {
        List<Operation> operations = null;
        String dnMapName = null;
        DnMapResponse response = api.updateDnMapByName(operations, dnMapName)
                .execute();
        // TODO: test validations
    }

}
