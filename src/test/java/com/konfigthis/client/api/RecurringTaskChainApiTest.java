/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddRecurringTaskChainRequest;
import com.konfigthis.client.model.EnumrecurringTaskChainInterruptedByShutdownBehaviorProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledDateSelectionTypeProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledDayOfTheMonthProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledDayOfTheWeekProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledMonthProp;
import com.konfigthis.client.model.EnumrecurringTaskChainSchemaUrn;
import com.konfigthis.client.model.EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.RecurringTaskChainListResponse;
import com.konfigthis.client.model.RecurringTaskChainResponse;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecurringTaskChainApi
 */
@Disabled
public class RecurringTaskChainApiTest {

    private static RecurringTaskChainApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new RecurringTaskChainApi(apiClient);
    }

    /**
     * Add a new Recurring Task Chain to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewToConfigTest() throws ApiException {
        String chainName = null;
        String description = null;
        List<EnumrecurringTaskChainSchemaUrn> schemas = null;
        Boolean enabled = null;
        List<String> recurringTask = null;
        List<EnumrecurringTaskChainScheduledMonthProp> scheduledMonth = null;
        EnumrecurringTaskChainScheduledDateSelectionTypeProp scheduledDateSelectionType = null;
        List<EnumrecurringTaskChainScheduledDayOfTheWeekProp> scheduledDayOfTheWeek = null;
        List<EnumrecurringTaskChainScheduledDayOfTheMonthProp> scheduledDayOfTheMonth = null;
        List<String> scheduledTimeOfDay = null;
        String timeZone = null;
        EnumrecurringTaskChainInterruptedByShutdownBehaviorProp interruptedByShutdownBehavior = null;
        EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp serverOfflineAtStartTimeBehavior = null;
        RecurringTaskChainResponse response = api.addNewToConfig(chainName)
                .description(description)
                .schemas(schemas)
                .enabled(enabled)
                .recurringTask(recurringTask)
                .scheduledMonth(scheduledMonth)
                .scheduledDateSelectionType(scheduledDateSelectionType)
                .scheduledDayOfTheWeek(scheduledDayOfTheWeek)
                .scheduledDayOfTheMonth(scheduledDayOfTheMonth)
                .scheduledTimeOfDay(scheduledTimeOfDay)
                .timeZone(timeZone)
                .interruptedByShutdownBehavior(interruptedByShutdownBehavior)
                .serverOfflineAtStartTimeBehavior(serverOfflineAtStartTimeBehavior)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Recurring Task Chain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChainTest() throws ApiException {
        String recurringTaskChainName = null;
        api.deleteChain(recurringTaskChainName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Recurring Task Chain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleTest() throws ApiException {
        String recurringTaskChainName = null;
        RecurringTaskChainResponse response = api.getSingle(recurringTaskChainName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Recurring Task Chain objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllObjectsTest() throws ApiException {
        String filter = null;
        RecurringTaskChainListResponse response = api.listAllObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Recurring Task Chain by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByRecurringTaskChainNameTest() throws ApiException {
        List<Operation> operations = null;
        String recurringTaskChainName = null;
        RecurringTaskChainResponse response = api.updateByRecurringTaskChainName(operations, recurringTaskChainName)
                .execute();
        // TODO: test validations
    }

}
