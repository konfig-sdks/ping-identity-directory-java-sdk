/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddThirdPartyNotificationManagerRequest;
import com.konfigthis.client.model.EnumnotificationManagerTransactionNotificationProp;
import com.konfigthis.client.model.EnumthirdPartyNotificationManagerSchemaUrn;
import com.konfigthis.client.model.NotificationManagerListResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.ThirdPartyNotificationManagerResponse;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationManagerApi
 */
@Disabled
public class NotificationManagerApiTest {

    private static NotificationManagerApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new NotificationManagerApi(apiClient);
    }

    /**
     * Add a new Notification Manager to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewConfigTest() throws ApiException {
        String managerName = null;
        String description = null;
        List<EnumthirdPartyNotificationManagerSchemaUrn> schemas = null;
        String extensionClass = null;
        List<String> extensionArgument = null;
        Boolean enabled = null;
        String subscriptionBaseDN = null;
        EnumnotificationManagerTransactionNotificationProp transactionNotification = null;
        Boolean monitorEntriesEnabled = null;
        ThirdPartyNotificationManagerResponse response = api.addNewConfig(managerName)
                .description(description)
                .schemas(schemas)
                .extensionClass(extensionClass)
                .extensionArgument(extensionArgument)
                .enabled(enabled)
                .subscriptionBaseDN(subscriptionBaseDN)
                .transactionNotification(transactionNotification)
                .monitorEntriesEnabled(monitorEntriesEnabled)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Notification Manager
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNotificationManagerTest() throws ApiException {
        String notificationManagerName = null;
        api.deleteNotificationManager(notificationManagerName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Notification Manager
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleTest() throws ApiException {
        String notificationManagerName = null;
        ThirdPartyNotificationManagerResponse response = api.getSingle(notificationManagerName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Notification Manager objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllObjectsTest() throws ApiException {
        String filter = null;
        NotificationManagerListResponse response = api.listAllObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Notification Manager by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String notificationManagerName = null;
        ThirdPartyNotificationManagerResponse response = api.updateByName(operations, notificationManagerName)
                .execute();
        // TODO: test validations
    }

}
