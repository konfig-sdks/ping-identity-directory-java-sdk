/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddKeyPairRequest;
import com.konfigthis.client.model.EnumkeyPairKeyAlgorithmProp;
import com.konfigthis.client.model.EnumkeyPairSchemaUrn;
import com.konfigthis.client.model.KeyPairListResponse;
import com.konfigthis.client.model.KeyPairResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KeyPairApi
 */
@Disabled
public class KeyPairApiTest {

    private static KeyPairApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new KeyPairApi(apiClient);
    }

    /**
     * Add a new Key Pair to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewKeyPairTest() throws ApiException {
        String pairName = null;
        List<EnumkeyPairSchemaUrn> schemas = null;
        EnumkeyPairKeyAlgorithmProp keyAlgorithm = null;
        String selfSignedCertificateValidity = null;
        String subjectDN = null;
        String certificateChain = null;
        String privateKey = null;
        KeyPairResponse response = api.createNewKeyPair(pairName)
                .schemas(schemas)
                .keyAlgorithm(keyAlgorithm)
                .selfSignedCertificateValidity(selfSignedCertificateValidity)
                .subjectDN(subjectDN)
                .certificateChain(certificateChain)
                .privateKey(privateKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Key Pair
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteKeyPairTest() throws ApiException {
        String keyPairName = null;
        api.deleteKeyPair(keyPairName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Key Pair
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleKeyPairTest() throws ApiException {
        String keyPairName = null;
        KeyPairResponse response = api.getSingleKeyPair(keyPairName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Key Pair objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObjectsTest() throws ApiException {
        String filter = null;
        KeyPairListResponse response = api.listObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Key Pair by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String keyPairName = null;
        KeyPairResponse response = api.updateByName(operations, keyPairName)
                .execute();
        // TODO: test validations
    }

}
