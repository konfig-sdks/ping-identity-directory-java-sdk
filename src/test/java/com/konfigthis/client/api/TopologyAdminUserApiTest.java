/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddTopologyAdminUserRequest;
import com.konfigthis.client.model.EnumtopologyAdminUserIsProxyableProp;
import com.konfigthis.client.model.EnumtopologyAdminUserPrivilegeProp;
import com.konfigthis.client.model.EnumtopologyAdminUserSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.TopologyAdminUserListResponse;
import com.konfigthis.client.model.TopologyAdminUserResponse;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TopologyAdminUserApi
 */
@Disabled
public class TopologyAdminUserApiTest {

    private static TopologyAdminUserApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TopologyAdminUserApi(apiClient);
    }

    /**
     * Add a new Topology Admin User to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewUserTest() throws ApiException {
        String userName = null;
        String description = null;
        List<EnumtopologyAdminUserSchemaUrn> schemas = null;
        List<String> alternateBindDN = null;
        String password = null;
        List<String> firstName = null;
        List<String> lastName = null;
        String userID = null;
        List<String> emailAddress = null;
        List<String> workTelephoneNumber = null;
        List<String> homeTelephoneNumber = null;
        List<String> mobileTelephoneNumber = null;
        List<String> pagerTelephoneNumber = null;
        Boolean inheritDefaultRootPrivileges = null;
        List<EnumtopologyAdminUserPrivilegeProp> privilege = null;
        Integer searchResultEntryLimit = null;
        Integer timeLimitSeconds = null;
        Integer lookThroughEntryLimit = null;
        Integer idleTimeLimitSeconds = null;
        String passwordPolicy = null;
        Boolean disabled = null;
        String accountActivationTime = null;
        String accountExpirationTime = null;
        Boolean requireSecureAuthentication = null;
        Boolean requireSecureConnections = null;
        List<String> allowedAuthenticationType = null;
        List<String> allowedAuthenticationIPAddress = null;
        List<String> preferredOTPDeliveryMechanism = null;
        EnumtopologyAdminUserIsProxyableProp isProxyable = null;
        List<String> isProxyableByDN = null;
        List<String> isProxyableByGroup = null;
        List<String> isProxyableByURL = null;
        List<String> mayProxyAsDN = null;
        List<String> mayProxyAsGroup = null;
        List<String> mayProxyAsURL = null;
        TopologyAdminUserResponse response = api.addNewUser(userName)
                .description(description)
                .schemas(schemas)
                .alternateBindDN(alternateBindDN)
                .password(password)
                .firstName(firstName)
                .lastName(lastName)
                .userID(userID)
                .emailAddress(emailAddress)
                .workTelephoneNumber(workTelephoneNumber)
                .homeTelephoneNumber(homeTelephoneNumber)
                .mobileTelephoneNumber(mobileTelephoneNumber)
                .pagerTelephoneNumber(pagerTelephoneNumber)
                .inheritDefaultRootPrivileges(inheritDefaultRootPrivileges)
                .privilege(privilege)
                .searchResultEntryLimit(searchResultEntryLimit)
                .timeLimitSeconds(timeLimitSeconds)
                .lookThroughEntryLimit(lookThroughEntryLimit)
                .idleTimeLimitSeconds(idleTimeLimitSeconds)
                .passwordPolicy(passwordPolicy)
                .disabled(disabled)
                .accountActivationTime(accountActivationTime)
                .accountExpirationTime(accountExpirationTime)
                .requireSecureAuthentication(requireSecureAuthentication)
                .requireSecureConnections(requireSecureConnections)
                .allowedAuthenticationType(allowedAuthenticationType)
                .allowedAuthenticationIPAddress(allowedAuthenticationIPAddress)
                .preferredOTPDeliveryMechanism(preferredOTPDeliveryMechanism)
                .isProxyable(isProxyable)
                .isProxyableByDN(isProxyableByDN)
                .isProxyableByGroup(isProxyableByGroup)
                .isProxyableByURL(isProxyableByURL)
                .mayProxyAsDN(mayProxyAsDN)
                .mayProxyAsGroup(mayProxyAsGroup)
                .mayProxyAsURL(mayProxyAsURL)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Topology Admin User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String topologyAdminUserName = null;
        api.deleteUser(topologyAdminUserName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Topology Admin User
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleTopologyAdminUserTest() throws ApiException {
        String topologyAdminUserName = null;
        TopologyAdminUserResponse response = api.getSingleTopologyAdminUser(topologyAdminUserName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Topology Admin User objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllUsersTest() throws ApiException {
        String filter = null;
        TopologyAdminUserListResponse response = api.listAllUsers()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Topology Admin User by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String topologyAdminUserName = null;
        TopologyAdminUserResponse response = api.updateByName(operations, topologyAdminUserName)
                .execute();
        // TODO: test validations
    }

}
