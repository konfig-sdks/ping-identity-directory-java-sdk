/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddSensitiveAttributeRequest;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInAddProp;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInCompareProp;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInFilterProp;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInModifyProp;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInReturnedEntriesProp;
import com.konfigthis.client.model.EnumsensitiveAttributeSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.SensitiveAttributeListResponse;
import com.konfigthis.client.model.SensitiveAttributeResponse;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SensitiveAttributeApi
 */
@Disabled
public class SensitiveAttributeApiTest {

    private static SensitiveAttributeApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SensitiveAttributeApi(apiClient);
    }

    /**
     * Add a new Sensitive Attribute to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewConfigTest() throws ApiException {
        String attributeName = null;
        String description = null;
        List<EnumsensitiveAttributeSchemaUrn> schemas = null;
        List<String> attributeType = null;
        Boolean includeDefaultSensitiveOperationalAttributes = null;
        EnumsensitiveAttributeAllowInReturnedEntriesProp allowInReturnedEntries = null;
        EnumsensitiveAttributeAllowInFilterProp allowInFilter = null;
        EnumsensitiveAttributeAllowInAddProp allowInAdd = null;
        EnumsensitiveAttributeAllowInCompareProp allowInCompare = null;
        EnumsensitiveAttributeAllowInModifyProp allowInModify = null;
        SensitiveAttributeResponse response = api.addNewConfig(attributeName)
                .description(description)
                .schemas(schemas)
                .attributeType(attributeType)
                .includeDefaultSensitiveOperationalAttributes(includeDefaultSensitiveOperationalAttributes)
                .allowInReturnedEntries(allowInReturnedEntries)
                .allowInFilter(allowInFilter)
                .allowInAdd(allowInAdd)
                .allowInCompare(allowInCompare)
                .allowInModify(allowInModify)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Sensitive Attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSensitiveAttributeTest() throws ApiException {
        String sensitiveAttributeName = null;
        api.deleteSensitiveAttribute(sensitiveAttributeName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Sensitive Attribute objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String filter = null;
        SensitiveAttributeListResponse response = api.getAll()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Sensitive Attribute
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleTest() throws ApiException {
        String sensitiveAttributeName = null;
        SensitiveAttributeResponse response = api.getSingle(sensitiveAttributeName)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Sensitive Attribute by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String sensitiveAttributeName = null;
        SensitiveAttributeResponse response = api.updateByName(operations, sensitiveAttributeName)
                .execute();
        // TODO: test validations
    }

}
