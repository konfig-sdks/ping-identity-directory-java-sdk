/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddClientConnectionPolicyRequest;
import com.konfigthis.client.model.ClientConnectionPolicyListResponse;
import com.konfigthis.client.model.ClientConnectionPolicyResponse;
import com.konfigthis.client.model.EnumclientConnectionPolicyAllowedAuthTypeProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyAllowedFilterTypeProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyAllowedOperationProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp;
import com.konfigthis.client.model.EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp;
import com.konfigthis.client.model.EnumclientConnectionPolicySchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ClientConnectionPolicyApi
 */
@Disabled
public class ClientConnectionPolicyApiTest {

    private static ClientConnectionPolicyApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ClientConnectionPolicyApi(apiClient);
    }

    /**
     * Add a new Client Connection Policy to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewPolicyTest() throws ApiException {
        String policyName = null;
        String description = null;
        List<EnumclientConnectionPolicySchemaUrn> schemas = null;
        String policyID = null;
        Boolean enabled = null;
        Integer evaluationOrderIndex = null;
        String connectionCriteria = null;
        Boolean terminateConnection = null;
        List<String> sensitiveAttribute = null;
        List<String> excludeGlobalSensitiveAttribute = null;
        String resultCodeMap = null;
        List<String> includedBackendBaseDN = null;
        List<String> excludedBackendBaseDN = null;
        List<EnumclientConnectionPolicyAllowedOperationProp> allowedOperation = null;
        String requiredOperationRequestCriteria = null;
        String prohibitedOperationRequestCriteria = null;
        List<String> allowedRequestControl = null;
        List<String> deniedRequestControl = null;
        List<String> allowedExtendedOperation = null;
        List<String> deniedExtendedOperation = null;
        List<EnumclientConnectionPolicyAllowedAuthTypeProp> allowedAuthType = null;
        List<String> allowedSASLMechanism = null;
        List<String> deniedSASLMechanism = null;
        List<EnumclientConnectionPolicyAllowedFilterTypeProp> allowedFilterType = null;
        Boolean allowUnindexedSearches = null;
        Boolean allowUnindexedSearchesWithControl = null;
        Integer minimumSubstringLength = null;
        Integer maximumConcurrentConnections = null;
        String maximumConnectionDuration = null;
        String maximumIdleConnectionDuration = null;
        Integer maximumOperationCountPerConnection = null;
        Integer maximumConcurrentOperationsPerConnection = null;
        String maximumConcurrentOperationWaitTimeBeforeRejecting = null;
        EnumclientConnectionPolicyMaximumConcurrentOperationsPerConnectionExceededBehaviorProp maximumConcurrentOperationsPerConnectionExceededBehavior = null;
        List<String> maximumConnectionOperationRate = null;
        EnumclientConnectionPolicyConnectionOperationRateExceededBehaviorProp connectionOperationRateExceededBehavior = null;
        List<String> maximumPolicyOperationRate = null;
        EnumclientConnectionPolicyPolicyOperationRateExceededBehaviorProp policyOperationRateExceededBehavior = null;
        Integer maximumSearchSizeLimit = null;
        String maximumSearchTimeLimit = null;
        Integer maximumSearchLookthroughLimit = null;
        Integer maximumLDAPJoinSizeLimit = null;
        Integer maximumSortSizeLimitWithoutVLVIndex = null;
        ClientConnectionPolicyResponse response = api.addNewPolicy(policyName)
                .description(description)
                .schemas(schemas)
                .policyID(policyID)
                .enabled(enabled)
                .evaluationOrderIndex(evaluationOrderIndex)
                .connectionCriteria(connectionCriteria)
                .terminateConnection(terminateConnection)
                .sensitiveAttribute(sensitiveAttribute)
                .excludeGlobalSensitiveAttribute(excludeGlobalSensitiveAttribute)
                .resultCodeMap(resultCodeMap)
                .includedBackendBaseDN(includedBackendBaseDN)
                .excludedBackendBaseDN(excludedBackendBaseDN)
                .allowedOperation(allowedOperation)
                .requiredOperationRequestCriteria(requiredOperationRequestCriteria)
                .prohibitedOperationRequestCriteria(prohibitedOperationRequestCriteria)
                .allowedRequestControl(allowedRequestControl)
                .deniedRequestControl(deniedRequestControl)
                .allowedExtendedOperation(allowedExtendedOperation)
                .deniedExtendedOperation(deniedExtendedOperation)
                .allowedAuthType(allowedAuthType)
                .allowedSASLMechanism(allowedSASLMechanism)
                .deniedSASLMechanism(deniedSASLMechanism)
                .allowedFilterType(allowedFilterType)
                .allowUnindexedSearches(allowUnindexedSearches)
                .allowUnindexedSearchesWithControl(allowUnindexedSearchesWithControl)
                .minimumSubstringLength(minimumSubstringLength)
                .maximumConcurrentConnections(maximumConcurrentConnections)
                .maximumConnectionDuration(maximumConnectionDuration)
                .maximumIdleConnectionDuration(maximumIdleConnectionDuration)
                .maximumOperationCountPerConnection(maximumOperationCountPerConnection)
                .maximumConcurrentOperationsPerConnection(maximumConcurrentOperationsPerConnection)
                .maximumConcurrentOperationWaitTimeBeforeRejecting(maximumConcurrentOperationWaitTimeBeforeRejecting)
                .maximumConcurrentOperationsPerConnectionExceededBehavior(maximumConcurrentOperationsPerConnectionExceededBehavior)
                .maximumConnectionOperationRate(maximumConnectionOperationRate)
                .connectionOperationRateExceededBehavior(connectionOperationRateExceededBehavior)
                .maximumPolicyOperationRate(maximumPolicyOperationRate)
                .policyOperationRateExceededBehavior(policyOperationRateExceededBehavior)
                .maximumSearchSizeLimit(maximumSearchSizeLimit)
                .maximumSearchTimeLimit(maximumSearchTimeLimit)
                .maximumSearchLookthroughLimit(maximumSearchLookthroughLimit)
                .maximumLDAPJoinSizeLimit(maximumLDAPJoinSizeLimit)
                .maximumSortSizeLimitWithoutVLVIndex(maximumSortSizeLimitWithoutVLVIndex)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Client Connection Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteByIdTest() throws ApiException {
        String clientConnectionPolicyName = null;
        api.deleteById(clientConnectionPolicyName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Client Connection Policy objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllObjectsTest() throws ApiException {
        String filter = null;
        ClientConnectionPolicyListResponse response = api.getAllObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Client Connection Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleTest() throws ApiException {
        String clientConnectionPolicyName = null;
        ClientConnectionPolicyResponse response = api.getSingle(clientConnectionPolicyName)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Client Connection Policy by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String clientConnectionPolicyName = null;
        ClientConnectionPolicyResponse response = api.updateByName(operations, clientConnectionPolicyName)
                .execute();
        // TODO: test validations
    }

}
