/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddStatsdMonitoringEndpointRequest;
import com.konfigthis.client.model.EnummonitoringEndpointConnectionTypeProp;
import com.konfigthis.client.model.EnumstatsdMonitoringEndpointSchemaUrn;
import com.konfigthis.client.model.MonitoringEndpointListResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.StatsdMonitoringEndpointResponse;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MonitoringEndpointApi
 */
@Disabled
public class MonitoringEndpointApiTest {

    private static MonitoringEndpointApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MonitoringEndpointApi(apiClient);
    }

    /**
     * Add a new Monitoring Endpoint to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewConfigTest() throws ApiException {
        String endpointName = null;
        List<EnumstatsdMonitoringEndpointSchemaUrn> schemas = null;
        String hostname = null;
        Integer serverPort = null;
        EnummonitoringEndpointConnectionTypeProp connectionType = null;
        String trustManagerProvider = null;
        List<String> additionalTags = null;
        Boolean enabled = null;
        StatsdMonitoringEndpointResponse response = api.addNewConfig(endpointName)
                .schemas(schemas)
                .hostname(hostname)
                .serverPort(serverPort)
                .connectionType(connectionType)
                .trustManagerProvider(trustManagerProvider)
                .additionalTags(additionalTags)
                .enabled(enabled)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Monitoring Endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMonitoringEndpointTest() throws ApiException {
        String monitoringEndpointName = null;
        api.deleteMonitoringEndpoint(monitoringEndpointName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Monitoring Endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleEndpointTest() throws ApiException {
        String monitoringEndpointName = null;
        StatsdMonitoringEndpointResponse response = api.getSingleEndpoint(monitoringEndpointName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Monitoring Endpoint objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllObjectsTest() throws ApiException {
        String filter = null;
        MonitoringEndpointListResponse response = api.listAllObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Monitoring Endpoint by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String monitoringEndpointName = null;
        StatsdMonitoringEndpointResponse response = api.updateByName(operations, monitoringEndpointName)
                .execute();
        // TODO: test validations
    }

}
