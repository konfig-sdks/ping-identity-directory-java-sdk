/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddPasswordPolicyRequest;
import com.konfigthis.client.model.EnumpasswordPolicyAllowPreEncodedPasswordsProp;
import com.konfigthis.client.model.EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp;
import com.konfigthis.client.model.EnumpasswordPolicyBindPasswordValidationFailureActionProp;
import com.konfigthis.client.model.EnumpasswordPolicyPasswordRetirementBehaviorProp;
import com.konfigthis.client.model.EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp;
import com.konfigthis.client.model.EnumpasswordPolicyReturnPasswordExpirationControlsProp;
import com.konfigthis.client.model.EnumpasswordPolicySchemaUrn;
import com.konfigthis.client.model.EnumpasswordPolicyStateUpdateFailurePolicyProp;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.PasswordPolicyListResponse;
import com.konfigthis.client.model.PasswordPolicyResponse;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PasswordPolicyApi
 */
@Disabled
public class PasswordPolicyApiTest {

    private static PasswordPolicyApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PasswordPolicyApi(apiClient);
    }

    /**
     * Add a new Password Policy to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewPolicyToConfigTest() throws ApiException {
        String policyName = null;
        String description = null;
        List<EnumpasswordPolicySchemaUrn> schemas = null;
        Boolean requireSecureAuthentication = null;
        Boolean requireSecurePasswordChanges = null;
        List<String> accountStatusNotificationHandler = null;
        EnumpasswordPolicyStateUpdateFailurePolicyProp stateUpdateFailurePolicy = null;
        Boolean enableDebug = null;
        String passwordAttribute = null;
        List<String> defaultPasswordStorageScheme = null;
        List<String> deprecatedPasswordStorageScheme = null;
        Boolean reEncodePasswordsOnSchemeConfigChange = null;
        Boolean allowMultiplePasswordValues = null;
        EnumpasswordPolicyAllowPreEncodedPasswordsProp allowPreEncodedPasswords = null;
        List<String> passwordValidator = null;
        List<String> bindPasswordValidator = null;
        String minimumBindPasswordValidationFrequency = null;
        EnumpasswordPolicyBindPasswordValidationFailureActionProp bindPasswordValidationFailureAction = null;
        String passwordGenerator = null;
        Integer passwordHistoryCount = null;
        String passwordHistoryDuration = null;
        String minPasswordAge = null;
        String maxPasswordAge = null;
        String passwordExpirationWarningInterval = null;
        Boolean expirePasswordsWithoutWarning = null;
        EnumpasswordPolicyReturnPasswordExpirationControlsProp returnPasswordExpirationControls = null;
        Boolean allowExpiredPasswordChanges = null;
        Integer graceLoginCount = null;
        String requireChangeByTime = null;
        Integer lockoutFailureCount = null;
        String lockoutDuration = null;
        String lockoutFailureExpirationInterval = null;
        Boolean ignoreDuplicatePasswordFailures = null;
        String failureLockoutAction = null;
        String idleLockoutInterval = null;
        Boolean allowUserPasswordChanges = null;
        Boolean passwordChangeRequiresCurrentPassword = null;
        List<EnumpasswordPolicyPasswordRetirementBehaviorProp> passwordRetirementBehavior = null;
        String maxRetiredPasswordAge = null;
        List<EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp> allowedPasswordResetTokenUseCondition = null;
        Boolean forceChangeOnAdd = null;
        Boolean forceChangeOnReset = null;
        String maxPasswordResetAge = null;
        Boolean skipValidationForAdministrators = null;
        Integer maximumRecentLoginHistorySuccessfulAuthenticationCount = null;
        String maximumRecentLoginHistorySuccessfulAuthenticationDuration = null;
        Integer maximumRecentLoginHistoryFailedAuthenticationCount = null;
        String maximumRecentLoginHistoryFailedAuthenticationDuration = null;
        EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp recentLoginHistorySimilarAttemptBehavior = null;
        String lastLoginIPAddressAttribute = null;
        String lastLoginTimeAttribute = null;
        String lastLoginTimeFormat = null;
        List<String> previousLastLoginTimeFormat = null;
        PasswordPolicyResponse response = api.addNewPolicyToConfig(policyName)
                .description(description)
                .schemas(schemas)
                .requireSecureAuthentication(requireSecureAuthentication)
                .requireSecurePasswordChanges(requireSecurePasswordChanges)
                .accountStatusNotificationHandler(accountStatusNotificationHandler)
                .stateUpdateFailurePolicy(stateUpdateFailurePolicy)
                .enableDebug(enableDebug)
                .passwordAttribute(passwordAttribute)
                .defaultPasswordStorageScheme(defaultPasswordStorageScheme)
                .deprecatedPasswordStorageScheme(deprecatedPasswordStorageScheme)
                .reEncodePasswordsOnSchemeConfigChange(reEncodePasswordsOnSchemeConfigChange)
                .allowMultiplePasswordValues(allowMultiplePasswordValues)
                .allowPreEncodedPasswords(allowPreEncodedPasswords)
                .passwordValidator(passwordValidator)
                .bindPasswordValidator(bindPasswordValidator)
                .minimumBindPasswordValidationFrequency(minimumBindPasswordValidationFrequency)
                .bindPasswordValidationFailureAction(bindPasswordValidationFailureAction)
                .passwordGenerator(passwordGenerator)
                .passwordHistoryCount(passwordHistoryCount)
                .passwordHistoryDuration(passwordHistoryDuration)
                .minPasswordAge(minPasswordAge)
                .maxPasswordAge(maxPasswordAge)
                .passwordExpirationWarningInterval(passwordExpirationWarningInterval)
                .expirePasswordsWithoutWarning(expirePasswordsWithoutWarning)
                .returnPasswordExpirationControls(returnPasswordExpirationControls)
                .allowExpiredPasswordChanges(allowExpiredPasswordChanges)
                .graceLoginCount(graceLoginCount)
                .requireChangeByTime(requireChangeByTime)
                .lockoutFailureCount(lockoutFailureCount)
                .lockoutDuration(lockoutDuration)
                .lockoutFailureExpirationInterval(lockoutFailureExpirationInterval)
                .ignoreDuplicatePasswordFailures(ignoreDuplicatePasswordFailures)
                .failureLockoutAction(failureLockoutAction)
                .idleLockoutInterval(idleLockoutInterval)
                .allowUserPasswordChanges(allowUserPasswordChanges)
                .passwordChangeRequiresCurrentPassword(passwordChangeRequiresCurrentPassword)
                .passwordRetirementBehavior(passwordRetirementBehavior)
                .maxRetiredPasswordAge(maxRetiredPasswordAge)
                .allowedPasswordResetTokenUseCondition(allowedPasswordResetTokenUseCondition)
                .forceChangeOnAdd(forceChangeOnAdd)
                .forceChangeOnReset(forceChangeOnReset)
                .maxPasswordResetAge(maxPasswordResetAge)
                .skipValidationForAdministrators(skipValidationForAdministrators)
                .maximumRecentLoginHistorySuccessfulAuthenticationCount(maximumRecentLoginHistorySuccessfulAuthenticationCount)
                .maximumRecentLoginHistorySuccessfulAuthenticationDuration(maximumRecentLoginHistorySuccessfulAuthenticationDuration)
                .maximumRecentLoginHistoryFailedAuthenticationCount(maximumRecentLoginHistoryFailedAuthenticationCount)
                .maximumRecentLoginHistoryFailedAuthenticationDuration(maximumRecentLoginHistoryFailedAuthenticationDuration)
                .recentLoginHistorySimilarAttemptBehavior(recentLoginHistorySimilarAttemptBehavior)
                .lastLoginIPAddressAttribute(lastLoginIPAddressAttribute)
                .lastLoginTimeAttribute(lastLoginTimeAttribute)
                .lastLoginTimeFormat(lastLoginTimeFormat)
                .previousLastLoginTimeFormat(previousLastLoginTimeFormat)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Password Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws ApiException {
        String passwordPolicyName = null;
        api.deletePolicy(passwordPolicyName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Password Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSinglePolicyTest() throws ApiException {
        String passwordPolicyName = null;
        PasswordPolicyResponse response = api.getSinglePolicy(passwordPolicyName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Password Policy objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllObjectsTest() throws ApiException {
        String filter = null;
        PasswordPolicyListResponse response = api.listAllObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Password Policy by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String passwordPolicyName = null;
        PasswordPolicyResponse response = api.updateByName(operations, passwordPolicyName)
                .execute();
        // TODO: test validations
    }

}
