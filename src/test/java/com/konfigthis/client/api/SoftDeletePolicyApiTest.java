/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddSoftDeletePolicyRequest;
import com.konfigthis.client.model.EnumsoftDeletePolicySchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.SoftDeletePolicyListResponse;
import com.konfigthis.client.model.SoftDeletePolicyResponse;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SoftDeletePolicyApi
 */
@Disabled
public class SoftDeletePolicyApiTest {

    private static SoftDeletePolicyApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SoftDeletePolicyApi(apiClient);
    }

    /**
     * Add a new Soft Delete Policy to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewPolicyTest() throws ApiException {
        String policyName = null;
        String description = null;
        List<EnumsoftDeletePolicySchemaUrn> schemas = null;
        String autoSoftDeleteConnectionCriteria = null;
        String autoSoftDeleteRequestCriteria = null;
        String softDeleteRetentionTime = null;
        Integer softDeleteRetainNumberOfEntries = null;
        SoftDeletePolicyResponse response = api.addNewPolicy(policyName)
                .description(description)
                .schemas(schemas)
                .autoSoftDeleteConnectionCriteria(autoSoftDeleteConnectionCriteria)
                .autoSoftDeleteRequestCriteria(autoSoftDeleteRequestCriteria)
                .softDeleteRetentionTime(softDeleteRetentionTime)
                .softDeleteRetainNumberOfEntries(softDeleteRetainNumberOfEntries)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Soft Delete Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePolicyTest() throws ApiException {
        String softDeletePolicyName = null;
        api.deletePolicy(softDeletePolicyName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Soft Delete Policy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleSoftDeletePolicyTest() throws ApiException {
        String softDeletePolicyName = null;
        SoftDeletePolicyResponse response = api.getSingleSoftDeletePolicy(softDeletePolicyName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Soft Delete Policy objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllObjectsTest() throws ApiException {
        String filter = null;
        SoftDeletePolicyListResponse response = api.listAllObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Soft Delete Policy by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String softDeletePolicyName = null;
        SoftDeletePolicyResponse response = api.updateByName(operations, softDeletePolicyName)
                .execute();
        // TODO: test validations
    }

}
