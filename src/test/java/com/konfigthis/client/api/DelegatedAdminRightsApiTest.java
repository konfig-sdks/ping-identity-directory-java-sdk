/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddDelegatedAdminRightsRequest;
import com.konfigthis.client.model.DelegatedAdminRightsListResponse;
import com.konfigthis.client.model.DelegatedAdminRightsResponse;
import com.konfigthis.client.model.EnumdelegatedAdminRightsSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DelegatedAdminRightsApi
 */
@Disabled
public class DelegatedAdminRightsApiTest {

    private static DelegatedAdminRightsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DelegatedAdminRightsApi(apiClient);
    }

    /**
     * Add a new Delegated Admin Rights to the config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewConfigTest() throws ApiException {
        String rightsName = null;
        String description = null;
        List<EnumdelegatedAdminRightsSchemaUrn> schemas = null;
        Boolean enabled = null;
        String adminUserDN = null;
        String adminGroupDN = null;
        DelegatedAdminRightsResponse response = api.addNewConfig(rightsName)
                .description(description)
                .schemas(schemas)
                .enabled(enabled)
                .adminUserDN(adminUserDN)
                .adminGroupDN(adminGroupDN)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Delegated Admin Rights
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDelegatedAdminRightsTest() throws ApiException {
        String delegatedAdminRightsName = null;
        api.deleteDelegatedAdminRights(delegatedAdminRightsName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a single Delegated Admin Rights
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleRightsTest() throws ApiException {
        String delegatedAdminRightsName = null;
        DelegatedAdminRightsResponse response = api.getSingleRights(delegatedAdminRightsName)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of all Delegated Admin Rights objects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllObjectsTest() throws ApiException {
        String filter = null;
        DelegatedAdminRightsListResponse response = api.listAllObjects()
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing Delegated Admin Rights by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByNameTest() throws ApiException {
        List<Operation> operations = null;
        String delegatedAdminRightsName = null;
        DelegatedAdminRightsResponse response = api.updateByName(operations, delegatedAdminRightsName)
                .execute();
        // TODO: test validations
    }

}
