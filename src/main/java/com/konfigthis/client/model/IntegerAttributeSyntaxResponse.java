/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumintegerAttributeSyntaxSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * IntegerAttributeSyntaxResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class IntegerAttributeSyntaxResponse {
  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumintegerAttributeSyntaxSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENABLE_COMPACTION = "enableCompaction";
  @SerializedName(SERIALIZED_NAME_ENABLE_COMPACTION)
  private Boolean enableCompaction;

  public static final String SERIALIZED_NAME_INCLUDE_ATTRIBUTE_IN_COMPACTION = "includeAttributeInCompaction";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ATTRIBUTE_IN_COMPACTION)
  private List<String> includeAttributeInCompaction = null;

  public static final String SERIALIZED_NAME_EXCLUDE_ATTRIBUTE_FROM_COMPACTION = "excludeAttributeFromCompaction";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_ATTRIBUTE_FROM_COMPACTION)
  private List<String> excludeAttributeFromCompaction = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_REQUIRE_BINARY_TRANSFER = "requireBinaryTransfer";
  @SerializedName(SERIALIZED_NAME_REQUIRE_BINARY_TRANSFER)
  private Boolean requireBinaryTransfer;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public IntegerAttributeSyntaxResponse() {
  }

  public IntegerAttributeSyntaxResponse schemas(List<EnumintegerAttributeSyntaxSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public IntegerAttributeSyntaxResponse addSchemasItem(EnumintegerAttributeSyntaxSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumintegerAttributeSyntaxSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumintegerAttributeSyntaxSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public IntegerAttributeSyntaxResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Attribute Syntax
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Attribute Syntax")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public IntegerAttributeSyntaxResponse enableCompaction(Boolean enableCompaction) {
    
    
    
    
    this.enableCompaction = enableCompaction;
    return this;
  }

   /**
   * Indicates whether values of attributes with this syntax should be compacted when stored in a local DB database.
   * @return enableCompaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether values of attributes with this syntax should be compacted when stored in a local DB database.")

  public Boolean getEnableCompaction() {
    return enableCompaction;
  }


  public void setEnableCompaction(Boolean enableCompaction) {
    
    
    
    this.enableCompaction = enableCompaction;
  }


  public IntegerAttributeSyntaxResponse includeAttributeInCompaction(List<String> includeAttributeInCompaction) {
    
    
    
    
    this.includeAttributeInCompaction = includeAttributeInCompaction;
    return this;
  }

  public IntegerAttributeSyntaxResponse addIncludeAttributeInCompactionItem(String includeAttributeInCompactionItem) {
    if (this.includeAttributeInCompaction == null) {
      this.includeAttributeInCompaction = new ArrayList<>();
    }
    this.includeAttributeInCompaction.add(includeAttributeInCompactionItem);
    return this;
  }

   /**
   * Specifies the specific attributes (which should be associated with this syntax) whose values should be compacted. If one or more include attributes are specified, then only those attributes will have their values compacted. If not set then all attributes will have their values compacted. The exclude-attribute-from-compaction property takes precedence over this property.
   * @return includeAttributeInCompaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the specific attributes (which should be associated with this syntax) whose values should be compacted. If one or more include attributes are specified, then only those attributes will have their values compacted. If not set then all attributes will have their values compacted. The exclude-attribute-from-compaction property takes precedence over this property.")

  public List<String> getIncludeAttributeInCompaction() {
    return includeAttributeInCompaction;
  }


  public void setIncludeAttributeInCompaction(List<String> includeAttributeInCompaction) {
    
    
    
    this.includeAttributeInCompaction = includeAttributeInCompaction;
  }


  public IntegerAttributeSyntaxResponse excludeAttributeFromCompaction(List<String> excludeAttributeFromCompaction) {
    
    
    
    
    this.excludeAttributeFromCompaction = excludeAttributeFromCompaction;
    return this;
  }

  public IntegerAttributeSyntaxResponse addExcludeAttributeFromCompactionItem(String excludeAttributeFromCompactionItem) {
    if (this.excludeAttributeFromCompaction == null) {
      this.excludeAttributeFromCompaction = new ArrayList<>();
    }
    this.excludeAttributeFromCompaction.add(excludeAttributeFromCompactionItem);
    return this;
  }

   /**
   * Specifies the specific attributes (which should be associated with this syntax) whose values should not be compacted. If one or more exclude attributes are specified, then values of those attributes will not have their values compacted. This property takes precedence over the include-attribute-in-compaction property.
   * @return excludeAttributeFromCompaction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the specific attributes (which should be associated with this syntax) whose values should not be compacted. If one or more exclude attributes are specified, then values of those attributes will not have their values compacted. This property takes precedence over the include-attribute-in-compaction property.")

  public List<String> getExcludeAttributeFromCompaction() {
    return excludeAttributeFromCompaction;
  }


  public void setExcludeAttributeFromCompaction(List<String> excludeAttributeFromCompaction) {
    
    
    
    this.excludeAttributeFromCompaction = excludeAttributeFromCompaction;
  }


  public IntegerAttributeSyntaxResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Attribute Syntax is enabled.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Attribute Syntax is enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public IntegerAttributeSyntaxResponse requireBinaryTransfer(Boolean requireBinaryTransfer) {
    
    
    
    
    this.requireBinaryTransfer = requireBinaryTransfer;
    return this;
  }

   /**
   * Indicates whether values of this attribute are required to have a \&quot;binary\&quot; transfer option as described in RFC 4522. Attributes with this syntax will generally be referenced with names including \&quot;;binary\&quot; (e.g., \&quot;userCertificate;binary\&quot;).
   * @return requireBinaryTransfer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether values of this attribute are required to have a \"binary\" transfer option as described in RFC 4522. Attributes with this syntax will generally be referenced with names including \";binary\" (e.g., \"userCertificate;binary\").")

  public Boolean getRequireBinaryTransfer() {
    return requireBinaryTransfer;
  }


  public void setRequireBinaryTransfer(Boolean requireBinaryTransfer) {
    
    
    
    this.requireBinaryTransfer = requireBinaryTransfer;
  }


  public IntegerAttributeSyntaxResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public IntegerAttributeSyntaxResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IntegerAttributeSyntaxResponse instance itself
   */
  public IntegerAttributeSyntaxResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegerAttributeSyntaxResponse integerAttributeSyntaxResponse = (IntegerAttributeSyntaxResponse) o;
    return Objects.equals(this.schemas, integerAttributeSyntaxResponse.schemas) &&
        Objects.equals(this.id, integerAttributeSyntaxResponse.id) &&
        Objects.equals(this.enableCompaction, integerAttributeSyntaxResponse.enableCompaction) &&
        Objects.equals(this.includeAttributeInCompaction, integerAttributeSyntaxResponse.includeAttributeInCompaction) &&
        Objects.equals(this.excludeAttributeFromCompaction, integerAttributeSyntaxResponse.excludeAttributeFromCompaction) &&
        Objects.equals(this.enabled, integerAttributeSyntaxResponse.enabled) &&
        Objects.equals(this.requireBinaryTransfer, integerAttributeSyntaxResponse.requireBinaryTransfer) &&
        Objects.equals(this.meta, integerAttributeSyntaxResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, integerAttributeSyntaxResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, integerAttributeSyntaxResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, id, enableCompaction, includeAttributeInCompaction, excludeAttributeFromCompaction, enabled, requireBinaryTransfer, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegerAttributeSyntaxResponse {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    enableCompaction: ").append(toIndentedString(enableCompaction)).append("\n");
    sb.append("    includeAttributeInCompaction: ").append(toIndentedString(includeAttributeInCompaction)).append("\n");
    sb.append("    excludeAttributeFromCompaction: ").append(toIndentedString(excludeAttributeFromCompaction)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    requireBinaryTransfer: ").append(toIndentedString(requireBinaryTransfer)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("enableCompaction");
    openapiFields.add("includeAttributeInCompaction");
    openapiFields.add("excludeAttributeFromCompaction");
    openapiFields.add("enabled");
    openapiFields.add("requireBinaryTransfer");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntegerAttributeSyntaxResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IntegerAttributeSyntaxResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegerAttributeSyntaxResponse is not found in the empty JSON string", IntegerAttributeSyntaxResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntegerAttributeSyntaxResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includeAttributeInCompaction") != null && !jsonObj.get("includeAttributeInCompaction").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeAttributeInCompaction` to be an array in the JSON string but got `%s`", jsonObj.get("includeAttributeInCompaction").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludeAttributeFromCompaction") != null && !jsonObj.get("excludeAttributeFromCompaction").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeAttributeFromCompaction` to be an array in the JSON string but got `%s`", jsonObj.get("excludeAttributeFromCompaction").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegerAttributeSyntaxResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegerAttributeSyntaxResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegerAttributeSyntaxResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegerAttributeSyntaxResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegerAttributeSyntaxResponse>() {
           @Override
           public void write(JsonWriter out, IntegerAttributeSyntaxResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegerAttributeSyntaxResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IntegerAttributeSyntaxResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntegerAttributeSyntaxResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntegerAttributeSyntaxResponse
  * @throws IOException if the JSON string is invalid with respect to IntegerAttributeSyntaxResponse
  */
  public static IntegerAttributeSyntaxResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegerAttributeSyntaxResponse.class);
  }

 /**
  * Convert an instance of IntegerAttributeSyntaxResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

