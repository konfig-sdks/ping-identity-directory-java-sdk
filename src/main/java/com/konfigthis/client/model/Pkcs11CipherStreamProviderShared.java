/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Enumpkcs11CipherStreamProviderSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Pkcs11CipherStreamProviderShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Pkcs11CipherStreamProviderShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<Enumpkcs11CipherStreamProviderSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_PKCS11_PROVIDER_CLASS = "pkcs11ProviderClass";
  @SerializedName(SERIALIZED_NAME_PKCS11_PROVIDER_CLASS)
  private String pkcs11ProviderClass;

  public static final String SERIALIZED_NAME_PKCS11_PROVIDER_CONFIGURATION_FILE = "pkcs11ProviderConfigurationFile";
  @SerializedName(SERIALIZED_NAME_PKCS11_PROVIDER_CONFIGURATION_FILE)
  private String pkcs11ProviderConfigurationFile;

  public static final String SERIALIZED_NAME_KEY_STORE_PIN = "keyStorePin";
  @SerializedName(SERIALIZED_NAME_KEY_STORE_PIN)
  private String keyStorePin;

  public static final String SERIALIZED_NAME_KEY_STORE_PIN_FILE = "keyStorePinFile";
  @SerializedName(SERIALIZED_NAME_KEY_STORE_PIN_FILE)
  private String keyStorePinFile;

  public static final String SERIALIZED_NAME_KEY_STORE_PIN_ENVIRONMENT_VARIABLE = "keyStorePinEnvironmentVariable";
  @SerializedName(SERIALIZED_NAME_KEY_STORE_PIN_ENVIRONMENT_VARIABLE)
  private String keyStorePinEnvironmentVariable;

  public static final String SERIALIZED_NAME_PKCS11_KEY_STORE_TYPE = "pkcs11KeyStoreType";
  @SerializedName(SERIALIZED_NAME_PKCS11_KEY_STORE_TYPE)
  private String pkcs11KeyStoreType;

  public static final String SERIALIZED_NAME_SSL_CERT_NICKNAME = "sslCertNickname";
  @SerializedName(SERIALIZED_NAME_SSL_CERT_NICKNAME)
  private String sslCertNickname;

  public static final String SERIALIZED_NAME_ENCRYPTION_METADATA_FILE = "encryptionMetadataFile";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_METADATA_FILE)
  private String encryptionMetadataFile;

  public static final String SERIALIZED_NAME_ITERATION_COUNT = "iterationCount";
  @SerializedName(SERIALIZED_NAME_ITERATION_COUNT)
  private Integer iterationCount;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public Pkcs11CipherStreamProviderShared() {
  }

  public Pkcs11CipherStreamProviderShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Cipher Stream Provider
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Cipher Stream Provider")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Pkcs11CipherStreamProviderShared schemas(List<Enumpkcs11CipherStreamProviderSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public Pkcs11CipherStreamProviderShared addSchemasItem(Enumpkcs11CipherStreamProviderSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Enumpkcs11CipherStreamProviderSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<Enumpkcs11CipherStreamProviderSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public Pkcs11CipherStreamProviderShared pkcs11ProviderClass(String pkcs11ProviderClass) {
    
    
    
    
    this.pkcs11ProviderClass = pkcs11ProviderClass;
    return this;
  }

   /**
   * The fully-qualified name of the Java security provider class that implements support for interacting with PKCS #11 tokens.
   * @return pkcs11ProviderClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fully-qualified name of the Java security provider class that implements support for interacting with PKCS #11 tokens.")

  public String getPkcs11ProviderClass() {
    return pkcs11ProviderClass;
  }


  public void setPkcs11ProviderClass(String pkcs11ProviderClass) {
    
    
    
    this.pkcs11ProviderClass = pkcs11ProviderClass;
  }


  public Pkcs11CipherStreamProviderShared pkcs11ProviderConfigurationFile(String pkcs11ProviderConfigurationFile) {
    
    
    
    
    this.pkcs11ProviderConfigurationFile = pkcs11ProviderConfigurationFile;
    return this;
  }

   /**
   * The path to the file to use to configure the security provider that implements support for interacting with PKCS #11 tokens.
   * @return pkcs11ProviderConfigurationFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the file to use to configure the security provider that implements support for interacting with PKCS #11 tokens.")

  public String getPkcs11ProviderConfigurationFile() {
    return pkcs11ProviderConfigurationFile;
  }


  public void setPkcs11ProviderConfigurationFile(String pkcs11ProviderConfigurationFile) {
    
    
    
    this.pkcs11ProviderConfigurationFile = pkcs11ProviderConfigurationFile;
  }


  public Pkcs11CipherStreamProviderShared keyStorePin(String keyStorePin) {
    
    
    
    
    this.keyStorePin = keyStorePin;
    return this;
  }

   /**
   * The clear-text user PIN needed to interact with the PKCS #11 token.
   * @return keyStorePin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The clear-text user PIN needed to interact with the PKCS #11 token.")

  public String getKeyStorePin() {
    return keyStorePin;
  }


  public void setKeyStorePin(String keyStorePin) {
    
    
    
    this.keyStorePin = keyStorePin;
  }


  public Pkcs11CipherStreamProviderShared keyStorePinFile(String keyStorePinFile) {
    
    
    
    
    this.keyStorePinFile = keyStorePinFile;
    return this;
  }

   /**
   * The path to a file containing the user PIN needed to interact with the PKCS #11 token. The file must exist and must contain exactly one line with a clear-text representation of the PIN.
   * @return keyStorePinFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to a file containing the user PIN needed to interact with the PKCS #11 token. The file must exist and must contain exactly one line with a clear-text representation of the PIN.")

  public String getKeyStorePinFile() {
    return keyStorePinFile;
  }


  public void setKeyStorePinFile(String keyStorePinFile) {
    
    
    
    this.keyStorePinFile = keyStorePinFile;
  }


  public Pkcs11CipherStreamProviderShared keyStorePinEnvironmentVariable(String keyStorePinEnvironmentVariable) {
    
    
    
    
    this.keyStorePinEnvironmentVariable = keyStorePinEnvironmentVariable;
    return this;
  }

   /**
   * The name of an environment variable whose value is the user PIN needed to interact with the PKCS #11 token. The environment variable must be defined and must contain a clear-text representation of the PIN.
   * @return keyStorePinEnvironmentVariable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of an environment variable whose value is the user PIN needed to interact with the PKCS #11 token. The environment variable must be defined and must contain a clear-text representation of the PIN.")

  public String getKeyStorePinEnvironmentVariable() {
    return keyStorePinEnvironmentVariable;
  }


  public void setKeyStorePinEnvironmentVariable(String keyStorePinEnvironmentVariable) {
    
    
    
    this.keyStorePinEnvironmentVariable = keyStorePinEnvironmentVariable;
  }


  public Pkcs11CipherStreamProviderShared pkcs11KeyStoreType(String pkcs11KeyStoreType) {
    
    
    
    
    this.pkcs11KeyStoreType = pkcs11KeyStoreType;
    return this;
  }

   /**
   * The key store type to use when obtaining an instance of a key store for interacting with a PKCS #11 token.
   * @return pkcs11KeyStoreType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key store type to use when obtaining an instance of a key store for interacting with a PKCS #11 token.")

  public String getPkcs11KeyStoreType() {
    return pkcs11KeyStoreType;
  }


  public void setPkcs11KeyStoreType(String pkcs11KeyStoreType) {
    
    
    
    this.pkcs11KeyStoreType = pkcs11KeyStoreType;
  }


  public Pkcs11CipherStreamProviderShared sslCertNickname(String sslCertNickname) {
    
    
    
    
    this.sslCertNickname = sslCertNickname;
    return this;
  }

   /**
   * The alias for the certificate in the PKCS #11 token that will be used to wrap the encryption key. The target certificate must exist in the PKCS #11 token, and it must have an RSA key pair because the JVM does not currently provide adequate key wrapping support for elliptic curve key pairs.  If you have also configured the server to use a PKCS #11 token for accessing listener certificates, we strongly recommend that you use a different certificate to protect the contents of the encryption settings database than you use for negotiating TLS sessions with clients. It is imperative that the certificate used by this PKCS11 Cipher Stream Provider remain constant for the life of the provider because if the certificate were to be replaced, then the contents of the encryption settings database could become inaccessible. Unlike with listener certificates used for TLS negotiation that need to be replaced on a regular basis, this PKCS11 Cipher Stream Provider does not consider the validity period for the associated certificate, and it will continue to function even after the certificate has expired.  If you need to rotate the certificate used to protect the server&#39;s encryption settings database, you should first install the desired new certificate in the PKCS #11 token under a different alias. Then, you should create a new instance of this PKCS11 Cipher Stream Provider that is configured to use that certificate, and that also uses a different value for the encryption-metadata-file because the information in that file is tied to the certificate used to generate it. Finally, you will need to update the global configuration so that the encryption-settings-cipher-stream-provider property references the new cipher stream provider rather than this one. The update to the global configuration must be done with the server online so that it can properly re-encrypt the contents of the encryption settings database with the correct key tied to the new certificate.
   * @return sslCertNickname
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The alias for the certificate in the PKCS #11 token that will be used to wrap the encryption key. The target certificate must exist in the PKCS #11 token, and it must have an RSA key pair because the JVM does not currently provide adequate key wrapping support for elliptic curve key pairs.  If you have also configured the server to use a PKCS #11 token for accessing listener certificates, we strongly recommend that you use a different certificate to protect the contents of the encryption settings database than you use for negotiating TLS sessions with clients. It is imperative that the certificate used by this PKCS11 Cipher Stream Provider remain constant for the life of the provider because if the certificate were to be replaced, then the contents of the encryption settings database could become inaccessible. Unlike with listener certificates used for TLS negotiation that need to be replaced on a regular basis, this PKCS11 Cipher Stream Provider does not consider the validity period for the associated certificate, and it will continue to function even after the certificate has expired.  If you need to rotate the certificate used to protect the server's encryption settings database, you should first install the desired new certificate in the PKCS #11 token under a different alias. Then, you should create a new instance of this PKCS11 Cipher Stream Provider that is configured to use that certificate, and that also uses a different value for the encryption-metadata-file because the information in that file is tied to the certificate used to generate it. Finally, you will need to update the global configuration so that the encryption-settings-cipher-stream-provider property references the new cipher stream provider rather than this one. The update to the global configuration must be done with the server online so that it can properly re-encrypt the contents of the encryption settings database with the correct key tied to the new certificate.")

  public String getSslCertNickname() {
    return sslCertNickname;
  }


  public void setSslCertNickname(String sslCertNickname) {
    
    
    
    this.sslCertNickname = sslCertNickname;
  }


  public Pkcs11CipherStreamProviderShared encryptionMetadataFile(String encryptionMetadataFile) {
    
    
    
    
    this.encryptionMetadataFile = encryptionMetadataFile;
    return this;
  }

   /**
   * The path to a file that will hold metadata about the encryption performed by this PKCS11 Cipher Stream Provider.
   * @return encryptionMetadataFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to a file that will hold metadata about the encryption performed by this PKCS11 Cipher Stream Provider.")

  public String getEncryptionMetadataFile() {
    return encryptionMetadataFile;
  }


  public void setEncryptionMetadataFile(String encryptionMetadataFile) {
    
    
    
    this.encryptionMetadataFile = encryptionMetadataFile;
  }


  public Pkcs11CipherStreamProviderShared iterationCount(Integer iterationCount) {
    
    
    
    
    this.iterationCount = iterationCount;
    return this;
  }

   /**
   * The PBKDF2 iteration count that will be used when deriving the encryption key used to protect the encryption settings database.
   * @return iterationCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The PBKDF2 iteration count that will be used when deriving the encryption key used to protect the encryption settings database.")

  public Integer getIterationCount() {
    return iterationCount;
  }


  public void setIterationCount(Integer iterationCount) {
    
    
    
    this.iterationCount = iterationCount;
  }


  public Pkcs11CipherStreamProviderShared enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether this Cipher Stream Provider is enabled for use in the Directory Server.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether this Cipher Stream Provider is enabled for use in the Directory Server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Pkcs11CipherStreamProviderShared instance itself
   */
  public Pkcs11CipherStreamProviderShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pkcs11CipherStreamProviderShared pkcs11CipherStreamProviderShared = (Pkcs11CipherStreamProviderShared) o;
    return Objects.equals(this.description, pkcs11CipherStreamProviderShared.description) &&
        Objects.equals(this.schemas, pkcs11CipherStreamProviderShared.schemas) &&
        Objects.equals(this.pkcs11ProviderClass, pkcs11CipherStreamProviderShared.pkcs11ProviderClass) &&
        Objects.equals(this.pkcs11ProviderConfigurationFile, pkcs11CipherStreamProviderShared.pkcs11ProviderConfigurationFile) &&
        Objects.equals(this.keyStorePin, pkcs11CipherStreamProviderShared.keyStorePin) &&
        Objects.equals(this.keyStorePinFile, pkcs11CipherStreamProviderShared.keyStorePinFile) &&
        Objects.equals(this.keyStorePinEnvironmentVariable, pkcs11CipherStreamProviderShared.keyStorePinEnvironmentVariable) &&
        Objects.equals(this.pkcs11KeyStoreType, pkcs11CipherStreamProviderShared.pkcs11KeyStoreType) &&
        Objects.equals(this.sslCertNickname, pkcs11CipherStreamProviderShared.sslCertNickname) &&
        Objects.equals(this.encryptionMetadataFile, pkcs11CipherStreamProviderShared.encryptionMetadataFile) &&
        Objects.equals(this.iterationCount, pkcs11CipherStreamProviderShared.iterationCount) &&
        Objects.equals(this.enabled, pkcs11CipherStreamProviderShared.enabled)&&
        Objects.equals(this.additionalProperties, pkcs11CipherStreamProviderShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, pkcs11ProviderClass, pkcs11ProviderConfigurationFile, keyStorePin, keyStorePinFile, keyStorePinEnvironmentVariable, pkcs11KeyStoreType, sslCertNickname, encryptionMetadataFile, iterationCount, enabled, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pkcs11CipherStreamProviderShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    pkcs11ProviderClass: ").append(toIndentedString(pkcs11ProviderClass)).append("\n");
    sb.append("    pkcs11ProviderConfigurationFile: ").append(toIndentedString(pkcs11ProviderConfigurationFile)).append("\n");
    sb.append("    keyStorePin: ").append(toIndentedString(keyStorePin)).append("\n");
    sb.append("    keyStorePinFile: ").append(toIndentedString(keyStorePinFile)).append("\n");
    sb.append("    keyStorePinEnvironmentVariable: ").append(toIndentedString(keyStorePinEnvironmentVariable)).append("\n");
    sb.append("    pkcs11KeyStoreType: ").append(toIndentedString(pkcs11KeyStoreType)).append("\n");
    sb.append("    sslCertNickname: ").append(toIndentedString(sslCertNickname)).append("\n");
    sb.append("    encryptionMetadataFile: ").append(toIndentedString(encryptionMetadataFile)).append("\n");
    sb.append("    iterationCount: ").append(toIndentedString(iterationCount)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("pkcs11ProviderClass");
    openapiFields.add("pkcs11ProviderConfigurationFile");
    openapiFields.add("keyStorePin");
    openapiFields.add("keyStorePinFile");
    openapiFields.add("keyStorePinEnvironmentVariable");
    openapiFields.add("pkcs11KeyStoreType");
    openapiFields.add("sslCertNickname");
    openapiFields.add("encryptionMetadataFile");
    openapiFields.add("iterationCount");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("sslCertNickname");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Pkcs11CipherStreamProviderShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Pkcs11CipherStreamProviderShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pkcs11CipherStreamProviderShared is not found in the empty JSON string", Pkcs11CipherStreamProviderShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Pkcs11CipherStreamProviderShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("pkcs11ProviderClass") != null && !jsonObj.get("pkcs11ProviderClass").isJsonNull()) && !jsonObj.get("pkcs11ProviderClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pkcs11ProviderClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pkcs11ProviderClass").toString()));
      }
      if ((jsonObj.get("pkcs11ProviderConfigurationFile") != null && !jsonObj.get("pkcs11ProviderConfigurationFile").isJsonNull()) && !jsonObj.get("pkcs11ProviderConfigurationFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pkcs11ProviderConfigurationFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pkcs11ProviderConfigurationFile").toString()));
      }
      if ((jsonObj.get("keyStorePin") != null && !jsonObj.get("keyStorePin").isJsonNull()) && !jsonObj.get("keyStorePin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStorePin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStorePin").toString()));
      }
      if ((jsonObj.get("keyStorePinFile") != null && !jsonObj.get("keyStorePinFile").isJsonNull()) && !jsonObj.get("keyStorePinFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStorePinFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStorePinFile").toString()));
      }
      if ((jsonObj.get("keyStorePinEnvironmentVariable") != null && !jsonObj.get("keyStorePinEnvironmentVariable").isJsonNull()) && !jsonObj.get("keyStorePinEnvironmentVariable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStorePinEnvironmentVariable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStorePinEnvironmentVariable").toString()));
      }
      if ((jsonObj.get("pkcs11KeyStoreType") != null && !jsonObj.get("pkcs11KeyStoreType").isJsonNull()) && !jsonObj.get("pkcs11KeyStoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pkcs11KeyStoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pkcs11KeyStoreType").toString()));
      }
      if (!jsonObj.get("sslCertNickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslCertNickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslCertNickname").toString()));
      }
      if ((jsonObj.get("encryptionMetadataFile") != null && !jsonObj.get("encryptionMetadataFile").isJsonNull()) && !jsonObj.get("encryptionMetadataFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionMetadataFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionMetadataFile").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pkcs11CipherStreamProviderShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pkcs11CipherStreamProviderShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pkcs11CipherStreamProviderShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pkcs11CipherStreamProviderShared.class));

       return (TypeAdapter<T>) new TypeAdapter<Pkcs11CipherStreamProviderShared>() {
           @Override
           public void write(JsonWriter out, Pkcs11CipherStreamProviderShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Pkcs11CipherStreamProviderShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Pkcs11CipherStreamProviderShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Pkcs11CipherStreamProviderShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Pkcs11CipherStreamProviderShared
  * @throws IOException if the JSON string is invalid with respect to Pkcs11CipherStreamProviderShared
  */
  public static Pkcs11CipherStreamProviderShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pkcs11CipherStreamProviderShared.class);
  }

 /**
  * Convert an instance of Pkcs11CipherStreamProviderShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

