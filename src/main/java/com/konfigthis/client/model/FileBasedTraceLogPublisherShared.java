/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumfileBasedTraceLogPublisherSchemaUrn;
import com.konfigthis.client.model.EnumlogPublisherAccessTokenValidatorMessageTypeProp;
import com.konfigthis.client.model.EnumlogPublisherCompressionMechanismProp;
import com.konfigthis.client.model.EnumlogPublisherConsentMessageTypeProp;
import com.konfigthis.client.model.EnumlogPublisherDebugMessageTypeProp;
import com.konfigthis.client.model.EnumlogPublisherDirectoryRESTAPIMessageTypeProp;
import com.konfigthis.client.model.EnumlogPublisherExtensionMessageTypeProp;
import com.konfigthis.client.model.EnumlogPublisherHttpMessageTypeProp;
import com.konfigthis.client.model.EnumlogPublisherIdTokenValidatorMessageTypeProp;
import com.konfigthis.client.model.EnumlogPublisherLoggingErrorBehaviorProp;
import com.konfigthis.client.model.EnumlogPublisherScimMessageTypeProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FileBasedTraceLogPublisherShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FileBasedTraceLogPublisherShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumfileBasedTraceLogPublisherSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOG_FILE = "logFile";
  @SerializedName(SERIALIZED_NAME_LOG_FILE)
  private String logFile;

  public static final String SERIALIZED_NAME_LOG_FILE_PERMISSIONS = "logFilePermissions";
  @SerializedName(SERIALIZED_NAME_LOG_FILE_PERMISSIONS)
  private String logFilePermissions;

  public static final String SERIALIZED_NAME_ROTATION_POLICY = "rotationPolicy";
  @SerializedName(SERIALIZED_NAME_ROTATION_POLICY)
  private List<String> rotationPolicy = null;

  public static final String SERIALIZED_NAME_ROTATION_LISTENER = "rotationListener";
  @SerializedName(SERIALIZED_NAME_ROTATION_LISTENER)
  private List<String> rotationListener = null;

  public static final String SERIALIZED_NAME_RETENTION_POLICY = "retentionPolicy";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY)
  private List<String> retentionPolicy = null;

  public static final String SERIALIZED_NAME_COMPRESSION_MECHANISM = "compressionMechanism";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_MECHANISM)
  private EnumlogPublisherCompressionMechanismProp compressionMechanism;

  public static final String SERIALIZED_NAME_SIGN_LOG = "signLog";
  @SerializedName(SERIALIZED_NAME_SIGN_LOG)
  private Boolean signLog;

  public static final String SERIALIZED_NAME_ENCRYPT_LOG = "encryptLog";
  @SerializedName(SERIALIZED_NAME_ENCRYPT_LOG)
  private Boolean encryptLog;

  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS_DEFINITION_I_D = "encryptionSettingsDefinitionID";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS_DEFINITION_I_D)
  private String encryptionSettingsDefinitionID;

  public static final String SERIALIZED_NAME_APPEND = "append";
  @SerializedName(SERIALIZED_NAME_APPEND)
  private Boolean append;

  public static final String SERIALIZED_NAME_BUFFER_SIZE = "bufferSize";
  @SerializedName(SERIALIZED_NAME_BUFFER_SIZE)
  private String bufferSize;

  public static final String SERIALIZED_NAME_TIME_INTERVAL = "timeInterval";
  @SerializedName(SERIALIZED_NAME_TIME_INTERVAL)
  private String timeInterval;

  public static final String SERIALIZED_NAME_ASYNCHRONOUS = "asynchronous";
  @SerializedName(SERIALIZED_NAME_ASYNCHRONOUS)
  private Boolean asynchronous;

  public static final String SERIALIZED_NAME_QUEUE_SIZE = "queueSize";
  @SerializedName(SERIALIZED_NAME_QUEUE_SIZE)
  private Integer queueSize;

  public static final String SERIALIZED_NAME_MAX_STRING_LENGTH = "maxStringLength";
  @SerializedName(SERIALIZED_NAME_MAX_STRING_LENGTH)
  private Integer maxStringLength;

  public static final String SERIALIZED_NAME_DEBUG_MESSAGE_TYPE = "debugMessageType";
  @SerializedName(SERIALIZED_NAME_DEBUG_MESSAGE_TYPE)
  private List<EnumlogPublisherDebugMessageTypeProp> debugMessageType = null;

  public static final String SERIALIZED_NAME_HTTP_MESSAGE_TYPE = "httpMessageType";
  @SerializedName(SERIALIZED_NAME_HTTP_MESSAGE_TYPE)
  private List<EnumlogPublisherHttpMessageTypeProp> httpMessageType = null;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_VALIDATOR_MESSAGE_TYPE = "accessTokenValidatorMessageType";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_VALIDATOR_MESSAGE_TYPE)
  private List<EnumlogPublisherAccessTokenValidatorMessageTypeProp> accessTokenValidatorMessageType = null;

  public static final String SERIALIZED_NAME_ID_TOKEN_VALIDATOR_MESSAGE_TYPE = "idTokenValidatorMessageType";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN_VALIDATOR_MESSAGE_TYPE)
  private List<EnumlogPublisherIdTokenValidatorMessageTypeProp> idTokenValidatorMessageType = null;

  public static final String SERIALIZED_NAME_SCIM_MESSAGE_TYPE = "scimMessageType";
  @SerializedName(SERIALIZED_NAME_SCIM_MESSAGE_TYPE)
  private List<EnumlogPublisherScimMessageTypeProp> scimMessageType = null;

  public static final String SERIALIZED_NAME_CONSENT_MESSAGE_TYPE = "consentMessageType";
  @SerializedName(SERIALIZED_NAME_CONSENT_MESSAGE_TYPE)
  private List<EnumlogPublisherConsentMessageTypeProp> consentMessageType = null;

  public static final String SERIALIZED_NAME_DIRECTORY_R_E_S_T_A_P_I_MESSAGE_TYPE = "directoryRESTAPIMessageType";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_R_E_S_T_A_P_I_MESSAGE_TYPE)
  private List<EnumlogPublisherDirectoryRESTAPIMessageTypeProp> directoryRESTAPIMessageType = null;

  public static final String SERIALIZED_NAME_EXTENSION_MESSAGE_TYPE = "extensionMessageType";
  @SerializedName(SERIALIZED_NAME_EXTENSION_MESSAGE_TYPE)
  private List<EnumlogPublisherExtensionMessageTypeProp> extensionMessageType = null;

  public static final String SERIALIZED_NAME_INCLUDE_PATH_PATTERN = "includePathPattern";
  @SerializedName(SERIALIZED_NAME_INCLUDE_PATH_PATTERN)
  private List<String> includePathPattern = null;

  public static final String SERIALIZED_NAME_EXCLUDE_PATH_PATTERN = "excludePathPattern";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_PATH_PATTERN)
  private List<String> excludePathPattern = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR = "loggingErrorBehavior";
  @SerializedName(SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR)
  private EnumlogPublisherLoggingErrorBehaviorProp loggingErrorBehavior;

  public FileBasedTraceLogPublisherShared() {
  }

  public FileBasedTraceLogPublisherShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Log Publisher
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Log Publisher")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public FileBasedTraceLogPublisherShared schemas(List<EnumfileBasedTraceLogPublisherSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public FileBasedTraceLogPublisherShared addSchemasItem(EnumfileBasedTraceLogPublisherSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumfileBasedTraceLogPublisherSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumfileBasedTraceLogPublisherSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public FileBasedTraceLogPublisherShared logFile(String logFile) {
    
    
    
    
    this.logFile = logFile;
    return this;
  }

   /**
   * The file name to use for the log files generated by the File Based Trace Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.
   * @return logFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The file name to use for the log files generated by the File Based Trace Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.")

  public String getLogFile() {
    return logFile;
  }


  public void setLogFile(String logFile) {
    
    
    
    this.logFile = logFile;
  }


  public FileBasedTraceLogPublisherShared logFilePermissions(String logFilePermissions) {
    
    
    
    
    this.logFilePermissions = logFilePermissions;
    return this;
  }

   /**
   * The UNIX permissions of the log files created by this File Based Trace Log Publisher.
   * @return logFilePermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UNIX permissions of the log files created by this File Based Trace Log Publisher.")

  public String getLogFilePermissions() {
    return logFilePermissions;
  }


  public void setLogFilePermissions(String logFilePermissions) {
    
    
    
    this.logFilePermissions = logFilePermissions;
  }


  public FileBasedTraceLogPublisherShared rotationPolicy(List<String> rotationPolicy) {
    
    
    
    
    this.rotationPolicy = rotationPolicy;
    return this;
  }

  public FileBasedTraceLogPublisherShared addRotationPolicyItem(String rotationPolicyItem) {
    if (this.rotationPolicy == null) {
      this.rotationPolicy = new ArrayList<>();
    }
    this.rotationPolicy.add(rotationPolicyItem);
    return this;
  }

   /**
   * The rotation policy to use for the File Based Trace Log Publisher .
   * @return rotationPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rotation policy to use for the File Based Trace Log Publisher .")

  public List<String> getRotationPolicy() {
    return rotationPolicy;
  }


  public void setRotationPolicy(List<String> rotationPolicy) {
    
    
    
    this.rotationPolicy = rotationPolicy;
  }


  public FileBasedTraceLogPublisherShared rotationListener(List<String> rotationListener) {
    
    
    
    
    this.rotationListener = rotationListener;
    return this;
  }

  public FileBasedTraceLogPublisherShared addRotationListenerItem(String rotationListenerItem) {
    if (this.rotationListener == null) {
      this.rotationListener = new ArrayList<>();
    }
    this.rotationListener.add(rotationListenerItem);
    return this;
  }

   /**
   * A listener that should be notified whenever a log file is rotated out of service.
   * @return rotationListener
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A listener that should be notified whenever a log file is rotated out of service.")

  public List<String> getRotationListener() {
    return rotationListener;
  }


  public void setRotationListener(List<String> rotationListener) {
    
    
    
    this.rotationListener = rotationListener;
  }


  public FileBasedTraceLogPublisherShared retentionPolicy(List<String> retentionPolicy) {
    
    
    
    
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  public FileBasedTraceLogPublisherShared addRetentionPolicyItem(String retentionPolicyItem) {
    if (this.retentionPolicy == null) {
      this.retentionPolicy = new ArrayList<>();
    }
    this.retentionPolicy.add(retentionPolicyItem);
    return this;
  }

   /**
   * The retention policy to use for the File Based Trace Log Publisher .
   * @return retentionPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The retention policy to use for the File Based Trace Log Publisher .")

  public List<String> getRetentionPolicy() {
    return retentionPolicy;
  }


  public void setRetentionPolicy(List<String> retentionPolicy) {
    
    
    
    this.retentionPolicy = retentionPolicy;
  }


  public FileBasedTraceLogPublisherShared compressionMechanism(EnumlogPublisherCompressionMechanismProp compressionMechanism) {
    
    
    
    
    this.compressionMechanism = compressionMechanism;
    return this;
  }

   /**
   * Get compressionMechanism
   * @return compressionMechanism
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumlogPublisherCompressionMechanismProp getCompressionMechanism() {
    return compressionMechanism;
  }


  public void setCompressionMechanism(EnumlogPublisherCompressionMechanismProp compressionMechanism) {
    
    
    
    this.compressionMechanism = compressionMechanism;
  }


  public FileBasedTraceLogPublisherShared signLog(Boolean signLog) {
    
    
    
    
    this.signLog = signLog;
    return this;
  }

   /**
   * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.
   * @return signLog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.")

  public Boolean getSignLog() {
    return signLog;
  }


  public void setSignLog(Boolean signLog) {
    
    
    
    this.signLog = signLog;
  }


  public FileBasedTraceLogPublisherShared encryptLog(Boolean encryptLog) {
    
    
    
    
    this.encryptLog = encryptLog;
    return this;
  }

   /**
   * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
   * @return encryptLog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether log files should be encrypted so that their content is not available to unauthorized users.")

  public Boolean getEncryptLog() {
    return encryptLog;
  }


  public void setEncryptLog(Boolean encryptLog) {
    
    
    
    this.encryptLog = encryptLog;
  }


  public FileBasedTraceLogPublisherShared encryptionSettingsDefinitionID(String encryptionSettingsDefinitionID) {
    
    
    
    
    this.encryptionSettingsDefinitionID = encryptionSettingsDefinitionID;
    return this;
  }

   /**
   * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server&#39;s preferred encryption settings definition will be used. The \&quot;encryption-settings list\&quot; command can be used to obtain a list of the encryption settings definitions available in the server.
   * @return encryptionSettingsDefinitionID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server's preferred encryption settings definition will be used. The \"encryption-settings list\" command can be used to obtain a list of the encryption settings definitions available in the server.")

  public String getEncryptionSettingsDefinitionID() {
    return encryptionSettingsDefinitionID;
  }


  public void setEncryptionSettingsDefinitionID(String encryptionSettingsDefinitionID) {
    
    
    
    this.encryptionSettingsDefinitionID = encryptionSettingsDefinitionID;
  }


  public FileBasedTraceLogPublisherShared append(Boolean append) {
    
    
    
    
    this.append = append;
    return this;
  }

   /**
   * Specifies whether to append to existing log files.
   * @return append
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether to append to existing log files.")

  public Boolean getAppend() {
    return append;
  }


  public void setAppend(Boolean append) {
    
    
    
    this.append = append;
  }


  public FileBasedTraceLogPublisherShared bufferSize(String bufferSize) {
    
    
    
    
    this.bufferSize = bufferSize;
    return this;
  }

   /**
   * Specifies the log file buffer size.
   * @return bufferSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the log file buffer size.")

  public String getBufferSize() {
    return bufferSize;
  }


  public void setBufferSize(String bufferSize) {
    
    
    
    this.bufferSize = bufferSize;
  }


  public FileBasedTraceLogPublisherShared timeInterval(String timeInterval) {
    
    
    
    
    this.timeInterval = timeInterval;
    return this;
  }

   /**
   * Specifies the interval at which to check whether the log files need to be rotated.
   * @return timeInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the interval at which to check whether the log files need to be rotated.")

  public String getTimeInterval() {
    return timeInterval;
  }


  public void setTimeInterval(String timeInterval) {
    
    
    
    this.timeInterval = timeInterval;
  }


  public FileBasedTraceLogPublisherShared asynchronous(Boolean asynchronous) {
    
    
    
    
    this.asynchronous = asynchronous;
    return this;
  }

   /**
   * Indicates whether the Writer Based Trace Log Publisher will publish records asynchronously.
   * @return asynchronous
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the Writer Based Trace Log Publisher will publish records asynchronously.")

  public Boolean getAsynchronous() {
    return asynchronous;
  }


  public void setAsynchronous(Boolean asynchronous) {
    
    
    
    this.asynchronous = asynchronous;
  }


  public FileBasedTraceLogPublisherShared queueSize(Integer queueSize) {
    
    
    
    
    this.queueSize = queueSize;
    return this;
  }

   /**
   * The maximum number of log records that can be stored in the asynchronous queue.
   * @return queueSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of log records that can be stored in the asynchronous queue.")

  public Integer getQueueSize() {
    return queueSize;
  }


  public void setQueueSize(Integer queueSize) {
    
    
    
    this.queueSize = queueSize;
  }


  public FileBasedTraceLogPublisherShared maxStringLength(Integer maxStringLength) {
    
    
    
    
    this.maxStringLength = maxStringLength;
    return this;
  }

   /**
   * Specifies the maximum number of characters that may be included in any string in a log message before that string is truncated and replaced with a placeholder indicating the number of characters that were omitted. This can help prevent extremely long log messages from being written.
   * @return maxStringLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of characters that may be included in any string in a log message before that string is truncated and replaced with a placeholder indicating the number of characters that were omitted. This can help prevent extremely long log messages from being written.")

  public Integer getMaxStringLength() {
    return maxStringLength;
  }


  public void setMaxStringLength(Integer maxStringLength) {
    
    
    
    this.maxStringLength = maxStringLength;
  }


  public FileBasedTraceLogPublisherShared debugMessageType(List<EnumlogPublisherDebugMessageTypeProp> debugMessageType) {
    
    
    
    
    this.debugMessageType = debugMessageType;
    return this;
  }

  public FileBasedTraceLogPublisherShared addDebugMessageTypeItem(EnumlogPublisherDebugMessageTypeProp debugMessageTypeItem) {
    if (this.debugMessageType == null) {
      this.debugMessageType = new ArrayList<>();
    }
    this.debugMessageType.add(debugMessageTypeItem);
    return this;
  }

   /**
   * Get debugMessageType
   * @return debugMessageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlogPublisherDebugMessageTypeProp> getDebugMessageType() {
    return debugMessageType;
  }


  public void setDebugMessageType(List<EnumlogPublisherDebugMessageTypeProp> debugMessageType) {
    
    
    
    this.debugMessageType = debugMessageType;
  }


  public FileBasedTraceLogPublisherShared httpMessageType(List<EnumlogPublisherHttpMessageTypeProp> httpMessageType) {
    
    
    
    
    this.httpMessageType = httpMessageType;
    return this;
  }

  public FileBasedTraceLogPublisherShared addHttpMessageTypeItem(EnumlogPublisherHttpMessageTypeProp httpMessageTypeItem) {
    if (this.httpMessageType == null) {
      this.httpMessageType = new ArrayList<>();
    }
    this.httpMessageType.add(httpMessageTypeItem);
    return this;
  }

   /**
   * Get httpMessageType
   * @return httpMessageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlogPublisherHttpMessageTypeProp> getHttpMessageType() {
    return httpMessageType;
  }


  public void setHttpMessageType(List<EnumlogPublisherHttpMessageTypeProp> httpMessageType) {
    
    
    
    this.httpMessageType = httpMessageType;
  }


  public FileBasedTraceLogPublisherShared accessTokenValidatorMessageType(List<EnumlogPublisherAccessTokenValidatorMessageTypeProp> accessTokenValidatorMessageType) {
    
    
    
    
    this.accessTokenValidatorMessageType = accessTokenValidatorMessageType;
    return this;
  }

  public FileBasedTraceLogPublisherShared addAccessTokenValidatorMessageTypeItem(EnumlogPublisherAccessTokenValidatorMessageTypeProp accessTokenValidatorMessageTypeItem) {
    if (this.accessTokenValidatorMessageType == null) {
      this.accessTokenValidatorMessageType = new ArrayList<>();
    }
    this.accessTokenValidatorMessageType.add(accessTokenValidatorMessageTypeItem);
    return this;
  }

   /**
   * Get accessTokenValidatorMessageType
   * @return accessTokenValidatorMessageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlogPublisherAccessTokenValidatorMessageTypeProp> getAccessTokenValidatorMessageType() {
    return accessTokenValidatorMessageType;
  }


  public void setAccessTokenValidatorMessageType(List<EnumlogPublisherAccessTokenValidatorMessageTypeProp> accessTokenValidatorMessageType) {
    
    
    
    this.accessTokenValidatorMessageType = accessTokenValidatorMessageType;
  }


  public FileBasedTraceLogPublisherShared idTokenValidatorMessageType(List<EnumlogPublisherIdTokenValidatorMessageTypeProp> idTokenValidatorMessageType) {
    
    
    
    
    this.idTokenValidatorMessageType = idTokenValidatorMessageType;
    return this;
  }

  public FileBasedTraceLogPublisherShared addIdTokenValidatorMessageTypeItem(EnumlogPublisherIdTokenValidatorMessageTypeProp idTokenValidatorMessageTypeItem) {
    if (this.idTokenValidatorMessageType == null) {
      this.idTokenValidatorMessageType = new ArrayList<>();
    }
    this.idTokenValidatorMessageType.add(idTokenValidatorMessageTypeItem);
    return this;
  }

   /**
   * Get idTokenValidatorMessageType
   * @return idTokenValidatorMessageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlogPublisherIdTokenValidatorMessageTypeProp> getIdTokenValidatorMessageType() {
    return idTokenValidatorMessageType;
  }


  public void setIdTokenValidatorMessageType(List<EnumlogPublisherIdTokenValidatorMessageTypeProp> idTokenValidatorMessageType) {
    
    
    
    this.idTokenValidatorMessageType = idTokenValidatorMessageType;
  }


  public FileBasedTraceLogPublisherShared scimMessageType(List<EnumlogPublisherScimMessageTypeProp> scimMessageType) {
    
    
    
    
    this.scimMessageType = scimMessageType;
    return this;
  }

  public FileBasedTraceLogPublisherShared addScimMessageTypeItem(EnumlogPublisherScimMessageTypeProp scimMessageTypeItem) {
    if (this.scimMessageType == null) {
      this.scimMessageType = new ArrayList<>();
    }
    this.scimMessageType.add(scimMessageTypeItem);
    return this;
  }

   /**
   * Get scimMessageType
   * @return scimMessageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlogPublisherScimMessageTypeProp> getScimMessageType() {
    return scimMessageType;
  }


  public void setScimMessageType(List<EnumlogPublisherScimMessageTypeProp> scimMessageType) {
    
    
    
    this.scimMessageType = scimMessageType;
  }


  public FileBasedTraceLogPublisherShared consentMessageType(List<EnumlogPublisherConsentMessageTypeProp> consentMessageType) {
    
    
    
    
    this.consentMessageType = consentMessageType;
    return this;
  }

  public FileBasedTraceLogPublisherShared addConsentMessageTypeItem(EnumlogPublisherConsentMessageTypeProp consentMessageTypeItem) {
    if (this.consentMessageType == null) {
      this.consentMessageType = new ArrayList<>();
    }
    this.consentMessageType.add(consentMessageTypeItem);
    return this;
  }

   /**
   * Get consentMessageType
   * @return consentMessageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlogPublisherConsentMessageTypeProp> getConsentMessageType() {
    return consentMessageType;
  }


  public void setConsentMessageType(List<EnumlogPublisherConsentMessageTypeProp> consentMessageType) {
    
    
    
    this.consentMessageType = consentMessageType;
  }


  public FileBasedTraceLogPublisherShared directoryRESTAPIMessageType(List<EnumlogPublisherDirectoryRESTAPIMessageTypeProp> directoryRESTAPIMessageType) {
    
    
    
    
    this.directoryRESTAPIMessageType = directoryRESTAPIMessageType;
    return this;
  }

  public FileBasedTraceLogPublisherShared addDirectoryRESTAPIMessageTypeItem(EnumlogPublisherDirectoryRESTAPIMessageTypeProp directoryRESTAPIMessageTypeItem) {
    if (this.directoryRESTAPIMessageType == null) {
      this.directoryRESTAPIMessageType = new ArrayList<>();
    }
    this.directoryRESTAPIMessageType.add(directoryRESTAPIMessageTypeItem);
    return this;
  }

   /**
   * Get directoryRESTAPIMessageType
   * @return directoryRESTAPIMessageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlogPublisherDirectoryRESTAPIMessageTypeProp> getDirectoryRESTAPIMessageType() {
    return directoryRESTAPIMessageType;
  }


  public void setDirectoryRESTAPIMessageType(List<EnumlogPublisherDirectoryRESTAPIMessageTypeProp> directoryRESTAPIMessageType) {
    
    
    
    this.directoryRESTAPIMessageType = directoryRESTAPIMessageType;
  }


  public FileBasedTraceLogPublisherShared extensionMessageType(List<EnumlogPublisherExtensionMessageTypeProp> extensionMessageType) {
    
    
    
    
    this.extensionMessageType = extensionMessageType;
    return this;
  }

  public FileBasedTraceLogPublisherShared addExtensionMessageTypeItem(EnumlogPublisherExtensionMessageTypeProp extensionMessageTypeItem) {
    if (this.extensionMessageType == null) {
      this.extensionMessageType = new ArrayList<>();
    }
    this.extensionMessageType.add(extensionMessageTypeItem);
    return this;
  }

   /**
   * Get extensionMessageType
   * @return extensionMessageType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlogPublisherExtensionMessageTypeProp> getExtensionMessageType() {
    return extensionMessageType;
  }


  public void setExtensionMessageType(List<EnumlogPublisherExtensionMessageTypeProp> extensionMessageType) {
    
    
    
    this.extensionMessageType = extensionMessageType;
  }


  public FileBasedTraceLogPublisherShared includePathPattern(List<String> includePathPattern) {
    
    
    
    
    this.includePathPattern = includePathPattern;
    return this;
  }

  public FileBasedTraceLogPublisherShared addIncludePathPatternItem(String includePathPatternItem) {
    if (this.includePathPattern == null) {
      this.includePathPattern = new ArrayList<>();
    }
    this.includePathPattern.add(includePathPatternItem);
    return this;
  }

   /**
   * Specifies a set of HTTP request URL paths to determine whether log messages are included for a HTTP request. Log messages are included for a HTTP request if the request path does not match any exclude-path-pattern, and the request path does match an include-path-pattern (or no include-path-pattern is specified).
   * @return includePathPattern
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of HTTP request URL paths to determine whether log messages are included for a HTTP request. Log messages are included for a HTTP request if the request path does not match any exclude-path-pattern, and the request path does match an include-path-pattern (or no include-path-pattern is specified).")

  public List<String> getIncludePathPattern() {
    return includePathPattern;
  }


  public void setIncludePathPattern(List<String> includePathPattern) {
    
    
    
    this.includePathPattern = includePathPattern;
  }


  public FileBasedTraceLogPublisherShared excludePathPattern(List<String> excludePathPattern) {
    
    
    
    
    this.excludePathPattern = excludePathPattern;
    return this;
  }

  public FileBasedTraceLogPublisherShared addExcludePathPatternItem(String excludePathPatternItem) {
    if (this.excludePathPattern == null) {
      this.excludePathPattern = new ArrayList<>();
    }
    this.excludePathPattern.add(excludePathPatternItem);
    return this;
  }

   /**
   * Specifies a set of HTTP request URL paths to determine whether log messages are excluded for a HTTP request. Log messages are included for a HTTP request if the request path does not match any exclude-path-pattern, and the request path does match an include-path-pattern (or no include-path-pattern is specified).
   * @return excludePathPattern
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of HTTP request URL paths to determine whether log messages are excluded for a HTTP request. Log messages are included for a HTTP request if the request path does not match any exclude-path-pattern, and the request path does match an include-path-pattern (or no include-path-pattern is specified).")

  public List<String> getExcludePathPattern() {
    return excludePathPattern;
  }


  public void setExcludePathPattern(List<String> excludePathPattern) {
    
    
    
    this.excludePathPattern = excludePathPattern;
  }


  public FileBasedTraceLogPublisherShared enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Log Publisher is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Log Publisher is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public FileBasedTraceLogPublisherShared loggingErrorBehavior(EnumlogPublisherLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
    return this;
  }

   /**
   * Get loggingErrorBehavior
   * @return loggingErrorBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumlogPublisherLoggingErrorBehaviorProp getLoggingErrorBehavior() {
    return loggingErrorBehavior;
  }


  public void setLoggingErrorBehavior(EnumlogPublisherLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FileBasedTraceLogPublisherShared instance itself
   */
  public FileBasedTraceLogPublisherShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileBasedTraceLogPublisherShared fileBasedTraceLogPublisherShared = (FileBasedTraceLogPublisherShared) o;
    return Objects.equals(this.description, fileBasedTraceLogPublisherShared.description) &&
        Objects.equals(this.schemas, fileBasedTraceLogPublisherShared.schemas) &&
        Objects.equals(this.logFile, fileBasedTraceLogPublisherShared.logFile) &&
        Objects.equals(this.logFilePermissions, fileBasedTraceLogPublisherShared.logFilePermissions) &&
        Objects.equals(this.rotationPolicy, fileBasedTraceLogPublisherShared.rotationPolicy) &&
        Objects.equals(this.rotationListener, fileBasedTraceLogPublisherShared.rotationListener) &&
        Objects.equals(this.retentionPolicy, fileBasedTraceLogPublisherShared.retentionPolicy) &&
        Objects.equals(this.compressionMechanism, fileBasedTraceLogPublisherShared.compressionMechanism) &&
        Objects.equals(this.signLog, fileBasedTraceLogPublisherShared.signLog) &&
        Objects.equals(this.encryptLog, fileBasedTraceLogPublisherShared.encryptLog) &&
        Objects.equals(this.encryptionSettingsDefinitionID, fileBasedTraceLogPublisherShared.encryptionSettingsDefinitionID) &&
        Objects.equals(this.append, fileBasedTraceLogPublisherShared.append) &&
        Objects.equals(this.bufferSize, fileBasedTraceLogPublisherShared.bufferSize) &&
        Objects.equals(this.timeInterval, fileBasedTraceLogPublisherShared.timeInterval) &&
        Objects.equals(this.asynchronous, fileBasedTraceLogPublisherShared.asynchronous) &&
        Objects.equals(this.queueSize, fileBasedTraceLogPublisherShared.queueSize) &&
        Objects.equals(this.maxStringLength, fileBasedTraceLogPublisherShared.maxStringLength) &&
        Objects.equals(this.debugMessageType, fileBasedTraceLogPublisherShared.debugMessageType) &&
        Objects.equals(this.httpMessageType, fileBasedTraceLogPublisherShared.httpMessageType) &&
        Objects.equals(this.accessTokenValidatorMessageType, fileBasedTraceLogPublisherShared.accessTokenValidatorMessageType) &&
        Objects.equals(this.idTokenValidatorMessageType, fileBasedTraceLogPublisherShared.idTokenValidatorMessageType) &&
        Objects.equals(this.scimMessageType, fileBasedTraceLogPublisherShared.scimMessageType) &&
        Objects.equals(this.consentMessageType, fileBasedTraceLogPublisherShared.consentMessageType) &&
        Objects.equals(this.directoryRESTAPIMessageType, fileBasedTraceLogPublisherShared.directoryRESTAPIMessageType) &&
        Objects.equals(this.extensionMessageType, fileBasedTraceLogPublisherShared.extensionMessageType) &&
        Objects.equals(this.includePathPattern, fileBasedTraceLogPublisherShared.includePathPattern) &&
        Objects.equals(this.excludePathPattern, fileBasedTraceLogPublisherShared.excludePathPattern) &&
        Objects.equals(this.enabled, fileBasedTraceLogPublisherShared.enabled) &&
        Objects.equals(this.loggingErrorBehavior, fileBasedTraceLogPublisherShared.loggingErrorBehavior)&&
        Objects.equals(this.additionalProperties, fileBasedTraceLogPublisherShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, logFile, logFilePermissions, rotationPolicy, rotationListener, retentionPolicy, compressionMechanism, signLog, encryptLog, encryptionSettingsDefinitionID, append, bufferSize, timeInterval, asynchronous, queueSize, maxStringLength, debugMessageType, httpMessageType, accessTokenValidatorMessageType, idTokenValidatorMessageType, scimMessageType, consentMessageType, directoryRESTAPIMessageType, extensionMessageType, includePathPattern, excludePathPattern, enabled, loggingErrorBehavior, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileBasedTraceLogPublisherShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    logFile: ").append(toIndentedString(logFile)).append("\n");
    sb.append("    logFilePermissions: ").append(toIndentedString(logFilePermissions)).append("\n");
    sb.append("    rotationPolicy: ").append(toIndentedString(rotationPolicy)).append("\n");
    sb.append("    rotationListener: ").append(toIndentedString(rotationListener)).append("\n");
    sb.append("    retentionPolicy: ").append(toIndentedString(retentionPolicy)).append("\n");
    sb.append("    compressionMechanism: ").append(toIndentedString(compressionMechanism)).append("\n");
    sb.append("    signLog: ").append(toIndentedString(signLog)).append("\n");
    sb.append("    encryptLog: ").append(toIndentedString(encryptLog)).append("\n");
    sb.append("    encryptionSettingsDefinitionID: ").append(toIndentedString(encryptionSettingsDefinitionID)).append("\n");
    sb.append("    append: ").append(toIndentedString(append)).append("\n");
    sb.append("    bufferSize: ").append(toIndentedString(bufferSize)).append("\n");
    sb.append("    timeInterval: ").append(toIndentedString(timeInterval)).append("\n");
    sb.append("    asynchronous: ").append(toIndentedString(asynchronous)).append("\n");
    sb.append("    queueSize: ").append(toIndentedString(queueSize)).append("\n");
    sb.append("    maxStringLength: ").append(toIndentedString(maxStringLength)).append("\n");
    sb.append("    debugMessageType: ").append(toIndentedString(debugMessageType)).append("\n");
    sb.append("    httpMessageType: ").append(toIndentedString(httpMessageType)).append("\n");
    sb.append("    accessTokenValidatorMessageType: ").append(toIndentedString(accessTokenValidatorMessageType)).append("\n");
    sb.append("    idTokenValidatorMessageType: ").append(toIndentedString(idTokenValidatorMessageType)).append("\n");
    sb.append("    scimMessageType: ").append(toIndentedString(scimMessageType)).append("\n");
    sb.append("    consentMessageType: ").append(toIndentedString(consentMessageType)).append("\n");
    sb.append("    directoryRESTAPIMessageType: ").append(toIndentedString(directoryRESTAPIMessageType)).append("\n");
    sb.append("    extensionMessageType: ").append(toIndentedString(extensionMessageType)).append("\n");
    sb.append("    includePathPattern: ").append(toIndentedString(includePathPattern)).append("\n");
    sb.append("    excludePathPattern: ").append(toIndentedString(excludePathPattern)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    loggingErrorBehavior: ").append(toIndentedString(loggingErrorBehavior)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("logFile");
    openapiFields.add("logFilePermissions");
    openapiFields.add("rotationPolicy");
    openapiFields.add("rotationListener");
    openapiFields.add("retentionPolicy");
    openapiFields.add("compressionMechanism");
    openapiFields.add("signLog");
    openapiFields.add("encryptLog");
    openapiFields.add("encryptionSettingsDefinitionID");
    openapiFields.add("append");
    openapiFields.add("bufferSize");
    openapiFields.add("timeInterval");
    openapiFields.add("asynchronous");
    openapiFields.add("queueSize");
    openapiFields.add("maxStringLength");
    openapiFields.add("debugMessageType");
    openapiFields.add("httpMessageType");
    openapiFields.add("accessTokenValidatorMessageType");
    openapiFields.add("idTokenValidatorMessageType");
    openapiFields.add("scimMessageType");
    openapiFields.add("consentMessageType");
    openapiFields.add("directoryRESTAPIMessageType");
    openapiFields.add("extensionMessageType");
    openapiFields.add("includePathPattern");
    openapiFields.add("excludePathPattern");
    openapiFields.add("enabled");
    openapiFields.add("loggingErrorBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("logFile");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FileBasedTraceLogPublisherShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FileBasedTraceLogPublisherShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileBasedTraceLogPublisherShared is not found in the empty JSON string", FileBasedTraceLogPublisherShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileBasedTraceLogPublisherShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("logFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFile").toString()));
      }
      if ((jsonObj.get("logFilePermissions") != null && !jsonObj.get("logFilePermissions").isJsonNull()) && !jsonObj.get("logFilePermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFilePermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFilePermissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rotationPolicy") != null && !jsonObj.get("rotationPolicy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotationPolicy` to be an array in the JSON string but got `%s`", jsonObj.get("rotationPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rotationListener") != null && !jsonObj.get("rotationListener").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotationListener` to be an array in the JSON string but got `%s`", jsonObj.get("rotationListener").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("retentionPolicy") != null && !jsonObj.get("retentionPolicy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionPolicy` to be an array in the JSON string but got `%s`", jsonObj.get("retentionPolicy").toString()));
      }
      if ((jsonObj.get("encryptionSettingsDefinitionID") != null && !jsonObj.get("encryptionSettingsDefinitionID").isJsonNull()) && !jsonObj.get("encryptionSettingsDefinitionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionSettingsDefinitionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionSettingsDefinitionID").toString()));
      }
      if ((jsonObj.get("bufferSize") != null && !jsonObj.get("bufferSize").isJsonNull()) && !jsonObj.get("bufferSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bufferSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bufferSize").toString()));
      }
      if ((jsonObj.get("timeInterval") != null && !jsonObj.get("timeInterval").isJsonNull()) && !jsonObj.get("timeInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeInterval").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("debugMessageType") != null && !jsonObj.get("debugMessageType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugMessageType` to be an array in the JSON string but got `%s`", jsonObj.get("debugMessageType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("httpMessageType") != null && !jsonObj.get("httpMessageType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMessageType` to be an array in the JSON string but got `%s`", jsonObj.get("httpMessageType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessTokenValidatorMessageType") != null && !jsonObj.get("accessTokenValidatorMessageType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTokenValidatorMessageType` to be an array in the JSON string but got `%s`", jsonObj.get("accessTokenValidatorMessageType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("idTokenValidatorMessageType") != null && !jsonObj.get("idTokenValidatorMessageType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `idTokenValidatorMessageType` to be an array in the JSON string but got `%s`", jsonObj.get("idTokenValidatorMessageType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scimMessageType") != null && !jsonObj.get("scimMessageType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scimMessageType` to be an array in the JSON string but got `%s`", jsonObj.get("scimMessageType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("consentMessageType") != null && !jsonObj.get("consentMessageType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentMessageType` to be an array in the JSON string but got `%s`", jsonObj.get("consentMessageType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("directoryRESTAPIMessageType") != null && !jsonObj.get("directoryRESTAPIMessageType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `directoryRESTAPIMessageType` to be an array in the JSON string but got `%s`", jsonObj.get("directoryRESTAPIMessageType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("extensionMessageType") != null && !jsonObj.get("extensionMessageType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `extensionMessageType` to be an array in the JSON string but got `%s`", jsonObj.get("extensionMessageType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includePathPattern") != null && !jsonObj.get("includePathPattern").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includePathPattern` to be an array in the JSON string but got `%s`", jsonObj.get("includePathPattern").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludePathPattern") != null && !jsonObj.get("excludePathPattern").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludePathPattern` to be an array in the JSON string but got `%s`", jsonObj.get("excludePathPattern").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileBasedTraceLogPublisherShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileBasedTraceLogPublisherShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileBasedTraceLogPublisherShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileBasedTraceLogPublisherShared.class));

       return (TypeAdapter<T>) new TypeAdapter<FileBasedTraceLogPublisherShared>() {
           @Override
           public void write(JsonWriter out, FileBasedTraceLogPublisherShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FileBasedTraceLogPublisherShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FileBasedTraceLogPublisherShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FileBasedTraceLogPublisherShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FileBasedTraceLogPublisherShared
  * @throws IOException if the JSON string is invalid with respect to FileBasedTraceLogPublisherShared
  */
  public static FileBasedTraceLogPublisherShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileBasedTraceLogPublisherShared.class);
  }

 /**
  * Convert an instance of FileBasedTraceLogPublisherShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

