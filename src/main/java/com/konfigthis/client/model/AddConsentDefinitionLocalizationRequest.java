/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumconsentDefinitionLocalizationSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddConsentDefinitionLocalizationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddConsentDefinitionLocalizationRequest {
  public static final String SERIALIZED_NAME_LOCALIZATION_NAME = "localizationName";
  @SerializedName(SERIALIZED_NAME_LOCALIZATION_NAME)
  private String localizationName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumconsentDefinitionLocalizationSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_TITLE_TEXT = "titleText";
  @SerializedName(SERIALIZED_NAME_TITLE_TEXT)
  private String titleText;

  public static final String SERIALIZED_NAME_DATA_TEXT = "dataText";
  @SerializedName(SERIALIZED_NAME_DATA_TEXT)
  private String dataText;

  public static final String SERIALIZED_NAME_PURPOSE_TEXT = "purposeText";
  @SerializedName(SERIALIZED_NAME_PURPOSE_TEXT)
  private String purposeText;

  public AddConsentDefinitionLocalizationRequest() {
  }

  public AddConsentDefinitionLocalizationRequest localizationName(String localizationName) {
    
    
    
    
    this.localizationName = localizationName;
    return this;
  }

   /**
   * Name of the new Consent Definition Localization
   * @return localizationName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Consent Definition Localization")

  public String getLocalizationName() {
    return localizationName;
  }


  public void setLocalizationName(String localizationName) {
    
    
    
    this.localizationName = localizationName;
  }


  public AddConsentDefinitionLocalizationRequest version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The version of this Consent Definition Localization, using the format MAJOR.MINOR.
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The version of this Consent Definition Localization, using the format MAJOR.MINOR.")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public AddConsentDefinitionLocalizationRequest schemas(List<EnumconsentDefinitionLocalizationSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddConsentDefinitionLocalizationRequest addSchemasItem(EnumconsentDefinitionLocalizationSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumconsentDefinitionLocalizationSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumconsentDefinitionLocalizationSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddConsentDefinitionLocalizationRequest locale(String locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * The locale of this Consent Definition Localization.
   * @return locale
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The locale of this Consent Definition Localization.")

  public String getLocale() {
    return locale;
  }


  public void setLocale(String locale) {
    
    
    
    this.locale = locale;
  }


  public AddConsentDefinitionLocalizationRequest titleText(String titleText) {
    
    
    
    
    this.titleText = titleText;
    return this;
  }

   /**
   * Localized text that may be used to provide a title or summary for a consent request or a granted consent.
   * @return titleText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Localized text that may be used to provide a title or summary for a consent request or a granted consent.")

  public String getTitleText() {
    return titleText;
  }


  public void setTitleText(String titleText) {
    
    
    
    this.titleText = titleText;
  }


  public AddConsentDefinitionLocalizationRequest dataText(String dataText) {
    
    
    
    
    this.dataText = dataText;
    return this;
  }

   /**
   * Localized text describing the data to be shared.
   * @return dataText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Localized text describing the data to be shared.")

  public String getDataText() {
    return dataText;
  }


  public void setDataText(String dataText) {
    
    
    
    this.dataText = dataText;
  }


  public AddConsentDefinitionLocalizationRequest purposeText(String purposeText) {
    
    
    
    
    this.purposeText = purposeText;
    return this;
  }

   /**
   * Localized text describing how the data is to be used.
   * @return purposeText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Localized text describing how the data is to be used.")

  public String getPurposeText() {
    return purposeText;
  }


  public void setPurposeText(String purposeText) {
    
    
    
    this.purposeText = purposeText;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddConsentDefinitionLocalizationRequest instance itself
   */
  public AddConsentDefinitionLocalizationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest = (AddConsentDefinitionLocalizationRequest) o;
    return Objects.equals(this.localizationName, addConsentDefinitionLocalizationRequest.localizationName) &&
        Objects.equals(this.version, addConsentDefinitionLocalizationRequest.version) &&
        Objects.equals(this.schemas, addConsentDefinitionLocalizationRequest.schemas) &&
        Objects.equals(this.locale, addConsentDefinitionLocalizationRequest.locale) &&
        Objects.equals(this.titleText, addConsentDefinitionLocalizationRequest.titleText) &&
        Objects.equals(this.dataText, addConsentDefinitionLocalizationRequest.dataText) &&
        Objects.equals(this.purposeText, addConsentDefinitionLocalizationRequest.purposeText)&&
        Objects.equals(this.additionalProperties, addConsentDefinitionLocalizationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localizationName, version, schemas, locale, titleText, dataText, purposeText, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddConsentDefinitionLocalizationRequest {\n");
    sb.append("    localizationName: ").append(toIndentedString(localizationName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    titleText: ").append(toIndentedString(titleText)).append("\n");
    sb.append("    dataText: ").append(toIndentedString(dataText)).append("\n");
    sb.append("    purposeText: ").append(toIndentedString(purposeText)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localizationName");
    openapiFields.add("version");
    openapiFields.add("schemas");
    openapiFields.add("locale");
    openapiFields.add("titleText");
    openapiFields.add("dataText");
    openapiFields.add("purposeText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("localizationName");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("dataText");
    openapiRequiredFields.add("purposeText");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddConsentDefinitionLocalizationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddConsentDefinitionLocalizationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddConsentDefinitionLocalizationRequest is not found in the empty JSON string", AddConsentDefinitionLocalizationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddConsentDefinitionLocalizationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("localizationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizationName").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if ((jsonObj.get("titleText") != null && !jsonObj.get("titleText").isJsonNull()) && !jsonObj.get("titleText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleText").toString()));
      }
      if (!jsonObj.get("dataText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataText").toString()));
      }
      if (!jsonObj.get("purposeText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purposeText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purposeText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddConsentDefinitionLocalizationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddConsentDefinitionLocalizationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddConsentDefinitionLocalizationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddConsentDefinitionLocalizationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddConsentDefinitionLocalizationRequest>() {
           @Override
           public void write(JsonWriter out, AddConsentDefinitionLocalizationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddConsentDefinitionLocalizationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddConsentDefinitionLocalizationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddConsentDefinitionLocalizationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddConsentDefinitionLocalizationRequest
  * @throws IOException if the JSON string is invalid with respect to AddConsentDefinitionLocalizationRequest
  */
  public static AddConsentDefinitionLocalizationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddConsentDefinitionLocalizationRequest.class);
  }

 /**
  * Convert an instance of AddConsentDefinitionLocalizationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

