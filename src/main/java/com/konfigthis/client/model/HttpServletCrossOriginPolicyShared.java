/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumhttpServletCrossOriginPolicySchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * HttpServletCrossOriginPolicyShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class HttpServletCrossOriginPolicyShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumhttpServletCrossOriginPolicySchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_CORS_ALLOWED_METHODS = "corsAllowedMethods";
  @SerializedName(SERIALIZED_NAME_CORS_ALLOWED_METHODS)
  private List<String> corsAllowedMethods = null;

  public static final String SERIALIZED_NAME_CORS_ALLOWED_ORIGINS = "corsAllowedOrigins";
  @SerializedName(SERIALIZED_NAME_CORS_ALLOWED_ORIGINS)
  private List<String> corsAllowedOrigins = null;

  public static final String SERIALIZED_NAME_CORS_EXPOSED_HEADERS = "corsExposedHeaders";
  @SerializedName(SERIALIZED_NAME_CORS_EXPOSED_HEADERS)
  private List<String> corsExposedHeaders = null;

  public static final String SERIALIZED_NAME_CORS_ALLOWED_HEADERS = "corsAllowedHeaders";
  @SerializedName(SERIALIZED_NAME_CORS_ALLOWED_HEADERS)
  private List<String> corsAllowedHeaders = null;

  public static final String SERIALIZED_NAME_CORS_PREFLIGHT_MAX_AGE = "corsPreflightMaxAge";
  @SerializedName(SERIALIZED_NAME_CORS_PREFLIGHT_MAX_AGE)
  private String corsPreflightMaxAge;

  public static final String SERIALIZED_NAME_CORS_ALLOW_CREDENTIALS = "corsAllowCredentials";
  @SerializedName(SERIALIZED_NAME_CORS_ALLOW_CREDENTIALS)
  private Boolean corsAllowCredentials;

  public HttpServletCrossOriginPolicyShared() {
  }

  public HttpServletCrossOriginPolicyShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this HTTP Servlet Cross Origin Policy
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this HTTP Servlet Cross Origin Policy")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public HttpServletCrossOriginPolicyShared schemas(List<EnumhttpServletCrossOriginPolicySchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public HttpServletCrossOriginPolicyShared addSchemasItem(EnumhttpServletCrossOriginPolicySchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumhttpServletCrossOriginPolicySchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumhttpServletCrossOriginPolicySchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public HttpServletCrossOriginPolicyShared corsAllowedMethods(List<String> corsAllowedMethods) {
    
    
    
    
    this.corsAllowedMethods = corsAllowedMethods;
    return this;
  }

  public HttpServletCrossOriginPolicyShared addCorsAllowedMethodsItem(String corsAllowedMethodsItem) {
    if (this.corsAllowedMethods == null) {
      this.corsAllowedMethods = new ArrayList<>();
    }
    this.corsAllowedMethods.add(corsAllowedMethodsItem);
    return this;
  }

   /**
   * A list of HTTP methods allowed for cross-origin access to resources. i.e. one or more of GET, POST, PUT, DELETE, etc.
   * @return corsAllowedMethods
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of HTTP methods allowed for cross-origin access to resources. i.e. one or more of GET, POST, PUT, DELETE, etc.")

  public List<String> getCorsAllowedMethods() {
    return corsAllowedMethods;
  }


  public void setCorsAllowedMethods(List<String> corsAllowedMethods) {
    
    
    
    this.corsAllowedMethods = corsAllowedMethods;
  }


  public HttpServletCrossOriginPolicyShared corsAllowedOrigins(List<String> corsAllowedOrigins) {
    
    
    
    
    this.corsAllowedOrigins = corsAllowedOrigins;
    return this;
  }

  public HttpServletCrossOriginPolicyShared addCorsAllowedOriginsItem(String corsAllowedOriginsItem) {
    if (this.corsAllowedOrigins == null) {
      this.corsAllowedOrigins = new ArrayList<>();
    }
    this.corsAllowedOrigins.add(corsAllowedOriginsItem);
    return this;
  }

   /**
   * A list of origins that are allowed to execute cross-origin requests.
   * @return corsAllowedOrigins
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of origins that are allowed to execute cross-origin requests.")

  public List<String> getCorsAllowedOrigins() {
    return corsAllowedOrigins;
  }


  public void setCorsAllowedOrigins(List<String> corsAllowedOrigins) {
    
    
    
    this.corsAllowedOrigins = corsAllowedOrigins;
  }


  public HttpServletCrossOriginPolicyShared corsExposedHeaders(List<String> corsExposedHeaders) {
    
    
    
    
    this.corsExposedHeaders = corsExposedHeaders;
    return this;
  }

  public HttpServletCrossOriginPolicyShared addCorsExposedHeadersItem(String corsExposedHeadersItem) {
    if (this.corsExposedHeaders == null) {
      this.corsExposedHeaders = new ArrayList<>();
    }
    this.corsExposedHeaders.add(corsExposedHeadersItem);
    return this;
  }

   /**
   * A list of HTTP headers other than the simple response headers that browsers are allowed to access.
   * @return corsExposedHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of HTTP headers other than the simple response headers that browsers are allowed to access.")

  public List<String> getCorsExposedHeaders() {
    return corsExposedHeaders;
  }


  public void setCorsExposedHeaders(List<String> corsExposedHeaders) {
    
    
    
    this.corsExposedHeaders = corsExposedHeaders;
  }


  public HttpServletCrossOriginPolicyShared corsAllowedHeaders(List<String> corsAllowedHeaders) {
    
    
    
    
    this.corsAllowedHeaders = corsAllowedHeaders;
    return this;
  }

  public HttpServletCrossOriginPolicyShared addCorsAllowedHeadersItem(String corsAllowedHeadersItem) {
    if (this.corsAllowedHeaders == null) {
      this.corsAllowedHeaders = new ArrayList<>();
    }
    this.corsAllowedHeaders.add(corsAllowedHeadersItem);
    return this;
  }

   /**
   * A list of HTTP headers that are supported by the resource and can be specified in a cross-origin request.
   * @return corsAllowedHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of HTTP headers that are supported by the resource and can be specified in a cross-origin request.")

  public List<String> getCorsAllowedHeaders() {
    return corsAllowedHeaders;
  }


  public void setCorsAllowedHeaders(List<String> corsAllowedHeaders) {
    
    
    
    this.corsAllowedHeaders = corsAllowedHeaders;
  }


  public HttpServletCrossOriginPolicyShared corsPreflightMaxAge(String corsPreflightMaxAge) {
    
    
    
    
    this.corsPreflightMaxAge = corsPreflightMaxAge;
    return this;
  }

   /**
   * The maximum amount of time that a preflight request can be cached by a client.
   * @return corsPreflightMaxAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum amount of time that a preflight request can be cached by a client.")

  public String getCorsPreflightMaxAge() {
    return corsPreflightMaxAge;
  }


  public void setCorsPreflightMaxAge(String corsPreflightMaxAge) {
    
    
    
    this.corsPreflightMaxAge = corsPreflightMaxAge;
  }


  public HttpServletCrossOriginPolicyShared corsAllowCredentials(Boolean corsAllowCredentials) {
    
    
    
    
    this.corsAllowCredentials = corsAllowCredentials;
    return this;
  }

   /**
   * Indicates whether the servlet extension allows CORS requests with username/password credentials.
   * @return corsAllowCredentials
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the servlet extension allows CORS requests with username/password credentials.")

  public Boolean getCorsAllowCredentials() {
    return corsAllowCredentials;
  }


  public void setCorsAllowCredentials(Boolean corsAllowCredentials) {
    
    
    
    this.corsAllowCredentials = corsAllowCredentials;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the HttpServletCrossOriginPolicyShared instance itself
   */
  public HttpServletCrossOriginPolicyShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpServletCrossOriginPolicyShared httpServletCrossOriginPolicyShared = (HttpServletCrossOriginPolicyShared) o;
    return Objects.equals(this.description, httpServletCrossOriginPolicyShared.description) &&
        Objects.equals(this.schemas, httpServletCrossOriginPolicyShared.schemas) &&
        Objects.equals(this.corsAllowedMethods, httpServletCrossOriginPolicyShared.corsAllowedMethods) &&
        Objects.equals(this.corsAllowedOrigins, httpServletCrossOriginPolicyShared.corsAllowedOrigins) &&
        Objects.equals(this.corsExposedHeaders, httpServletCrossOriginPolicyShared.corsExposedHeaders) &&
        Objects.equals(this.corsAllowedHeaders, httpServletCrossOriginPolicyShared.corsAllowedHeaders) &&
        Objects.equals(this.corsPreflightMaxAge, httpServletCrossOriginPolicyShared.corsPreflightMaxAge) &&
        Objects.equals(this.corsAllowCredentials, httpServletCrossOriginPolicyShared.corsAllowCredentials)&&
        Objects.equals(this.additionalProperties, httpServletCrossOriginPolicyShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, corsAllowedMethods, corsAllowedOrigins, corsExposedHeaders, corsAllowedHeaders, corsPreflightMaxAge, corsAllowCredentials, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpServletCrossOriginPolicyShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    corsAllowedMethods: ").append(toIndentedString(corsAllowedMethods)).append("\n");
    sb.append("    corsAllowedOrigins: ").append(toIndentedString(corsAllowedOrigins)).append("\n");
    sb.append("    corsExposedHeaders: ").append(toIndentedString(corsExposedHeaders)).append("\n");
    sb.append("    corsAllowedHeaders: ").append(toIndentedString(corsAllowedHeaders)).append("\n");
    sb.append("    corsPreflightMaxAge: ").append(toIndentedString(corsPreflightMaxAge)).append("\n");
    sb.append("    corsAllowCredentials: ").append(toIndentedString(corsAllowCredentials)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("corsAllowedMethods");
    openapiFields.add("corsAllowedOrigins");
    openapiFields.add("corsExposedHeaders");
    openapiFields.add("corsAllowedHeaders");
    openapiFields.add("corsPreflightMaxAge");
    openapiFields.add("corsAllowCredentials");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HttpServletCrossOriginPolicyShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HttpServletCrossOriginPolicyShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpServletCrossOriginPolicyShared is not found in the empty JSON string", HttpServletCrossOriginPolicyShared.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("corsAllowedMethods") != null && !jsonObj.get("corsAllowedMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `corsAllowedMethods` to be an array in the JSON string but got `%s`", jsonObj.get("corsAllowedMethods").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("corsAllowedOrigins") != null && !jsonObj.get("corsAllowedOrigins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `corsAllowedOrigins` to be an array in the JSON string but got `%s`", jsonObj.get("corsAllowedOrigins").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("corsExposedHeaders") != null && !jsonObj.get("corsExposedHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `corsExposedHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("corsExposedHeaders").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("corsAllowedHeaders") != null && !jsonObj.get("corsAllowedHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `corsAllowedHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("corsAllowedHeaders").toString()));
      }
      if ((jsonObj.get("corsPreflightMaxAge") != null && !jsonObj.get("corsPreflightMaxAge").isJsonNull()) && !jsonObj.get("corsPreflightMaxAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corsPreflightMaxAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corsPreflightMaxAge").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpServletCrossOriginPolicyShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpServletCrossOriginPolicyShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpServletCrossOriginPolicyShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpServletCrossOriginPolicyShared.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpServletCrossOriginPolicyShared>() {
           @Override
           public void write(JsonWriter out, HttpServletCrossOriginPolicyShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpServletCrossOriginPolicyShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             HttpServletCrossOriginPolicyShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HttpServletCrossOriginPolicyShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HttpServletCrossOriginPolicyShared
  * @throws IOException if the JSON string is invalid with respect to HttpServletCrossOriginPolicyShared
  */
  public static HttpServletCrossOriginPolicyShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpServletCrossOriginPolicyShared.class);
  }

 /**
  * Convert an instance of HttpServletCrossOriginPolicyShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

