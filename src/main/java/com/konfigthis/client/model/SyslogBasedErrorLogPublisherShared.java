/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumlogPublisherDefaultSeverityProp;
import com.konfigthis.client.model.EnumlogPublisherLoggingErrorBehaviorProp;
import com.konfigthis.client.model.EnumsyslogBasedErrorLogPublisherSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SyslogBasedErrorLogPublisherShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SyslogBasedErrorLogPublisherShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumsyslogBasedErrorLogPublisherSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SERVER_HOST_NAME = "serverHostName";
  @SerializedName(SERIALIZED_NAME_SERVER_HOST_NAME)
  private String serverHostName;

  public static final String SERIALIZED_NAME_SERVER_PORT = "serverPort";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public static final String SERIALIZED_NAME_SYSLOG_FACILITY = "syslogFacility";
  @SerializedName(SERIALIZED_NAME_SYSLOG_FACILITY)
  private Integer syslogFacility;

  public static final String SERIALIZED_NAME_AUTO_FLUSH = "autoFlush";
  @SerializedName(SERIALIZED_NAME_AUTO_FLUSH)
  private Boolean autoFlush;

  public static final String SERIALIZED_NAME_ASYNCHRONOUS = "asynchronous";
  @SerializedName(SERIALIZED_NAME_ASYNCHRONOUS)
  private Boolean asynchronous;

  public static final String SERIALIZED_NAME_QUEUE_SIZE = "queueSize";
  @SerializedName(SERIALIZED_NAME_QUEUE_SIZE)
  private Integer queueSize;

  public static final String SERIALIZED_NAME_DEFAULT_SEVERITY = "defaultSeverity";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SEVERITY)
  private List<EnumlogPublisherDefaultSeverityProp> defaultSeverity = null;

  public static final String SERIALIZED_NAME_OVERRIDE_SEVERITY = "overrideSeverity";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_SEVERITY)
  private List<String> overrideSeverity = null;

  public static final String SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR = "loggingErrorBehavior";
  @SerializedName(SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR)
  private EnumlogPublisherLoggingErrorBehaviorProp loggingErrorBehavior;

  public SyslogBasedErrorLogPublisherShared() {
  }

  public SyslogBasedErrorLogPublisherShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Log Publisher
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Log Publisher")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public SyslogBasedErrorLogPublisherShared schemas(List<EnumsyslogBasedErrorLogPublisherSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public SyslogBasedErrorLogPublisherShared addSchemasItem(EnumsyslogBasedErrorLogPublisherSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumsyslogBasedErrorLogPublisherSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumsyslogBasedErrorLogPublisherSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public SyslogBasedErrorLogPublisherShared enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Syslog Based Error Log Publisher is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Syslog Based Error Log Publisher is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public SyslogBasedErrorLogPublisherShared serverHostName(String serverHostName) {
    
    
    
    
    this.serverHostName = serverHostName;
    return this;
  }

   /**
   * Specifies the hostname or IP address of the syslogd host to log to. It is highly recommend to use localhost.
   * @return serverHostName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the hostname or IP address of the syslogd host to log to. It is highly recommend to use localhost.")

  public String getServerHostName() {
    return serverHostName;
  }


  public void setServerHostName(String serverHostName) {
    
    
    
    this.serverHostName = serverHostName;
  }


  public SyslogBasedErrorLogPublisherShared serverPort(Integer serverPort) {
    
    
    
    
    this.serverPort = serverPort;
    return this;
  }

   /**
   * Specifies the port number of the syslogd host to log to.
   * @return serverPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the port number of the syslogd host to log to.")

  public Integer getServerPort() {
    return serverPort;
  }


  public void setServerPort(Integer serverPort) {
    
    
    
    this.serverPort = serverPort;
  }


  public SyslogBasedErrorLogPublisherShared syslogFacility(Integer syslogFacility) {
    
    
    
    
    this.syslogFacility = syslogFacility;
    return this;
  }

   /**
   * Specifies the syslog facility to use for this Syslog Based Error Log Publisher
   * @return syslogFacility
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the syslog facility to use for this Syslog Based Error Log Publisher")

  public Integer getSyslogFacility() {
    return syslogFacility;
  }


  public void setSyslogFacility(Integer syslogFacility) {
    
    
    
    this.syslogFacility = syslogFacility;
  }


  public SyslogBasedErrorLogPublisherShared autoFlush(Boolean autoFlush) {
    
    
    
    
    this.autoFlush = autoFlush;
    return this;
  }

   /**
   * Specifies whether to flush the writer after every log record.
   * @return autoFlush
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether to flush the writer after every log record.")

  public Boolean getAutoFlush() {
    return autoFlush;
  }


  public void setAutoFlush(Boolean autoFlush) {
    
    
    
    this.autoFlush = autoFlush;
  }


  public SyslogBasedErrorLogPublisherShared asynchronous(Boolean asynchronous) {
    
    
    
    
    this.asynchronous = asynchronous;
    return this;
  }

   /**
   * Indicates whether the Syslog Based Error Log Publisher will publish records asynchronously.
   * @return asynchronous
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the Syslog Based Error Log Publisher will publish records asynchronously.")

  public Boolean getAsynchronous() {
    return asynchronous;
  }


  public void setAsynchronous(Boolean asynchronous) {
    
    
    
    this.asynchronous = asynchronous;
  }


  public SyslogBasedErrorLogPublisherShared queueSize(Integer queueSize) {
    
    
    
    
    this.queueSize = queueSize;
    return this;
  }

   /**
   * The maximum number of log records that can be stored in the asynchronous queue.
   * @return queueSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of log records that can be stored in the asynchronous queue.")

  public Integer getQueueSize() {
    return queueSize;
  }


  public void setQueueSize(Integer queueSize) {
    
    
    
    this.queueSize = queueSize;
  }


  public SyslogBasedErrorLogPublisherShared defaultSeverity(List<EnumlogPublisherDefaultSeverityProp> defaultSeverity) {
    
    
    
    
    this.defaultSeverity = defaultSeverity;
    return this;
  }

  public SyslogBasedErrorLogPublisherShared addDefaultSeverityItem(EnumlogPublisherDefaultSeverityProp defaultSeverityItem) {
    if (this.defaultSeverity == null) {
      this.defaultSeverity = new ArrayList<>();
    }
    this.defaultSeverity.add(defaultSeverityItem);
    return this;
  }

   /**
   * Get defaultSeverity
   * @return defaultSeverity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlogPublisherDefaultSeverityProp> getDefaultSeverity() {
    return defaultSeverity;
  }


  public void setDefaultSeverity(List<EnumlogPublisherDefaultSeverityProp> defaultSeverity) {
    
    
    
    this.defaultSeverity = defaultSeverity;
  }


  public SyslogBasedErrorLogPublisherShared overrideSeverity(List<String> overrideSeverity) {
    
    
    
    
    this.overrideSeverity = overrideSeverity;
    return this;
  }

  public SyslogBasedErrorLogPublisherShared addOverrideSeverityItem(String overrideSeverityItem) {
    if (this.overrideSeverity == null) {
      this.overrideSeverity = new ArrayList<>();
    }
    this.overrideSeverity.add(overrideSeverityItem);
    return this;
  }

   /**
   * Specifies the override severity levels for the logger based on the category of the messages.
   * @return overrideSeverity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the override severity levels for the logger based on the category of the messages.")

  public List<String> getOverrideSeverity() {
    return overrideSeverity;
  }


  public void setOverrideSeverity(List<String> overrideSeverity) {
    
    
    
    this.overrideSeverity = overrideSeverity;
  }


  public SyslogBasedErrorLogPublisherShared loggingErrorBehavior(EnumlogPublisherLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
    return this;
  }

   /**
   * Get loggingErrorBehavior
   * @return loggingErrorBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumlogPublisherLoggingErrorBehaviorProp getLoggingErrorBehavior() {
    return loggingErrorBehavior;
  }


  public void setLoggingErrorBehavior(EnumlogPublisherLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SyslogBasedErrorLogPublisherShared instance itself
   */
  public SyslogBasedErrorLogPublisherShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyslogBasedErrorLogPublisherShared syslogBasedErrorLogPublisherShared = (SyslogBasedErrorLogPublisherShared) o;
    return Objects.equals(this.description, syslogBasedErrorLogPublisherShared.description) &&
        Objects.equals(this.schemas, syslogBasedErrorLogPublisherShared.schemas) &&
        Objects.equals(this.enabled, syslogBasedErrorLogPublisherShared.enabled) &&
        Objects.equals(this.serverHostName, syslogBasedErrorLogPublisherShared.serverHostName) &&
        Objects.equals(this.serverPort, syslogBasedErrorLogPublisherShared.serverPort) &&
        Objects.equals(this.syslogFacility, syslogBasedErrorLogPublisherShared.syslogFacility) &&
        Objects.equals(this.autoFlush, syslogBasedErrorLogPublisherShared.autoFlush) &&
        Objects.equals(this.asynchronous, syslogBasedErrorLogPublisherShared.asynchronous) &&
        Objects.equals(this.queueSize, syslogBasedErrorLogPublisherShared.queueSize) &&
        Objects.equals(this.defaultSeverity, syslogBasedErrorLogPublisherShared.defaultSeverity) &&
        Objects.equals(this.overrideSeverity, syslogBasedErrorLogPublisherShared.overrideSeverity) &&
        Objects.equals(this.loggingErrorBehavior, syslogBasedErrorLogPublisherShared.loggingErrorBehavior)&&
        Objects.equals(this.additionalProperties, syslogBasedErrorLogPublisherShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, enabled, serverHostName, serverPort, syslogFacility, autoFlush, asynchronous, queueSize, defaultSeverity, overrideSeverity, loggingErrorBehavior, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyslogBasedErrorLogPublisherShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    serverHostName: ").append(toIndentedString(serverHostName)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    syslogFacility: ").append(toIndentedString(syslogFacility)).append("\n");
    sb.append("    autoFlush: ").append(toIndentedString(autoFlush)).append("\n");
    sb.append("    asynchronous: ").append(toIndentedString(asynchronous)).append("\n");
    sb.append("    queueSize: ").append(toIndentedString(queueSize)).append("\n");
    sb.append("    defaultSeverity: ").append(toIndentedString(defaultSeverity)).append("\n");
    sb.append("    overrideSeverity: ").append(toIndentedString(overrideSeverity)).append("\n");
    sb.append("    loggingErrorBehavior: ").append(toIndentedString(loggingErrorBehavior)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("enabled");
    openapiFields.add("serverHostName");
    openapiFields.add("serverPort");
    openapiFields.add("syslogFacility");
    openapiFields.add("autoFlush");
    openapiFields.add("asynchronous");
    openapiFields.add("queueSize");
    openapiFields.add("defaultSeverity");
    openapiFields.add("overrideSeverity");
    openapiFields.add("loggingErrorBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SyslogBasedErrorLogPublisherShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SyslogBasedErrorLogPublisherShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyslogBasedErrorLogPublisherShared is not found in the empty JSON string", SyslogBasedErrorLogPublisherShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SyslogBasedErrorLogPublisherShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("serverHostName") != null && !jsonObj.get("serverHostName").isJsonNull()) && !jsonObj.get("serverHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverHostName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultSeverity") != null && !jsonObj.get("defaultSeverity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSeverity` to be an array in the JSON string but got `%s`", jsonObj.get("defaultSeverity").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("overrideSeverity") != null && !jsonObj.get("overrideSeverity").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `overrideSeverity` to be an array in the JSON string but got `%s`", jsonObj.get("overrideSeverity").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyslogBasedErrorLogPublisherShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyslogBasedErrorLogPublisherShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyslogBasedErrorLogPublisherShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyslogBasedErrorLogPublisherShared.class));

       return (TypeAdapter<T>) new TypeAdapter<SyslogBasedErrorLogPublisherShared>() {
           @Override
           public void write(JsonWriter out, SyslogBasedErrorLogPublisherShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SyslogBasedErrorLogPublisherShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SyslogBasedErrorLogPublisherShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SyslogBasedErrorLogPublisherShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SyslogBasedErrorLogPublisherShared
  * @throws IOException if the JSON string is invalid with respect to SyslogBasedErrorLogPublisherShared
  */
  public static SyslogBasedErrorLogPublisherShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyslogBasedErrorLogPublisherShared.class);
  }

 /**
  * Convert an instance of SyslogBasedErrorLogPublisherShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

