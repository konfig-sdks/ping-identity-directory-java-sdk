/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumbackendIncludeVirtualAttributesProp;
import com.konfigthis.client.model.EnumbackendReportExcludedChangelogAttributesProp;
import com.konfigthis.client.model.EnumbackendSoftDeleteEntryIncludedOperationProp;
import com.konfigthis.client.model.EnumchangelogBackendSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ChangelogBackendResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ChangelogBackendResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumchangelogBackendSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BASE_D_N = "baseDN";
  @SerializedName(SERIALIZED_NAME_BASE_D_N)
  private List<String> baseDN = new ArrayList<>();

  public static final String SERIALIZED_NAME_DB_DIRECTORY = "dbDirectory";
  @SerializedName(SERIALIZED_NAME_DB_DIRECTORY)
  private String dbDirectory;

  public static final String SERIALIZED_NAME_DB_DIRECTORY_PERMISSIONS = "dbDirectoryPermissions";
  @SerializedName(SERIALIZED_NAME_DB_DIRECTORY_PERMISSIONS)
  private String dbDirectoryPermissions;

  public static final String SERIALIZED_NAME_DB_CACHE_PERCENT = "dbCachePercent";
  @SerializedName(SERIALIZED_NAME_DB_CACHE_PERCENT)
  private Integer dbCachePercent;

  public static final String SERIALIZED_NAME_JE_PROPERTY = "jeProperty";
  @SerializedName(SERIALIZED_NAME_JE_PROPERTY)
  private List<String> jeProperty = null;

  public static final String SERIALIZED_NAME_CHANGELOG_WRITE_BATCH_SIZE = "changelogWriteBatchSize";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_WRITE_BATCH_SIZE)
  private Integer changelogWriteBatchSize;

  public static final String SERIALIZED_NAME_CHANGELOG_PURGE_BATCH_SIZE = "changelogPurgeBatchSize";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_PURGE_BATCH_SIZE)
  private Integer changelogPurgeBatchSize;

  public static final String SERIALIZED_NAME_CHANGELOG_WRITE_QUEUE_CAPACITY = "changelogWriteQueueCapacity";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_WRITE_QUEUE_CAPACITY)
  private Integer changelogWriteQueueCapacity;

  public static final String SERIALIZED_NAME_INDEX_INCLUDE_ATTRIBUTE = "indexIncludeAttribute";
  @SerializedName(SERIALIZED_NAME_INDEX_INCLUDE_ATTRIBUTE)
  private List<String> indexIncludeAttribute = null;

  public static final String SERIALIZED_NAME_INDEX_EXCLUDE_ATTRIBUTE = "indexExcludeAttribute";
  @SerializedName(SERIALIZED_NAME_INDEX_EXCLUDE_ATTRIBUTE)
  private List<String> indexExcludeAttribute = null;

  public static final String SERIALIZED_NAME_CHANGELOG_MAXIMUM_AGE = "changelogMaximumAge";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_MAXIMUM_AGE)
  private String changelogMaximumAge;

  public static final String SERIALIZED_NAME_TARGET_DATABASE_SIZE = "targetDatabaseSize";
  @SerializedName(SERIALIZED_NAME_TARGET_DATABASE_SIZE)
  private String targetDatabaseSize;

  public static final String SERIALIZED_NAME_CHANGELOG_ENTRY_INCLUDE_BASE_D_N = "changelogEntryIncludeBaseDN";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_ENTRY_INCLUDE_BASE_D_N)
  private List<String> changelogEntryIncludeBaseDN = null;

  public static final String SERIALIZED_NAME_CHANGELOG_ENTRY_EXCLUDE_BASE_D_N = "changelogEntryExcludeBaseDN";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_ENTRY_EXCLUDE_BASE_D_N)
  private List<String> changelogEntryExcludeBaseDN = null;

  public static final String SERIALIZED_NAME_CHANGELOG_ENTRY_INCLUDE_FILTER = "changelogEntryIncludeFilter";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_ENTRY_INCLUDE_FILTER)
  private List<String> changelogEntryIncludeFilter = null;

  public static final String SERIALIZED_NAME_CHANGELOG_ENTRY_EXCLUDE_FILTER = "changelogEntryExcludeFilter";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_ENTRY_EXCLUDE_FILTER)
  private List<String> changelogEntryExcludeFilter = null;

  public static final String SERIALIZED_NAME_CHANGELOG_INCLUDE_ATTRIBUTE = "changelogIncludeAttribute";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_INCLUDE_ATTRIBUTE)
  private List<String> changelogIncludeAttribute = null;

  public static final String SERIALIZED_NAME_CHANGELOG_EXCLUDE_ATTRIBUTE = "changelogExcludeAttribute";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_EXCLUDE_ATTRIBUTE)
  private List<String> changelogExcludeAttribute = null;

  public static final String SERIALIZED_NAME_CHANGELOG_DELETED_ENTRY_INCLUDE_ATTRIBUTE = "changelogDeletedEntryIncludeAttribute";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_DELETED_ENTRY_INCLUDE_ATTRIBUTE)
  private List<String> changelogDeletedEntryIncludeAttribute = null;

  public static final String SERIALIZED_NAME_CHANGELOG_DELETED_ENTRY_EXCLUDE_ATTRIBUTE = "changelogDeletedEntryExcludeAttribute";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_DELETED_ENTRY_EXCLUDE_ATTRIBUTE)
  private List<String> changelogDeletedEntryExcludeAttribute = null;

  public static final String SERIALIZED_NAME_CHANGELOG_INCLUDE_KEY_ATTRIBUTE = "changelogIncludeKeyAttribute";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_INCLUDE_KEY_ATTRIBUTE)
  private List<String> changelogIncludeKeyAttribute = null;

  public static final String SERIALIZED_NAME_CHANGELOG_MAX_BEFORE_AFTER_VALUES = "changelogMaxBeforeAfterValues";
  @SerializedName(SERIALIZED_NAME_CHANGELOG_MAX_BEFORE_AFTER_VALUES)
  private Integer changelogMaxBeforeAfterValues;

  public static final String SERIALIZED_NAME_WRITE_LASTMOD_ATTRIBUTES = "writeLastmodAttributes";
  @SerializedName(SERIALIZED_NAME_WRITE_LASTMOD_ATTRIBUTES)
  private Boolean writeLastmodAttributes;

  public static final String SERIALIZED_NAME_USE_REVERSIBLE_FORM = "useReversibleForm";
  @SerializedName(SERIALIZED_NAME_USE_REVERSIBLE_FORM)
  private Boolean useReversibleForm;

  public static final String SERIALIZED_NAME_INCLUDE_VIRTUAL_ATTRIBUTES = "includeVirtualAttributes";
  @SerializedName(SERIALIZED_NAME_INCLUDE_VIRTUAL_ATTRIBUTES)
  private List<EnumbackendIncludeVirtualAttributesProp> includeVirtualAttributes = null;

  public static final String SERIALIZED_NAME_APPLY_ACCESS_CONTROLS_TO_CHANGELOG_ENTRY_CONTENTS = "applyAccessControlsToChangelogEntryContents";
  @SerializedName(SERIALIZED_NAME_APPLY_ACCESS_CONTROLS_TO_CHANGELOG_ENTRY_CONTENTS)
  private Boolean applyAccessControlsToChangelogEntryContents;

  public static final String SERIALIZED_NAME_REPORT_EXCLUDED_CHANGELOG_ATTRIBUTES = "reportExcludedChangelogAttributes";
  @SerializedName(SERIALIZED_NAME_REPORT_EXCLUDED_CHANGELOG_ATTRIBUTES)
  private EnumbackendReportExcludedChangelogAttributesProp reportExcludedChangelogAttributes;

  public static final String SERIALIZED_NAME_SOFT_DELETE_ENTRY_INCLUDED_OPERATION = "softDeleteEntryIncludedOperation";
  @SerializedName(SERIALIZED_NAME_SOFT_DELETE_ENTRY_INCLUDED_OPERATION)
  private List<EnumbackendSoftDeleteEntryIncludedOperationProp> softDeleteEntryIncludedOperation = null;

  public static final String SERIALIZED_NAME_BACKEND_I_D = "backendID";
  @SerializedName(SERIALIZED_NAME_BACKEND_I_D)
  private String backendID;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED = "setDegradedAlertWhenDisabled";
  @SerializedName(SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED)
  private Boolean setDegradedAlertWhenDisabled;

  public static final String SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED = "returnUnavailableWhenDisabled";
  @SerializedName(SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED)
  private Boolean returnUnavailableWhenDisabled;

  public static final String SERIALIZED_NAME_NOTIFICATION_MANAGER = "notificationManager";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_MANAGER)
  private String notificationManager;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public ChangelogBackendResponse() {
  }

  public ChangelogBackendResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Backend
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Backend")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ChangelogBackendResponse schemas(List<EnumchangelogBackendSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public ChangelogBackendResponse addSchemasItem(EnumchangelogBackendSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumchangelogBackendSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumchangelogBackendSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public ChangelogBackendResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Backend
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Backend")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ChangelogBackendResponse baseDN(List<String> baseDN) {
    
    
    
    
    this.baseDN = baseDN;
    return this;
  }

  public ChangelogBackendResponse addBaseDNItem(String baseDNItem) {
    this.baseDN.add(baseDNItem);
    return this;
  }

   /**
   * Specifies the base DN(s) for the data that the backend handles.
   * @return baseDN
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the base DN(s) for the data that the backend handles.")

  public List<String> getBaseDN() {
    return baseDN;
  }


  public void setBaseDN(List<String> baseDN) {
    
    
    
    this.baseDN = baseDN;
  }


  public ChangelogBackendResponse dbDirectory(String dbDirectory) {
    
    
    
    
    this.dbDirectory = dbDirectory;
    return this;
  }

   /**
   * Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.
   * @return dbDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.")

  public String getDbDirectory() {
    return dbDirectory;
  }


  public void setDbDirectory(String dbDirectory) {
    
    
    
    this.dbDirectory = dbDirectory;
  }


  public ChangelogBackendResponse dbDirectoryPermissions(String dbDirectoryPermissions) {
    
    
    
    
    this.dbDirectoryPermissions = dbDirectoryPermissions;
    return this;
  }

   /**
   * Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup of the backend.
   * @return dbDirectoryPermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup of the backend.")

  public String getDbDirectoryPermissions() {
    return dbDirectoryPermissions;
  }


  public void setDbDirectoryPermissions(String dbDirectoryPermissions) {
    
    
    
    this.dbDirectoryPermissions = dbDirectoryPermissions;
  }


  public ChangelogBackendResponse dbCachePercent(Integer dbCachePercent) {
    
    
    
    
    this.dbCachePercent = dbCachePercent;
    return this;
  }

   /**
   * Specifies the percentage of JVM memory to allocate to the changelog database cache.
   * @return dbCachePercent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the percentage of JVM memory to allocate to the changelog database cache.")

  public Integer getDbCachePercent() {
    return dbCachePercent;
  }


  public void setDbCachePercent(Integer dbCachePercent) {
    
    
    
    this.dbCachePercent = dbCachePercent;
  }


  public ChangelogBackendResponse jeProperty(List<String> jeProperty) {
    
    
    
    
    this.jeProperty = jeProperty;
    return this;
  }

  public ChangelogBackendResponse addJePropertyItem(String jePropertyItem) {
    if (this.jeProperty == null) {
      this.jeProperty = new ArrayList<>();
    }
    this.jeProperty.add(jePropertyItem);
    return this;
  }

   /**
   * Specifies the database and environment properties for the Berkeley DB Java Edition database for this changelog backend.
   * @return jeProperty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the database and environment properties for the Berkeley DB Java Edition database for this changelog backend.")

  public List<String> getJeProperty() {
    return jeProperty;
  }


  public void setJeProperty(List<String> jeProperty) {
    
    
    
    this.jeProperty = jeProperty;
  }


  public ChangelogBackendResponse changelogWriteBatchSize(Integer changelogWriteBatchSize) {
    
    
    
    
    this.changelogWriteBatchSize = changelogWriteBatchSize;
    return this;
  }

   /**
   * Specifies the number of changelog entries written in a single database transaction.
   * @return changelogWriteBatchSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of changelog entries written in a single database transaction.")

  public Integer getChangelogWriteBatchSize() {
    return changelogWriteBatchSize;
  }


  public void setChangelogWriteBatchSize(Integer changelogWriteBatchSize) {
    
    
    
    this.changelogWriteBatchSize = changelogWriteBatchSize;
  }


  public ChangelogBackendResponse changelogPurgeBatchSize(Integer changelogPurgeBatchSize) {
    
    
    
    
    this.changelogPurgeBatchSize = changelogPurgeBatchSize;
    return this;
  }

   /**
   * Specifies the number of changelog entries purged in a single database transaction.
   * @return changelogPurgeBatchSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of changelog entries purged in a single database transaction.")

  public Integer getChangelogPurgeBatchSize() {
    return changelogPurgeBatchSize;
  }


  public void setChangelogPurgeBatchSize(Integer changelogPurgeBatchSize) {
    
    
    
    this.changelogPurgeBatchSize = changelogPurgeBatchSize;
  }


  public ChangelogBackendResponse changelogWriteQueueCapacity(Integer changelogWriteQueueCapacity) {
    
    
    
    
    this.changelogWriteQueueCapacity = changelogWriteQueueCapacity;
    return this;
  }

   /**
   * Specifies the capacity of the changelog write queue in number of changes.
   * @return changelogWriteQueueCapacity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the capacity of the changelog write queue in number of changes.")

  public Integer getChangelogWriteQueueCapacity() {
    return changelogWriteQueueCapacity;
  }


  public void setChangelogWriteQueueCapacity(Integer changelogWriteQueueCapacity) {
    
    
    
    this.changelogWriteQueueCapacity = changelogWriteQueueCapacity;
  }


  public ChangelogBackendResponse indexIncludeAttribute(List<String> indexIncludeAttribute) {
    
    
    
    
    this.indexIncludeAttribute = indexIncludeAttribute;
    return this;
  }

  public ChangelogBackendResponse addIndexIncludeAttributeItem(String indexIncludeAttributeItem) {
    if (this.indexIncludeAttribute == null) {
      this.indexIncludeAttribute = new ArrayList<>();
    }
    this.indexIncludeAttribute.add(indexIncludeAttributeItem);
    return this;
  }

   /**
   * Specifies which attribute types are to be specifically included in the set of attribute indexes maintained on the changelog. If this property does not have any values then no attribute types are indexed.
   * @return indexIncludeAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies which attribute types are to be specifically included in the set of attribute indexes maintained on the changelog. If this property does not have any values then no attribute types are indexed.")

  public List<String> getIndexIncludeAttribute() {
    return indexIncludeAttribute;
  }


  public void setIndexIncludeAttribute(List<String> indexIncludeAttribute) {
    
    
    
    this.indexIncludeAttribute = indexIncludeAttribute;
  }


  public ChangelogBackendResponse indexExcludeAttribute(List<String> indexExcludeAttribute) {
    
    
    
    
    this.indexExcludeAttribute = indexExcludeAttribute;
    return this;
  }

  public ChangelogBackendResponse addIndexExcludeAttributeItem(String indexExcludeAttributeItem) {
    if (this.indexExcludeAttribute == null) {
      this.indexExcludeAttribute = new ArrayList<>();
    }
    this.indexExcludeAttribute.add(indexExcludeAttributeItem);
    return this;
  }

   /**
   * Specifies which attribute types are to be specifically excluded from the set of attribute indexes maintained on the changelog. This property is useful when the index-include-attribute property contains one of the special values \&quot;*\&quot; and \&quot;+\&quot;.
   * @return indexExcludeAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies which attribute types are to be specifically excluded from the set of attribute indexes maintained on the changelog. This property is useful when the index-include-attribute property contains one of the special values \"*\" and \"+\".")

  public List<String> getIndexExcludeAttribute() {
    return indexExcludeAttribute;
  }


  public void setIndexExcludeAttribute(List<String> indexExcludeAttribute) {
    
    
    
    this.indexExcludeAttribute = indexExcludeAttribute;
  }


  public ChangelogBackendResponse changelogMaximumAge(String changelogMaximumAge) {
    
    
    
    
    this.changelogMaximumAge = changelogMaximumAge;
    return this;
  }

   /**
   * Changes are guaranteed to be maintained in the changelog database for at least this duration. Setting target-database-size can allow additional changes to be maintained up to the configured size on disk.
   * @return changelogMaximumAge
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Changes are guaranteed to be maintained in the changelog database for at least this duration. Setting target-database-size can allow additional changes to be maintained up to the configured size on disk.")

  public String getChangelogMaximumAge() {
    return changelogMaximumAge;
  }


  public void setChangelogMaximumAge(String changelogMaximumAge) {
    
    
    
    this.changelogMaximumAge = changelogMaximumAge;
  }


  public ChangelogBackendResponse targetDatabaseSize(String targetDatabaseSize) {
    
    
    
    
    this.targetDatabaseSize = targetDatabaseSize;
    return this;
  }

   /**
   * The changelog database is allowed to grow up to this size on disk even if changes are older than the configured changelog-maximum-age.
   * @return targetDatabaseSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The changelog database is allowed to grow up to this size on disk even if changes are older than the configured changelog-maximum-age.")

  public String getTargetDatabaseSize() {
    return targetDatabaseSize;
  }


  public void setTargetDatabaseSize(String targetDatabaseSize) {
    
    
    
    this.targetDatabaseSize = targetDatabaseSize;
  }


  public ChangelogBackendResponse changelogEntryIncludeBaseDN(List<String> changelogEntryIncludeBaseDN) {
    
    
    
    
    this.changelogEntryIncludeBaseDN = changelogEntryIncludeBaseDN;
    return this;
  }

  public ChangelogBackendResponse addChangelogEntryIncludeBaseDNItem(String changelogEntryIncludeBaseDNItem) {
    if (this.changelogEntryIncludeBaseDN == null) {
      this.changelogEntryIncludeBaseDN = new ArrayList<>();
    }
    this.changelogEntryIncludeBaseDN.add(changelogEntryIncludeBaseDNItem);
    return this;
  }

   /**
   * The base DNs for branches in the data for which to record changes in the changelog.
   * @return changelogEntryIncludeBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The base DNs for branches in the data for which to record changes in the changelog.")

  public List<String> getChangelogEntryIncludeBaseDN() {
    return changelogEntryIncludeBaseDN;
  }


  public void setChangelogEntryIncludeBaseDN(List<String> changelogEntryIncludeBaseDN) {
    
    
    
    this.changelogEntryIncludeBaseDN = changelogEntryIncludeBaseDN;
  }


  public ChangelogBackendResponse changelogEntryExcludeBaseDN(List<String> changelogEntryExcludeBaseDN) {
    
    
    
    
    this.changelogEntryExcludeBaseDN = changelogEntryExcludeBaseDN;
    return this;
  }

  public ChangelogBackendResponse addChangelogEntryExcludeBaseDNItem(String changelogEntryExcludeBaseDNItem) {
    if (this.changelogEntryExcludeBaseDN == null) {
      this.changelogEntryExcludeBaseDN = new ArrayList<>();
    }
    this.changelogEntryExcludeBaseDN.add(changelogEntryExcludeBaseDNItem);
    return this;
  }

   /**
   * The base DNs for branches in the data for which no changelog records should be generated.
   * @return changelogEntryExcludeBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The base DNs for branches in the data for which no changelog records should be generated.")

  public List<String> getChangelogEntryExcludeBaseDN() {
    return changelogEntryExcludeBaseDN;
  }


  public void setChangelogEntryExcludeBaseDN(List<String> changelogEntryExcludeBaseDN) {
    
    
    
    this.changelogEntryExcludeBaseDN = changelogEntryExcludeBaseDN;
  }


  public ChangelogBackendResponse changelogEntryIncludeFilter(List<String> changelogEntryIncludeFilter) {
    
    
    
    
    this.changelogEntryIncludeFilter = changelogEntryIncludeFilter;
    return this;
  }

  public ChangelogBackendResponse addChangelogEntryIncludeFilterItem(String changelogEntryIncludeFilterItem) {
    if (this.changelogEntryIncludeFilter == null) {
      this.changelogEntryIncludeFilter = new ArrayList<>();
    }
    this.changelogEntryIncludeFilter.add(changelogEntryIncludeFilterItem);
    return this;
  }

   /**
   * A filter that indicates which changelog entries should actually be stored in the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
   * @return changelogEntryIncludeFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A filter that indicates which changelog entries should actually be stored in the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.")

  public List<String> getChangelogEntryIncludeFilter() {
    return changelogEntryIncludeFilter;
  }


  public void setChangelogEntryIncludeFilter(List<String> changelogEntryIncludeFilter) {
    
    
    
    this.changelogEntryIncludeFilter = changelogEntryIncludeFilter;
  }


  public ChangelogBackendResponse changelogEntryExcludeFilter(List<String> changelogEntryExcludeFilter) {
    
    
    
    
    this.changelogEntryExcludeFilter = changelogEntryExcludeFilter;
    return this;
  }

  public ChangelogBackendResponse addChangelogEntryExcludeFilterItem(String changelogEntryExcludeFilterItem) {
    if (this.changelogEntryExcludeFilter == null) {
      this.changelogEntryExcludeFilter = new ArrayList<>();
    }
    this.changelogEntryExcludeFilter.add(changelogEntryExcludeFilterItem);
    return this;
  }

   /**
   * A filter that indicates which changelog entries should be excluded from the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.
   * @return changelogEntryExcludeFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A filter that indicates which changelog entries should be excluded from the changelog. Note that this filter is evaluated against the changelog entry itself and not against the entry that was the target of the change referenced by the changelog entry. This filter may target any attributes that appear in changelog entries with the exception of the changeNumber and entry-size-bytes attributes, since they will not be known at the time of the filter evaluation.")

  public List<String> getChangelogEntryExcludeFilter() {
    return changelogEntryExcludeFilter;
  }


  public void setChangelogEntryExcludeFilter(List<String> changelogEntryExcludeFilter) {
    
    
    
    this.changelogEntryExcludeFilter = changelogEntryExcludeFilter;
  }


  public ChangelogBackendResponse changelogIncludeAttribute(List<String> changelogIncludeAttribute) {
    
    
    
    
    this.changelogIncludeAttribute = changelogIncludeAttribute;
    return this;
  }

  public ChangelogBackendResponse addChangelogIncludeAttributeItem(String changelogIncludeAttributeItem) {
    if (this.changelogIncludeAttribute == null) {
      this.changelogIncludeAttribute = new ArrayList<>();
    }
    this.changelogIncludeAttribute.add(changelogIncludeAttributeItem);
    return this;
  }

   /**
   * Specifies which attribute types will be included in a changelog entry for ADD and MODIFY operations.
   * @return changelogIncludeAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies which attribute types will be included in a changelog entry for ADD and MODIFY operations.")

  public List<String> getChangelogIncludeAttribute() {
    return changelogIncludeAttribute;
  }


  public void setChangelogIncludeAttribute(List<String> changelogIncludeAttribute) {
    
    
    
    this.changelogIncludeAttribute = changelogIncludeAttribute;
  }


  public ChangelogBackendResponse changelogExcludeAttribute(List<String> changelogExcludeAttribute) {
    
    
    
    
    this.changelogExcludeAttribute = changelogExcludeAttribute;
    return this;
  }

  public ChangelogBackendResponse addChangelogExcludeAttributeItem(String changelogExcludeAttributeItem) {
    if (this.changelogExcludeAttribute == null) {
      this.changelogExcludeAttribute = new ArrayList<>();
    }
    this.changelogExcludeAttribute.add(changelogExcludeAttributeItem);
    return this;
  }

   /**
   * Specifies a set of attribute types that should be excluded in a changelog entry for ADD and MODIFY operations.
   * @return changelogExcludeAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of attribute types that should be excluded in a changelog entry for ADD and MODIFY operations.")

  public List<String> getChangelogExcludeAttribute() {
    return changelogExcludeAttribute;
  }


  public void setChangelogExcludeAttribute(List<String> changelogExcludeAttribute) {
    
    
    
    this.changelogExcludeAttribute = changelogExcludeAttribute;
  }


  public ChangelogBackendResponse changelogDeletedEntryIncludeAttribute(List<String> changelogDeletedEntryIncludeAttribute) {
    
    
    
    
    this.changelogDeletedEntryIncludeAttribute = changelogDeletedEntryIncludeAttribute;
    return this;
  }

  public ChangelogBackendResponse addChangelogDeletedEntryIncludeAttributeItem(String changelogDeletedEntryIncludeAttributeItem) {
    if (this.changelogDeletedEntryIncludeAttribute == null) {
      this.changelogDeletedEntryIncludeAttribute = new ArrayList<>();
    }
    this.changelogDeletedEntryIncludeAttribute.add(changelogDeletedEntryIncludeAttributeItem);
    return this;
  }

   /**
   * Specifies a set of attribute types that should be included in a changelog entry for DELETE operations.
   * @return changelogDeletedEntryIncludeAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of attribute types that should be included in a changelog entry for DELETE operations.")

  public List<String> getChangelogDeletedEntryIncludeAttribute() {
    return changelogDeletedEntryIncludeAttribute;
  }


  public void setChangelogDeletedEntryIncludeAttribute(List<String> changelogDeletedEntryIncludeAttribute) {
    
    
    
    this.changelogDeletedEntryIncludeAttribute = changelogDeletedEntryIncludeAttribute;
  }


  public ChangelogBackendResponse changelogDeletedEntryExcludeAttribute(List<String> changelogDeletedEntryExcludeAttribute) {
    
    
    
    
    this.changelogDeletedEntryExcludeAttribute = changelogDeletedEntryExcludeAttribute;
    return this;
  }

  public ChangelogBackendResponse addChangelogDeletedEntryExcludeAttributeItem(String changelogDeletedEntryExcludeAttributeItem) {
    if (this.changelogDeletedEntryExcludeAttribute == null) {
      this.changelogDeletedEntryExcludeAttribute = new ArrayList<>();
    }
    this.changelogDeletedEntryExcludeAttribute.add(changelogDeletedEntryExcludeAttributeItem);
    return this;
  }

   /**
   * Specifies a set of attribute types that should be excluded from a changelog entry for DELETE operations.
   * @return changelogDeletedEntryExcludeAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of attribute types that should be excluded from a changelog entry for DELETE operations.")

  public List<String> getChangelogDeletedEntryExcludeAttribute() {
    return changelogDeletedEntryExcludeAttribute;
  }


  public void setChangelogDeletedEntryExcludeAttribute(List<String> changelogDeletedEntryExcludeAttribute) {
    
    
    
    this.changelogDeletedEntryExcludeAttribute = changelogDeletedEntryExcludeAttribute;
  }


  public ChangelogBackendResponse changelogIncludeKeyAttribute(List<String> changelogIncludeKeyAttribute) {
    
    
    
    
    this.changelogIncludeKeyAttribute = changelogIncludeKeyAttribute;
    return this;
  }

  public ChangelogBackendResponse addChangelogIncludeKeyAttributeItem(String changelogIncludeKeyAttributeItem) {
    if (this.changelogIncludeKeyAttribute == null) {
      this.changelogIncludeKeyAttribute = new ArrayList<>();
    }
    this.changelogIncludeKeyAttribute.add(changelogIncludeKeyAttributeItem);
    return this;
  }

   /**
   * Specifies which attribute types will be included in a changelog entry on every change.
   * @return changelogIncludeKeyAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies which attribute types will be included in a changelog entry on every change.")

  public List<String> getChangelogIncludeKeyAttribute() {
    return changelogIncludeKeyAttribute;
  }


  public void setChangelogIncludeKeyAttribute(List<String> changelogIncludeKeyAttribute) {
    
    
    
    this.changelogIncludeKeyAttribute = changelogIncludeKeyAttribute;
  }


  public ChangelogBackendResponse changelogMaxBeforeAfterValues(Integer changelogMaxBeforeAfterValues) {
    
    
    
    
    this.changelogMaxBeforeAfterValues = changelogMaxBeforeAfterValues;
    return this;
  }

   /**
   * This controls whether all attribute values for a modified attribute (even those values that have not changed) will be included in the changelog entry. If the number of attribute values does not exceed this limit, then all values for the modified attribute will be included in the changelog entry.
   * @return changelogMaxBeforeAfterValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This controls whether all attribute values for a modified attribute (even those values that have not changed) will be included in the changelog entry. If the number of attribute values does not exceed this limit, then all values for the modified attribute will be included in the changelog entry.")

  public Integer getChangelogMaxBeforeAfterValues() {
    return changelogMaxBeforeAfterValues;
  }


  public void setChangelogMaxBeforeAfterValues(Integer changelogMaxBeforeAfterValues) {
    
    
    
    this.changelogMaxBeforeAfterValues = changelogMaxBeforeAfterValues;
  }


  public ChangelogBackendResponse writeLastmodAttributes(Boolean writeLastmodAttributes) {
    
    
    
    
    this.writeLastmodAttributes = writeLastmodAttributes;
    return this;
  }

   /**
   * Specifies whether values of creatorsName, createTimestamp, modifiersName and modifyTimestamp attributes will be written to changelog entries.
   * @return writeLastmodAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether values of creatorsName, createTimestamp, modifiersName and modifyTimestamp attributes will be written to changelog entries.")

  public Boolean getWriteLastmodAttributes() {
    return writeLastmodAttributes;
  }


  public void setWriteLastmodAttributes(Boolean writeLastmodAttributes) {
    
    
    
    this.writeLastmodAttributes = writeLastmodAttributes;
  }


  public ChangelogBackendResponse useReversibleForm(Boolean useReversibleForm) {
    
    
    
    
    this.useReversibleForm = useReversibleForm;
    return this;
  }

   /**
   * Specifies whether the changelog should provide enough information to be able to revert the changes if desired.
   * @return useReversibleForm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the changelog should provide enough information to be able to revert the changes if desired.")

  public Boolean getUseReversibleForm() {
    return useReversibleForm;
  }


  public void setUseReversibleForm(Boolean useReversibleForm) {
    
    
    
    this.useReversibleForm = useReversibleForm;
  }


  public ChangelogBackendResponse includeVirtualAttributes(List<EnumbackendIncludeVirtualAttributesProp> includeVirtualAttributes) {
    
    
    
    
    this.includeVirtualAttributes = includeVirtualAttributes;
    return this;
  }

  public ChangelogBackendResponse addIncludeVirtualAttributesItem(EnumbackendIncludeVirtualAttributesProp includeVirtualAttributesItem) {
    if (this.includeVirtualAttributes == null) {
      this.includeVirtualAttributes = new ArrayList<>();
    }
    this.includeVirtualAttributes.add(includeVirtualAttributesItem);
    return this;
  }

   /**
   * Get includeVirtualAttributes
   * @return includeVirtualAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumbackendIncludeVirtualAttributesProp> getIncludeVirtualAttributes() {
    return includeVirtualAttributes;
  }


  public void setIncludeVirtualAttributes(List<EnumbackendIncludeVirtualAttributesProp> includeVirtualAttributes) {
    
    
    
    this.includeVirtualAttributes = includeVirtualAttributes;
  }


  public ChangelogBackendResponse applyAccessControlsToChangelogEntryContents(Boolean applyAccessControlsToChangelogEntryContents) {
    
    
    
    
    this.applyAccessControlsToChangelogEntryContents = applyAccessControlsToChangelogEntryContents;
    return this;
  }

   /**
   * Indicates whether the contents of changelog entries should be subject to access control and sensitive attribute evaluation such that the contents of attributes like changes, deletedEntryAttrs, ds-changelog-entry-key-attr-values, ds-changelog-before-values, and ds-changelog-after-values may be altered based on attributes the user can see in the target entry.
   * @return applyAccessControlsToChangelogEntryContents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the contents of changelog entries should be subject to access control and sensitive attribute evaluation such that the contents of attributes like changes, deletedEntryAttrs, ds-changelog-entry-key-attr-values, ds-changelog-before-values, and ds-changelog-after-values may be altered based on attributes the user can see in the target entry.")

  public Boolean getApplyAccessControlsToChangelogEntryContents() {
    return applyAccessControlsToChangelogEntryContents;
  }


  public void setApplyAccessControlsToChangelogEntryContents(Boolean applyAccessControlsToChangelogEntryContents) {
    
    
    
    this.applyAccessControlsToChangelogEntryContents = applyAccessControlsToChangelogEntryContents;
  }


  public ChangelogBackendResponse reportExcludedChangelogAttributes(EnumbackendReportExcludedChangelogAttributesProp reportExcludedChangelogAttributes) {
    
    
    
    
    this.reportExcludedChangelogAttributes = reportExcludedChangelogAttributes;
    return this;
  }

   /**
   * Get reportExcludedChangelogAttributes
   * @return reportExcludedChangelogAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendReportExcludedChangelogAttributesProp getReportExcludedChangelogAttributes() {
    return reportExcludedChangelogAttributes;
  }


  public void setReportExcludedChangelogAttributes(EnumbackendReportExcludedChangelogAttributesProp reportExcludedChangelogAttributes) {
    
    
    
    this.reportExcludedChangelogAttributes = reportExcludedChangelogAttributes;
  }


  public ChangelogBackendResponse softDeleteEntryIncludedOperation(List<EnumbackendSoftDeleteEntryIncludedOperationProp> softDeleteEntryIncludedOperation) {
    
    
    
    
    this.softDeleteEntryIncludedOperation = softDeleteEntryIncludedOperation;
    return this;
  }

  public ChangelogBackendResponse addSoftDeleteEntryIncludedOperationItem(EnumbackendSoftDeleteEntryIncludedOperationProp softDeleteEntryIncludedOperationItem) {
    if (this.softDeleteEntryIncludedOperation == null) {
      this.softDeleteEntryIncludedOperation = new ArrayList<>();
    }
    this.softDeleteEntryIncludedOperation.add(softDeleteEntryIncludedOperationItem);
    return this;
  }

   /**
   * Get softDeleteEntryIncludedOperation
   * @return softDeleteEntryIncludedOperation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumbackendSoftDeleteEntryIncludedOperationProp> getSoftDeleteEntryIncludedOperation() {
    return softDeleteEntryIncludedOperation;
  }


  public void setSoftDeleteEntryIncludedOperation(List<EnumbackendSoftDeleteEntryIncludedOperationProp> softDeleteEntryIncludedOperation) {
    
    
    
    this.softDeleteEntryIncludedOperation = softDeleteEntryIncludedOperation;
  }


  public ChangelogBackendResponse backendID(String backendID) {
    
    
    
    
    this.backendID = backendID;
    return this;
  }

   /**
   * Specifies a name to identify the associated backend.
   * @return backendID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies a name to identify the associated backend.")

  public String getBackendID() {
    return backendID;
  }


  public void setBackendID(String backendID) {
    
    
    
    this.backendID = backendID;
  }


  public ChangelogBackendResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the backend is enabled in the server.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the backend is enabled in the server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public ChangelogBackendResponse setDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
    return this;
  }

   /**
   * Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
   * @return setDegradedAlertWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.")

  public Boolean getSetDegradedAlertWhenDisabled() {
    return setDegradedAlertWhenDisabled;
  }


  public void setSetDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
  }


  public ChangelogBackendResponse returnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
    return this;
  }

   /**
   * Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
   * @return returnUnavailableWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.")

  public Boolean getReturnUnavailableWhenDisabled() {
    return returnUnavailableWhenDisabled;
  }


  public void setReturnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
  }


  public ChangelogBackendResponse notificationManager(String notificationManager) {
    
    
    
    
    this.notificationManager = notificationManager;
    return this;
  }

   /**
   * Specifies a notification manager for changes resulting from operations processed through this Backend
   * @return notificationManager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a notification manager for changes resulting from operations processed through this Backend")

  public String getNotificationManager() {
    return notificationManager;
  }


  public void setNotificationManager(String notificationManager) {
    
    
    
    this.notificationManager = notificationManager;
  }


  public ChangelogBackendResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public ChangelogBackendResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ChangelogBackendResponse instance itself
   */
  public ChangelogBackendResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangelogBackendResponse changelogBackendResponse = (ChangelogBackendResponse) o;
    return Objects.equals(this.description, changelogBackendResponse.description) &&
        Objects.equals(this.schemas, changelogBackendResponse.schemas) &&
        Objects.equals(this.id, changelogBackendResponse.id) &&
        Objects.equals(this.baseDN, changelogBackendResponse.baseDN) &&
        Objects.equals(this.dbDirectory, changelogBackendResponse.dbDirectory) &&
        Objects.equals(this.dbDirectoryPermissions, changelogBackendResponse.dbDirectoryPermissions) &&
        Objects.equals(this.dbCachePercent, changelogBackendResponse.dbCachePercent) &&
        Objects.equals(this.jeProperty, changelogBackendResponse.jeProperty) &&
        Objects.equals(this.changelogWriteBatchSize, changelogBackendResponse.changelogWriteBatchSize) &&
        Objects.equals(this.changelogPurgeBatchSize, changelogBackendResponse.changelogPurgeBatchSize) &&
        Objects.equals(this.changelogWriteQueueCapacity, changelogBackendResponse.changelogWriteQueueCapacity) &&
        Objects.equals(this.indexIncludeAttribute, changelogBackendResponse.indexIncludeAttribute) &&
        Objects.equals(this.indexExcludeAttribute, changelogBackendResponse.indexExcludeAttribute) &&
        Objects.equals(this.changelogMaximumAge, changelogBackendResponse.changelogMaximumAge) &&
        Objects.equals(this.targetDatabaseSize, changelogBackendResponse.targetDatabaseSize) &&
        Objects.equals(this.changelogEntryIncludeBaseDN, changelogBackendResponse.changelogEntryIncludeBaseDN) &&
        Objects.equals(this.changelogEntryExcludeBaseDN, changelogBackendResponse.changelogEntryExcludeBaseDN) &&
        Objects.equals(this.changelogEntryIncludeFilter, changelogBackendResponse.changelogEntryIncludeFilter) &&
        Objects.equals(this.changelogEntryExcludeFilter, changelogBackendResponse.changelogEntryExcludeFilter) &&
        Objects.equals(this.changelogIncludeAttribute, changelogBackendResponse.changelogIncludeAttribute) &&
        Objects.equals(this.changelogExcludeAttribute, changelogBackendResponse.changelogExcludeAttribute) &&
        Objects.equals(this.changelogDeletedEntryIncludeAttribute, changelogBackendResponse.changelogDeletedEntryIncludeAttribute) &&
        Objects.equals(this.changelogDeletedEntryExcludeAttribute, changelogBackendResponse.changelogDeletedEntryExcludeAttribute) &&
        Objects.equals(this.changelogIncludeKeyAttribute, changelogBackendResponse.changelogIncludeKeyAttribute) &&
        Objects.equals(this.changelogMaxBeforeAfterValues, changelogBackendResponse.changelogMaxBeforeAfterValues) &&
        Objects.equals(this.writeLastmodAttributes, changelogBackendResponse.writeLastmodAttributes) &&
        Objects.equals(this.useReversibleForm, changelogBackendResponse.useReversibleForm) &&
        Objects.equals(this.includeVirtualAttributes, changelogBackendResponse.includeVirtualAttributes) &&
        Objects.equals(this.applyAccessControlsToChangelogEntryContents, changelogBackendResponse.applyAccessControlsToChangelogEntryContents) &&
        Objects.equals(this.reportExcludedChangelogAttributes, changelogBackendResponse.reportExcludedChangelogAttributes) &&
        Objects.equals(this.softDeleteEntryIncludedOperation, changelogBackendResponse.softDeleteEntryIncludedOperation) &&
        Objects.equals(this.backendID, changelogBackendResponse.backendID) &&
        Objects.equals(this.enabled, changelogBackendResponse.enabled) &&
        Objects.equals(this.setDegradedAlertWhenDisabled, changelogBackendResponse.setDegradedAlertWhenDisabled) &&
        Objects.equals(this.returnUnavailableWhenDisabled, changelogBackendResponse.returnUnavailableWhenDisabled) &&
        Objects.equals(this.notificationManager, changelogBackendResponse.notificationManager) &&
        Objects.equals(this.meta, changelogBackendResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, changelogBackendResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, changelogBackendResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, baseDN, dbDirectory, dbDirectoryPermissions, dbCachePercent, jeProperty, changelogWriteBatchSize, changelogPurgeBatchSize, changelogWriteQueueCapacity, indexIncludeAttribute, indexExcludeAttribute, changelogMaximumAge, targetDatabaseSize, changelogEntryIncludeBaseDN, changelogEntryExcludeBaseDN, changelogEntryIncludeFilter, changelogEntryExcludeFilter, changelogIncludeAttribute, changelogExcludeAttribute, changelogDeletedEntryIncludeAttribute, changelogDeletedEntryExcludeAttribute, changelogIncludeKeyAttribute, changelogMaxBeforeAfterValues, writeLastmodAttributes, useReversibleForm, includeVirtualAttributes, applyAccessControlsToChangelogEntryContents, reportExcludedChangelogAttributes, softDeleteEntryIncludedOperation, backendID, enabled, setDegradedAlertWhenDisabled, returnUnavailableWhenDisabled, notificationManager, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangelogBackendResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    baseDN: ").append(toIndentedString(baseDN)).append("\n");
    sb.append("    dbDirectory: ").append(toIndentedString(dbDirectory)).append("\n");
    sb.append("    dbDirectoryPermissions: ").append(toIndentedString(dbDirectoryPermissions)).append("\n");
    sb.append("    dbCachePercent: ").append(toIndentedString(dbCachePercent)).append("\n");
    sb.append("    jeProperty: ").append(toIndentedString(jeProperty)).append("\n");
    sb.append("    changelogWriteBatchSize: ").append(toIndentedString(changelogWriteBatchSize)).append("\n");
    sb.append("    changelogPurgeBatchSize: ").append(toIndentedString(changelogPurgeBatchSize)).append("\n");
    sb.append("    changelogWriteQueueCapacity: ").append(toIndentedString(changelogWriteQueueCapacity)).append("\n");
    sb.append("    indexIncludeAttribute: ").append(toIndentedString(indexIncludeAttribute)).append("\n");
    sb.append("    indexExcludeAttribute: ").append(toIndentedString(indexExcludeAttribute)).append("\n");
    sb.append("    changelogMaximumAge: ").append(toIndentedString(changelogMaximumAge)).append("\n");
    sb.append("    targetDatabaseSize: ").append(toIndentedString(targetDatabaseSize)).append("\n");
    sb.append("    changelogEntryIncludeBaseDN: ").append(toIndentedString(changelogEntryIncludeBaseDN)).append("\n");
    sb.append("    changelogEntryExcludeBaseDN: ").append(toIndentedString(changelogEntryExcludeBaseDN)).append("\n");
    sb.append("    changelogEntryIncludeFilter: ").append(toIndentedString(changelogEntryIncludeFilter)).append("\n");
    sb.append("    changelogEntryExcludeFilter: ").append(toIndentedString(changelogEntryExcludeFilter)).append("\n");
    sb.append("    changelogIncludeAttribute: ").append(toIndentedString(changelogIncludeAttribute)).append("\n");
    sb.append("    changelogExcludeAttribute: ").append(toIndentedString(changelogExcludeAttribute)).append("\n");
    sb.append("    changelogDeletedEntryIncludeAttribute: ").append(toIndentedString(changelogDeletedEntryIncludeAttribute)).append("\n");
    sb.append("    changelogDeletedEntryExcludeAttribute: ").append(toIndentedString(changelogDeletedEntryExcludeAttribute)).append("\n");
    sb.append("    changelogIncludeKeyAttribute: ").append(toIndentedString(changelogIncludeKeyAttribute)).append("\n");
    sb.append("    changelogMaxBeforeAfterValues: ").append(toIndentedString(changelogMaxBeforeAfterValues)).append("\n");
    sb.append("    writeLastmodAttributes: ").append(toIndentedString(writeLastmodAttributes)).append("\n");
    sb.append("    useReversibleForm: ").append(toIndentedString(useReversibleForm)).append("\n");
    sb.append("    includeVirtualAttributes: ").append(toIndentedString(includeVirtualAttributes)).append("\n");
    sb.append("    applyAccessControlsToChangelogEntryContents: ").append(toIndentedString(applyAccessControlsToChangelogEntryContents)).append("\n");
    sb.append("    reportExcludedChangelogAttributes: ").append(toIndentedString(reportExcludedChangelogAttributes)).append("\n");
    sb.append("    softDeleteEntryIncludedOperation: ").append(toIndentedString(softDeleteEntryIncludedOperation)).append("\n");
    sb.append("    backendID: ").append(toIndentedString(backendID)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    setDegradedAlertWhenDisabled: ").append(toIndentedString(setDegradedAlertWhenDisabled)).append("\n");
    sb.append("    returnUnavailableWhenDisabled: ").append(toIndentedString(returnUnavailableWhenDisabled)).append("\n");
    sb.append("    notificationManager: ").append(toIndentedString(notificationManager)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("baseDN");
    openapiFields.add("dbDirectory");
    openapiFields.add("dbDirectoryPermissions");
    openapiFields.add("dbCachePercent");
    openapiFields.add("jeProperty");
    openapiFields.add("changelogWriteBatchSize");
    openapiFields.add("changelogPurgeBatchSize");
    openapiFields.add("changelogWriteQueueCapacity");
    openapiFields.add("indexIncludeAttribute");
    openapiFields.add("indexExcludeAttribute");
    openapiFields.add("changelogMaximumAge");
    openapiFields.add("targetDatabaseSize");
    openapiFields.add("changelogEntryIncludeBaseDN");
    openapiFields.add("changelogEntryExcludeBaseDN");
    openapiFields.add("changelogEntryIncludeFilter");
    openapiFields.add("changelogEntryExcludeFilter");
    openapiFields.add("changelogIncludeAttribute");
    openapiFields.add("changelogExcludeAttribute");
    openapiFields.add("changelogDeletedEntryIncludeAttribute");
    openapiFields.add("changelogDeletedEntryExcludeAttribute");
    openapiFields.add("changelogIncludeKeyAttribute");
    openapiFields.add("changelogMaxBeforeAfterValues");
    openapiFields.add("writeLastmodAttributes");
    openapiFields.add("useReversibleForm");
    openapiFields.add("includeVirtualAttributes");
    openapiFields.add("applyAccessControlsToChangelogEntryContents");
    openapiFields.add("reportExcludedChangelogAttributes");
    openapiFields.add("softDeleteEntryIncludedOperation");
    openapiFields.add("backendID");
    openapiFields.add("enabled");
    openapiFields.add("setDegradedAlertWhenDisabled");
    openapiFields.add("returnUnavailableWhenDisabled");
    openapiFields.add("notificationManager");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("baseDN");
    openapiRequiredFields.add("changelogMaximumAge");
    openapiRequiredFields.add("backendID");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChangelogBackendResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ChangelogBackendResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangelogBackendResponse is not found in the empty JSON string", ChangelogBackendResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChangelogBackendResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("baseDN") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("baseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseDN` to be an array in the JSON string but got `%s`", jsonObj.get("baseDN").toString()));
      }
      if ((jsonObj.get("dbDirectory") != null && !jsonObj.get("dbDirectory").isJsonNull()) && !jsonObj.get("dbDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbDirectory").toString()));
      }
      if ((jsonObj.get("dbDirectoryPermissions") != null && !jsonObj.get("dbDirectoryPermissions").isJsonNull()) && !jsonObj.get("dbDirectoryPermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbDirectoryPermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbDirectoryPermissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jeProperty") != null && !jsonObj.get("jeProperty").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jeProperty` to be an array in the JSON string but got `%s`", jsonObj.get("jeProperty").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("indexIncludeAttribute") != null && !jsonObj.get("indexIncludeAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexIncludeAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("indexIncludeAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("indexExcludeAttribute") != null && !jsonObj.get("indexExcludeAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexExcludeAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("indexExcludeAttribute").toString()));
      }
      if (!jsonObj.get("changelogMaximumAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogMaximumAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changelogMaximumAge").toString()));
      }
      if ((jsonObj.get("targetDatabaseSize") != null && !jsonObj.get("targetDatabaseSize").isJsonNull()) && !jsonObj.get("targetDatabaseSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetDatabaseSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetDatabaseSize").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changelogEntryIncludeBaseDN") != null && !jsonObj.get("changelogEntryIncludeBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogEntryIncludeBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("changelogEntryIncludeBaseDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changelogEntryExcludeBaseDN") != null && !jsonObj.get("changelogEntryExcludeBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogEntryExcludeBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("changelogEntryExcludeBaseDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changelogEntryIncludeFilter") != null && !jsonObj.get("changelogEntryIncludeFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogEntryIncludeFilter` to be an array in the JSON string but got `%s`", jsonObj.get("changelogEntryIncludeFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changelogEntryExcludeFilter") != null && !jsonObj.get("changelogEntryExcludeFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogEntryExcludeFilter` to be an array in the JSON string but got `%s`", jsonObj.get("changelogEntryExcludeFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changelogIncludeAttribute") != null && !jsonObj.get("changelogIncludeAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogIncludeAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("changelogIncludeAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changelogExcludeAttribute") != null && !jsonObj.get("changelogExcludeAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogExcludeAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("changelogExcludeAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changelogDeletedEntryIncludeAttribute") != null && !jsonObj.get("changelogDeletedEntryIncludeAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogDeletedEntryIncludeAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("changelogDeletedEntryIncludeAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changelogDeletedEntryExcludeAttribute") != null && !jsonObj.get("changelogDeletedEntryExcludeAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogDeletedEntryExcludeAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("changelogDeletedEntryExcludeAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("changelogIncludeKeyAttribute") != null && !jsonObj.get("changelogIncludeKeyAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `changelogIncludeKeyAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("changelogIncludeKeyAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includeVirtualAttributes") != null && !jsonObj.get("includeVirtualAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeVirtualAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("includeVirtualAttributes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("softDeleteEntryIncludedOperation") != null && !jsonObj.get("softDeleteEntryIncludedOperation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `softDeleteEntryIncludedOperation` to be an array in the JSON string but got `%s`", jsonObj.get("softDeleteEntryIncludedOperation").toString()));
      }
      if (!jsonObj.get("backendID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendID").toString()));
      }
      if ((jsonObj.get("notificationManager") != null && !jsonObj.get("notificationManager").isJsonNull()) && !jsonObj.get("notificationManager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationManager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationManager").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangelogBackendResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangelogBackendResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangelogBackendResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangelogBackendResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangelogBackendResponse>() {
           @Override
           public void write(JsonWriter out, ChangelogBackendResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangelogBackendResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ChangelogBackendResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChangelogBackendResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChangelogBackendResponse
  * @throws IOException if the JSON string is invalid with respect to ChangelogBackendResponse
  */
  public static ChangelogBackendResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangelogBackendResponse.class);
  }

 /**
  * Convert an instance of ChangelogBackendResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

