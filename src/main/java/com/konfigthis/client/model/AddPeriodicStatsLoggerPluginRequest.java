/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumperiodicStatsLoggerPluginSchemaUrn;
import com.konfigthis.client.model.EnumpluginEntryCacheInfoProp;
import com.konfigthis.client.model.EnumpluginGaugeInfoProp;
import com.konfigthis.client.model.EnumpluginHistogramFormatProp;
import com.konfigthis.client.model.EnumpluginHistogramOpTypeProp;
import com.konfigthis.client.model.EnumpluginHostInfoProp;
import com.konfigthis.client.model.EnumpluginIncludedLDAPStatProp;
import com.konfigthis.client.model.EnumpluginIncludedResourceStatProp;
import com.konfigthis.client.model.EnumpluginLdapChangelogInfoProp;
import com.konfigthis.client.model.EnumpluginLocalDBBackendInfoProp;
import com.konfigthis.client.model.EnumpluginLogFileFormatProp;
import com.konfigthis.client.model.EnumpluginLoggingErrorBehaviorProp;
import com.konfigthis.client.model.EnumpluginPeriodicStatsLoggerPerApplicationLDAPStatsProp;
import com.konfigthis.client.model.EnumpluginReplicationInfoProp;
import com.konfigthis.client.model.EnumpluginStatusSummaryInfoProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddPeriodicStatsLoggerPluginRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddPeriodicStatsLoggerPluginRequest {
  public static final String SERIALIZED_NAME_PLUGIN_NAME = "pluginName";
  @SerializedName(SERIALIZED_NAME_PLUGIN_NAME)
  private String pluginName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumperiodicStatsLoggerPluginSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOG_INTERVAL = "logInterval";
  @SerializedName(SERIALIZED_NAME_LOG_INTERVAL)
  private String logInterval;

  public static final String SERIALIZED_NAME_COLLECTION_INTERVAL = "collectionInterval";
  @SerializedName(SERIALIZED_NAME_COLLECTION_INTERVAL)
  private String collectionInterval;

  public static final String SERIALIZED_NAME_SUPPRESS_IF_IDLE = "suppressIfIdle";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_IF_IDLE)
  private Boolean suppressIfIdle;

  public static final String SERIALIZED_NAME_HEADER_PREFIX_PER_COLUMN = "headerPrefixPerColumn";
  @SerializedName(SERIALIZED_NAME_HEADER_PREFIX_PER_COLUMN)
  private Boolean headerPrefixPerColumn;

  public static final String SERIALIZED_NAME_EMPTY_INSTEAD_OF_ZERO = "emptyInsteadOfZero";
  @SerializedName(SERIALIZED_NAME_EMPTY_INSTEAD_OF_ZERO)
  private Boolean emptyInsteadOfZero;

  public static final String SERIALIZED_NAME_LINES_BETWEEN_HEADER = "linesBetweenHeader";
  @SerializedName(SERIALIZED_NAME_LINES_BETWEEN_HEADER)
  private Integer linesBetweenHeader;

  public static final String SERIALIZED_NAME_INCLUDED_L_D_A_P_STAT = "includedLDAPStat";
  @SerializedName(SERIALIZED_NAME_INCLUDED_L_D_A_P_STAT)
  private List<EnumpluginIncludedLDAPStatProp> includedLDAPStat = null;

  public static final String SERIALIZED_NAME_INCLUDED_RESOURCE_STAT = "includedResourceStat";
  @SerializedName(SERIALIZED_NAME_INCLUDED_RESOURCE_STAT)
  private List<EnumpluginIncludedResourceStatProp> includedResourceStat = null;

  public static final String SERIALIZED_NAME_HISTOGRAM_FORMAT = "histogramFormat";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_FORMAT)
  private EnumpluginHistogramFormatProp histogramFormat;

  public static final String SERIALIZED_NAME_HISTOGRAM_OP_TYPE = "histogramOpType";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_OP_TYPE)
  private List<EnumpluginHistogramOpTypeProp> histogramOpType = null;

  public static final String SERIALIZED_NAME_PER_APPLICATION_L_D_A_P_STATS = "perApplicationLDAPStats";
  @SerializedName(SERIALIZED_NAME_PER_APPLICATION_L_D_A_P_STATS)
  private EnumpluginPeriodicStatsLoggerPerApplicationLDAPStatsProp perApplicationLDAPStats;

  public static final String SERIALIZED_NAME_STATUS_SUMMARY_INFO = "statusSummaryInfo";
  @SerializedName(SERIALIZED_NAME_STATUS_SUMMARY_INFO)
  private EnumpluginStatusSummaryInfoProp statusSummaryInfo;

  public static final String SERIALIZED_NAME_LDAP_CHANGELOG_INFO = "ldapChangelogInfo";
  @SerializedName(SERIALIZED_NAME_LDAP_CHANGELOG_INFO)
  private EnumpluginLdapChangelogInfoProp ldapChangelogInfo;

  public static final String SERIALIZED_NAME_GAUGE_INFO = "gaugeInfo";
  @SerializedName(SERIALIZED_NAME_GAUGE_INFO)
  private EnumpluginGaugeInfoProp gaugeInfo;

  public static final String SERIALIZED_NAME_LOG_FILE_FORMAT = "logFileFormat";
  @SerializedName(SERIALIZED_NAME_LOG_FILE_FORMAT)
  private EnumpluginLogFileFormatProp logFileFormat;

  public static final String SERIALIZED_NAME_LOG_FILE = "logFile";
  @SerializedName(SERIALIZED_NAME_LOG_FILE)
  private String logFile;

  public static final String SERIALIZED_NAME_LOG_FILE_PERMISSIONS = "logFilePermissions";
  @SerializedName(SERIALIZED_NAME_LOG_FILE_PERMISSIONS)
  private String logFilePermissions;

  public static final String SERIALIZED_NAME_APPEND = "append";
  @SerializedName(SERIALIZED_NAME_APPEND)
  private Boolean append;

  public static final String SERIALIZED_NAME_ROTATION_POLICY = "rotationPolicy";
  @SerializedName(SERIALIZED_NAME_ROTATION_POLICY)
  private List<String> rotationPolicy = null;

  public static final String SERIALIZED_NAME_ROTATION_LISTENER = "rotationListener";
  @SerializedName(SERIALIZED_NAME_ROTATION_LISTENER)
  private List<String> rotationListener = null;

  public static final String SERIALIZED_NAME_RETENTION_POLICY = "retentionPolicy";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY)
  private List<String> retentionPolicy = null;

  public static final String SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR = "loggingErrorBehavior";
  @SerializedName(SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR)
  private EnumpluginLoggingErrorBehaviorProp loggingErrorBehavior;

  public static final String SERIALIZED_NAME_LOCAL_D_B_BACKEND_INFO = "localDBBackendInfo";
  @SerializedName(SERIALIZED_NAME_LOCAL_D_B_BACKEND_INFO)
  private EnumpluginLocalDBBackendInfoProp localDBBackendInfo;

  public static final String SERIALIZED_NAME_REPLICATION_INFO = "replicationInfo";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INFO)
  private EnumpluginReplicationInfoProp replicationInfo;

  public static final String SERIALIZED_NAME_ENTRY_CACHE_INFO = "entryCacheInfo";
  @SerializedName(SERIALIZED_NAME_ENTRY_CACHE_INFO)
  private EnumpluginEntryCacheInfoProp entryCacheInfo;

  public static final String SERIALIZED_NAME_HOST_INFO = "hostInfo";
  @SerializedName(SERIALIZED_NAME_HOST_INFO)
  private List<EnumpluginHostInfoProp> hostInfo = null;

  public static final String SERIALIZED_NAME_INCLUDED_L_D_A_P_APPLICATION = "includedLDAPApplication";
  @SerializedName(SERIALIZED_NAME_INCLUDED_L_D_A_P_APPLICATION)
  private List<String> includedLDAPApplication = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public AddPeriodicStatsLoggerPluginRequest() {
  }

  public AddPeriodicStatsLoggerPluginRequest pluginName(String pluginName) {
    
    
    
    
    this.pluginName = pluginName;
    return this;
  }

   /**
   * Name of the new Plugin
   * @return pluginName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Plugin")

  public String getPluginName() {
    return pluginName;
  }


  public void setPluginName(String pluginName) {
    
    
    
    this.pluginName = pluginName;
  }


  public AddPeriodicStatsLoggerPluginRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddPeriodicStatsLoggerPluginRequest schemas(List<EnumperiodicStatsLoggerPluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddPeriodicStatsLoggerPluginRequest addSchemasItem(EnumperiodicStatsLoggerPluginSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumperiodicStatsLoggerPluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumperiodicStatsLoggerPluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddPeriodicStatsLoggerPluginRequest logInterval(String logInterval) {
    
    
    
    
    this.logInterval = logInterval;
    return this;
  }

   /**
   * The duration between statistics collection and logging. A new line is logged to the output for each interval. Setting this value too small can have an impact on performance.
   * @return logInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The duration between statistics collection and logging. A new line is logged to the output for each interval. Setting this value too small can have an impact on performance.")

  public String getLogInterval() {
    return logInterval;
  }


  public void setLogInterval(String logInterval) {
    
    
    
    this.logInterval = logInterval;
  }


  public AddPeriodicStatsLoggerPluginRequest collectionInterval(String collectionInterval) {
    
    
    
    
    this.collectionInterval = collectionInterval;
    return this;
  }

   /**
   * Some of the calculated statistics, such as the average and maximum queue sizes, can use multiple samples within a log interval. This value controls how often samples are gathered. It should be a multiple of the log-interval.
   * @return collectionInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Some of the calculated statistics, such as the average and maximum queue sizes, can use multiple samples within a log interval. This value controls how often samples are gathered. It should be a multiple of the log-interval.")

  public String getCollectionInterval() {
    return collectionInterval;
  }


  public void setCollectionInterval(String collectionInterval) {
    
    
    
    this.collectionInterval = collectionInterval;
  }


  public AddPeriodicStatsLoggerPluginRequest suppressIfIdle(Boolean suppressIfIdle) {
    
    
    
    
    this.suppressIfIdle = suppressIfIdle;
    return this;
  }

   /**
   * If the server is idle during the specified interval, then do not log any output if this property is set to true. The server is idle if during the interval, no new connections were established, no operations were processed, and no operations are pending.
   * @return suppressIfIdle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the server is idle during the specified interval, then do not log any output if this property is set to true. The server is idle if during the interval, no new connections were established, no operations were processed, and no operations are pending.")

  public Boolean getSuppressIfIdle() {
    return suppressIfIdle;
  }


  public void setSuppressIfIdle(Boolean suppressIfIdle) {
    
    
    
    this.suppressIfIdle = suppressIfIdle;
  }


  public AddPeriodicStatsLoggerPluginRequest headerPrefixPerColumn(Boolean headerPrefixPerColumn) {
    
    
    
    
    this.headerPrefixPerColumn = headerPrefixPerColumn;
    return this;
  }

   /**
   * This property controls whether the header prefix, which applies to a group of columns, appears at the start of each column header or only the first column in a group.
   * @return headerPrefixPerColumn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This property controls whether the header prefix, which applies to a group of columns, appears at the start of each column header or only the first column in a group.")

  public Boolean getHeaderPrefixPerColumn() {
    return headerPrefixPerColumn;
  }


  public void setHeaderPrefixPerColumn(Boolean headerPrefixPerColumn) {
    
    
    
    this.headerPrefixPerColumn = headerPrefixPerColumn;
  }


  public AddPeriodicStatsLoggerPluginRequest emptyInsteadOfZero(Boolean emptyInsteadOfZero) {
    
    
    
    
    this.emptyInsteadOfZero = emptyInsteadOfZero;
    return this;
  }

   /**
   * This property controls whether a value in the output is shown as empty if the value is zero.
   * @return emptyInsteadOfZero
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This property controls whether a value in the output is shown as empty if the value is zero.")

  public Boolean getEmptyInsteadOfZero() {
    return emptyInsteadOfZero;
  }


  public void setEmptyInsteadOfZero(Boolean emptyInsteadOfZero) {
    
    
    
    this.emptyInsteadOfZero = emptyInsteadOfZero;
  }


  public AddPeriodicStatsLoggerPluginRequest linesBetweenHeader(Integer linesBetweenHeader) {
    
    
    
    
    this.linesBetweenHeader = linesBetweenHeader;
    return this;
  }

   /**
   * The number of lines to log between logging the header line that summarizes the columns in the table.
   * @return linesBetweenHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of lines to log between logging the header line that summarizes the columns in the table.")

  public Integer getLinesBetweenHeader() {
    return linesBetweenHeader;
  }


  public void setLinesBetweenHeader(Integer linesBetweenHeader) {
    
    
    
    this.linesBetweenHeader = linesBetweenHeader;
  }


  public AddPeriodicStatsLoggerPluginRequest includedLDAPStat(List<EnumpluginIncludedLDAPStatProp> includedLDAPStat) {
    
    
    
    
    this.includedLDAPStat = includedLDAPStat;
    return this;
  }

  public AddPeriodicStatsLoggerPluginRequest addIncludedLDAPStatItem(EnumpluginIncludedLDAPStatProp includedLDAPStatItem) {
    if (this.includedLDAPStat == null) {
      this.includedLDAPStat = new ArrayList<>();
    }
    this.includedLDAPStat.add(includedLDAPStatItem);
    return this;
  }

   /**
   * Get includedLDAPStat
   * @return includedLDAPStat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpluginIncludedLDAPStatProp> getIncludedLDAPStat() {
    return includedLDAPStat;
  }


  public void setIncludedLDAPStat(List<EnumpluginIncludedLDAPStatProp> includedLDAPStat) {
    
    
    
    this.includedLDAPStat = includedLDAPStat;
  }


  public AddPeriodicStatsLoggerPluginRequest includedResourceStat(List<EnumpluginIncludedResourceStatProp> includedResourceStat) {
    
    
    
    
    this.includedResourceStat = includedResourceStat;
    return this;
  }

  public AddPeriodicStatsLoggerPluginRequest addIncludedResourceStatItem(EnumpluginIncludedResourceStatProp includedResourceStatItem) {
    if (this.includedResourceStat == null) {
      this.includedResourceStat = new ArrayList<>();
    }
    this.includedResourceStat.add(includedResourceStatItem);
    return this;
  }

   /**
   * Get includedResourceStat
   * @return includedResourceStat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpluginIncludedResourceStatProp> getIncludedResourceStat() {
    return includedResourceStat;
  }


  public void setIncludedResourceStat(List<EnumpluginIncludedResourceStatProp> includedResourceStat) {
    
    
    
    this.includedResourceStat = includedResourceStat;
  }


  public AddPeriodicStatsLoggerPluginRequest histogramFormat(EnumpluginHistogramFormatProp histogramFormat) {
    
    
    
    
    this.histogramFormat = histogramFormat;
    return this;
  }

   /**
   * Get histogramFormat
   * @return histogramFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginHistogramFormatProp getHistogramFormat() {
    return histogramFormat;
  }


  public void setHistogramFormat(EnumpluginHistogramFormatProp histogramFormat) {
    
    
    
    this.histogramFormat = histogramFormat;
  }


  public AddPeriodicStatsLoggerPluginRequest histogramOpType(List<EnumpluginHistogramOpTypeProp> histogramOpType) {
    
    
    
    
    this.histogramOpType = histogramOpType;
    return this;
  }

  public AddPeriodicStatsLoggerPluginRequest addHistogramOpTypeItem(EnumpluginHistogramOpTypeProp histogramOpTypeItem) {
    if (this.histogramOpType == null) {
      this.histogramOpType = new ArrayList<>();
    }
    this.histogramOpType.add(histogramOpTypeItem);
    return this;
  }

   /**
   * Get histogramOpType
   * @return histogramOpType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpluginHistogramOpTypeProp> getHistogramOpType() {
    return histogramOpType;
  }


  public void setHistogramOpType(List<EnumpluginHistogramOpTypeProp> histogramOpType) {
    
    
    
    this.histogramOpType = histogramOpType;
  }


  public AddPeriodicStatsLoggerPluginRequest perApplicationLDAPStats(EnumpluginPeriodicStatsLoggerPerApplicationLDAPStatsProp perApplicationLDAPStats) {
    
    
    
    
    this.perApplicationLDAPStats = perApplicationLDAPStats;
    return this;
  }

   /**
   * Get perApplicationLDAPStats
   * @return perApplicationLDAPStats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginPeriodicStatsLoggerPerApplicationLDAPStatsProp getPerApplicationLDAPStats() {
    return perApplicationLDAPStats;
  }


  public void setPerApplicationLDAPStats(EnumpluginPeriodicStatsLoggerPerApplicationLDAPStatsProp perApplicationLDAPStats) {
    
    
    
    this.perApplicationLDAPStats = perApplicationLDAPStats;
  }


  public AddPeriodicStatsLoggerPluginRequest statusSummaryInfo(EnumpluginStatusSummaryInfoProp statusSummaryInfo) {
    
    
    
    
    this.statusSummaryInfo = statusSummaryInfo;
    return this;
  }

   /**
   * Get statusSummaryInfo
   * @return statusSummaryInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginStatusSummaryInfoProp getStatusSummaryInfo() {
    return statusSummaryInfo;
  }


  public void setStatusSummaryInfo(EnumpluginStatusSummaryInfoProp statusSummaryInfo) {
    
    
    
    this.statusSummaryInfo = statusSummaryInfo;
  }


  public AddPeriodicStatsLoggerPluginRequest ldapChangelogInfo(EnumpluginLdapChangelogInfoProp ldapChangelogInfo) {
    
    
    
    
    this.ldapChangelogInfo = ldapChangelogInfo;
    return this;
  }

   /**
   * Get ldapChangelogInfo
   * @return ldapChangelogInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginLdapChangelogInfoProp getLdapChangelogInfo() {
    return ldapChangelogInfo;
  }


  public void setLdapChangelogInfo(EnumpluginLdapChangelogInfoProp ldapChangelogInfo) {
    
    
    
    this.ldapChangelogInfo = ldapChangelogInfo;
  }


  public AddPeriodicStatsLoggerPluginRequest gaugeInfo(EnumpluginGaugeInfoProp gaugeInfo) {
    
    
    
    
    this.gaugeInfo = gaugeInfo;
    return this;
  }

   /**
   * Get gaugeInfo
   * @return gaugeInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginGaugeInfoProp getGaugeInfo() {
    return gaugeInfo;
  }


  public void setGaugeInfo(EnumpluginGaugeInfoProp gaugeInfo) {
    
    
    
    this.gaugeInfo = gaugeInfo;
  }


  public AddPeriodicStatsLoggerPluginRequest logFileFormat(EnumpluginLogFileFormatProp logFileFormat) {
    
    
    
    
    this.logFileFormat = logFileFormat;
    return this;
  }

   /**
   * Get logFileFormat
   * @return logFileFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginLogFileFormatProp getLogFileFormat() {
    return logFileFormat;
  }


  public void setLogFileFormat(EnumpluginLogFileFormatProp logFileFormat) {
    
    
    
    this.logFileFormat = logFileFormat;
  }


  public AddPeriodicStatsLoggerPluginRequest logFile(String logFile) {
    
    
    
    
    this.logFile = logFile;
    return this;
  }

   /**
   * The file name to use for the log files generated by the Periodic Stats Logger Plugin. The path to the file can be specified either as relative to the server root or as an absolute path.
   * @return logFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The file name to use for the log files generated by the Periodic Stats Logger Plugin. The path to the file can be specified either as relative to the server root or as an absolute path.")

  public String getLogFile() {
    return logFile;
  }


  public void setLogFile(String logFile) {
    
    
    
    this.logFile = logFile;
  }


  public AddPeriodicStatsLoggerPluginRequest logFilePermissions(String logFilePermissions) {
    
    
    
    
    this.logFilePermissions = logFilePermissions;
    return this;
  }

   /**
   * The UNIX permissions of the log files created by this Periodic Stats Logger Plugin.
   * @return logFilePermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UNIX permissions of the log files created by this Periodic Stats Logger Plugin.")

  public String getLogFilePermissions() {
    return logFilePermissions;
  }


  public void setLogFilePermissions(String logFilePermissions) {
    
    
    
    this.logFilePermissions = logFilePermissions;
  }


  public AddPeriodicStatsLoggerPluginRequest append(Boolean append) {
    
    
    
    
    this.append = append;
    return this;
  }

   /**
   * Specifies whether to append to existing log files.
   * @return append
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether to append to existing log files.")

  public Boolean getAppend() {
    return append;
  }


  public void setAppend(Boolean append) {
    
    
    
    this.append = append;
  }


  public AddPeriodicStatsLoggerPluginRequest rotationPolicy(List<String> rotationPolicy) {
    
    
    
    
    this.rotationPolicy = rotationPolicy;
    return this;
  }

  public AddPeriodicStatsLoggerPluginRequest addRotationPolicyItem(String rotationPolicyItem) {
    if (this.rotationPolicy == null) {
      this.rotationPolicy = new ArrayList<>();
    }
    this.rotationPolicy.add(rotationPolicyItem);
    return this;
  }

   /**
   * The rotation policy to use for the Periodic Stats Logger Plugin .
   * @return rotationPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rotation policy to use for the Periodic Stats Logger Plugin .")

  public List<String> getRotationPolicy() {
    return rotationPolicy;
  }


  public void setRotationPolicy(List<String> rotationPolicy) {
    
    
    
    this.rotationPolicy = rotationPolicy;
  }


  public AddPeriodicStatsLoggerPluginRequest rotationListener(List<String> rotationListener) {
    
    
    
    
    this.rotationListener = rotationListener;
    return this;
  }

  public AddPeriodicStatsLoggerPluginRequest addRotationListenerItem(String rotationListenerItem) {
    if (this.rotationListener == null) {
      this.rotationListener = new ArrayList<>();
    }
    this.rotationListener.add(rotationListenerItem);
    return this;
  }

   /**
   * A listener that should be notified whenever a log file is rotated out of service.
   * @return rotationListener
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A listener that should be notified whenever a log file is rotated out of service.")

  public List<String> getRotationListener() {
    return rotationListener;
  }


  public void setRotationListener(List<String> rotationListener) {
    
    
    
    this.rotationListener = rotationListener;
  }


  public AddPeriodicStatsLoggerPluginRequest retentionPolicy(List<String> retentionPolicy) {
    
    
    
    
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  public AddPeriodicStatsLoggerPluginRequest addRetentionPolicyItem(String retentionPolicyItem) {
    if (this.retentionPolicy == null) {
      this.retentionPolicy = new ArrayList<>();
    }
    this.retentionPolicy.add(retentionPolicyItem);
    return this;
  }

   /**
   * The retention policy to use for the Periodic Stats Logger Plugin .
   * @return retentionPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The retention policy to use for the Periodic Stats Logger Plugin .")

  public List<String> getRetentionPolicy() {
    return retentionPolicy;
  }


  public void setRetentionPolicy(List<String> retentionPolicy) {
    
    
    
    this.retentionPolicy = retentionPolicy;
  }


  public AddPeriodicStatsLoggerPluginRequest loggingErrorBehavior(EnumpluginLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
    return this;
  }

   /**
   * Get loggingErrorBehavior
   * @return loggingErrorBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginLoggingErrorBehaviorProp getLoggingErrorBehavior() {
    return loggingErrorBehavior;
  }


  public void setLoggingErrorBehavior(EnumpluginLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
  }


  public AddPeriodicStatsLoggerPluginRequest localDBBackendInfo(EnumpluginLocalDBBackendInfoProp localDBBackendInfo) {
    
    
    
    
    this.localDBBackendInfo = localDBBackendInfo;
    return this;
  }

   /**
   * Get localDBBackendInfo
   * @return localDBBackendInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginLocalDBBackendInfoProp getLocalDBBackendInfo() {
    return localDBBackendInfo;
  }


  public void setLocalDBBackendInfo(EnumpluginLocalDBBackendInfoProp localDBBackendInfo) {
    
    
    
    this.localDBBackendInfo = localDBBackendInfo;
  }


  public AddPeriodicStatsLoggerPluginRequest replicationInfo(EnumpluginReplicationInfoProp replicationInfo) {
    
    
    
    
    this.replicationInfo = replicationInfo;
    return this;
  }

   /**
   * Get replicationInfo
   * @return replicationInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginReplicationInfoProp getReplicationInfo() {
    return replicationInfo;
  }


  public void setReplicationInfo(EnumpluginReplicationInfoProp replicationInfo) {
    
    
    
    this.replicationInfo = replicationInfo;
  }


  public AddPeriodicStatsLoggerPluginRequest entryCacheInfo(EnumpluginEntryCacheInfoProp entryCacheInfo) {
    
    
    
    
    this.entryCacheInfo = entryCacheInfo;
    return this;
  }

   /**
   * Get entryCacheInfo
   * @return entryCacheInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginEntryCacheInfoProp getEntryCacheInfo() {
    return entryCacheInfo;
  }


  public void setEntryCacheInfo(EnumpluginEntryCacheInfoProp entryCacheInfo) {
    
    
    
    this.entryCacheInfo = entryCacheInfo;
  }


  public AddPeriodicStatsLoggerPluginRequest hostInfo(List<EnumpluginHostInfoProp> hostInfo) {
    
    
    
    
    this.hostInfo = hostInfo;
    return this;
  }

  public AddPeriodicStatsLoggerPluginRequest addHostInfoItem(EnumpluginHostInfoProp hostInfoItem) {
    if (this.hostInfo == null) {
      this.hostInfo = new ArrayList<>();
    }
    this.hostInfo.add(hostInfoItem);
    return this;
  }

   /**
   * Get hostInfo
   * @return hostInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpluginHostInfoProp> getHostInfo() {
    return hostInfo;
  }


  public void setHostInfo(List<EnumpluginHostInfoProp> hostInfo) {
    
    
    
    this.hostInfo = hostInfo;
  }


  public AddPeriodicStatsLoggerPluginRequest includedLDAPApplication(List<String> includedLDAPApplication) {
    
    
    
    
    this.includedLDAPApplication = includedLDAPApplication;
    return this;
  }

  public AddPeriodicStatsLoggerPluginRequest addIncludedLDAPApplicationItem(String includedLDAPApplicationItem) {
    if (this.includedLDAPApplication == null) {
      this.includedLDAPApplication = new ArrayList<>();
    }
    this.includedLDAPApplication.add(includedLDAPApplicationItem);
    return this;
  }

   /**
   * If statistics should not be included for all applications, this property names the subset of applications that should be included.
   * @return includedLDAPApplication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If statistics should not be included for all applications, this property names the subset of applications that should be included.")

  public List<String> getIncludedLDAPApplication() {
    return includedLDAPApplication;
  }


  public void setIncludedLDAPApplication(List<String> includedLDAPApplication) {
    
    
    
    this.includedLDAPApplication = includedLDAPApplication;
  }


  public AddPeriodicStatsLoggerPluginRequest enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddPeriodicStatsLoggerPluginRequest instance itself
   */
  public AddPeriodicStatsLoggerPluginRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddPeriodicStatsLoggerPluginRequest addPeriodicStatsLoggerPluginRequest = (AddPeriodicStatsLoggerPluginRequest) o;
    return Objects.equals(this.pluginName, addPeriodicStatsLoggerPluginRequest.pluginName) &&
        Objects.equals(this.description, addPeriodicStatsLoggerPluginRequest.description) &&
        Objects.equals(this.schemas, addPeriodicStatsLoggerPluginRequest.schemas) &&
        Objects.equals(this.logInterval, addPeriodicStatsLoggerPluginRequest.logInterval) &&
        Objects.equals(this.collectionInterval, addPeriodicStatsLoggerPluginRequest.collectionInterval) &&
        Objects.equals(this.suppressIfIdle, addPeriodicStatsLoggerPluginRequest.suppressIfIdle) &&
        Objects.equals(this.headerPrefixPerColumn, addPeriodicStatsLoggerPluginRequest.headerPrefixPerColumn) &&
        Objects.equals(this.emptyInsteadOfZero, addPeriodicStatsLoggerPluginRequest.emptyInsteadOfZero) &&
        Objects.equals(this.linesBetweenHeader, addPeriodicStatsLoggerPluginRequest.linesBetweenHeader) &&
        Objects.equals(this.includedLDAPStat, addPeriodicStatsLoggerPluginRequest.includedLDAPStat) &&
        Objects.equals(this.includedResourceStat, addPeriodicStatsLoggerPluginRequest.includedResourceStat) &&
        Objects.equals(this.histogramFormat, addPeriodicStatsLoggerPluginRequest.histogramFormat) &&
        Objects.equals(this.histogramOpType, addPeriodicStatsLoggerPluginRequest.histogramOpType) &&
        Objects.equals(this.perApplicationLDAPStats, addPeriodicStatsLoggerPluginRequest.perApplicationLDAPStats) &&
        Objects.equals(this.statusSummaryInfo, addPeriodicStatsLoggerPluginRequest.statusSummaryInfo) &&
        Objects.equals(this.ldapChangelogInfo, addPeriodicStatsLoggerPluginRequest.ldapChangelogInfo) &&
        Objects.equals(this.gaugeInfo, addPeriodicStatsLoggerPluginRequest.gaugeInfo) &&
        Objects.equals(this.logFileFormat, addPeriodicStatsLoggerPluginRequest.logFileFormat) &&
        Objects.equals(this.logFile, addPeriodicStatsLoggerPluginRequest.logFile) &&
        Objects.equals(this.logFilePermissions, addPeriodicStatsLoggerPluginRequest.logFilePermissions) &&
        Objects.equals(this.append, addPeriodicStatsLoggerPluginRequest.append) &&
        Objects.equals(this.rotationPolicy, addPeriodicStatsLoggerPluginRequest.rotationPolicy) &&
        Objects.equals(this.rotationListener, addPeriodicStatsLoggerPluginRequest.rotationListener) &&
        Objects.equals(this.retentionPolicy, addPeriodicStatsLoggerPluginRequest.retentionPolicy) &&
        Objects.equals(this.loggingErrorBehavior, addPeriodicStatsLoggerPluginRequest.loggingErrorBehavior) &&
        Objects.equals(this.localDBBackendInfo, addPeriodicStatsLoggerPluginRequest.localDBBackendInfo) &&
        Objects.equals(this.replicationInfo, addPeriodicStatsLoggerPluginRequest.replicationInfo) &&
        Objects.equals(this.entryCacheInfo, addPeriodicStatsLoggerPluginRequest.entryCacheInfo) &&
        Objects.equals(this.hostInfo, addPeriodicStatsLoggerPluginRequest.hostInfo) &&
        Objects.equals(this.includedLDAPApplication, addPeriodicStatsLoggerPluginRequest.includedLDAPApplication) &&
        Objects.equals(this.enabled, addPeriodicStatsLoggerPluginRequest.enabled)&&
        Objects.equals(this.additionalProperties, addPeriodicStatsLoggerPluginRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pluginName, description, schemas, logInterval, collectionInterval, suppressIfIdle, headerPrefixPerColumn, emptyInsteadOfZero, linesBetweenHeader, includedLDAPStat, includedResourceStat, histogramFormat, histogramOpType, perApplicationLDAPStats, statusSummaryInfo, ldapChangelogInfo, gaugeInfo, logFileFormat, logFile, logFilePermissions, append, rotationPolicy, rotationListener, retentionPolicy, loggingErrorBehavior, localDBBackendInfo, replicationInfo, entryCacheInfo, hostInfo, includedLDAPApplication, enabled, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddPeriodicStatsLoggerPluginRequest {\n");
    sb.append("    pluginName: ").append(toIndentedString(pluginName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    logInterval: ").append(toIndentedString(logInterval)).append("\n");
    sb.append("    collectionInterval: ").append(toIndentedString(collectionInterval)).append("\n");
    sb.append("    suppressIfIdle: ").append(toIndentedString(suppressIfIdle)).append("\n");
    sb.append("    headerPrefixPerColumn: ").append(toIndentedString(headerPrefixPerColumn)).append("\n");
    sb.append("    emptyInsteadOfZero: ").append(toIndentedString(emptyInsteadOfZero)).append("\n");
    sb.append("    linesBetweenHeader: ").append(toIndentedString(linesBetweenHeader)).append("\n");
    sb.append("    includedLDAPStat: ").append(toIndentedString(includedLDAPStat)).append("\n");
    sb.append("    includedResourceStat: ").append(toIndentedString(includedResourceStat)).append("\n");
    sb.append("    histogramFormat: ").append(toIndentedString(histogramFormat)).append("\n");
    sb.append("    histogramOpType: ").append(toIndentedString(histogramOpType)).append("\n");
    sb.append("    perApplicationLDAPStats: ").append(toIndentedString(perApplicationLDAPStats)).append("\n");
    sb.append("    statusSummaryInfo: ").append(toIndentedString(statusSummaryInfo)).append("\n");
    sb.append("    ldapChangelogInfo: ").append(toIndentedString(ldapChangelogInfo)).append("\n");
    sb.append("    gaugeInfo: ").append(toIndentedString(gaugeInfo)).append("\n");
    sb.append("    logFileFormat: ").append(toIndentedString(logFileFormat)).append("\n");
    sb.append("    logFile: ").append(toIndentedString(logFile)).append("\n");
    sb.append("    logFilePermissions: ").append(toIndentedString(logFilePermissions)).append("\n");
    sb.append("    append: ").append(toIndentedString(append)).append("\n");
    sb.append("    rotationPolicy: ").append(toIndentedString(rotationPolicy)).append("\n");
    sb.append("    rotationListener: ").append(toIndentedString(rotationListener)).append("\n");
    sb.append("    retentionPolicy: ").append(toIndentedString(retentionPolicy)).append("\n");
    sb.append("    loggingErrorBehavior: ").append(toIndentedString(loggingErrorBehavior)).append("\n");
    sb.append("    localDBBackendInfo: ").append(toIndentedString(localDBBackendInfo)).append("\n");
    sb.append("    replicationInfo: ").append(toIndentedString(replicationInfo)).append("\n");
    sb.append("    entryCacheInfo: ").append(toIndentedString(entryCacheInfo)).append("\n");
    sb.append("    hostInfo: ").append(toIndentedString(hostInfo)).append("\n");
    sb.append("    includedLDAPApplication: ").append(toIndentedString(includedLDAPApplication)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pluginName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("logInterval");
    openapiFields.add("collectionInterval");
    openapiFields.add("suppressIfIdle");
    openapiFields.add("headerPrefixPerColumn");
    openapiFields.add("emptyInsteadOfZero");
    openapiFields.add("linesBetweenHeader");
    openapiFields.add("includedLDAPStat");
    openapiFields.add("includedResourceStat");
    openapiFields.add("histogramFormat");
    openapiFields.add("histogramOpType");
    openapiFields.add("perApplicationLDAPStats");
    openapiFields.add("statusSummaryInfo");
    openapiFields.add("ldapChangelogInfo");
    openapiFields.add("gaugeInfo");
    openapiFields.add("logFileFormat");
    openapiFields.add("logFile");
    openapiFields.add("logFilePermissions");
    openapiFields.add("append");
    openapiFields.add("rotationPolicy");
    openapiFields.add("rotationListener");
    openapiFields.add("retentionPolicy");
    openapiFields.add("loggingErrorBehavior");
    openapiFields.add("localDBBackendInfo");
    openapiFields.add("replicationInfo");
    openapiFields.add("entryCacheInfo");
    openapiFields.add("hostInfo");
    openapiFields.add("includedLDAPApplication");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pluginName");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("logFile");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddPeriodicStatsLoggerPluginRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddPeriodicStatsLoggerPluginRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddPeriodicStatsLoggerPluginRequest is not found in the empty JSON string", AddPeriodicStatsLoggerPluginRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddPeriodicStatsLoggerPluginRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("pluginName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pluginName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("logInterval") != null && !jsonObj.get("logInterval").isJsonNull()) && !jsonObj.get("logInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logInterval").toString()));
      }
      if ((jsonObj.get("collectionInterval") != null && !jsonObj.get("collectionInterval").isJsonNull()) && !jsonObj.get("collectionInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collectionInterval").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedLDAPStat") != null && !jsonObj.get("includedLDAPStat").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedLDAPStat` to be an array in the JSON string but got `%s`", jsonObj.get("includedLDAPStat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedResourceStat") != null && !jsonObj.get("includedResourceStat").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedResourceStat` to be an array in the JSON string but got `%s`", jsonObj.get("includedResourceStat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("histogramOpType") != null && !jsonObj.get("histogramOpType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `histogramOpType` to be an array in the JSON string but got `%s`", jsonObj.get("histogramOpType").toString()));
      }
      if (!jsonObj.get("logFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFile").toString()));
      }
      if ((jsonObj.get("logFilePermissions") != null && !jsonObj.get("logFilePermissions").isJsonNull()) && !jsonObj.get("logFilePermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFilePermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFilePermissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rotationPolicy") != null && !jsonObj.get("rotationPolicy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotationPolicy` to be an array in the JSON string but got `%s`", jsonObj.get("rotationPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rotationListener") != null && !jsonObj.get("rotationListener").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotationListener` to be an array in the JSON string but got `%s`", jsonObj.get("rotationListener").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("retentionPolicy") != null && !jsonObj.get("retentionPolicy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionPolicy` to be an array in the JSON string but got `%s`", jsonObj.get("retentionPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hostInfo") != null && !jsonObj.get("hostInfo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostInfo` to be an array in the JSON string but got `%s`", jsonObj.get("hostInfo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedLDAPApplication") != null && !jsonObj.get("includedLDAPApplication").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedLDAPApplication` to be an array in the JSON string but got `%s`", jsonObj.get("includedLDAPApplication").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddPeriodicStatsLoggerPluginRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddPeriodicStatsLoggerPluginRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddPeriodicStatsLoggerPluginRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddPeriodicStatsLoggerPluginRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddPeriodicStatsLoggerPluginRequest>() {
           @Override
           public void write(JsonWriter out, AddPeriodicStatsLoggerPluginRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddPeriodicStatsLoggerPluginRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddPeriodicStatsLoggerPluginRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddPeriodicStatsLoggerPluginRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddPeriodicStatsLoggerPluginRequest
  * @throws IOException if the JSON string is invalid with respect to AddPeriodicStatsLoggerPluginRequest
  */
  public static AddPeriodicStatsLoggerPluginRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddPeriodicStatsLoggerPluginRequest.class);
  }

 /**
  * Convert an instance of AddPeriodicStatsLoggerPluginRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

