/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumdnMapperPluginSchemaUrn;
import com.konfigthis.client.model.EnumpluginPluginTypeProp;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DnMapperPluginResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DnMapperPluginResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumdnMapperPluginSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUGIN_TYPE = "pluginType";
  @SerializedName(SERIALIZED_NAME_PLUGIN_TYPE)
  private List<EnumpluginPluginTypeProp> pluginType = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_D_N = "sourceDN";
  @SerializedName(SERIALIZED_NAME_SOURCE_D_N)
  private String sourceDN;

  public static final String SERIALIZED_NAME_TARGET_D_N = "targetDN";
  @SerializedName(SERIALIZED_NAME_TARGET_D_N)
  private String targetDN;

  public static final String SERIALIZED_NAME_ENABLE_ATTRIBUTE_MAPPING = "enableAttributeMapping";
  @SerializedName(SERIALIZED_NAME_ENABLE_ATTRIBUTE_MAPPING)
  private Boolean enableAttributeMapping;

  public static final String SERIALIZED_NAME_MAP_ATTRIBUTE = "mapAttribute";
  @SerializedName(SERIALIZED_NAME_MAP_ATTRIBUTE)
  private List<String> mapAttribute = null;

  public static final String SERIALIZED_NAME_ENABLE_CONTROL_MAPPING = "enableControlMapping";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONTROL_MAPPING)
  private Boolean enableControlMapping;

  public static final String SERIALIZED_NAME_ALWAYS_MAP_RESPONSES = "alwaysMapResponses";
  @SerializedName(SERIALIZED_NAME_ALWAYS_MAP_RESPONSES)
  private Boolean alwaysMapResponses;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS = "invokeForInternalOperations";
  @SerializedName(SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS)
  private Boolean invokeForInternalOperations;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public DnMapperPluginResponse() {
  }

  public DnMapperPluginResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Plugin
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Plugin")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public DnMapperPluginResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public DnMapperPluginResponse schemas(List<EnumdnMapperPluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public DnMapperPluginResponse addSchemasItem(EnumdnMapperPluginSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumdnMapperPluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumdnMapperPluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public DnMapperPluginResponse pluginType(List<EnumpluginPluginTypeProp> pluginType) {
    
    
    
    
    this.pluginType = pluginType;
    return this;
  }

  public DnMapperPluginResponse addPluginTypeItem(EnumpluginPluginTypeProp pluginTypeItem) {
    this.pluginType.add(pluginTypeItem);
    return this;
  }

   /**
   * Get pluginType
   * @return pluginType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumpluginPluginTypeProp> getPluginType() {
    return pluginType;
  }


  public void setPluginType(List<EnumpluginPluginTypeProp> pluginType) {
    
    
    
    this.pluginType = pluginType;
  }


  public DnMapperPluginResponse sourceDN(String sourceDN) {
    
    
    
    
    this.sourceDN = sourceDN;
    return this;
  }

   /**
   * Specifies the source DN that may appear in client requests which should be remapped to the target DN. Note that the source DN must not be equal to the target DN.
   * @return sourceDN
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the source DN that may appear in client requests which should be remapped to the target DN. Note that the source DN must not be equal to the target DN.")

  public String getSourceDN() {
    return sourceDN;
  }


  public void setSourceDN(String sourceDN) {
    
    
    
    this.sourceDN = sourceDN;
  }


  public DnMapperPluginResponse targetDN(String targetDN) {
    
    
    
    
    this.targetDN = targetDN;
    return this;
  }

   /**
   * Specifies the DN to which the source DN should be mapped. Note that the target DN must not be equal to the source DN.
   * @return targetDN
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the DN to which the source DN should be mapped. Note that the target DN must not be equal to the source DN.")

  public String getTargetDN() {
    return targetDN;
  }


  public void setTargetDN(String targetDN) {
    
    
    
    this.targetDN = targetDN;
  }


  public DnMapperPluginResponse enableAttributeMapping(Boolean enableAttributeMapping) {
    
    
    
    
    this.enableAttributeMapping = enableAttributeMapping;
    return this;
  }

   /**
   * Indicates whether DN mapping should be applied to the values of attributes with appropriate syntaxes.
   * @return enableAttributeMapping
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether DN mapping should be applied to the values of attributes with appropriate syntaxes.")

  public Boolean getEnableAttributeMapping() {
    return enableAttributeMapping;
  }


  public void setEnableAttributeMapping(Boolean enableAttributeMapping) {
    
    
    
    this.enableAttributeMapping = enableAttributeMapping;
  }


  public DnMapperPluginResponse mapAttribute(List<String> mapAttribute) {
    
    
    
    
    this.mapAttribute = mapAttribute;
    return this;
  }

  public DnMapperPluginResponse addMapAttributeItem(String mapAttributeItem) {
    if (this.mapAttribute == null) {
      this.mapAttribute = new ArrayList<>();
    }
    this.mapAttribute.add(mapAttributeItem);
    return this;
  }

   /**
   * Specifies a set of specific attributes for which DN mapping should be applied. This will only be applicable if the enable-attribute-mapping property has a value of \&quot;true\&quot;. Any attributes listed must be defined in the server schema with either the distinguished name syntax or the name and optional UID syntax.
   * @return mapAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of specific attributes for which DN mapping should be applied. This will only be applicable if the enable-attribute-mapping property has a value of \"true\". Any attributes listed must be defined in the server schema with either the distinguished name syntax or the name and optional UID syntax.")

  public List<String> getMapAttribute() {
    return mapAttribute;
  }


  public void setMapAttribute(List<String> mapAttribute) {
    
    
    
    this.mapAttribute = mapAttribute;
  }


  public DnMapperPluginResponse enableControlMapping(Boolean enableControlMapping) {
    
    
    
    
    this.enableControlMapping = enableControlMapping;
    return this;
  }

   /**
   * Indicates whether DN mapping should be applied to DNs that may be present in specific controls. DN mapping will only be applied for control types which are specifically supported by the DN mapper plugin.
   * @return enableControlMapping
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether DN mapping should be applied to DNs that may be present in specific controls. DN mapping will only be applied for control types which are specifically supported by the DN mapper plugin.")

  public Boolean getEnableControlMapping() {
    return enableControlMapping;
  }


  public void setEnableControlMapping(Boolean enableControlMapping) {
    
    
    
    this.enableControlMapping = enableControlMapping;
  }


  public DnMapperPluginResponse alwaysMapResponses(Boolean alwaysMapResponses) {
    
    
    
    
    this.alwaysMapResponses = alwaysMapResponses;
    return this;
  }

   /**
   * Indicates whether DNs in response messages containing the target DN should always be remapped back to the source DN. If this is \&quot;false\&quot;, then mapping will be performed for a response message only if one or more elements of the associated request are mapped. Otherwise, the mapping will be performed for all responses regardless of whether the mapping was applied to the request.
   * @return alwaysMapResponses
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether DNs in response messages containing the target DN should always be remapped back to the source DN. If this is \"false\", then mapping will be performed for a response message only if one or more elements of the associated request are mapped. Otherwise, the mapping will be performed for all responses regardless of whether the mapping was applied to the request.")

  public Boolean getAlwaysMapResponses() {
    return alwaysMapResponses;
  }


  public void setAlwaysMapResponses(Boolean alwaysMapResponses) {
    
    
    
    this.alwaysMapResponses = alwaysMapResponses;
  }


  public DnMapperPluginResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public DnMapperPluginResponse invokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
    return this;
  }

   /**
   * Indicates whether the plug-in should be invoked for internal operations.
   * @return invokeForInternalOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the plug-in should be invoked for internal operations.")

  public Boolean getInvokeForInternalOperations() {
    return invokeForInternalOperations;
  }


  public void setInvokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
  }


  public DnMapperPluginResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public DnMapperPluginResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DnMapperPluginResponse instance itself
   */
  public DnMapperPluginResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnMapperPluginResponse dnMapperPluginResponse = (DnMapperPluginResponse) o;
    return Objects.equals(this.id, dnMapperPluginResponse.id) &&
        Objects.equals(this.description, dnMapperPluginResponse.description) &&
        Objects.equals(this.schemas, dnMapperPluginResponse.schemas) &&
        Objects.equals(this.pluginType, dnMapperPluginResponse.pluginType) &&
        Objects.equals(this.sourceDN, dnMapperPluginResponse.sourceDN) &&
        Objects.equals(this.targetDN, dnMapperPluginResponse.targetDN) &&
        Objects.equals(this.enableAttributeMapping, dnMapperPluginResponse.enableAttributeMapping) &&
        Objects.equals(this.mapAttribute, dnMapperPluginResponse.mapAttribute) &&
        Objects.equals(this.enableControlMapping, dnMapperPluginResponse.enableControlMapping) &&
        Objects.equals(this.alwaysMapResponses, dnMapperPluginResponse.alwaysMapResponses) &&
        Objects.equals(this.enabled, dnMapperPluginResponse.enabled) &&
        Objects.equals(this.invokeForInternalOperations, dnMapperPluginResponse.invokeForInternalOperations) &&
        Objects.equals(this.meta, dnMapperPluginResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, dnMapperPluginResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, dnMapperPluginResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, pluginType, sourceDN, targetDN, enableAttributeMapping, mapAttribute, enableControlMapping, alwaysMapResponses, enabled, invokeForInternalOperations, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnMapperPluginResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    pluginType: ").append(toIndentedString(pluginType)).append("\n");
    sb.append("    sourceDN: ").append(toIndentedString(sourceDN)).append("\n");
    sb.append("    targetDN: ").append(toIndentedString(targetDN)).append("\n");
    sb.append("    enableAttributeMapping: ").append(toIndentedString(enableAttributeMapping)).append("\n");
    sb.append("    mapAttribute: ").append(toIndentedString(mapAttribute)).append("\n");
    sb.append("    enableControlMapping: ").append(toIndentedString(enableControlMapping)).append("\n");
    sb.append("    alwaysMapResponses: ").append(toIndentedString(alwaysMapResponses)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    invokeForInternalOperations: ").append(toIndentedString(invokeForInternalOperations)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("pluginType");
    openapiFields.add("sourceDN");
    openapiFields.add("targetDN");
    openapiFields.add("enableAttributeMapping");
    openapiFields.add("mapAttribute");
    openapiFields.add("enableControlMapping");
    openapiFields.add("alwaysMapResponses");
    openapiFields.add("enabled");
    openapiFields.add("invokeForInternalOperations");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("pluginType");
    openapiRequiredFields.add("sourceDN");
    openapiRequiredFields.add("targetDN");
    openapiRequiredFields.add("enableAttributeMapping");
    openapiRequiredFields.add("enableControlMapping");
    openapiRequiredFields.add("alwaysMapResponses");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DnMapperPluginResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DnMapperPluginResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DnMapperPluginResponse is not found in the empty JSON string", DnMapperPluginResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DnMapperPluginResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pluginType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pluginType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginType` to be an array in the JSON string but got `%s`", jsonObj.get("pluginType").toString()));
      }
      if (!jsonObj.get("sourceDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDN").toString()));
      }
      if (!jsonObj.get("targetDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mapAttribute") != null && !jsonObj.get("mapAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("mapAttribute").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DnMapperPluginResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DnMapperPluginResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DnMapperPluginResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DnMapperPluginResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DnMapperPluginResponse>() {
           @Override
           public void write(JsonWriter out, DnMapperPluginResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DnMapperPluginResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DnMapperPluginResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DnMapperPluginResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DnMapperPluginResponse
  * @throws IOException if the JSON string is invalid with respect to DnMapperPluginResponse
  */
  public static DnMapperPluginResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DnMapperPluginResponse.class);
  }

 /**
  * Convert an instance of DnMapperPluginResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

