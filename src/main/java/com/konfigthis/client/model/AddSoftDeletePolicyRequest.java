/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumsoftDeletePolicySchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddSoftDeletePolicyRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddSoftDeletePolicyRequest {
  public static final String SERIALIZED_NAME_POLICY_NAME = "policyName";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumsoftDeletePolicySchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_AUTO_SOFT_DELETE_CONNECTION_CRITERIA = "autoSoftDeleteConnectionCriteria";
  @SerializedName(SERIALIZED_NAME_AUTO_SOFT_DELETE_CONNECTION_CRITERIA)
  private String autoSoftDeleteConnectionCriteria;

  public static final String SERIALIZED_NAME_AUTO_SOFT_DELETE_REQUEST_CRITERIA = "autoSoftDeleteRequestCriteria";
  @SerializedName(SERIALIZED_NAME_AUTO_SOFT_DELETE_REQUEST_CRITERIA)
  private String autoSoftDeleteRequestCriteria;

  public static final String SERIALIZED_NAME_SOFT_DELETE_RETENTION_TIME = "softDeleteRetentionTime";
  @SerializedName(SERIALIZED_NAME_SOFT_DELETE_RETENTION_TIME)
  private String softDeleteRetentionTime;

  public static final String SERIALIZED_NAME_SOFT_DELETE_RETAIN_NUMBER_OF_ENTRIES = "softDeleteRetainNumberOfEntries";
  @SerializedName(SERIALIZED_NAME_SOFT_DELETE_RETAIN_NUMBER_OF_ENTRIES)
  private Integer softDeleteRetainNumberOfEntries;

  public AddSoftDeletePolicyRequest() {
  }

  public AddSoftDeletePolicyRequest policyName(String policyName) {
    
    
    
    
    this.policyName = policyName;
    return this;
  }

   /**
   * Name of the new Soft Delete Policy
   * @return policyName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Soft Delete Policy")

  public String getPolicyName() {
    return policyName;
  }


  public void setPolicyName(String policyName) {
    
    
    
    this.policyName = policyName;
  }


  public AddSoftDeletePolicyRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Soft Delete Policy
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Soft Delete Policy")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddSoftDeletePolicyRequest schemas(List<EnumsoftDeletePolicySchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddSoftDeletePolicyRequest addSchemasItem(EnumsoftDeletePolicySchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumsoftDeletePolicySchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumsoftDeletePolicySchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddSoftDeletePolicyRequest autoSoftDeleteConnectionCriteria(String autoSoftDeleteConnectionCriteria) {
    
    
    
    
    this.autoSoftDeleteConnectionCriteria = autoSoftDeleteConnectionCriteria;
    return this;
  }

   /**
   * Connection criteria used to automatically identify a delete operation for processing as a soft delete request.
   * @return autoSoftDeleteConnectionCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Connection criteria used to automatically identify a delete operation for processing as a soft delete request.")

  public String getAutoSoftDeleteConnectionCriteria() {
    return autoSoftDeleteConnectionCriteria;
  }


  public void setAutoSoftDeleteConnectionCriteria(String autoSoftDeleteConnectionCriteria) {
    
    
    
    this.autoSoftDeleteConnectionCriteria = autoSoftDeleteConnectionCriteria;
  }


  public AddSoftDeletePolicyRequest autoSoftDeleteRequestCriteria(String autoSoftDeleteRequestCriteria) {
    
    
    
    
    this.autoSoftDeleteRequestCriteria = autoSoftDeleteRequestCriteria;
    return this;
  }

   /**
   * Request criteria used to automatically identify a delete operation for processing as a soft delete request.
   * @return autoSoftDeleteRequestCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request criteria used to automatically identify a delete operation for processing as a soft delete request.")

  public String getAutoSoftDeleteRequestCriteria() {
    return autoSoftDeleteRequestCriteria;
  }


  public void setAutoSoftDeleteRequestCriteria(String autoSoftDeleteRequestCriteria) {
    
    
    
    this.autoSoftDeleteRequestCriteria = autoSoftDeleteRequestCriteria;
  }


  public AddSoftDeletePolicyRequest softDeleteRetentionTime(String softDeleteRetentionTime) {
    
    
    
    
    this.softDeleteRetentionTime = softDeleteRetentionTime;
    return this;
  }

   /**
   * Specifies the maximum length of time that soft delete entries are retained before they are eligible to purged automatically.
   * @return softDeleteRetentionTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that soft delete entries are retained before they are eligible to purged automatically.")

  public String getSoftDeleteRetentionTime() {
    return softDeleteRetentionTime;
  }


  public void setSoftDeleteRetentionTime(String softDeleteRetentionTime) {
    
    
    
    this.softDeleteRetentionTime = softDeleteRetentionTime;
  }


  public AddSoftDeletePolicyRequest softDeleteRetainNumberOfEntries(Integer softDeleteRetainNumberOfEntries) {
    
    
    
    
    this.softDeleteRetainNumberOfEntries = softDeleteRetainNumberOfEntries;
    return this;
  }

   /**
   * Specifies the number of soft deleted entries to retain before the oldest entries are purged.
   * @return softDeleteRetainNumberOfEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of soft deleted entries to retain before the oldest entries are purged.")

  public Integer getSoftDeleteRetainNumberOfEntries() {
    return softDeleteRetainNumberOfEntries;
  }


  public void setSoftDeleteRetainNumberOfEntries(Integer softDeleteRetainNumberOfEntries) {
    
    
    
    this.softDeleteRetainNumberOfEntries = softDeleteRetainNumberOfEntries;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddSoftDeletePolicyRequest instance itself
   */
  public AddSoftDeletePolicyRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddSoftDeletePolicyRequest addSoftDeletePolicyRequest = (AddSoftDeletePolicyRequest) o;
    return Objects.equals(this.policyName, addSoftDeletePolicyRequest.policyName) &&
        Objects.equals(this.description, addSoftDeletePolicyRequest.description) &&
        Objects.equals(this.schemas, addSoftDeletePolicyRequest.schemas) &&
        Objects.equals(this.autoSoftDeleteConnectionCriteria, addSoftDeletePolicyRequest.autoSoftDeleteConnectionCriteria) &&
        Objects.equals(this.autoSoftDeleteRequestCriteria, addSoftDeletePolicyRequest.autoSoftDeleteRequestCriteria) &&
        Objects.equals(this.softDeleteRetentionTime, addSoftDeletePolicyRequest.softDeleteRetentionTime) &&
        Objects.equals(this.softDeleteRetainNumberOfEntries, addSoftDeletePolicyRequest.softDeleteRetainNumberOfEntries)&&
        Objects.equals(this.additionalProperties, addSoftDeletePolicyRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyName, description, schemas, autoSoftDeleteConnectionCriteria, autoSoftDeleteRequestCriteria, softDeleteRetentionTime, softDeleteRetainNumberOfEntries, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddSoftDeletePolicyRequest {\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    autoSoftDeleteConnectionCriteria: ").append(toIndentedString(autoSoftDeleteConnectionCriteria)).append("\n");
    sb.append("    autoSoftDeleteRequestCriteria: ").append(toIndentedString(autoSoftDeleteRequestCriteria)).append("\n");
    sb.append("    softDeleteRetentionTime: ").append(toIndentedString(softDeleteRetentionTime)).append("\n");
    sb.append("    softDeleteRetainNumberOfEntries: ").append(toIndentedString(softDeleteRetainNumberOfEntries)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policyName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("autoSoftDeleteConnectionCriteria");
    openapiFields.add("autoSoftDeleteRequestCriteria");
    openapiFields.add("softDeleteRetentionTime");
    openapiFields.add("softDeleteRetainNumberOfEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("policyName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddSoftDeletePolicyRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddSoftDeletePolicyRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddSoftDeletePolicyRequest is not found in the empty JSON string", AddSoftDeletePolicyRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddSoftDeletePolicyRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("policyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("autoSoftDeleteConnectionCriteria") != null && !jsonObj.get("autoSoftDeleteConnectionCriteria").isJsonNull()) && !jsonObj.get("autoSoftDeleteConnectionCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoSoftDeleteConnectionCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoSoftDeleteConnectionCriteria").toString()));
      }
      if ((jsonObj.get("autoSoftDeleteRequestCriteria") != null && !jsonObj.get("autoSoftDeleteRequestCriteria").isJsonNull()) && !jsonObj.get("autoSoftDeleteRequestCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoSoftDeleteRequestCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoSoftDeleteRequestCriteria").toString()));
      }
      if ((jsonObj.get("softDeleteRetentionTime") != null && !jsonObj.get("softDeleteRetentionTime").isJsonNull()) && !jsonObj.get("softDeleteRetentionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `softDeleteRetentionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("softDeleteRetentionTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddSoftDeletePolicyRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddSoftDeletePolicyRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddSoftDeletePolicyRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddSoftDeletePolicyRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddSoftDeletePolicyRequest>() {
           @Override
           public void write(JsonWriter out, AddSoftDeletePolicyRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddSoftDeletePolicyRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddSoftDeletePolicyRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddSoftDeletePolicyRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddSoftDeletePolicyRequest
  * @throws IOException if the JSON string is invalid with respect to AddSoftDeletePolicyRequest
  */
  public static AddSoftDeletePolicyRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddSoftDeletePolicyRequest.class);
  }

 /**
  * Convert an instance of AddSoftDeletePolicyRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

