/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies a set of controls that clients should be allowed to include in bind requests. As bind requests are evaluated as the unauthenticated user, any controls included in this set will be permitted for any bind attempt. If you wish to grant permission for any bind controls not listed here, then the allowed-bind-control-oid property may be used to accomplish that.
 */
@JsonAdapter(EnumaccessControlHandlerAllowedBindControlProp.Adapter.class)public enum EnumaccessControlHandlerAllowedBindControlProp {
  
  ACCESS_LOG_FIELD("access-log-field"),
  
  ADMINISTRATIVE_OPERATION("administrative-operation"),
  
  AUTHORIZATION_IDENTITY("authorization-identity"),
  
  GENERATE_ACCESS_TOKEN("generate-access-token"),
  
  GET_AUTHORIZATION_ENTRY("get-authorization-entry"),
  
  GET_BACKEND_SET_ID("get-backend-set-id"),
  
  GET_PASSWORD_POLICY_STATE_ISSUES("get-password-policy-state-issues"),
  
  GET_RECENT_LOGIN_HISTORY("get-recent-login-history"),
  
  GET_SERVER_ID("get-server-id"),
  
  GET_USER_RESOURCE_LIMITS("get-user-resource-limits"),
  
  INTERMEDIATE_CLIENT("intermediate-client"),
  
  OPERATION_PURPOSE("operation-purpose"),
  
  PASSWORD_POLICY("password-policy"),
  
  RETAIN_IDENTITY("retain-identity"),
  
  ROUTE_TO_BACKEND_SET("route-to-backend-set"),
  
  ROUTE_TO_SERVER("route-to-server"),
  
  SUPPRESS_OPERATIONAL_ATTRIBUTE_UPDATE("suppress-operational-attribute-update");

  private String value;

  EnumaccessControlHandlerAllowedBindControlProp(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EnumaccessControlHandlerAllowedBindControlProp fromValue(String value) {
    for (EnumaccessControlHandlerAllowedBindControlProp b : EnumaccessControlHandlerAllowedBindControlProp.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EnumaccessControlHandlerAllowedBindControlProp> {
    @Override
    public void write(final JsonWriter jsonWriter, final EnumaccessControlHandlerAllowedBindControlProp enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EnumaccessControlHandlerAllowedBindControlProp read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EnumaccessControlHandlerAllowedBindControlProp.fromValue(value);
    }
  }
}

