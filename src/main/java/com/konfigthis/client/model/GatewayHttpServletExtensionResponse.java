/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumgatewayHttpServletExtensionSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GatewayHttpServletExtensionResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GatewayHttpServletExtensionResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumgatewayHttpServletExtensionSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXCLUDED_A_P_I_ENDPOINT = "excludedAPIEndpoint";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_A_P_I_ENDPOINT)
  private List<String> excludedAPIEndpoint = null;

  public static final String SERIALIZED_NAME_REQUEST_LIMIT = "requestLimit";
  @SerializedName(SERIALIZED_NAME_REQUEST_LIMIT)
  private String requestLimit;

  public static final String SERIALIZED_NAME_RESPONSE_LIMIT = "responseLimit";
  @SerializedName(SERIALIZED_NAME_RESPONSE_LIMIT)
  private String responseLimit;

  public static final String SERIALIZED_NAME_NUM_FORWARD_THREADS = "numForwardThreads";
  @SerializedName(SERIALIZED_NAME_NUM_FORWARD_THREADS)
  private Integer numForwardThreads;

  public static final String SERIALIZED_NAME_CROSS_ORIGIN_POLICY = "crossOriginPolicy";
  @SerializedName(SERIALIZED_NAME_CROSS_ORIGIN_POLICY)
  private String crossOriginPolicy;

  public static final String SERIALIZED_NAME_RESPONSE_HEADER = "responseHeader";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER)
  private List<String> responseHeader = null;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public GatewayHttpServletExtensionResponse() {
  }

  public GatewayHttpServletExtensionResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this HTTP Servlet Extension
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this HTTP Servlet Extension")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public GatewayHttpServletExtensionResponse schemas(List<EnumgatewayHttpServletExtensionSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public GatewayHttpServletExtensionResponse addSchemasItem(EnumgatewayHttpServletExtensionSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumgatewayHttpServletExtensionSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumgatewayHttpServletExtensionSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public GatewayHttpServletExtensionResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the HTTP Servlet Extension
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the HTTP Servlet Extension")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public GatewayHttpServletExtensionResponse excludedAPIEndpoint(List<String> excludedAPIEndpoint) {
    
    
    
    
    this.excludedAPIEndpoint = excludedAPIEndpoint;
    return this;
  }

  public GatewayHttpServletExtensionResponse addExcludedAPIEndpointItem(String excludedAPIEndpointItem) {
    if (this.excludedAPIEndpoint == null) {
      this.excludedAPIEndpoint = new ArrayList<>();
    }
    this.excludedAPIEndpoint.add(excludedAPIEndpointItem);
    return this;
  }

   /**
   * Specifies any Gateway API Endpoints that will not be handled by the Gateway HTTP Servlet Extension.
   * @return excludedAPIEndpoint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies any Gateway API Endpoints that will not be handled by the Gateway HTTP Servlet Extension.")

  public List<String> getExcludedAPIEndpoint() {
    return excludedAPIEndpoint;
  }


  public void setExcludedAPIEndpoint(List<String> excludedAPIEndpoint) {
    
    
    
    this.excludedAPIEndpoint = excludedAPIEndpoint;
  }


  public GatewayHttpServletExtensionResponse requestLimit(String requestLimit) {
    
    
    
    
    this.requestLimit = requestLimit;
    return this;
  }

   /**
   * The maximum number of bytes allowed per request body.
   * @return requestLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of bytes allowed per request body.")

  public String getRequestLimit() {
    return requestLimit;
  }


  public void setRequestLimit(String requestLimit) {
    
    
    
    this.requestLimit = requestLimit;
  }


  public GatewayHttpServletExtensionResponse responseLimit(String responseLimit) {
    
    
    
    
    this.responseLimit = responseLimit;
    return this;
  }

   /**
   * The maximum number of bytes allowed per response body.
   * @return responseLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of bytes allowed per response body.")

  public String getResponseLimit() {
    return responseLimit;
  }


  public void setResponseLimit(String responseLimit) {
    
    
    
    this.responseLimit = responseLimit;
  }


  public GatewayHttpServletExtensionResponse numForwardThreads(Integer numForwardThreads) {
    
    
    
    
    this.numForwardThreads = numForwardThreads;
    return this;
  }

   /**
   * The number of threads used to forward responses to the API backend.
   * @return numForwardThreads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of threads used to forward responses to the API backend.")

  public Integer getNumForwardThreads() {
    return numForwardThreads;
  }


  public void setNumForwardThreads(Integer numForwardThreads) {
    
    
    
    this.numForwardThreads = numForwardThreads;
  }


  public GatewayHttpServletExtensionResponse crossOriginPolicy(String crossOriginPolicy) {
    
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
    return this;
  }

   /**
   * The cross-origin request policy to use for the HTTP Servlet Extension.
   * @return crossOriginPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cross-origin request policy to use for the HTTP Servlet Extension.")

  public String getCrossOriginPolicy() {
    return crossOriginPolicy;
  }


  public void setCrossOriginPolicy(String crossOriginPolicy) {
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
  }


  public GatewayHttpServletExtensionResponse responseHeader(List<String> responseHeader) {
    
    
    
    
    this.responseHeader = responseHeader;
    return this;
  }

  public GatewayHttpServletExtensionResponse addResponseHeaderItem(String responseHeaderItem) {
    if (this.responseHeader == null) {
      this.responseHeader = new ArrayList<>();
    }
    this.responseHeader.add(responseHeaderItem);
    return this;
  }

   /**
   * Specifies HTTP header fields and values added to response headers for all requests.
   * @return responseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies HTTP header fields and values added to response headers for all requests.")

  public List<String> getResponseHeader() {
    return responseHeader;
  }


  public void setResponseHeader(List<String> responseHeader) {
    
    
    
    this.responseHeader = responseHeader;
  }


  public GatewayHttpServletExtensionResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public GatewayHttpServletExtensionResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GatewayHttpServletExtensionResponse instance itself
   */
  public GatewayHttpServletExtensionResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayHttpServletExtensionResponse gatewayHttpServletExtensionResponse = (GatewayHttpServletExtensionResponse) o;
    return Objects.equals(this.description, gatewayHttpServletExtensionResponse.description) &&
        Objects.equals(this.schemas, gatewayHttpServletExtensionResponse.schemas) &&
        Objects.equals(this.id, gatewayHttpServletExtensionResponse.id) &&
        Objects.equals(this.excludedAPIEndpoint, gatewayHttpServletExtensionResponse.excludedAPIEndpoint) &&
        Objects.equals(this.requestLimit, gatewayHttpServletExtensionResponse.requestLimit) &&
        Objects.equals(this.responseLimit, gatewayHttpServletExtensionResponse.responseLimit) &&
        Objects.equals(this.numForwardThreads, gatewayHttpServletExtensionResponse.numForwardThreads) &&
        Objects.equals(this.crossOriginPolicy, gatewayHttpServletExtensionResponse.crossOriginPolicy) &&
        Objects.equals(this.responseHeader, gatewayHttpServletExtensionResponse.responseHeader) &&
        Objects.equals(this.meta, gatewayHttpServletExtensionResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, gatewayHttpServletExtensionResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, gatewayHttpServletExtensionResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, excludedAPIEndpoint, requestLimit, responseLimit, numForwardThreads, crossOriginPolicy, responseHeader, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayHttpServletExtensionResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    excludedAPIEndpoint: ").append(toIndentedString(excludedAPIEndpoint)).append("\n");
    sb.append("    requestLimit: ").append(toIndentedString(requestLimit)).append("\n");
    sb.append("    responseLimit: ").append(toIndentedString(responseLimit)).append("\n");
    sb.append("    numForwardThreads: ").append(toIndentedString(numForwardThreads)).append("\n");
    sb.append("    crossOriginPolicy: ").append(toIndentedString(crossOriginPolicy)).append("\n");
    sb.append("    responseHeader: ").append(toIndentedString(responseHeader)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("excludedAPIEndpoint");
    openapiFields.add("requestLimit");
    openapiFields.add("responseLimit");
    openapiFields.add("numForwardThreads");
    openapiFields.add("crossOriginPolicy");
    openapiFields.add("responseHeader");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GatewayHttpServletExtensionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GatewayHttpServletExtensionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayHttpServletExtensionResponse is not found in the empty JSON string", GatewayHttpServletExtensionResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GatewayHttpServletExtensionResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedAPIEndpoint") != null && !jsonObj.get("excludedAPIEndpoint").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedAPIEndpoint` to be an array in the JSON string but got `%s`", jsonObj.get("excludedAPIEndpoint").toString()));
      }
      if ((jsonObj.get("requestLimit") != null && !jsonObj.get("requestLimit").isJsonNull()) && !jsonObj.get("requestLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestLimit").toString()));
      }
      if ((jsonObj.get("responseLimit") != null && !jsonObj.get("responseLimit").isJsonNull()) && !jsonObj.get("responseLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseLimit").toString()));
      }
      if ((jsonObj.get("crossOriginPolicy") != null && !jsonObj.get("crossOriginPolicy").isJsonNull()) && !jsonObj.get("crossOriginPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossOriginPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossOriginPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("responseHeader") != null && !jsonObj.get("responseHeader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseHeader` to be an array in the JSON string but got `%s`", jsonObj.get("responseHeader").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayHttpServletExtensionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayHttpServletExtensionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayHttpServletExtensionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayHttpServletExtensionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayHttpServletExtensionResponse>() {
           @Override
           public void write(JsonWriter out, GatewayHttpServletExtensionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayHttpServletExtensionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GatewayHttpServletExtensionResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GatewayHttpServletExtensionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GatewayHttpServletExtensionResponse
  * @throws IOException if the JSON string is invalid with respect to GatewayHttpServletExtensionResponse
  */
  public static GatewayHttpServletExtensionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayHttpServletExtensionResponse.class);
  }

 /**
  * Convert an instance of GatewayHttpServletExtensionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

