/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumunboundidTotpSaslMechanismHandlerSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UnboundidTotpSaslMechanismHandlerResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UnboundidTotpSaslMechanismHandlerResponseAllOf {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumunboundidTotpSaslMechanismHandlerSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDENTITY_MAPPER = "identityMapper";
  @SerializedName(SERIALIZED_NAME_IDENTITY_MAPPER)
  private String identityMapper;

  public static final String SERIALIZED_NAME_SHARED_SECRET_ATTRIBUTE_TYPE = "sharedSecretAttributeType";
  @SerializedName(SERIALIZED_NAME_SHARED_SECRET_ATTRIBUTE_TYPE)
  private String sharedSecretAttributeType;

  public static final String SERIALIZED_NAME_TIME_INTERVAL_DURATION = "timeIntervalDuration";
  @SerializedName(SERIALIZED_NAME_TIME_INTERVAL_DURATION)
  private String timeIntervalDuration;

  public static final String SERIALIZED_NAME_ADJACENT_INTERVALS_TO_CHECK = "adjacentIntervalsToCheck";
  @SerializedName(SERIALIZED_NAME_ADJACENT_INTERVALS_TO_CHECK)
  private Integer adjacentIntervalsToCheck;

  public static final String SERIALIZED_NAME_REQUIRE_STATIC_PASSWORD = "requireStaticPassword";
  @SerializedName(SERIALIZED_NAME_REQUIRE_STATIC_PASSWORD)
  private Boolean requireStaticPassword;

  public static final String SERIALIZED_NAME_PREVENT_T_O_T_P_REUSE = "preventTOTPReuse";
  @SerializedName(SERIALIZED_NAME_PREVENT_T_O_T_P_REUSE)
  private Boolean preventTOTPReuse;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public UnboundidTotpSaslMechanismHandlerResponseAllOf() {
  }

  public UnboundidTotpSaslMechanismHandlerResponseAllOf description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this SASL Mechanism Handler
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this SASL Mechanism Handler")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public UnboundidTotpSaslMechanismHandlerResponseAllOf schemas(List<EnumunboundidTotpSaslMechanismHandlerSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public UnboundidTotpSaslMechanismHandlerResponseAllOf addSchemasItem(EnumunboundidTotpSaslMechanismHandlerSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumunboundidTotpSaslMechanismHandlerSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumunboundidTotpSaslMechanismHandlerSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public UnboundidTotpSaslMechanismHandlerResponseAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the SASL Mechanism Handler
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the SASL Mechanism Handler")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public UnboundidTotpSaslMechanismHandlerResponseAllOf identityMapper(String identityMapper) {
    
    
    
    
    this.identityMapper = identityMapper;
    return this;
  }

   /**
   * The identity mapper that should be used to identify the user(s) targeted in the authentication and/or authorization identities contained in the bind request. This will only be used for \&quot;u:\&quot;-style identities.
   * @return identityMapper
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The identity mapper that should be used to identify the user(s) targeted in the authentication and/or authorization identities contained in the bind request. This will only be used for \"u:\"-style identities.")

  public String getIdentityMapper() {
    return identityMapper;
  }


  public void setIdentityMapper(String identityMapper) {
    
    
    
    this.identityMapper = identityMapper;
  }


  public UnboundidTotpSaslMechanismHandlerResponseAllOf sharedSecretAttributeType(String sharedSecretAttributeType) {
    
    
    
    
    this.sharedSecretAttributeType = sharedSecretAttributeType;
    return this;
  }

   /**
   * The name or OID of the attribute that will be used to hold the shared secret key used during TOTP processing.
   * @return sharedSecretAttributeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name or OID of the attribute that will be used to hold the shared secret key used during TOTP processing.")

  public String getSharedSecretAttributeType() {
    return sharedSecretAttributeType;
  }


  public void setSharedSecretAttributeType(String sharedSecretAttributeType) {
    
    
    
    this.sharedSecretAttributeType = sharedSecretAttributeType;
  }


  public UnboundidTotpSaslMechanismHandlerResponseAllOf timeIntervalDuration(String timeIntervalDuration) {
    
    
    
    
    this.timeIntervalDuration = timeIntervalDuration;
    return this;
  }

   /**
   * The duration of the time interval used for TOTP processing.
   * @return timeIntervalDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The duration of the time interval used for TOTP processing.")

  public String getTimeIntervalDuration() {
    return timeIntervalDuration;
  }


  public void setTimeIntervalDuration(String timeIntervalDuration) {
    
    
    
    this.timeIntervalDuration = timeIntervalDuration;
  }


  public UnboundidTotpSaslMechanismHandlerResponseAllOf adjacentIntervalsToCheck(Integer adjacentIntervalsToCheck) {
    
    
    
    
    this.adjacentIntervalsToCheck = adjacentIntervalsToCheck;
    return this;
  }

   /**
   * The number of adjacent time intervals (both before and after the current time) that should be checked when performing authentication.
   * @return adjacentIntervalsToCheck
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of adjacent time intervals (both before and after the current time) that should be checked when performing authentication.")

  public Integer getAdjacentIntervalsToCheck() {
    return adjacentIntervalsToCheck;
  }


  public void setAdjacentIntervalsToCheck(Integer adjacentIntervalsToCheck) {
    
    
    
    this.adjacentIntervalsToCheck = adjacentIntervalsToCheck;
  }


  public UnboundidTotpSaslMechanismHandlerResponseAllOf requireStaticPassword(Boolean requireStaticPassword) {
    
    
    
    
    this.requireStaticPassword = requireStaticPassword;
    return this;
  }

   /**
   * Indicates whether to require a static password (as might be held in the userPassword attribute, or whatever password attribute is defined in the password policy governing the user) in addition to the one-time password.
   * @return requireStaticPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to require a static password (as might be held in the userPassword attribute, or whatever password attribute is defined in the password policy governing the user) in addition to the one-time password.")

  public Boolean getRequireStaticPassword() {
    return requireStaticPassword;
  }


  public void setRequireStaticPassword(Boolean requireStaticPassword) {
    
    
    
    this.requireStaticPassword = requireStaticPassword;
  }


  public UnboundidTotpSaslMechanismHandlerResponseAllOf preventTOTPReuse(Boolean preventTOTPReuse) {
    
    
    
    
    this.preventTOTPReuse = preventTOTPReuse;
    return this;
  }

   /**
   * Indicates whether to prevent clients from re-using TOTP passwords.
   * @return preventTOTPReuse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to prevent clients from re-using TOTP passwords.")

  public Boolean getPreventTOTPReuse() {
    return preventTOTPReuse;
  }


  public void setPreventTOTPReuse(Boolean preventTOTPReuse) {
    
    
    
    this.preventTOTPReuse = preventTOTPReuse;
  }


  public UnboundidTotpSaslMechanismHandlerResponseAllOf enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the SASL mechanism handler is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the SASL mechanism handler is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UnboundidTotpSaslMechanismHandlerResponseAllOf instance itself
   */
  public UnboundidTotpSaslMechanismHandlerResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnboundidTotpSaslMechanismHandlerResponseAllOf unboundidTotpSaslMechanismHandlerResponseAllOf = (UnboundidTotpSaslMechanismHandlerResponseAllOf) o;
    return Objects.equals(this.description, unboundidTotpSaslMechanismHandlerResponseAllOf.description) &&
        Objects.equals(this.schemas, unboundidTotpSaslMechanismHandlerResponseAllOf.schemas) &&
        Objects.equals(this.id, unboundidTotpSaslMechanismHandlerResponseAllOf.id) &&
        Objects.equals(this.identityMapper, unboundidTotpSaslMechanismHandlerResponseAllOf.identityMapper) &&
        Objects.equals(this.sharedSecretAttributeType, unboundidTotpSaslMechanismHandlerResponseAllOf.sharedSecretAttributeType) &&
        Objects.equals(this.timeIntervalDuration, unboundidTotpSaslMechanismHandlerResponseAllOf.timeIntervalDuration) &&
        Objects.equals(this.adjacentIntervalsToCheck, unboundidTotpSaslMechanismHandlerResponseAllOf.adjacentIntervalsToCheck) &&
        Objects.equals(this.requireStaticPassword, unboundidTotpSaslMechanismHandlerResponseAllOf.requireStaticPassword) &&
        Objects.equals(this.preventTOTPReuse, unboundidTotpSaslMechanismHandlerResponseAllOf.preventTOTPReuse) &&
        Objects.equals(this.enabled, unboundidTotpSaslMechanismHandlerResponseAllOf.enabled)&&
        Objects.equals(this.additionalProperties, unboundidTotpSaslMechanismHandlerResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, identityMapper, sharedSecretAttributeType, timeIntervalDuration, adjacentIntervalsToCheck, requireStaticPassword, preventTOTPReuse, enabled, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnboundidTotpSaslMechanismHandlerResponseAllOf {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identityMapper: ").append(toIndentedString(identityMapper)).append("\n");
    sb.append("    sharedSecretAttributeType: ").append(toIndentedString(sharedSecretAttributeType)).append("\n");
    sb.append("    timeIntervalDuration: ").append(toIndentedString(timeIntervalDuration)).append("\n");
    sb.append("    adjacentIntervalsToCheck: ").append(toIndentedString(adjacentIntervalsToCheck)).append("\n");
    sb.append("    requireStaticPassword: ").append(toIndentedString(requireStaticPassword)).append("\n");
    sb.append("    preventTOTPReuse: ").append(toIndentedString(preventTOTPReuse)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("identityMapper");
    openapiFields.add("sharedSecretAttributeType");
    openapiFields.add("timeIntervalDuration");
    openapiFields.add("adjacentIntervalsToCheck");
    openapiFields.add("requireStaticPassword");
    openapiFields.add("preventTOTPReuse");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UnboundidTotpSaslMechanismHandlerResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UnboundidTotpSaslMechanismHandlerResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UnboundidTotpSaslMechanismHandlerResponseAllOf is not found in the empty JSON string", UnboundidTotpSaslMechanismHandlerResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("identityMapper") != null && !jsonObj.get("identityMapper").isJsonNull()) && !jsonObj.get("identityMapper").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityMapper` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityMapper").toString()));
      }
      if ((jsonObj.get("sharedSecretAttributeType") != null && !jsonObj.get("sharedSecretAttributeType").isJsonNull()) && !jsonObj.get("sharedSecretAttributeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedSecretAttributeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedSecretAttributeType").toString()));
      }
      if ((jsonObj.get("timeIntervalDuration") != null && !jsonObj.get("timeIntervalDuration").isJsonNull()) && !jsonObj.get("timeIntervalDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeIntervalDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeIntervalDuration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UnboundidTotpSaslMechanismHandlerResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UnboundidTotpSaslMechanismHandlerResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UnboundidTotpSaslMechanismHandlerResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UnboundidTotpSaslMechanismHandlerResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<UnboundidTotpSaslMechanismHandlerResponseAllOf>() {
           @Override
           public void write(JsonWriter out, UnboundidTotpSaslMechanismHandlerResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UnboundidTotpSaslMechanismHandlerResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UnboundidTotpSaslMechanismHandlerResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UnboundidTotpSaslMechanismHandlerResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UnboundidTotpSaslMechanismHandlerResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to UnboundidTotpSaslMechanismHandlerResponseAllOf
  */
  public static UnboundidTotpSaslMechanismHandlerResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UnboundidTotpSaslMechanismHandlerResponseAllOf.class);
  }

 /**
  * Convert an instance of UnboundidTotpSaslMechanismHandlerResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

