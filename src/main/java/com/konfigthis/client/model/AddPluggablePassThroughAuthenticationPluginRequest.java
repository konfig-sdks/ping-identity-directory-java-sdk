/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumpluggablePassThroughAuthenticationPluginSchemaUrn;
import com.konfigthis.client.model.EnumpluginIgnoredPasswordPolicyStateErrorConditionProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddPluggablePassThroughAuthenticationPluginRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddPluggablePassThroughAuthenticationPluginRequest {
  public static final String SERIALIZED_NAME_PLUGIN_NAME = "pluginName";
  @SerializedName(SERIALIZED_NAME_PLUGIN_NAME)
  private String pluginName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumpluggablePassThroughAuthenticationPluginSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASS_THROUGH_AUTHENTICATION_HANDLER = "passThroughAuthenticationHandler";
  @SerializedName(SERIALIZED_NAME_PASS_THROUGH_AUTHENTICATION_HANDLER)
  private String passThroughAuthenticationHandler;

  public static final String SERIALIZED_NAME_INCLUDED_LOCAL_ENTRY_BASE_D_N = "includedLocalEntryBaseDN";
  @SerializedName(SERIALIZED_NAME_INCLUDED_LOCAL_ENTRY_BASE_D_N)
  private List<String> includedLocalEntryBaseDN = null;

  public static final String SERIALIZED_NAME_CONNECTION_CRITERIA = "connectionCriteria";
  @SerializedName(SERIALIZED_NAME_CONNECTION_CRITERIA)
  private String connectionCriteria;

  public static final String SERIALIZED_NAME_REQUEST_CRITERIA = "requestCriteria";
  @SerializedName(SERIALIZED_NAME_REQUEST_CRITERIA)
  private String requestCriteria;

  public static final String SERIALIZED_NAME_TRY_LOCAL_BIND = "tryLocalBind";
  @SerializedName(SERIALIZED_NAME_TRY_LOCAL_BIND)
  private Boolean tryLocalBind;

  public static final String SERIALIZED_NAME_OVERRIDE_LOCAL_PASSWORD = "overrideLocalPassword";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_LOCAL_PASSWORD)
  private Boolean overrideLocalPassword;

  public static final String SERIALIZED_NAME_UPDATE_LOCAL_PASSWORD = "updateLocalPassword";
  @SerializedName(SERIALIZED_NAME_UPDATE_LOCAL_PASSWORD)
  private Boolean updateLocalPassword;

  public static final String SERIALIZED_NAME_UPDATE_LOCAL_PASSWORD_D_N = "updateLocalPasswordDN";
  @SerializedName(SERIALIZED_NAME_UPDATE_LOCAL_PASSWORD_D_N)
  private String updateLocalPasswordDN;

  public static final String SERIALIZED_NAME_ALLOW_LAX_PASS_THROUGH_AUTHENTICATION_PASSWORDS = "allowLaxPassThroughAuthenticationPasswords";
  @SerializedName(SERIALIZED_NAME_ALLOW_LAX_PASS_THROUGH_AUTHENTICATION_PASSWORDS)
  private Boolean allowLaxPassThroughAuthenticationPasswords;

  public static final String SERIALIZED_NAME_IGNORED_PASSWORD_POLICY_STATE_ERROR_CONDITION = "ignoredPasswordPolicyStateErrorCondition";
  @SerializedName(SERIALIZED_NAME_IGNORED_PASSWORD_POLICY_STATE_ERROR_CONDITION)
  private List<EnumpluginIgnoredPasswordPolicyStateErrorConditionProp> ignoredPasswordPolicyStateErrorCondition = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS = "invokeForInternalOperations";
  @SerializedName(SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS)
  private Boolean invokeForInternalOperations;

  public AddPluggablePassThroughAuthenticationPluginRequest() {
  }

  public AddPluggablePassThroughAuthenticationPluginRequest pluginName(String pluginName) {
    
    
    
    
    this.pluginName = pluginName;
    return this;
  }

   /**
   * Name of the new Plugin
   * @return pluginName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Plugin")

  public String getPluginName() {
    return pluginName;
  }


  public void setPluginName(String pluginName) {
    
    
    
    this.pluginName = pluginName;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest schemas(List<EnumpluggablePassThroughAuthenticationPluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddPluggablePassThroughAuthenticationPluginRequest addSchemasItem(EnumpluggablePassThroughAuthenticationPluginSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumpluggablePassThroughAuthenticationPluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumpluggablePassThroughAuthenticationPluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest passThroughAuthenticationHandler(String passThroughAuthenticationHandler) {
    
    
    
    
    this.passThroughAuthenticationHandler = passThroughAuthenticationHandler;
    return this;
  }

   /**
   * The component used to manage authentication with the external authentication service.
   * @return passThroughAuthenticationHandler
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The component used to manage authentication with the external authentication service.")

  public String getPassThroughAuthenticationHandler() {
    return passThroughAuthenticationHandler;
  }


  public void setPassThroughAuthenticationHandler(String passThroughAuthenticationHandler) {
    
    
    
    this.passThroughAuthenticationHandler = passThroughAuthenticationHandler;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest includedLocalEntryBaseDN(List<String> includedLocalEntryBaseDN) {
    
    
    
    
    this.includedLocalEntryBaseDN = includedLocalEntryBaseDN;
    return this;
  }

  public AddPluggablePassThroughAuthenticationPluginRequest addIncludedLocalEntryBaseDNItem(String includedLocalEntryBaseDNItem) {
    if (this.includedLocalEntryBaseDN == null) {
      this.includedLocalEntryBaseDN = new ArrayList<>();
    }
    this.includedLocalEntryBaseDN.add(includedLocalEntryBaseDNItem);
    return this;
  }

   /**
   * The base DNs for the local users whose authentication attempts may be passed through to the external authentication service.
   * @return includedLocalEntryBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The base DNs for the local users whose authentication attempts may be passed through to the external authentication service.")

  public List<String> getIncludedLocalEntryBaseDN() {
    return includedLocalEntryBaseDN;
  }


  public void setIncludedLocalEntryBaseDN(List<String> includedLocalEntryBaseDN) {
    
    
    
    this.includedLocalEntryBaseDN = includedLocalEntryBaseDN;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest connectionCriteria(String connectionCriteria) {
    
    
    
    
    this.connectionCriteria = connectionCriteria;
    return this;
  }

   /**
   * A reference to connection criteria that will be used to indicate which bind requests should be passed through to the external authentication service.
   * @return connectionCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to connection criteria that will be used to indicate which bind requests should be passed through to the external authentication service.")

  public String getConnectionCriteria() {
    return connectionCriteria;
  }


  public void setConnectionCriteria(String connectionCriteria) {
    
    
    
    this.connectionCriteria = connectionCriteria;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest requestCriteria(String requestCriteria) {
    
    
    
    
    this.requestCriteria = requestCriteria;
    return this;
  }

   /**
   * A reference to request criteria that will be used to indicate which bind requests should be passed through to the external authentication service.
   * @return requestCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to request criteria that will be used to indicate which bind requests should be passed through to the external authentication service.")

  public String getRequestCriteria() {
    return requestCriteria;
  }


  public void setRequestCriteria(String requestCriteria) {
    
    
    
    this.requestCriteria = requestCriteria;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest tryLocalBind(Boolean tryLocalBind) {
    
    
    
    
    this.tryLocalBind = tryLocalBind;
    return this;
  }

   /**
   * Indicates whether to attempt the bind in the local server first and only send the request to the external authentication service if the local bind attempt fails, or to only attempt the bind in the external service.
   * @return tryLocalBind
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to attempt the bind in the local server first and only send the request to the external authentication service if the local bind attempt fails, or to only attempt the bind in the external service.")

  public Boolean getTryLocalBind() {
    return tryLocalBind;
  }


  public void setTryLocalBind(Boolean tryLocalBind) {
    
    
    
    this.tryLocalBind = tryLocalBind;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest overrideLocalPassword(Boolean overrideLocalPassword) {
    
    
    
    
    this.overrideLocalPassword = overrideLocalPassword;
    return this;
  }

   /**
   * Indicates whether to attempt the authentication in the external service if the local user entry includes a password. This property will be ignored if try-local-bind is false.
   * @return overrideLocalPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to attempt the authentication in the external service if the local user entry includes a password. This property will be ignored if try-local-bind is false.")

  public Boolean getOverrideLocalPassword() {
    return overrideLocalPassword;
  }


  public void setOverrideLocalPassword(Boolean overrideLocalPassword) {
    
    
    
    this.overrideLocalPassword = overrideLocalPassword;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest updateLocalPassword(Boolean updateLocalPassword) {
    
    
    
    
    this.updateLocalPassword = updateLocalPassword;
    return this;
  }

   /**
   * Indicates whether to overwrite the user&#39;s local password if the local bind fails but the authentication attempt succeeds when attempted in the external service. This property may only be set to true if try-local-bind is also true.
   * @return updateLocalPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to overwrite the user's local password if the local bind fails but the authentication attempt succeeds when attempted in the external service. This property may only be set to true if try-local-bind is also true.")

  public Boolean getUpdateLocalPassword() {
    return updateLocalPassword;
  }


  public void setUpdateLocalPassword(Boolean updateLocalPassword) {
    
    
    
    this.updateLocalPassword = updateLocalPassword;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest updateLocalPasswordDN(String updateLocalPasswordDN) {
    
    
    
    
    this.updateLocalPasswordDN = updateLocalPasswordDN;
    return this;
  }

   /**
   * The DN of the authorization identity that will be used when updating the user&#39;s local password if update-local-password is true. This is primarily intended for use if the Data Sync Server will be used to synchronize passwords between the local server and the external service, and in that case, the DN used here should also be added to the ignore-changes-by-dn property in the appropriate Sync Source object in the Data Sync Server configuration.
   * @return updateLocalPasswordDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The DN of the authorization identity that will be used when updating the user's local password if update-local-password is true. This is primarily intended for use if the Data Sync Server will be used to synchronize passwords between the local server and the external service, and in that case, the DN used here should also be added to the ignore-changes-by-dn property in the appropriate Sync Source object in the Data Sync Server configuration.")

  public String getUpdateLocalPasswordDN() {
    return updateLocalPasswordDN;
  }


  public void setUpdateLocalPasswordDN(String updateLocalPasswordDN) {
    
    
    
    this.updateLocalPasswordDN = updateLocalPasswordDN;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest allowLaxPassThroughAuthenticationPasswords(Boolean allowLaxPassThroughAuthenticationPasswords) {
    
    
    
    
    this.allowLaxPassThroughAuthenticationPasswords = allowLaxPassThroughAuthenticationPasswords;
    return this;
  }

   /**
   * Indicates whether to overwrite the user&#39;s local password even if the password used to authenticate to the external service would have failed validation if the user attempted to set it directly.
   * @return allowLaxPassThroughAuthenticationPasswords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to overwrite the user's local password even if the password used to authenticate to the external service would have failed validation if the user attempted to set it directly.")

  public Boolean getAllowLaxPassThroughAuthenticationPasswords() {
    return allowLaxPassThroughAuthenticationPasswords;
  }


  public void setAllowLaxPassThroughAuthenticationPasswords(Boolean allowLaxPassThroughAuthenticationPasswords) {
    
    
    
    this.allowLaxPassThroughAuthenticationPasswords = allowLaxPassThroughAuthenticationPasswords;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest ignoredPasswordPolicyStateErrorCondition(List<EnumpluginIgnoredPasswordPolicyStateErrorConditionProp> ignoredPasswordPolicyStateErrorCondition) {
    
    
    
    
    this.ignoredPasswordPolicyStateErrorCondition = ignoredPasswordPolicyStateErrorCondition;
    return this;
  }

  public AddPluggablePassThroughAuthenticationPluginRequest addIgnoredPasswordPolicyStateErrorConditionItem(EnumpluginIgnoredPasswordPolicyStateErrorConditionProp ignoredPasswordPolicyStateErrorConditionItem) {
    if (this.ignoredPasswordPolicyStateErrorCondition == null) {
      this.ignoredPasswordPolicyStateErrorCondition = new ArrayList<>();
    }
    this.ignoredPasswordPolicyStateErrorCondition.add(ignoredPasswordPolicyStateErrorConditionItem);
    return this;
  }

   /**
   * Get ignoredPasswordPolicyStateErrorCondition
   * @return ignoredPasswordPolicyStateErrorCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpluginIgnoredPasswordPolicyStateErrorConditionProp> getIgnoredPasswordPolicyStateErrorCondition() {
    return ignoredPasswordPolicyStateErrorCondition;
  }


  public void setIgnoredPasswordPolicyStateErrorCondition(List<EnumpluginIgnoredPasswordPolicyStateErrorConditionProp> ignoredPasswordPolicyStateErrorCondition) {
    
    
    
    this.ignoredPasswordPolicyStateErrorCondition = ignoredPasswordPolicyStateErrorCondition;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public AddPluggablePassThroughAuthenticationPluginRequest invokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
    return this;
  }

   /**
   * Indicates whether the plug-in should be invoked for internal operations.
   * @return invokeForInternalOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the plug-in should be invoked for internal operations.")

  public Boolean getInvokeForInternalOperations() {
    return invokeForInternalOperations;
  }


  public void setInvokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddPluggablePassThroughAuthenticationPluginRequest instance itself
   */
  public AddPluggablePassThroughAuthenticationPluginRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddPluggablePassThroughAuthenticationPluginRequest addPluggablePassThroughAuthenticationPluginRequest = (AddPluggablePassThroughAuthenticationPluginRequest) o;
    return Objects.equals(this.pluginName, addPluggablePassThroughAuthenticationPluginRequest.pluginName) &&
        Objects.equals(this.description, addPluggablePassThroughAuthenticationPluginRequest.description) &&
        Objects.equals(this.schemas, addPluggablePassThroughAuthenticationPluginRequest.schemas) &&
        Objects.equals(this.passThroughAuthenticationHandler, addPluggablePassThroughAuthenticationPluginRequest.passThroughAuthenticationHandler) &&
        Objects.equals(this.includedLocalEntryBaseDN, addPluggablePassThroughAuthenticationPluginRequest.includedLocalEntryBaseDN) &&
        Objects.equals(this.connectionCriteria, addPluggablePassThroughAuthenticationPluginRequest.connectionCriteria) &&
        Objects.equals(this.requestCriteria, addPluggablePassThroughAuthenticationPluginRequest.requestCriteria) &&
        Objects.equals(this.tryLocalBind, addPluggablePassThroughAuthenticationPluginRequest.tryLocalBind) &&
        Objects.equals(this.overrideLocalPassword, addPluggablePassThroughAuthenticationPluginRequest.overrideLocalPassword) &&
        Objects.equals(this.updateLocalPassword, addPluggablePassThroughAuthenticationPluginRequest.updateLocalPassword) &&
        Objects.equals(this.updateLocalPasswordDN, addPluggablePassThroughAuthenticationPluginRequest.updateLocalPasswordDN) &&
        Objects.equals(this.allowLaxPassThroughAuthenticationPasswords, addPluggablePassThroughAuthenticationPluginRequest.allowLaxPassThroughAuthenticationPasswords) &&
        Objects.equals(this.ignoredPasswordPolicyStateErrorCondition, addPluggablePassThroughAuthenticationPluginRequest.ignoredPasswordPolicyStateErrorCondition) &&
        Objects.equals(this.enabled, addPluggablePassThroughAuthenticationPluginRequest.enabled) &&
        Objects.equals(this.invokeForInternalOperations, addPluggablePassThroughAuthenticationPluginRequest.invokeForInternalOperations)&&
        Objects.equals(this.additionalProperties, addPluggablePassThroughAuthenticationPluginRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pluginName, description, schemas, passThroughAuthenticationHandler, includedLocalEntryBaseDN, connectionCriteria, requestCriteria, tryLocalBind, overrideLocalPassword, updateLocalPassword, updateLocalPasswordDN, allowLaxPassThroughAuthenticationPasswords, ignoredPasswordPolicyStateErrorCondition, enabled, invokeForInternalOperations, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddPluggablePassThroughAuthenticationPluginRequest {\n");
    sb.append("    pluginName: ").append(toIndentedString(pluginName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    passThroughAuthenticationHandler: ").append(toIndentedString(passThroughAuthenticationHandler)).append("\n");
    sb.append("    includedLocalEntryBaseDN: ").append(toIndentedString(includedLocalEntryBaseDN)).append("\n");
    sb.append("    connectionCriteria: ").append(toIndentedString(connectionCriteria)).append("\n");
    sb.append("    requestCriteria: ").append(toIndentedString(requestCriteria)).append("\n");
    sb.append("    tryLocalBind: ").append(toIndentedString(tryLocalBind)).append("\n");
    sb.append("    overrideLocalPassword: ").append(toIndentedString(overrideLocalPassword)).append("\n");
    sb.append("    updateLocalPassword: ").append(toIndentedString(updateLocalPassword)).append("\n");
    sb.append("    updateLocalPasswordDN: ").append(toIndentedString(updateLocalPasswordDN)).append("\n");
    sb.append("    allowLaxPassThroughAuthenticationPasswords: ").append(toIndentedString(allowLaxPassThroughAuthenticationPasswords)).append("\n");
    sb.append("    ignoredPasswordPolicyStateErrorCondition: ").append(toIndentedString(ignoredPasswordPolicyStateErrorCondition)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    invokeForInternalOperations: ").append(toIndentedString(invokeForInternalOperations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pluginName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("passThroughAuthenticationHandler");
    openapiFields.add("includedLocalEntryBaseDN");
    openapiFields.add("connectionCriteria");
    openapiFields.add("requestCriteria");
    openapiFields.add("tryLocalBind");
    openapiFields.add("overrideLocalPassword");
    openapiFields.add("updateLocalPassword");
    openapiFields.add("updateLocalPasswordDN");
    openapiFields.add("allowLaxPassThroughAuthenticationPasswords");
    openapiFields.add("ignoredPasswordPolicyStateErrorCondition");
    openapiFields.add("enabled");
    openapiFields.add("invokeForInternalOperations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pluginName");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("passThroughAuthenticationHandler");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddPluggablePassThroughAuthenticationPluginRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddPluggablePassThroughAuthenticationPluginRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddPluggablePassThroughAuthenticationPluginRequest is not found in the empty JSON string", AddPluggablePassThroughAuthenticationPluginRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddPluggablePassThroughAuthenticationPluginRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("pluginName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pluginName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("passThroughAuthenticationHandler").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passThroughAuthenticationHandler` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passThroughAuthenticationHandler").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedLocalEntryBaseDN") != null && !jsonObj.get("includedLocalEntryBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedLocalEntryBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("includedLocalEntryBaseDN").toString()));
      }
      if ((jsonObj.get("connectionCriteria") != null && !jsonObj.get("connectionCriteria").isJsonNull()) && !jsonObj.get("connectionCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionCriteria").toString()));
      }
      if ((jsonObj.get("requestCriteria") != null && !jsonObj.get("requestCriteria").isJsonNull()) && !jsonObj.get("requestCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestCriteria").toString()));
      }
      if ((jsonObj.get("updateLocalPasswordDN") != null && !jsonObj.get("updateLocalPasswordDN").isJsonNull()) && !jsonObj.get("updateLocalPasswordDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateLocalPasswordDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateLocalPasswordDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignoredPasswordPolicyStateErrorCondition") != null && !jsonObj.get("ignoredPasswordPolicyStateErrorCondition").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoredPasswordPolicyStateErrorCondition` to be an array in the JSON string but got `%s`", jsonObj.get("ignoredPasswordPolicyStateErrorCondition").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddPluggablePassThroughAuthenticationPluginRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddPluggablePassThroughAuthenticationPluginRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddPluggablePassThroughAuthenticationPluginRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddPluggablePassThroughAuthenticationPluginRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddPluggablePassThroughAuthenticationPluginRequest>() {
           @Override
           public void write(JsonWriter out, AddPluggablePassThroughAuthenticationPluginRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddPluggablePassThroughAuthenticationPluginRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddPluggablePassThroughAuthenticationPluginRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddPluggablePassThroughAuthenticationPluginRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddPluggablePassThroughAuthenticationPluginRequest
  * @throws IOException if the JSON string is invalid with respect to AddPluggablePassThroughAuthenticationPluginRequest
  */
  public static AddPluggablePassThroughAuthenticationPluginRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddPluggablePassThroughAuthenticationPluginRequest.class);
  }

 /**
  * Convert an instance of AddPluggablePassThroughAuthenticationPluginRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

