/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumbooleanTokenClaimValidationSchemaUrn;
import com.konfigthis.client.model.EnumtokenClaimValidationRequiredValueProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddBooleanTokenClaimValidationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddBooleanTokenClaimValidationRequest {
  public static final String SERIALIZED_NAME_VALIDATION_NAME = "validationName";
  @SerializedName(SERIALIZED_NAME_VALIDATION_NAME)
  private String validationName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumbooleanTokenClaimValidationSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_VALUE = "requiredValue";
  @SerializedName(SERIALIZED_NAME_REQUIRED_VALUE)
  private EnumtokenClaimValidationRequiredValueProp requiredValue;

  public static final String SERIALIZED_NAME_CLAIM_NAME = "claimName";
  @SerializedName(SERIALIZED_NAME_CLAIM_NAME)
  private String claimName;

  public AddBooleanTokenClaimValidationRequest() {
  }

  public AddBooleanTokenClaimValidationRequest validationName(String validationName) {
    
    
    
    
    this.validationName = validationName;
    return this;
  }

   /**
   * Name of the new Token Claim Validation
   * @return validationName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Token Claim Validation")

  public String getValidationName() {
    return validationName;
  }


  public void setValidationName(String validationName) {
    
    
    
    this.validationName = validationName;
  }


  public AddBooleanTokenClaimValidationRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Token Claim Validation
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Token Claim Validation")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddBooleanTokenClaimValidationRequest schemas(List<EnumbooleanTokenClaimValidationSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddBooleanTokenClaimValidationRequest addSchemasItem(EnumbooleanTokenClaimValidationSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumbooleanTokenClaimValidationSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumbooleanTokenClaimValidationSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddBooleanTokenClaimValidationRequest requiredValue(EnumtokenClaimValidationRequiredValueProp requiredValue) {
    
    
    
    
    this.requiredValue = requiredValue;
    return this;
  }

   /**
   * Get requiredValue
   * @return requiredValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumtokenClaimValidationRequiredValueProp getRequiredValue() {
    return requiredValue;
  }


  public void setRequiredValue(EnumtokenClaimValidationRequiredValueProp requiredValue) {
    
    
    
    this.requiredValue = requiredValue;
  }


  public AddBooleanTokenClaimValidationRequest claimName(String claimName) {
    
    
    
    
    this.claimName = claimName;
    return this;
  }

   /**
   * The name of the claim to be validated.
   * @return claimName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the claim to be validated.")

  public String getClaimName() {
    return claimName;
  }


  public void setClaimName(String claimName) {
    
    
    
    this.claimName = claimName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddBooleanTokenClaimValidationRequest instance itself
   */
  public AddBooleanTokenClaimValidationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddBooleanTokenClaimValidationRequest addBooleanTokenClaimValidationRequest = (AddBooleanTokenClaimValidationRequest) o;
    return Objects.equals(this.validationName, addBooleanTokenClaimValidationRequest.validationName) &&
        Objects.equals(this.description, addBooleanTokenClaimValidationRequest.description) &&
        Objects.equals(this.schemas, addBooleanTokenClaimValidationRequest.schemas) &&
        Objects.equals(this.requiredValue, addBooleanTokenClaimValidationRequest.requiredValue) &&
        Objects.equals(this.claimName, addBooleanTokenClaimValidationRequest.claimName)&&
        Objects.equals(this.additionalProperties, addBooleanTokenClaimValidationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validationName, description, schemas, requiredValue, claimName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddBooleanTokenClaimValidationRequest {\n");
    sb.append("    validationName: ").append(toIndentedString(validationName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    requiredValue: ").append(toIndentedString(requiredValue)).append("\n");
    sb.append("    claimName: ").append(toIndentedString(claimName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("validationName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("requiredValue");
    openapiFields.add("claimName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("validationName");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("requiredValue");
    openapiRequiredFields.add("claimName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddBooleanTokenClaimValidationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddBooleanTokenClaimValidationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddBooleanTokenClaimValidationRequest is not found in the empty JSON string", AddBooleanTokenClaimValidationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddBooleanTokenClaimValidationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("validationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("claimName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `claimName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("claimName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddBooleanTokenClaimValidationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddBooleanTokenClaimValidationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddBooleanTokenClaimValidationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddBooleanTokenClaimValidationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddBooleanTokenClaimValidationRequest>() {
           @Override
           public void write(JsonWriter out, AddBooleanTokenClaimValidationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddBooleanTokenClaimValidationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddBooleanTokenClaimValidationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddBooleanTokenClaimValidationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddBooleanTokenClaimValidationRequest
  * @throws IOException if the JSON string is invalid with respect to AddBooleanTokenClaimValidationRequest
  */
  public static AddBooleanTokenClaimValidationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddBooleanTokenClaimValidationRequest.class);
  }

 /**
  * Convert an instance of AddBooleanTokenClaimValidationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

