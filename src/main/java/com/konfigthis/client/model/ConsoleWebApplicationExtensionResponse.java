/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumconsoleWebApplicationExtensionSchemaUrn;
import com.konfigthis.client.model.EnumwebApplicationExtensionComplexityProp;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ConsoleWebApplicationExtensionResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ConsoleWebApplicationExtensionResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumconsoleWebApplicationExtensionSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SSO_ENABLED = "ssoEnabled";
  @SerializedName(SERIALIZED_NAME_SSO_ENABLED)
  private Boolean ssoEnabled;

  public static final String SERIALIZED_NAME_OIDC_CLIENT_I_D = "oidcClientID";
  @SerializedName(SERIALIZED_NAME_OIDC_CLIENT_I_D)
  private String oidcClientID;

  public static final String SERIALIZED_NAME_OIDC_CLIENT_SECRET = "oidcClientSecret";
  @SerializedName(SERIALIZED_NAME_OIDC_CLIENT_SECRET)
  private String oidcClientSecret;

  public static final String SERIALIZED_NAME_OIDC_CLIENT_SECRET_PASSPHRASE_PROVIDER = "oidcClientSecretPassphraseProvider";
  @SerializedName(SERIALIZED_NAME_OIDC_CLIENT_SECRET_PASSPHRASE_PROVIDER)
  private String oidcClientSecretPassphraseProvider;

  public static final String SERIALIZED_NAME_OIDC_ISSUER_U_R_L = "oidcIssuerURL";
  @SerializedName(SERIALIZED_NAME_OIDC_ISSUER_U_R_L)
  private String oidcIssuerURL;

  public static final String SERIALIZED_NAME_OIDC_TRUST_STORE_FILE = "oidcTrustStoreFile";
  @SerializedName(SERIALIZED_NAME_OIDC_TRUST_STORE_FILE)
  private String oidcTrustStoreFile;

  public static final String SERIALIZED_NAME_OIDC_TRUST_STORE_TYPE = "oidcTrustStoreType";
  @SerializedName(SERIALIZED_NAME_OIDC_TRUST_STORE_TYPE)
  private String oidcTrustStoreType;

  public static final String SERIALIZED_NAME_OIDC_TRUST_STORE_PIN_PASSPHRASE_PROVIDER = "oidcTrustStorePinPassphraseProvider";
  @SerializedName(SERIALIZED_NAME_OIDC_TRUST_STORE_PIN_PASSPHRASE_PROVIDER)
  private String oidcTrustStorePinPassphraseProvider;

  public static final String SERIALIZED_NAME_OIDC_STRICT_HOSTNAME_VERIFICATION = "oidcStrictHostnameVerification";
  @SerializedName(SERIALIZED_NAME_OIDC_STRICT_HOSTNAME_VERIFICATION)
  private Boolean oidcStrictHostnameVerification;

  public static final String SERIALIZED_NAME_OIDC_TRUST_ALL = "oidcTrustAll";
  @SerializedName(SERIALIZED_NAME_OIDC_TRUST_ALL)
  private Boolean oidcTrustAll;

  public static final String SERIALIZED_NAME_LDAP_SERVER = "ldapServer";
  @SerializedName(SERIALIZED_NAME_LDAP_SERVER)
  private String ldapServer;

  public static final String SERIALIZED_NAME_TRUST_STORE_FILE = "trustStoreFile";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_FILE)
  private String trustStoreFile;

  public static final String SERIALIZED_NAME_TRUST_STORE_TYPE = "trustStoreType";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_TYPE)
  private String trustStoreType;

  public static final String SERIALIZED_NAME_TRUST_STORE_PIN_PASSPHRASE_PROVIDER = "trustStorePinPassphraseProvider";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_PIN_PASSPHRASE_PROVIDER)
  private String trustStorePinPassphraseProvider;

  public static final String SERIALIZED_NAME_LOG_FILE = "logFile";
  @SerializedName(SERIALIZED_NAME_LOG_FILE)
  private String logFile;

  public static final String SERIALIZED_NAME_COMPLEXITY = "complexity";
  @SerializedName(SERIALIZED_NAME_COMPLEXITY)
  private EnumwebApplicationExtensionComplexityProp complexity;

  public static final String SERIALIZED_NAME_BASE_CONTEXT_PATH = "baseContextPath";
  @SerializedName(SERIALIZED_NAME_BASE_CONTEXT_PATH)
  private String baseContextPath;

  public static final String SERIALIZED_NAME_WAR_FILE = "warFile";
  @SerializedName(SERIALIZED_NAME_WAR_FILE)
  private String warFile;

  public static final String SERIALIZED_NAME_DOCUMENT_ROOT_DIRECTORY = "documentRootDirectory";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ROOT_DIRECTORY)
  private String documentRootDirectory;

  public static final String SERIALIZED_NAME_DEPLOYMENT_DESCRIPTOR_FILE = "deploymentDescriptorFile";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_DESCRIPTOR_FILE)
  private String deploymentDescriptorFile;

  public static final String SERIALIZED_NAME_TEMPORARY_DIRECTORY = "temporaryDirectory";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_DIRECTORY)
  private String temporaryDirectory;

  public static final String SERIALIZED_NAME_INIT_PARAMETER = "initParameter";
  @SerializedName(SERIALIZED_NAME_INIT_PARAMETER)
  private List<String> initParameter = null;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public ConsoleWebApplicationExtensionResponse() {
  }

  public ConsoleWebApplicationExtensionResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Web Application Extension
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Web Application Extension")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ConsoleWebApplicationExtensionResponse schemas(List<EnumconsoleWebApplicationExtensionSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public ConsoleWebApplicationExtensionResponse addSchemasItem(EnumconsoleWebApplicationExtensionSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumconsoleWebApplicationExtensionSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumconsoleWebApplicationExtensionSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public ConsoleWebApplicationExtensionResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Web Application Extension
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Web Application Extension")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ConsoleWebApplicationExtensionResponse ssoEnabled(Boolean ssoEnabled) {
    
    
    
    
    this.ssoEnabled = ssoEnabled;
    return this;
  }

   /**
   * Indicates that SSO login into the Administrative Console is enabled.
   * @return ssoEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates that SSO login into the Administrative Console is enabled.")

  public Boolean getSsoEnabled() {
    return ssoEnabled;
  }


  public void setSsoEnabled(Boolean ssoEnabled) {
    
    
    
    this.ssoEnabled = ssoEnabled;
  }


  public ConsoleWebApplicationExtensionResponse oidcClientID(String oidcClientID) {
    
    
    
    
    this.oidcClientID = oidcClientID;
    return this;
  }

   /**
   * The client ID to use when authenticating to the OpenID Connect provider.
   * @return oidcClientID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The client ID to use when authenticating to the OpenID Connect provider.")

  public String getOidcClientID() {
    return oidcClientID;
  }


  public void setOidcClientID(String oidcClientID) {
    
    
    
    this.oidcClientID = oidcClientID;
  }


  public ConsoleWebApplicationExtensionResponse oidcClientSecret(String oidcClientSecret) {
    
    
    
    
    this.oidcClientSecret = oidcClientSecret;
    return this;
  }

   /**
   * The client secret to use when authenticating to the OpenID Connect provider.
   * @return oidcClientSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The client secret to use when authenticating to the OpenID Connect provider.")

  public String getOidcClientSecret() {
    return oidcClientSecret;
  }


  public void setOidcClientSecret(String oidcClientSecret) {
    
    
    
    this.oidcClientSecret = oidcClientSecret;
  }


  public ConsoleWebApplicationExtensionResponse oidcClientSecretPassphraseProvider(String oidcClientSecretPassphraseProvider) {
    
    
    
    
    this.oidcClientSecretPassphraseProvider = oidcClientSecretPassphraseProvider;
    return this;
  }

   /**
   * A passphrase provider that may be used to obtain the client secret to use when authenticating to the OpenID Connect provider.
   * @return oidcClientSecretPassphraseProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A passphrase provider that may be used to obtain the client secret to use when authenticating to the OpenID Connect provider.")

  public String getOidcClientSecretPassphraseProvider() {
    return oidcClientSecretPassphraseProvider;
  }


  public void setOidcClientSecretPassphraseProvider(String oidcClientSecretPassphraseProvider) {
    
    
    
    this.oidcClientSecretPassphraseProvider = oidcClientSecretPassphraseProvider;
  }


  public ConsoleWebApplicationExtensionResponse oidcIssuerURL(String oidcIssuerURL) {
    
    
    
    
    this.oidcIssuerURL = oidcIssuerURL;
    return this;
  }

   /**
   * The issuer URL of the OpenID Connect provider.
   * @return oidcIssuerURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The issuer URL of the OpenID Connect provider.")

  public String getOidcIssuerURL() {
    return oidcIssuerURL;
  }


  public void setOidcIssuerURL(String oidcIssuerURL) {
    
    
    
    this.oidcIssuerURL = oidcIssuerURL;
  }


  public ConsoleWebApplicationExtensionResponse oidcTrustStoreFile(String oidcTrustStoreFile) {
    
    
    
    
    this.oidcTrustStoreFile = oidcTrustStoreFile;
    return this;
  }

   /**
   * Specifies the path to the truststore file used by this application to evaluate OIDC provider certificates. If this field is left blank, the default JVM trust store will be used.
   * @return oidcTrustStoreFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the truststore file used by this application to evaluate OIDC provider certificates. If this field is left blank, the default JVM trust store will be used.")

  public String getOidcTrustStoreFile() {
    return oidcTrustStoreFile;
  }


  public void setOidcTrustStoreFile(String oidcTrustStoreFile) {
    
    
    
    this.oidcTrustStoreFile = oidcTrustStoreFile;
  }


  public ConsoleWebApplicationExtensionResponse oidcTrustStoreType(String oidcTrustStoreType) {
    
    
    
    
    this.oidcTrustStoreType = oidcTrustStoreType;
    return this;
  }

   /**
   * Specifies the format for the data in the OIDC trust store file.
   * @return oidcTrustStoreType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the format for the data in the OIDC trust store file.")

  public String getOidcTrustStoreType() {
    return oidcTrustStoreType;
  }


  public void setOidcTrustStoreType(String oidcTrustStoreType) {
    
    
    
    this.oidcTrustStoreType = oidcTrustStoreType;
  }


  public ConsoleWebApplicationExtensionResponse oidcTrustStorePinPassphraseProvider(String oidcTrustStorePinPassphraseProvider) {
    
    
    
    
    this.oidcTrustStorePinPassphraseProvider = oidcTrustStorePinPassphraseProvider;
    return this;
  }

   /**
   * The passphrase provider that may be used to obtain the PIN for the trust store used with OIDC providers. This is only required if a trust store file is required, and if that trust store requires a PIN to access its contents.
   * @return oidcTrustStorePinPassphraseProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The passphrase provider that may be used to obtain the PIN for the trust store used with OIDC providers. This is only required if a trust store file is required, and if that trust store requires a PIN to access its contents.")

  public String getOidcTrustStorePinPassphraseProvider() {
    return oidcTrustStorePinPassphraseProvider;
  }


  public void setOidcTrustStorePinPassphraseProvider(String oidcTrustStorePinPassphraseProvider) {
    
    
    
    this.oidcTrustStorePinPassphraseProvider = oidcTrustStorePinPassphraseProvider;
  }


  public ConsoleWebApplicationExtensionResponse oidcStrictHostnameVerification(Boolean oidcStrictHostnameVerification) {
    
    
    
    
    this.oidcStrictHostnameVerification = oidcStrictHostnameVerification;
    return this;
  }

   /**
   * Controls whether or not hostname verification is performed, which checks if the hostname of the OIDC provider matches the name(s) stored inside the certificate it provides. This property should only be set to false for testing purposes.
   * @return oidcStrictHostnameVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls whether or not hostname verification is performed, which checks if the hostname of the OIDC provider matches the name(s) stored inside the certificate it provides. This property should only be set to false for testing purposes.")

  public Boolean getOidcStrictHostnameVerification() {
    return oidcStrictHostnameVerification;
  }


  public void setOidcStrictHostnameVerification(Boolean oidcStrictHostnameVerification) {
    
    
    
    this.oidcStrictHostnameVerification = oidcStrictHostnameVerification;
  }


  public ConsoleWebApplicationExtensionResponse oidcTrustAll(Boolean oidcTrustAll) {
    
    
    
    
    this.oidcTrustAll = oidcTrustAll;
    return this;
  }

   /**
   * Controls whether or not this application will always trust any certificate that is presented to it, regardless of its contents. This property should only be set to true for testing purposes.
   * @return oidcTrustAll
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Controls whether or not this application will always trust any certificate that is presented to it, regardless of its contents. This property should only be set to true for testing purposes.")

  public Boolean getOidcTrustAll() {
    return oidcTrustAll;
  }


  public void setOidcTrustAll(Boolean oidcTrustAll) {
    
    
    
    this.oidcTrustAll = oidcTrustAll;
  }


  public ConsoleWebApplicationExtensionResponse ldapServer(String ldapServer) {
    
    
    
    
    this.ldapServer = ldapServer;
    return this;
  }

   /**
   * The LDAP URL used to connect to the managed server.
   * @return ldapServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The LDAP URL used to connect to the managed server.")

  public String getLdapServer() {
    return ldapServer;
  }


  public void setLdapServer(String ldapServer) {
    
    
    
    this.ldapServer = ldapServer;
  }


  public ConsoleWebApplicationExtensionResponse trustStoreFile(String trustStoreFile) {
    
    
    
    
    this.trustStoreFile = trustStoreFile;
    return this;
  }

   /**
   * Specifies the path to the truststore file, which is used by this application to establish trust of managed servers.
   * @return trustStoreFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the truststore file, which is used by this application to establish trust of managed servers.")

  public String getTrustStoreFile() {
    return trustStoreFile;
  }


  public void setTrustStoreFile(String trustStoreFile) {
    
    
    
    this.trustStoreFile = trustStoreFile;
  }


  public ConsoleWebApplicationExtensionResponse trustStoreType(String trustStoreType) {
    
    
    
    
    this.trustStoreType = trustStoreType;
    return this;
  }

   /**
   * Specifies the format for the data in the trust store file.
   * @return trustStoreType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the format for the data in the trust store file.")

  public String getTrustStoreType() {
    return trustStoreType;
  }


  public void setTrustStoreType(String trustStoreType) {
    
    
    
    this.trustStoreType = trustStoreType;
  }


  public ConsoleWebApplicationExtensionResponse trustStorePinPassphraseProvider(String trustStorePinPassphraseProvider) {
    
    
    
    
    this.trustStorePinPassphraseProvider = trustStorePinPassphraseProvider;
    return this;
  }

   /**
   * The passphrase provider that may be used to obtain the PIN for the trust store used with managed LDAP servers. This is only required if a trust store file is required, and if that trust store requires a PIN to access its contents.
   * @return trustStorePinPassphraseProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The passphrase provider that may be used to obtain the PIN for the trust store used with managed LDAP servers. This is only required if a trust store file is required, and if that trust store requires a PIN to access its contents.")

  public String getTrustStorePinPassphraseProvider() {
    return trustStorePinPassphraseProvider;
  }


  public void setTrustStorePinPassphraseProvider(String trustStorePinPassphraseProvider) {
    
    
    
    this.trustStorePinPassphraseProvider = trustStorePinPassphraseProvider;
  }


  public ConsoleWebApplicationExtensionResponse logFile(String logFile) {
    
    
    
    
    this.logFile = logFile;
    return this;
  }

   /**
   * The path to the log file for the web application.
   * @return logFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to the log file for the web application.")

  public String getLogFile() {
    return logFile;
  }


  public void setLogFile(String logFile) {
    
    
    
    this.logFile = logFile;
  }


  public ConsoleWebApplicationExtensionResponse complexity(EnumwebApplicationExtensionComplexityProp complexity) {
    
    
    
    
    this.complexity = complexity;
    return this;
  }

   /**
   * Get complexity
   * @return complexity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumwebApplicationExtensionComplexityProp getComplexity() {
    return complexity;
  }


  public void setComplexity(EnumwebApplicationExtensionComplexityProp complexity) {
    
    
    
    this.complexity = complexity;
  }


  public ConsoleWebApplicationExtensionResponse baseContextPath(String baseContextPath) {
    
    
    
    
    this.baseContextPath = baseContextPath;
    return this;
  }

   /**
   * Specifies the base context path that should be used by HTTP clients to reference content. The value must start with a forward slash and at least one additional character and must represent a valid HTTP context path.
   * @return baseContextPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the base context path that should be used by HTTP clients to reference content. The value must start with a forward slash and at least one additional character and must represent a valid HTTP context path.")

  public String getBaseContextPath() {
    return baseContextPath;
  }


  public void setBaseContextPath(String baseContextPath) {
    
    
    
    this.baseContextPath = baseContextPath;
  }


  public ConsoleWebApplicationExtensionResponse warFile(String warFile) {
    
    
    
    
    this.warFile = warFile;
    return this;
  }

   /**
   * Specifies the path to a standard web application archive (WAR) file.
   * @return warFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to a standard web application archive (WAR) file.")

  public String getWarFile() {
    return warFile;
  }


  public void setWarFile(String warFile) {
    
    
    
    this.warFile = warFile;
  }


  public ConsoleWebApplicationExtensionResponse documentRootDirectory(String documentRootDirectory) {
    
    
    
    
    this.documentRootDirectory = documentRootDirectory;
    return this;
  }

   /**
   * Specifies the path to the directory on the local filesystem containing the files to be served by this Web Application Extension. The path must exist, and it must be a directory.
   * @return documentRootDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the directory on the local filesystem containing the files to be served by this Web Application Extension. The path must exist, and it must be a directory.")

  public String getDocumentRootDirectory() {
    return documentRootDirectory;
  }


  public void setDocumentRootDirectory(String documentRootDirectory) {
    
    
    
    this.documentRootDirectory = documentRootDirectory;
  }


  public ConsoleWebApplicationExtensionResponse deploymentDescriptorFile(String deploymentDescriptorFile) {
    
    
    
    
    this.deploymentDescriptorFile = deploymentDescriptorFile;
    return this;
  }

   /**
   * Specifies the path to the deployment descriptor file when used with document-root-directory.
   * @return deploymentDescriptorFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the deployment descriptor file when used with document-root-directory.")

  public String getDeploymentDescriptorFile() {
    return deploymentDescriptorFile;
  }


  public void setDeploymentDescriptorFile(String deploymentDescriptorFile) {
    
    
    
    this.deploymentDescriptorFile = deploymentDescriptorFile;
  }


  public ConsoleWebApplicationExtensionResponse temporaryDirectory(String temporaryDirectory) {
    
    
    
    
    this.temporaryDirectory = temporaryDirectory;
    return this;
  }

   /**
   * Specifies the path to the directory that may be used to store temporary files such as extracted WAR files and compiled JSP files.
   * @return temporaryDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the directory that may be used to store temporary files such as extracted WAR files and compiled JSP files.")

  public String getTemporaryDirectory() {
    return temporaryDirectory;
  }


  public void setTemporaryDirectory(String temporaryDirectory) {
    
    
    
    this.temporaryDirectory = temporaryDirectory;
  }


  public ConsoleWebApplicationExtensionResponse initParameter(List<String> initParameter) {
    
    
    
    
    this.initParameter = initParameter;
    return this;
  }

  public ConsoleWebApplicationExtensionResponse addInitParameterItem(String initParameterItem) {
    if (this.initParameter == null) {
      this.initParameter = new ArrayList<>();
    }
    this.initParameter.add(initParameterItem);
    return this;
  }

   /**
   * Specifies an initialization parameter to pass into the web application during startup.
   * @return initParameter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies an initialization parameter to pass into the web application during startup.")

  public List<String> getInitParameter() {
    return initParameter;
  }


  public void setInitParameter(List<String> initParameter) {
    
    
    
    this.initParameter = initParameter;
  }


  public ConsoleWebApplicationExtensionResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public ConsoleWebApplicationExtensionResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConsoleWebApplicationExtensionResponse instance itself
   */
  public ConsoleWebApplicationExtensionResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsoleWebApplicationExtensionResponse consoleWebApplicationExtensionResponse = (ConsoleWebApplicationExtensionResponse) o;
    return Objects.equals(this.description, consoleWebApplicationExtensionResponse.description) &&
        Objects.equals(this.schemas, consoleWebApplicationExtensionResponse.schemas) &&
        Objects.equals(this.id, consoleWebApplicationExtensionResponse.id) &&
        Objects.equals(this.ssoEnabled, consoleWebApplicationExtensionResponse.ssoEnabled) &&
        Objects.equals(this.oidcClientID, consoleWebApplicationExtensionResponse.oidcClientID) &&
        Objects.equals(this.oidcClientSecret, consoleWebApplicationExtensionResponse.oidcClientSecret) &&
        Objects.equals(this.oidcClientSecretPassphraseProvider, consoleWebApplicationExtensionResponse.oidcClientSecretPassphraseProvider) &&
        Objects.equals(this.oidcIssuerURL, consoleWebApplicationExtensionResponse.oidcIssuerURL) &&
        Objects.equals(this.oidcTrustStoreFile, consoleWebApplicationExtensionResponse.oidcTrustStoreFile) &&
        Objects.equals(this.oidcTrustStoreType, consoleWebApplicationExtensionResponse.oidcTrustStoreType) &&
        Objects.equals(this.oidcTrustStorePinPassphraseProvider, consoleWebApplicationExtensionResponse.oidcTrustStorePinPassphraseProvider) &&
        Objects.equals(this.oidcStrictHostnameVerification, consoleWebApplicationExtensionResponse.oidcStrictHostnameVerification) &&
        Objects.equals(this.oidcTrustAll, consoleWebApplicationExtensionResponse.oidcTrustAll) &&
        Objects.equals(this.ldapServer, consoleWebApplicationExtensionResponse.ldapServer) &&
        Objects.equals(this.trustStoreFile, consoleWebApplicationExtensionResponse.trustStoreFile) &&
        Objects.equals(this.trustStoreType, consoleWebApplicationExtensionResponse.trustStoreType) &&
        Objects.equals(this.trustStorePinPassphraseProvider, consoleWebApplicationExtensionResponse.trustStorePinPassphraseProvider) &&
        Objects.equals(this.logFile, consoleWebApplicationExtensionResponse.logFile) &&
        Objects.equals(this.complexity, consoleWebApplicationExtensionResponse.complexity) &&
        Objects.equals(this.baseContextPath, consoleWebApplicationExtensionResponse.baseContextPath) &&
        Objects.equals(this.warFile, consoleWebApplicationExtensionResponse.warFile) &&
        Objects.equals(this.documentRootDirectory, consoleWebApplicationExtensionResponse.documentRootDirectory) &&
        Objects.equals(this.deploymentDescriptorFile, consoleWebApplicationExtensionResponse.deploymentDescriptorFile) &&
        Objects.equals(this.temporaryDirectory, consoleWebApplicationExtensionResponse.temporaryDirectory) &&
        Objects.equals(this.initParameter, consoleWebApplicationExtensionResponse.initParameter) &&
        Objects.equals(this.meta, consoleWebApplicationExtensionResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, consoleWebApplicationExtensionResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, consoleWebApplicationExtensionResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, ssoEnabled, oidcClientID, oidcClientSecret, oidcClientSecretPassphraseProvider, oidcIssuerURL, oidcTrustStoreFile, oidcTrustStoreType, oidcTrustStorePinPassphraseProvider, oidcStrictHostnameVerification, oidcTrustAll, ldapServer, trustStoreFile, trustStoreType, trustStorePinPassphraseProvider, logFile, complexity, baseContextPath, warFile, documentRootDirectory, deploymentDescriptorFile, temporaryDirectory, initParameter, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsoleWebApplicationExtensionResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ssoEnabled: ").append(toIndentedString(ssoEnabled)).append("\n");
    sb.append("    oidcClientID: ").append(toIndentedString(oidcClientID)).append("\n");
    sb.append("    oidcClientSecret: ").append(toIndentedString(oidcClientSecret)).append("\n");
    sb.append("    oidcClientSecretPassphraseProvider: ").append(toIndentedString(oidcClientSecretPassphraseProvider)).append("\n");
    sb.append("    oidcIssuerURL: ").append(toIndentedString(oidcIssuerURL)).append("\n");
    sb.append("    oidcTrustStoreFile: ").append(toIndentedString(oidcTrustStoreFile)).append("\n");
    sb.append("    oidcTrustStoreType: ").append(toIndentedString(oidcTrustStoreType)).append("\n");
    sb.append("    oidcTrustStorePinPassphraseProvider: ").append(toIndentedString(oidcTrustStorePinPassphraseProvider)).append("\n");
    sb.append("    oidcStrictHostnameVerification: ").append(toIndentedString(oidcStrictHostnameVerification)).append("\n");
    sb.append("    oidcTrustAll: ").append(toIndentedString(oidcTrustAll)).append("\n");
    sb.append("    ldapServer: ").append(toIndentedString(ldapServer)).append("\n");
    sb.append("    trustStoreFile: ").append(toIndentedString(trustStoreFile)).append("\n");
    sb.append("    trustStoreType: ").append(toIndentedString(trustStoreType)).append("\n");
    sb.append("    trustStorePinPassphraseProvider: ").append(toIndentedString(trustStorePinPassphraseProvider)).append("\n");
    sb.append("    logFile: ").append(toIndentedString(logFile)).append("\n");
    sb.append("    complexity: ").append(toIndentedString(complexity)).append("\n");
    sb.append("    baseContextPath: ").append(toIndentedString(baseContextPath)).append("\n");
    sb.append("    warFile: ").append(toIndentedString(warFile)).append("\n");
    sb.append("    documentRootDirectory: ").append(toIndentedString(documentRootDirectory)).append("\n");
    sb.append("    deploymentDescriptorFile: ").append(toIndentedString(deploymentDescriptorFile)).append("\n");
    sb.append("    temporaryDirectory: ").append(toIndentedString(temporaryDirectory)).append("\n");
    sb.append("    initParameter: ").append(toIndentedString(initParameter)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("ssoEnabled");
    openapiFields.add("oidcClientID");
    openapiFields.add("oidcClientSecret");
    openapiFields.add("oidcClientSecretPassphraseProvider");
    openapiFields.add("oidcIssuerURL");
    openapiFields.add("oidcTrustStoreFile");
    openapiFields.add("oidcTrustStoreType");
    openapiFields.add("oidcTrustStorePinPassphraseProvider");
    openapiFields.add("oidcStrictHostnameVerification");
    openapiFields.add("oidcTrustAll");
    openapiFields.add("ldapServer");
    openapiFields.add("trustStoreFile");
    openapiFields.add("trustStoreType");
    openapiFields.add("trustStorePinPassphraseProvider");
    openapiFields.add("logFile");
    openapiFields.add("complexity");
    openapiFields.add("baseContextPath");
    openapiFields.add("warFile");
    openapiFields.add("documentRootDirectory");
    openapiFields.add("deploymentDescriptorFile");
    openapiFields.add("temporaryDirectory");
    openapiFields.add("initParameter");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("baseContextPath");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConsoleWebApplicationExtensionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConsoleWebApplicationExtensionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsoleWebApplicationExtensionResponse is not found in the empty JSON string", ConsoleWebApplicationExtensionResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConsoleWebApplicationExtensionResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("oidcClientID") != null && !jsonObj.get("oidcClientID").isJsonNull()) && !jsonObj.get("oidcClientID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidcClientID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidcClientID").toString()));
      }
      if ((jsonObj.get("oidcClientSecret") != null && !jsonObj.get("oidcClientSecret").isJsonNull()) && !jsonObj.get("oidcClientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidcClientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidcClientSecret").toString()));
      }
      if ((jsonObj.get("oidcClientSecretPassphraseProvider") != null && !jsonObj.get("oidcClientSecretPassphraseProvider").isJsonNull()) && !jsonObj.get("oidcClientSecretPassphraseProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidcClientSecretPassphraseProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidcClientSecretPassphraseProvider").toString()));
      }
      if ((jsonObj.get("oidcIssuerURL") != null && !jsonObj.get("oidcIssuerURL").isJsonNull()) && !jsonObj.get("oidcIssuerURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidcIssuerURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidcIssuerURL").toString()));
      }
      if ((jsonObj.get("oidcTrustStoreFile") != null && !jsonObj.get("oidcTrustStoreFile").isJsonNull()) && !jsonObj.get("oidcTrustStoreFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidcTrustStoreFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidcTrustStoreFile").toString()));
      }
      if ((jsonObj.get("oidcTrustStoreType") != null && !jsonObj.get("oidcTrustStoreType").isJsonNull()) && !jsonObj.get("oidcTrustStoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidcTrustStoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidcTrustStoreType").toString()));
      }
      if ((jsonObj.get("oidcTrustStorePinPassphraseProvider") != null && !jsonObj.get("oidcTrustStorePinPassphraseProvider").isJsonNull()) && !jsonObj.get("oidcTrustStorePinPassphraseProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oidcTrustStorePinPassphraseProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oidcTrustStorePinPassphraseProvider").toString()));
      }
      if ((jsonObj.get("ldapServer") != null && !jsonObj.get("ldapServer").isJsonNull()) && !jsonObj.get("ldapServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldapServer").toString()));
      }
      if ((jsonObj.get("trustStoreFile") != null && !jsonObj.get("trustStoreFile").isJsonNull()) && !jsonObj.get("trustStoreFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStoreFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStoreFile").toString()));
      }
      if ((jsonObj.get("trustStoreType") != null && !jsonObj.get("trustStoreType").isJsonNull()) && !jsonObj.get("trustStoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStoreType").toString()));
      }
      if ((jsonObj.get("trustStorePinPassphraseProvider") != null && !jsonObj.get("trustStorePinPassphraseProvider").isJsonNull()) && !jsonObj.get("trustStorePinPassphraseProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStorePinPassphraseProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStorePinPassphraseProvider").toString()));
      }
      if ((jsonObj.get("logFile") != null && !jsonObj.get("logFile").isJsonNull()) && !jsonObj.get("logFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFile").toString()));
      }
      if (!jsonObj.get("baseContextPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseContextPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseContextPath").toString()));
      }
      if ((jsonObj.get("warFile") != null && !jsonObj.get("warFile").isJsonNull()) && !jsonObj.get("warFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warFile").toString()));
      }
      if ((jsonObj.get("documentRootDirectory") != null && !jsonObj.get("documentRootDirectory").isJsonNull()) && !jsonObj.get("documentRootDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentRootDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentRootDirectory").toString()));
      }
      if ((jsonObj.get("deploymentDescriptorFile") != null && !jsonObj.get("deploymentDescriptorFile").isJsonNull()) && !jsonObj.get("deploymentDescriptorFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentDescriptorFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentDescriptorFile").toString()));
      }
      if ((jsonObj.get("temporaryDirectory") != null && !jsonObj.get("temporaryDirectory").isJsonNull()) && !jsonObj.get("temporaryDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporaryDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporaryDirectory").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("initParameter") != null && !jsonObj.get("initParameter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `initParameter` to be an array in the JSON string but got `%s`", jsonObj.get("initParameter").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsoleWebApplicationExtensionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsoleWebApplicationExtensionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsoleWebApplicationExtensionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsoleWebApplicationExtensionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsoleWebApplicationExtensionResponse>() {
           @Override
           public void write(JsonWriter out, ConsoleWebApplicationExtensionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsoleWebApplicationExtensionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ConsoleWebApplicationExtensionResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConsoleWebApplicationExtensionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConsoleWebApplicationExtensionResponse
  * @throws IOException if the JSON string is invalid with respect to ConsoleWebApplicationExtensionResponse
  */
  public static ConsoleWebApplicationExtensionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsoleWebApplicationExtensionResponse.class);
  }

 /**
  * Convert an instance of ConsoleWebApplicationExtensionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

