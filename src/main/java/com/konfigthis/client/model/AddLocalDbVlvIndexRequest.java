/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumlocalDbVlvIndexCacheModeProp;
import com.konfigthis.client.model.EnumlocalDbVlvIndexSchemaUrn;
import com.konfigthis.client.model.EnumlocalDbVlvIndexScopeProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddLocalDbVlvIndexRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddLocalDbVlvIndexRequest {
  public static final String SERIALIZED_NAME_INDEX_NAME = "indexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  private String indexName;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumlocalDbVlvIndexSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_BASE_D_N = "baseDN";
  @SerializedName(SERIALIZED_NAME_BASE_D_N)
  private String baseDN;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private EnumlocalDbVlvIndexScopeProp scope;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private String sortOrder;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MAX_BLOCK_SIZE = "maxBlockSize";
  @SerializedName(SERIALIZED_NAME_MAX_BLOCK_SIZE)
  private Integer maxBlockSize;

  public static final String SERIALIZED_NAME_CACHE_MODE = "cacheMode";
  @SerializedName(SERIALIZED_NAME_CACHE_MODE)
  private EnumlocalDbVlvIndexCacheModeProp cacheMode;

  public AddLocalDbVlvIndexRequest() {
  }

  public AddLocalDbVlvIndexRequest indexName(String indexName) {
    
    
    
    
    this.indexName = indexName;
    return this;
  }

   /**
   * Name of the new Local DB VLV Index
   * @return indexName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Local DB VLV Index")

  public String getIndexName() {
    return indexName;
  }


  public void setIndexName(String indexName) {
    
    
    
    this.indexName = indexName;
  }


  public AddLocalDbVlvIndexRequest schemas(List<EnumlocalDbVlvIndexSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddLocalDbVlvIndexRequest addSchemasItem(EnumlocalDbVlvIndexSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlocalDbVlvIndexSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumlocalDbVlvIndexSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddLocalDbVlvIndexRequest baseDN(String baseDN) {
    
    
    
    
    this.baseDN = baseDN;
    return this;
  }

   /**
   * Specifies the base DN used in the search query that is being indexed.
   * @return baseDN
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the base DN used in the search query that is being indexed.")

  public String getBaseDN() {
    return baseDN;
  }


  public void setBaseDN(String baseDN) {
    
    
    
    this.baseDN = baseDN;
  }


  public AddLocalDbVlvIndexRequest scope(EnumlocalDbVlvIndexScopeProp scope) {
    
    
    
    
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumlocalDbVlvIndexScopeProp getScope() {
    return scope;
  }


  public void setScope(EnumlocalDbVlvIndexScopeProp scope) {
    
    
    
    this.scope = scope;
  }


  public AddLocalDbVlvIndexRequest filter(String filter) {
    
    
    
    
    this.filter = filter;
    return this;
  }

   /**
   * Specifies the LDAP filter used in the query that is being indexed.
   * @return filter
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the LDAP filter used in the query that is being indexed.")

  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    
    
    
    this.filter = filter;
  }


  public AddLocalDbVlvIndexRequest sortOrder(String sortOrder) {
    
    
    
    
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Specifies the names of the attributes that are used to sort the entries for the query being indexed.
   * @return sortOrder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the names of the attributes that are used to sort the entries for the query being indexed.")

  public String getSortOrder() {
    return sortOrder;
  }


  public void setSortOrder(String sortOrder) {
    
    
    
    this.sortOrder = sortOrder;
  }


  public AddLocalDbVlvIndexRequest name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Specifies a unique name for this VLV index.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies a unique name for this VLV index.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public AddLocalDbVlvIndexRequest maxBlockSize(Integer maxBlockSize) {
    
    
    
    
    this.maxBlockSize = maxBlockSize;
    return this;
  }

   /**
   * Specifies the number of entry IDs to store in a single sorted set before it must be split.
   * @return maxBlockSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of entry IDs to store in a single sorted set before it must be split.")

  public Integer getMaxBlockSize() {
    return maxBlockSize;
  }


  public void setMaxBlockSize(Integer maxBlockSize) {
    
    
    
    this.maxBlockSize = maxBlockSize;
  }


  public AddLocalDbVlvIndexRequest cacheMode(EnumlocalDbVlvIndexCacheModeProp cacheMode) {
    
    
    
    
    this.cacheMode = cacheMode;
    return this;
  }

   /**
   * Get cacheMode
   * @return cacheMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumlocalDbVlvIndexCacheModeProp getCacheMode() {
    return cacheMode;
  }


  public void setCacheMode(EnumlocalDbVlvIndexCacheModeProp cacheMode) {
    
    
    
    this.cacheMode = cacheMode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddLocalDbVlvIndexRequest instance itself
   */
  public AddLocalDbVlvIndexRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest = (AddLocalDbVlvIndexRequest) o;
    return Objects.equals(this.indexName, addLocalDbVlvIndexRequest.indexName) &&
        Objects.equals(this.schemas, addLocalDbVlvIndexRequest.schemas) &&
        Objects.equals(this.baseDN, addLocalDbVlvIndexRequest.baseDN) &&
        Objects.equals(this.scope, addLocalDbVlvIndexRequest.scope) &&
        Objects.equals(this.filter, addLocalDbVlvIndexRequest.filter) &&
        Objects.equals(this.sortOrder, addLocalDbVlvIndexRequest.sortOrder) &&
        Objects.equals(this.name, addLocalDbVlvIndexRequest.name) &&
        Objects.equals(this.maxBlockSize, addLocalDbVlvIndexRequest.maxBlockSize) &&
        Objects.equals(this.cacheMode, addLocalDbVlvIndexRequest.cacheMode)&&
        Objects.equals(this.additionalProperties, addLocalDbVlvIndexRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexName, schemas, baseDN, scope, filter, sortOrder, name, maxBlockSize, cacheMode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddLocalDbVlvIndexRequest {\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    baseDN: ").append(toIndentedString(baseDN)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    maxBlockSize: ").append(toIndentedString(maxBlockSize)).append("\n");
    sb.append("    cacheMode: ").append(toIndentedString(cacheMode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("indexName");
    openapiFields.add("schemas");
    openapiFields.add("baseDN");
    openapiFields.add("scope");
    openapiFields.add("filter");
    openapiFields.add("sortOrder");
    openapiFields.add("name");
    openapiFields.add("maxBlockSize");
    openapiFields.add("cacheMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("indexName");
    openapiRequiredFields.add("baseDN");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("filter");
    openapiRequiredFields.add("sortOrder");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddLocalDbVlvIndexRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddLocalDbVlvIndexRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddLocalDbVlvIndexRequest is not found in the empty JSON string", AddLocalDbVlvIndexRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddLocalDbVlvIndexRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("indexName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("baseDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseDN").toString()));
      }
      if (!jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if (!jsonObj.get("sortOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortOrder").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddLocalDbVlvIndexRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddLocalDbVlvIndexRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddLocalDbVlvIndexRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddLocalDbVlvIndexRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddLocalDbVlvIndexRequest>() {
           @Override
           public void write(JsonWriter out, AddLocalDbVlvIndexRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddLocalDbVlvIndexRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddLocalDbVlvIndexRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddLocalDbVlvIndexRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddLocalDbVlvIndexRequest
  * @throws IOException if the JSON string is invalid with respect to AddLocalDbVlvIndexRequest
  */
  public static AddLocalDbVlvIndexRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddLocalDbVlvIndexRequest.class);
  }

 /**
  * Convert an instance of AddLocalDbVlvIndexRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

