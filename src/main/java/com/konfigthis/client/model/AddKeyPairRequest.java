/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumkeyPairKeyAlgorithmProp;
import com.konfigthis.client.model.EnumkeyPairSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddKeyPairRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddKeyPairRequest {
  public static final String SERIALIZED_NAME_PAIR_NAME = "pairName";
  @SerializedName(SERIALIZED_NAME_PAIR_NAME)
  private String pairName;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumkeyPairSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_KEY_ALGORITHM = "keyAlgorithm";
  @SerializedName(SERIALIZED_NAME_KEY_ALGORITHM)
  private EnumkeyPairKeyAlgorithmProp keyAlgorithm;

  public static final String SERIALIZED_NAME_SELF_SIGNED_CERTIFICATE_VALIDITY = "selfSignedCertificateValidity";
  @SerializedName(SERIALIZED_NAME_SELF_SIGNED_CERTIFICATE_VALIDITY)
  private String selfSignedCertificateValidity;

  public static final String SERIALIZED_NAME_SUBJECT_D_N = "subjectDN";
  @SerializedName(SERIALIZED_NAME_SUBJECT_D_N)
  private String subjectDN;

  public static final String SERIALIZED_NAME_CERTIFICATE_CHAIN = "certificateChain";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_CHAIN)
  private String certificateChain;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "privateKey";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public AddKeyPairRequest() {
  }

  public AddKeyPairRequest pairName(String pairName) {
    
    
    
    
    this.pairName = pairName;
    return this;
  }

   /**
   * Name of the new Key Pair
   * @return pairName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Key Pair")

  public String getPairName() {
    return pairName;
  }


  public void setPairName(String pairName) {
    
    
    
    this.pairName = pairName;
  }


  public AddKeyPairRequest schemas(List<EnumkeyPairSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddKeyPairRequest addSchemasItem(EnumkeyPairSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumkeyPairSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumkeyPairSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddKeyPairRequest keyAlgorithm(EnumkeyPairKeyAlgorithmProp keyAlgorithm) {
    
    
    
    
    this.keyAlgorithm = keyAlgorithm;
    return this;
  }

   /**
   * Get keyAlgorithm
   * @return keyAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumkeyPairKeyAlgorithmProp getKeyAlgorithm() {
    return keyAlgorithm;
  }


  public void setKeyAlgorithm(EnumkeyPairKeyAlgorithmProp keyAlgorithm) {
    
    
    
    this.keyAlgorithm = keyAlgorithm;
  }


  public AddKeyPairRequest selfSignedCertificateValidity(String selfSignedCertificateValidity) {
    
    
    
    
    this.selfSignedCertificateValidity = selfSignedCertificateValidity;
    return this;
  }

   /**
   * The validity period for a self-signed certificate. If not specified, the self-signed certificate will be valid for approximately 20 years. This is not used when importing an existing key-pair. The system will not automatically rotate expired certificates. It is up to the administrator to do that when that happens.
   * @return selfSignedCertificateValidity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The validity period for a self-signed certificate. If not specified, the self-signed certificate will be valid for approximately 20 years. This is not used when importing an existing key-pair. The system will not automatically rotate expired certificates. It is up to the administrator to do that when that happens.")

  public String getSelfSignedCertificateValidity() {
    return selfSignedCertificateValidity;
  }


  public void setSelfSignedCertificateValidity(String selfSignedCertificateValidity) {
    
    
    
    this.selfSignedCertificateValidity = selfSignedCertificateValidity;
  }


  public AddKeyPairRequest subjectDN(String subjectDN) {
    
    
    
    
    this.subjectDN = subjectDN;
    return this;
  }

   /**
   * The DN that should be used as the subject for the self-signed certificate and certificate signing request. This is not used when importing an existing key-pair.
   * @return subjectDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The DN that should be used as the subject for the self-signed certificate and certificate signing request. This is not used when importing an existing key-pair.")

  public String getSubjectDN() {
    return subjectDN;
  }


  public void setSubjectDN(String subjectDN) {
    
    
    
    this.subjectDN = subjectDN;
  }


  public AddKeyPairRequest certificateChain(String certificateChain) {
    
    
    
    
    this.certificateChain = certificateChain;
    return this;
  }

   /**
   * The PEM-encoded X.509 certificate chain.
   * @return certificateChain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The PEM-encoded X.509 certificate chain.")

  public String getCertificateChain() {
    return certificateChain;
  }


  public void setCertificateChain(String certificateChain) {
    
    
    
    this.certificateChain = certificateChain;
  }


  public AddKeyPairRequest privateKey(String privateKey) {
    
    
    
    
    this.privateKey = privateKey;
    return this;
  }

   /**
   * The base64-encoded private key that is encrypted using the preferred encryption settings definition.
   * @return privateKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The base64-encoded private key that is encrypted using the preferred encryption settings definition.")

  public String getPrivateKey() {
    return privateKey;
  }


  public void setPrivateKey(String privateKey) {
    
    
    
    this.privateKey = privateKey;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddKeyPairRequest instance itself
   */
  public AddKeyPairRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddKeyPairRequest addKeyPairRequest = (AddKeyPairRequest) o;
    return Objects.equals(this.pairName, addKeyPairRequest.pairName) &&
        Objects.equals(this.schemas, addKeyPairRequest.schemas) &&
        Objects.equals(this.keyAlgorithm, addKeyPairRequest.keyAlgorithm) &&
        Objects.equals(this.selfSignedCertificateValidity, addKeyPairRequest.selfSignedCertificateValidity) &&
        Objects.equals(this.subjectDN, addKeyPairRequest.subjectDN) &&
        Objects.equals(this.certificateChain, addKeyPairRequest.certificateChain) &&
        Objects.equals(this.privateKey, addKeyPairRequest.privateKey)&&
        Objects.equals(this.additionalProperties, addKeyPairRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pairName, schemas, keyAlgorithm, selfSignedCertificateValidity, subjectDN, certificateChain, privateKey, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddKeyPairRequest {\n");
    sb.append("    pairName: ").append(toIndentedString(pairName)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    keyAlgorithm: ").append(toIndentedString(keyAlgorithm)).append("\n");
    sb.append("    selfSignedCertificateValidity: ").append(toIndentedString(selfSignedCertificateValidity)).append("\n");
    sb.append("    subjectDN: ").append(toIndentedString(subjectDN)).append("\n");
    sb.append("    certificateChain: ").append(toIndentedString(certificateChain)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pairName");
    openapiFields.add("schemas");
    openapiFields.add("keyAlgorithm");
    openapiFields.add("selfSignedCertificateValidity");
    openapiFields.add("subjectDN");
    openapiFields.add("certificateChain");
    openapiFields.add("privateKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("pairName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddKeyPairRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddKeyPairRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddKeyPairRequest is not found in the empty JSON string", AddKeyPairRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddKeyPairRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("pairName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pairName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pairName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("selfSignedCertificateValidity") != null && !jsonObj.get("selfSignedCertificateValidity").isJsonNull()) && !jsonObj.get("selfSignedCertificateValidity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfSignedCertificateValidity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfSignedCertificateValidity").toString()));
      }
      if ((jsonObj.get("subjectDN") != null && !jsonObj.get("subjectDN").isJsonNull()) && !jsonObj.get("subjectDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectDN").toString()));
      }
      if ((jsonObj.get("certificateChain") != null && !jsonObj.get("certificateChain").isJsonNull()) && !jsonObj.get("certificateChain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateChain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateChain").toString()));
      }
      if ((jsonObj.get("privateKey") != null && !jsonObj.get("privateKey").isJsonNull()) && !jsonObj.get("privateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddKeyPairRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddKeyPairRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddKeyPairRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddKeyPairRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddKeyPairRequest>() {
           @Override
           public void write(JsonWriter out, AddKeyPairRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddKeyPairRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddKeyPairRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddKeyPairRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddKeyPairRequest
  * @throws IOException if the JSON string is invalid with respect to AddKeyPairRequest
  */
  public static AddKeyPairRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddKeyPairRequest.class);
  }

 /**
  * Convert an instance of AddKeyPairRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

