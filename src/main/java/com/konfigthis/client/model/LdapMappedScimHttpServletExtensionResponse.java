/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumhttpServletExtensionDebugLevelProp;
import com.konfigthis.client.model.EnumhttpServletExtensionDebugTypeProp;
import com.konfigthis.client.model.EnumldapMappedScimHttpServletExtensionSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LdapMappedScimHttpServletExtensionResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LdapMappedScimHttpServletExtensionResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumldapMappedScimHttpServletExtensionSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_OAUTH_TOKEN_HANDLER = "OAuthTokenHandler";
  @SerializedName(SERIALIZED_NAME_OAUTH_TOKEN_HANDLER)
  private String oauthTokenHandler;

  public static final String SERIALIZED_NAME_BASIC_AUTH_ENABLED = "basicAuthEnabled";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_ENABLED)
  private Boolean basicAuthEnabled;

  public static final String SERIALIZED_NAME_IDENTITY_MAPPER = "identityMapper";
  @SerializedName(SERIALIZED_NAME_IDENTITY_MAPPER)
  private String identityMapper;

  public static final String SERIALIZED_NAME_RESOURCE_MAPPING_FILE = "resourceMappingFile";
  @SerializedName(SERIALIZED_NAME_RESOURCE_MAPPING_FILE)
  private String resourceMappingFile;

  public static final String SERIALIZED_NAME_INCLUDE_L_D_A_P_OBJECTCLASS = "includeLDAPObjectclass";
  @SerializedName(SERIALIZED_NAME_INCLUDE_L_D_A_P_OBJECTCLASS)
  private List<String> includeLDAPObjectclass = null;

  public static final String SERIALIZED_NAME_EXCLUDE_L_D_A_P_OBJECTCLASS = "excludeLDAPObjectclass";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_L_D_A_P_OBJECTCLASS)
  private List<String> excludeLDAPObjectclass = null;

  public static final String SERIALIZED_NAME_INCLUDE_L_D_A_P_BASE_D_N = "includeLDAPBaseDN";
  @SerializedName(SERIALIZED_NAME_INCLUDE_L_D_A_P_BASE_D_N)
  private List<String> includeLDAPBaseDN = null;

  public static final String SERIALIZED_NAME_EXCLUDE_L_D_A_P_BASE_D_N = "excludeLDAPBaseDN";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_L_D_A_P_BASE_D_N)
  private List<String> excludeLDAPBaseDN = null;

  public static final String SERIALIZED_NAME_ENTITY_TAG_L_D_A_P_ATTRIBUTE = "entityTagLDAPAttribute";
  @SerializedName(SERIALIZED_NAME_ENTITY_TAG_L_D_A_P_ATTRIBUTE)
  private String entityTagLDAPAttribute;

  public static final String SERIALIZED_NAME_BASE_CONTEXT_PATH = "baseContextPath";
  @SerializedName(SERIALIZED_NAME_BASE_CONTEXT_PATH)
  private String baseContextPath;

  public static final String SERIALIZED_NAME_TEMPORARY_DIRECTORY = "temporaryDirectory";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_DIRECTORY)
  private String temporaryDirectory;

  public static final String SERIALIZED_NAME_TEMPORARY_DIRECTORY_PERMISSIONS = "temporaryDirectoryPermissions";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_DIRECTORY_PERMISSIONS)
  private String temporaryDirectoryPermissions;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_BULK_MAX_OPERATIONS = "bulkMaxOperations";
  @SerializedName(SERIALIZED_NAME_BULK_MAX_OPERATIONS)
  private Integer bulkMaxOperations;

  public static final String SERIALIZED_NAME_BULK_MAX_PAYLOAD_SIZE = "bulkMaxPayloadSize";
  @SerializedName(SERIALIZED_NAME_BULK_MAX_PAYLOAD_SIZE)
  private String bulkMaxPayloadSize;

  public static final String SERIALIZED_NAME_BULK_MAX_CONCURRENT_REQUESTS = "bulkMaxConcurrentRequests";
  @SerializedName(SERIALIZED_NAME_BULK_MAX_CONCURRENT_REQUESTS)
  private Integer bulkMaxConcurrentRequests;

  public static final String SERIALIZED_NAME_DEBUG_ENABLED = "debugEnabled";
  @SerializedName(SERIALIZED_NAME_DEBUG_ENABLED)
  private Boolean debugEnabled;

  public static final String SERIALIZED_NAME_DEBUG_LEVEL = "debugLevel";
  @SerializedName(SERIALIZED_NAME_DEBUG_LEVEL)
  private EnumhttpServletExtensionDebugLevelProp debugLevel;

  public static final String SERIALIZED_NAME_DEBUG_TYPE = "debugType";
  @SerializedName(SERIALIZED_NAME_DEBUG_TYPE)
  private List<EnumhttpServletExtensionDebugTypeProp> debugType = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDE_STACK_TRACE = "includeStackTrace";
  @SerializedName(SERIALIZED_NAME_INCLUDE_STACK_TRACE)
  private Boolean includeStackTrace;

  public static final String SERIALIZED_NAME_CROSS_ORIGIN_POLICY = "crossOriginPolicy";
  @SerializedName(SERIALIZED_NAME_CROSS_ORIGIN_POLICY)
  private String crossOriginPolicy;

  public static final String SERIALIZED_NAME_RESPONSE_HEADER = "responseHeader";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER)
  private List<String> responseHeader = null;

  public static final String SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER = "correlationIDResponseHeader";
  @SerializedName(SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER)
  private String correlationIDResponseHeader;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public LdapMappedScimHttpServletExtensionResponse() {
  }

  public LdapMappedScimHttpServletExtensionResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the HTTP Servlet Extension
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the HTTP Servlet Extension")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public LdapMappedScimHttpServletExtensionResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this HTTP Servlet Extension
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this HTTP Servlet Extension")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public LdapMappedScimHttpServletExtensionResponse schemas(List<EnumldapMappedScimHttpServletExtensionSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public LdapMappedScimHttpServletExtensionResponse addSchemasItem(EnumldapMappedScimHttpServletExtensionSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumldapMappedScimHttpServletExtensionSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumldapMappedScimHttpServletExtensionSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public LdapMappedScimHttpServletExtensionResponse oauthTokenHandler(String oauthTokenHandler) {
    
    
    
    
    this.oauthTokenHandler = oauthTokenHandler;
    return this;
  }

   /**
   * Specifies the OAuth Token Handler implementation that should be used to validate OAuth 2.0 bearer tokens when they are included in a SCIM request.
   * @return oauthTokenHandler
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OAuth Token Handler implementation that should be used to validate OAuth 2.0 bearer tokens when they are included in a SCIM request.")

  public String getOauthTokenHandler() {
    return oauthTokenHandler;
  }


  public void setOauthTokenHandler(String oauthTokenHandler) {
    
    
    
    this.oauthTokenHandler = oauthTokenHandler;
  }


  public LdapMappedScimHttpServletExtensionResponse basicAuthEnabled(Boolean basicAuthEnabled) {
    
    
    
    
    this.basicAuthEnabled = basicAuthEnabled;
    return this;
  }

   /**
   * Enables HTTP Basic authentication, using a username and password.
   * @return basicAuthEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enables HTTP Basic authentication, using a username and password.")

  public Boolean getBasicAuthEnabled() {
    return basicAuthEnabled;
  }


  public void setBasicAuthEnabled(Boolean basicAuthEnabled) {
    
    
    
    this.basicAuthEnabled = basicAuthEnabled;
  }


  public LdapMappedScimHttpServletExtensionResponse identityMapper(String identityMapper) {
    
    
    
    
    this.identityMapper = identityMapper;
    return this;
  }

   /**
   * Specifies the name of the identity mapper that is to be used to match the username included in the HTTP Basic authentication header to the corresponding user in the directory.
   * @return identityMapper
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the identity mapper that is to be used to match the username included in the HTTP Basic authentication header to the corresponding user in the directory.")

  public String getIdentityMapper() {
    return identityMapper;
  }


  public void setIdentityMapper(String identityMapper) {
    
    
    
    this.identityMapper = identityMapper;
  }


  public LdapMappedScimHttpServletExtensionResponse resourceMappingFile(String resourceMappingFile) {
    
    
    
    
    this.resourceMappingFile = resourceMappingFile;
    return this;
  }

   /**
   * The path to an XML file defining the resources supported by the SCIM interface and the SCIM-to-LDAP attribute mappings to use.
   * @return resourceMappingFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to an XML file defining the resources supported by the SCIM interface and the SCIM-to-LDAP attribute mappings to use.")

  public String getResourceMappingFile() {
    return resourceMappingFile;
  }


  public void setResourceMappingFile(String resourceMappingFile) {
    
    
    
    this.resourceMappingFile = resourceMappingFile;
  }


  public LdapMappedScimHttpServletExtensionResponse includeLDAPObjectclass(List<String> includeLDAPObjectclass) {
    
    
    
    
    this.includeLDAPObjectclass = includeLDAPObjectclass;
    return this;
  }

  public LdapMappedScimHttpServletExtensionResponse addIncludeLDAPObjectclassItem(String includeLDAPObjectclassItem) {
    if (this.includeLDAPObjectclass == null) {
      this.includeLDAPObjectclass = new ArrayList<>();
    }
    this.includeLDAPObjectclass.add(includeLDAPObjectclassItem);
    return this;
  }

   /**
   * Specifies the LDAP object classes that should be exposed directly as SCIM resources.
   * @return includeLDAPObjectclass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the LDAP object classes that should be exposed directly as SCIM resources.")

  public List<String> getIncludeLDAPObjectclass() {
    return includeLDAPObjectclass;
  }


  public void setIncludeLDAPObjectclass(List<String> includeLDAPObjectclass) {
    
    
    
    this.includeLDAPObjectclass = includeLDAPObjectclass;
  }


  public LdapMappedScimHttpServletExtensionResponse excludeLDAPObjectclass(List<String> excludeLDAPObjectclass) {
    
    
    
    
    this.excludeLDAPObjectclass = excludeLDAPObjectclass;
    return this;
  }

  public LdapMappedScimHttpServletExtensionResponse addExcludeLDAPObjectclassItem(String excludeLDAPObjectclassItem) {
    if (this.excludeLDAPObjectclass == null) {
      this.excludeLDAPObjectclass = new ArrayList<>();
    }
    this.excludeLDAPObjectclass.add(excludeLDAPObjectclassItem);
    return this;
  }

   /**
   * Specifies the LDAP object classes that should be not be exposed directly as SCIM resources.
   * @return excludeLDAPObjectclass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the LDAP object classes that should be not be exposed directly as SCIM resources.")

  public List<String> getExcludeLDAPObjectclass() {
    return excludeLDAPObjectclass;
  }


  public void setExcludeLDAPObjectclass(List<String> excludeLDAPObjectclass) {
    
    
    
    this.excludeLDAPObjectclass = excludeLDAPObjectclass;
  }


  public LdapMappedScimHttpServletExtensionResponse includeLDAPBaseDN(List<String> includeLDAPBaseDN) {
    
    
    
    
    this.includeLDAPBaseDN = includeLDAPBaseDN;
    return this;
  }

  public LdapMappedScimHttpServletExtensionResponse addIncludeLDAPBaseDNItem(String includeLDAPBaseDNItem) {
    if (this.includeLDAPBaseDN == null) {
      this.includeLDAPBaseDN = new ArrayList<>();
    }
    this.includeLDAPBaseDN.add(includeLDAPBaseDNItem);
    return this;
  }

   /**
   * Specifies the base DNs for the branches of the DIT that should be exposed via the Identity Access API.
   * @return includeLDAPBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the base DNs for the branches of the DIT that should be exposed via the Identity Access API.")

  public List<String> getIncludeLDAPBaseDN() {
    return includeLDAPBaseDN;
  }


  public void setIncludeLDAPBaseDN(List<String> includeLDAPBaseDN) {
    
    
    
    this.includeLDAPBaseDN = includeLDAPBaseDN;
  }


  public LdapMappedScimHttpServletExtensionResponse excludeLDAPBaseDN(List<String> excludeLDAPBaseDN) {
    
    
    
    
    this.excludeLDAPBaseDN = excludeLDAPBaseDN;
    return this;
  }

  public LdapMappedScimHttpServletExtensionResponse addExcludeLDAPBaseDNItem(String excludeLDAPBaseDNItem) {
    if (this.excludeLDAPBaseDN == null) {
      this.excludeLDAPBaseDN = new ArrayList<>();
    }
    this.excludeLDAPBaseDN.add(excludeLDAPBaseDNItem);
    return this;
  }

   /**
   * Specifies the base DNs for the branches of the DIT that should not be exposed via the Identity Access API.
   * @return excludeLDAPBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the base DNs for the branches of the DIT that should not be exposed via the Identity Access API.")

  public List<String> getExcludeLDAPBaseDN() {
    return excludeLDAPBaseDN;
  }


  public void setExcludeLDAPBaseDN(List<String> excludeLDAPBaseDN) {
    
    
    
    this.excludeLDAPBaseDN = excludeLDAPBaseDN;
  }


  public LdapMappedScimHttpServletExtensionResponse entityTagLDAPAttribute(String entityTagLDAPAttribute) {
    
    
    
    
    this.entityTagLDAPAttribute = entityTagLDAPAttribute;
    return this;
  }

   /**
   * Specifies the LDAP attribute whose value should be used as the entity tag value to enable SCIM resource versioning support.
   * @return entityTagLDAPAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the LDAP attribute whose value should be used as the entity tag value to enable SCIM resource versioning support.")

  public String getEntityTagLDAPAttribute() {
    return entityTagLDAPAttribute;
  }


  public void setEntityTagLDAPAttribute(String entityTagLDAPAttribute) {
    
    
    
    this.entityTagLDAPAttribute = entityTagLDAPAttribute;
  }


  public LdapMappedScimHttpServletExtensionResponse baseContextPath(String baseContextPath) {
    
    
    
    
    this.baseContextPath = baseContextPath;
    return this;
  }

   /**
   * The context path to use to access the SCIM interface. The value must start with a forward slash and must represent a valid HTTP context path.
   * @return baseContextPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The context path to use to access the SCIM interface. The value must start with a forward slash and must represent a valid HTTP context path.")

  public String getBaseContextPath() {
    return baseContextPath;
  }


  public void setBaseContextPath(String baseContextPath) {
    
    
    
    this.baseContextPath = baseContextPath;
  }


  public LdapMappedScimHttpServletExtensionResponse temporaryDirectory(String temporaryDirectory) {
    
    
    
    
    this.temporaryDirectory = temporaryDirectory;
    return this;
  }

   /**
   * Specifies the location of the directory that is used to create temporary files containing SCIM request data.
   * @return temporaryDirectory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the location of the directory that is used to create temporary files containing SCIM request data.")

  public String getTemporaryDirectory() {
    return temporaryDirectory;
  }


  public void setTemporaryDirectory(String temporaryDirectory) {
    
    
    
    this.temporaryDirectory = temporaryDirectory;
  }


  public LdapMappedScimHttpServletExtensionResponse temporaryDirectoryPermissions(String temporaryDirectoryPermissions) {
    
    
    
    
    this.temporaryDirectoryPermissions = temporaryDirectoryPermissions;
    return this;
  }

   /**
   * Specifies the permissions that should be applied to the directory that is used to create temporary files.
   * @return temporaryDirectoryPermissions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the permissions that should be applied to the directory that is used to create temporary files.")

  public String getTemporaryDirectoryPermissions() {
    return temporaryDirectoryPermissions;
  }


  public void setTemporaryDirectoryPermissions(String temporaryDirectoryPermissions) {
    
    
    
    this.temporaryDirectoryPermissions = temporaryDirectoryPermissions;
  }


  public LdapMappedScimHttpServletExtensionResponse maxResults(Integer maxResults) {
    
    
    
    
    this.maxResults = maxResults;
    return this;
  }

   /**
   * The maximum number of resources that are returned in a response.
   * @return maxResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of resources that are returned in a response.")

  public Integer getMaxResults() {
    return maxResults;
  }


  public void setMaxResults(Integer maxResults) {
    
    
    
    this.maxResults = maxResults;
  }


  public LdapMappedScimHttpServletExtensionResponse bulkMaxOperations(Integer bulkMaxOperations) {
    
    
    
    
    this.bulkMaxOperations = bulkMaxOperations;
    return this;
  }

   /**
   * The maximum number of operations that are permitted in a bulk request.
   * @return bulkMaxOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of operations that are permitted in a bulk request.")

  public Integer getBulkMaxOperations() {
    return bulkMaxOperations;
  }


  public void setBulkMaxOperations(Integer bulkMaxOperations) {
    
    
    
    this.bulkMaxOperations = bulkMaxOperations;
  }


  public LdapMappedScimHttpServletExtensionResponse bulkMaxPayloadSize(String bulkMaxPayloadSize) {
    
    
    
    
    this.bulkMaxPayloadSize = bulkMaxPayloadSize;
    return this;
  }

   /**
   * The maximum payload size in bytes of a bulk request.
   * @return bulkMaxPayloadSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum payload size in bytes of a bulk request.")

  public String getBulkMaxPayloadSize() {
    return bulkMaxPayloadSize;
  }


  public void setBulkMaxPayloadSize(String bulkMaxPayloadSize) {
    
    
    
    this.bulkMaxPayloadSize = bulkMaxPayloadSize;
  }


  public LdapMappedScimHttpServletExtensionResponse bulkMaxConcurrentRequests(Integer bulkMaxConcurrentRequests) {
    
    
    
    
    this.bulkMaxConcurrentRequests = bulkMaxConcurrentRequests;
    return this;
  }

   /**
   * The maximum number of bulk requests that may be processed concurrently by the server. Any bulk request that would cause this limit to be exceeded is rejected with HTTP status code 503.
   * @return bulkMaxConcurrentRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of bulk requests that may be processed concurrently by the server. Any bulk request that would cause this limit to be exceeded is rejected with HTTP status code 503.")

  public Integer getBulkMaxConcurrentRequests() {
    return bulkMaxConcurrentRequests;
  }


  public void setBulkMaxConcurrentRequests(Integer bulkMaxConcurrentRequests) {
    
    
    
    this.bulkMaxConcurrentRequests = bulkMaxConcurrentRequests;
  }


  public LdapMappedScimHttpServletExtensionResponse debugEnabled(Boolean debugEnabled) {
    
    
    
    
    this.debugEnabled = debugEnabled;
    return this;
  }

   /**
   * Enables debug logging of the SCIM SDK. Debug messages will be forwarded to the Directory Server debug logger with the scope of com.unboundid.directory.server.extensions.scim.SCIMHTTPServletExtension.
   * @return debugEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enables debug logging of the SCIM SDK. Debug messages will be forwarded to the Directory Server debug logger with the scope of com.unboundid.directory.server.extensions.scim.SCIMHTTPServletExtension.")

  public Boolean getDebugEnabled() {
    return debugEnabled;
  }


  public void setDebugEnabled(Boolean debugEnabled) {
    
    
    
    this.debugEnabled = debugEnabled;
  }


  public LdapMappedScimHttpServletExtensionResponse debugLevel(EnumhttpServletExtensionDebugLevelProp debugLevel) {
    
    
    
    
    this.debugLevel = debugLevel;
    return this;
  }

   /**
   * Get debugLevel
   * @return debugLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumhttpServletExtensionDebugLevelProp getDebugLevel() {
    return debugLevel;
  }


  public void setDebugLevel(EnumhttpServletExtensionDebugLevelProp debugLevel) {
    
    
    
    this.debugLevel = debugLevel;
  }


  public LdapMappedScimHttpServletExtensionResponse debugType(List<EnumhttpServletExtensionDebugTypeProp> debugType) {
    
    
    
    
    this.debugType = debugType;
    return this;
  }

  public LdapMappedScimHttpServletExtensionResponse addDebugTypeItem(EnumhttpServletExtensionDebugTypeProp debugTypeItem) {
    this.debugType.add(debugTypeItem);
    return this;
  }

   /**
   * Get debugType
   * @return debugType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumhttpServletExtensionDebugTypeProp> getDebugType() {
    return debugType;
  }


  public void setDebugType(List<EnumhttpServletExtensionDebugTypeProp> debugType) {
    
    
    
    this.debugType = debugType;
  }


  public LdapMappedScimHttpServletExtensionResponse includeStackTrace(Boolean includeStackTrace) {
    
    
    
    
    this.includeStackTrace = includeStackTrace;
    return this;
  }

   /**
   * Indicates whether a stack trace of the thread which called the debug method should be included in debug log messages.
   * @return includeStackTrace
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether a stack trace of the thread which called the debug method should be included in debug log messages.")

  public Boolean getIncludeStackTrace() {
    return includeStackTrace;
  }


  public void setIncludeStackTrace(Boolean includeStackTrace) {
    
    
    
    this.includeStackTrace = includeStackTrace;
  }


  public LdapMappedScimHttpServletExtensionResponse crossOriginPolicy(String crossOriginPolicy) {
    
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
    return this;
  }

   /**
   * The cross-origin request policy to use for the HTTP Servlet Extension.
   * @return crossOriginPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cross-origin request policy to use for the HTTP Servlet Extension.")

  public String getCrossOriginPolicy() {
    return crossOriginPolicy;
  }


  public void setCrossOriginPolicy(String crossOriginPolicy) {
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
  }


  public LdapMappedScimHttpServletExtensionResponse responseHeader(List<String> responseHeader) {
    
    
    
    
    this.responseHeader = responseHeader;
    return this;
  }

  public LdapMappedScimHttpServletExtensionResponse addResponseHeaderItem(String responseHeaderItem) {
    if (this.responseHeader == null) {
      this.responseHeader = new ArrayList<>();
    }
    this.responseHeader.add(responseHeaderItem);
    return this;
  }

   /**
   * Specifies HTTP header fields and values added to response headers for all requests.
   * @return responseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies HTTP header fields and values added to response headers for all requests.")

  public List<String> getResponseHeader() {
    return responseHeader;
  }


  public void setResponseHeader(List<String> responseHeader) {
    
    
    
    this.responseHeader = responseHeader;
  }


  public LdapMappedScimHttpServletExtensionResponse correlationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
    return this;
  }

   /**
   * Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \&quot;Correlation-Id\&quot;, \&quot;X-Amzn-Trace-Id\&quot;, and \&quot;X-Request-Id\&quot;.
   * @return correlationIDResponseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \"Correlation-Id\", \"X-Amzn-Trace-Id\", and \"X-Request-Id\".")

  public String getCorrelationIDResponseHeader() {
    return correlationIDResponseHeader;
  }


  public void setCorrelationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
  }


  public LdapMappedScimHttpServletExtensionResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public LdapMappedScimHttpServletExtensionResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LdapMappedScimHttpServletExtensionResponse instance itself
   */
  public LdapMappedScimHttpServletExtensionResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LdapMappedScimHttpServletExtensionResponse ldapMappedScimHttpServletExtensionResponse = (LdapMappedScimHttpServletExtensionResponse) o;
    return Objects.equals(this.id, ldapMappedScimHttpServletExtensionResponse.id) &&
        Objects.equals(this.description, ldapMappedScimHttpServletExtensionResponse.description) &&
        Objects.equals(this.schemas, ldapMappedScimHttpServletExtensionResponse.schemas) &&
        Objects.equals(this.oauthTokenHandler, ldapMappedScimHttpServletExtensionResponse.oauthTokenHandler) &&
        Objects.equals(this.basicAuthEnabled, ldapMappedScimHttpServletExtensionResponse.basicAuthEnabled) &&
        Objects.equals(this.identityMapper, ldapMappedScimHttpServletExtensionResponse.identityMapper) &&
        Objects.equals(this.resourceMappingFile, ldapMappedScimHttpServletExtensionResponse.resourceMappingFile) &&
        Objects.equals(this.includeLDAPObjectclass, ldapMappedScimHttpServletExtensionResponse.includeLDAPObjectclass) &&
        Objects.equals(this.excludeLDAPObjectclass, ldapMappedScimHttpServletExtensionResponse.excludeLDAPObjectclass) &&
        Objects.equals(this.includeLDAPBaseDN, ldapMappedScimHttpServletExtensionResponse.includeLDAPBaseDN) &&
        Objects.equals(this.excludeLDAPBaseDN, ldapMappedScimHttpServletExtensionResponse.excludeLDAPBaseDN) &&
        Objects.equals(this.entityTagLDAPAttribute, ldapMappedScimHttpServletExtensionResponse.entityTagLDAPAttribute) &&
        Objects.equals(this.baseContextPath, ldapMappedScimHttpServletExtensionResponse.baseContextPath) &&
        Objects.equals(this.temporaryDirectory, ldapMappedScimHttpServletExtensionResponse.temporaryDirectory) &&
        Objects.equals(this.temporaryDirectoryPermissions, ldapMappedScimHttpServletExtensionResponse.temporaryDirectoryPermissions) &&
        Objects.equals(this.maxResults, ldapMappedScimHttpServletExtensionResponse.maxResults) &&
        Objects.equals(this.bulkMaxOperations, ldapMappedScimHttpServletExtensionResponse.bulkMaxOperations) &&
        Objects.equals(this.bulkMaxPayloadSize, ldapMappedScimHttpServletExtensionResponse.bulkMaxPayloadSize) &&
        Objects.equals(this.bulkMaxConcurrentRequests, ldapMappedScimHttpServletExtensionResponse.bulkMaxConcurrentRequests) &&
        Objects.equals(this.debugEnabled, ldapMappedScimHttpServletExtensionResponse.debugEnabled) &&
        Objects.equals(this.debugLevel, ldapMappedScimHttpServletExtensionResponse.debugLevel) &&
        Objects.equals(this.debugType, ldapMappedScimHttpServletExtensionResponse.debugType) &&
        Objects.equals(this.includeStackTrace, ldapMappedScimHttpServletExtensionResponse.includeStackTrace) &&
        Objects.equals(this.crossOriginPolicy, ldapMappedScimHttpServletExtensionResponse.crossOriginPolicy) &&
        Objects.equals(this.responseHeader, ldapMappedScimHttpServletExtensionResponse.responseHeader) &&
        Objects.equals(this.correlationIDResponseHeader, ldapMappedScimHttpServletExtensionResponse.correlationIDResponseHeader) &&
        Objects.equals(this.meta, ldapMappedScimHttpServletExtensionResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, ldapMappedScimHttpServletExtensionResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, ldapMappedScimHttpServletExtensionResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, oauthTokenHandler, basicAuthEnabled, identityMapper, resourceMappingFile, includeLDAPObjectclass, excludeLDAPObjectclass, includeLDAPBaseDN, excludeLDAPBaseDN, entityTagLDAPAttribute, baseContextPath, temporaryDirectory, temporaryDirectoryPermissions, maxResults, bulkMaxOperations, bulkMaxPayloadSize, bulkMaxConcurrentRequests, debugEnabled, debugLevel, debugType, includeStackTrace, crossOriginPolicy, responseHeader, correlationIDResponseHeader, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LdapMappedScimHttpServletExtensionResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    oauthTokenHandler: ").append(toIndentedString(oauthTokenHandler)).append("\n");
    sb.append("    basicAuthEnabled: ").append(toIndentedString(basicAuthEnabled)).append("\n");
    sb.append("    identityMapper: ").append(toIndentedString(identityMapper)).append("\n");
    sb.append("    resourceMappingFile: ").append(toIndentedString(resourceMappingFile)).append("\n");
    sb.append("    includeLDAPObjectclass: ").append(toIndentedString(includeLDAPObjectclass)).append("\n");
    sb.append("    excludeLDAPObjectclass: ").append(toIndentedString(excludeLDAPObjectclass)).append("\n");
    sb.append("    includeLDAPBaseDN: ").append(toIndentedString(includeLDAPBaseDN)).append("\n");
    sb.append("    excludeLDAPBaseDN: ").append(toIndentedString(excludeLDAPBaseDN)).append("\n");
    sb.append("    entityTagLDAPAttribute: ").append(toIndentedString(entityTagLDAPAttribute)).append("\n");
    sb.append("    baseContextPath: ").append(toIndentedString(baseContextPath)).append("\n");
    sb.append("    temporaryDirectory: ").append(toIndentedString(temporaryDirectory)).append("\n");
    sb.append("    temporaryDirectoryPermissions: ").append(toIndentedString(temporaryDirectoryPermissions)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    bulkMaxOperations: ").append(toIndentedString(bulkMaxOperations)).append("\n");
    sb.append("    bulkMaxPayloadSize: ").append(toIndentedString(bulkMaxPayloadSize)).append("\n");
    sb.append("    bulkMaxConcurrentRequests: ").append(toIndentedString(bulkMaxConcurrentRequests)).append("\n");
    sb.append("    debugEnabled: ").append(toIndentedString(debugEnabled)).append("\n");
    sb.append("    debugLevel: ").append(toIndentedString(debugLevel)).append("\n");
    sb.append("    debugType: ").append(toIndentedString(debugType)).append("\n");
    sb.append("    includeStackTrace: ").append(toIndentedString(includeStackTrace)).append("\n");
    sb.append("    crossOriginPolicy: ").append(toIndentedString(crossOriginPolicy)).append("\n");
    sb.append("    responseHeader: ").append(toIndentedString(responseHeader)).append("\n");
    sb.append("    correlationIDResponseHeader: ").append(toIndentedString(correlationIDResponseHeader)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("OAuthTokenHandler");
    openapiFields.add("basicAuthEnabled");
    openapiFields.add("identityMapper");
    openapiFields.add("resourceMappingFile");
    openapiFields.add("includeLDAPObjectclass");
    openapiFields.add("excludeLDAPObjectclass");
    openapiFields.add("includeLDAPBaseDN");
    openapiFields.add("excludeLDAPBaseDN");
    openapiFields.add("entityTagLDAPAttribute");
    openapiFields.add("baseContextPath");
    openapiFields.add("temporaryDirectory");
    openapiFields.add("temporaryDirectoryPermissions");
    openapiFields.add("maxResults");
    openapiFields.add("bulkMaxOperations");
    openapiFields.add("bulkMaxPayloadSize");
    openapiFields.add("bulkMaxConcurrentRequests");
    openapiFields.add("debugEnabled");
    openapiFields.add("debugLevel");
    openapiFields.add("debugType");
    openapiFields.add("includeStackTrace");
    openapiFields.add("crossOriginPolicy");
    openapiFields.add("responseHeader");
    openapiFields.add("correlationIDResponseHeader");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("baseContextPath");
    openapiRequiredFields.add("temporaryDirectory");
    openapiRequiredFields.add("temporaryDirectoryPermissions");
    openapiRequiredFields.add("debugLevel");
    openapiRequiredFields.add("debugType");
    openapiRequiredFields.add("includeStackTrace");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LdapMappedScimHttpServletExtensionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LdapMappedScimHttpServletExtensionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LdapMappedScimHttpServletExtensionResponse is not found in the empty JSON string", LdapMappedScimHttpServletExtensionResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LdapMappedScimHttpServletExtensionResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("OAuthTokenHandler") != null && !jsonObj.get("OAuthTokenHandler").isJsonNull()) && !jsonObj.get("OAuthTokenHandler").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OAuthTokenHandler` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OAuthTokenHandler").toString()));
      }
      if ((jsonObj.get("identityMapper") != null && !jsonObj.get("identityMapper").isJsonNull()) && !jsonObj.get("identityMapper").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityMapper` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityMapper").toString()));
      }
      if ((jsonObj.get("resourceMappingFile") != null && !jsonObj.get("resourceMappingFile").isJsonNull()) && !jsonObj.get("resourceMappingFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceMappingFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceMappingFile").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includeLDAPObjectclass") != null && !jsonObj.get("includeLDAPObjectclass").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeLDAPObjectclass` to be an array in the JSON string but got `%s`", jsonObj.get("includeLDAPObjectclass").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludeLDAPObjectclass") != null && !jsonObj.get("excludeLDAPObjectclass").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeLDAPObjectclass` to be an array in the JSON string but got `%s`", jsonObj.get("excludeLDAPObjectclass").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includeLDAPBaseDN") != null && !jsonObj.get("includeLDAPBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeLDAPBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("includeLDAPBaseDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludeLDAPBaseDN") != null && !jsonObj.get("excludeLDAPBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeLDAPBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("excludeLDAPBaseDN").toString()));
      }
      if ((jsonObj.get("entityTagLDAPAttribute") != null && !jsonObj.get("entityTagLDAPAttribute").isJsonNull()) && !jsonObj.get("entityTagLDAPAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityTagLDAPAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityTagLDAPAttribute").toString()));
      }
      if (!jsonObj.get("baseContextPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseContextPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseContextPath").toString()));
      }
      if (!jsonObj.get("temporaryDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporaryDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporaryDirectory").toString()));
      }
      if (!jsonObj.get("temporaryDirectoryPermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporaryDirectoryPermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporaryDirectoryPermissions").toString()));
      }
      if ((jsonObj.get("bulkMaxPayloadSize") != null && !jsonObj.get("bulkMaxPayloadSize").isJsonNull()) && !jsonObj.get("bulkMaxPayloadSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bulkMaxPayloadSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bulkMaxPayloadSize").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("debugType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("debugType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugType` to be an array in the JSON string but got `%s`", jsonObj.get("debugType").toString()));
      }
      if ((jsonObj.get("crossOriginPolicy") != null && !jsonObj.get("crossOriginPolicy").isJsonNull()) && !jsonObj.get("crossOriginPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossOriginPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossOriginPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("responseHeader") != null && !jsonObj.get("responseHeader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseHeader` to be an array in the JSON string but got `%s`", jsonObj.get("responseHeader").toString()));
      }
      if ((jsonObj.get("correlationIDResponseHeader") != null && !jsonObj.get("correlationIDResponseHeader").isJsonNull()) && !jsonObj.get("correlationIDResponseHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationIDResponseHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationIDResponseHeader").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LdapMappedScimHttpServletExtensionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LdapMappedScimHttpServletExtensionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LdapMappedScimHttpServletExtensionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LdapMappedScimHttpServletExtensionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LdapMappedScimHttpServletExtensionResponse>() {
           @Override
           public void write(JsonWriter out, LdapMappedScimHttpServletExtensionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LdapMappedScimHttpServletExtensionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LdapMappedScimHttpServletExtensionResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LdapMappedScimHttpServletExtensionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LdapMappedScimHttpServletExtensionResponse
  * @throws IOException if the JSON string is invalid with respect to LdapMappedScimHttpServletExtensionResponse
  */
  public static LdapMappedScimHttpServletExtensionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LdapMappedScimHttpServletExtensionResponse.class);
  }

 /**
  * Convert an instance of LdapMappedScimHttpServletExtensionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

