/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumsimpleSearchEntryCriteriaSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SimpleSearchEntryCriteriaShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SimpleSearchEntryCriteriaShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumsimpleSearchEntryCriteriaSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUEST_CRITERIA = "requestCriteria";
  @SerializedName(SERIALIZED_NAME_REQUEST_CRITERIA)
  private String requestCriteria;

  public static final String SERIALIZED_NAME_ALL_INCLUDED_ENTRY_CONTROL = "allIncludedEntryControl";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_ENTRY_CONTROL)
  private List<String> allIncludedEntryControl = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_ENTRY_CONTROL = "anyIncludedEntryControl";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_ENTRY_CONTROL)
  private List<String> anyIncludedEntryControl = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_ENTRY_CONTROL = "notAllIncludedEntryControl";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_ENTRY_CONTROL)
  private List<String> notAllIncludedEntryControl = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_ENTRY_CONTROL = "noneIncludedEntryControl";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_ENTRY_CONTROL)
  private List<String> noneIncludedEntryControl = null;

  public static final String SERIALIZED_NAME_INCLUDED_ENTRY_BASE_D_N = "includedEntryBaseDN";
  @SerializedName(SERIALIZED_NAME_INCLUDED_ENTRY_BASE_D_N)
  private List<String> includedEntryBaseDN = null;

  public static final String SERIALIZED_NAME_EXCLUDED_ENTRY_BASE_D_N = "excludedEntryBaseDN";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_ENTRY_BASE_D_N)
  private List<String> excludedEntryBaseDN = null;

  public static final String SERIALIZED_NAME_ALL_INCLUDED_ENTRY_FILTER = "allIncludedEntryFilter";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_ENTRY_FILTER)
  private List<String> allIncludedEntryFilter = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_ENTRY_FILTER = "anyIncludedEntryFilter";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_ENTRY_FILTER)
  private List<String> anyIncludedEntryFilter = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_ENTRY_FILTER = "notAllIncludedEntryFilter";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_ENTRY_FILTER)
  private List<String> notAllIncludedEntryFilter = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_ENTRY_FILTER = "noneIncludedEntryFilter";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_ENTRY_FILTER)
  private List<String> noneIncludedEntryFilter = null;

  public static final String SERIALIZED_NAME_ALL_INCLUDED_ENTRY_GROUP_D_N = "allIncludedEntryGroupDN";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_ENTRY_GROUP_D_N)
  private List<String> allIncludedEntryGroupDN = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_ENTRY_GROUP_D_N = "anyIncludedEntryGroupDN";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_ENTRY_GROUP_D_N)
  private List<String> anyIncludedEntryGroupDN = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_ENTRY_GROUP_D_N = "notAllIncludedEntryGroupDN";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_ENTRY_GROUP_D_N)
  private List<String> notAllIncludedEntryGroupDN = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_ENTRY_GROUP_D_N = "noneIncludedEntryGroupDN";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_ENTRY_GROUP_D_N)
  private List<String> noneIncludedEntryGroupDN = null;

  public SimpleSearchEntryCriteriaShared() {
  }

  public SimpleSearchEntryCriteriaShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Search Entry Criteria
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Search Entry Criteria")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public SimpleSearchEntryCriteriaShared schemas(List<EnumsimpleSearchEntryCriteriaSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addSchemasItem(EnumsimpleSearchEntryCriteriaSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumsimpleSearchEntryCriteriaSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumsimpleSearchEntryCriteriaSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public SimpleSearchEntryCriteriaShared requestCriteria(String requestCriteria) {
    
    
    
    
    this.requestCriteria = requestCriteria;
    return this;
  }

   /**
   * Specifies a request criteria object that must match the associated request for entries included in this Simple Search Entry Criteria. of them.
   * @return requestCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a request criteria object that must match the associated request for entries included in this Simple Search Entry Criteria. of them.")

  public String getRequestCriteria() {
    return requestCriteria;
  }


  public void setRequestCriteria(String requestCriteria) {
    
    
    
    this.requestCriteria = requestCriteria;
  }


  public SimpleSearchEntryCriteriaShared allIncludedEntryControl(List<String> allIncludedEntryControl) {
    
    
    
    
    this.allIncludedEntryControl = allIncludedEntryControl;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addAllIncludedEntryControlItem(String allIncludedEntryControlItem) {
    if (this.allIncludedEntryControl == null) {
      this.allIncludedEntryControl = new ArrayList<>();
    }
    this.allIncludedEntryControl.add(allIncludedEntryControlItem);
    return this;
  }

   /**
   * Specifies the OID of a control that must be present in search result entries included in this Simple Search Entry Criteria. If any control OIDs are provided, then the entry must contain all of those controls.
   * @return allIncludedEntryControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OID of a control that must be present in search result entries included in this Simple Search Entry Criteria. If any control OIDs are provided, then the entry must contain all of those controls.")

  public List<String> getAllIncludedEntryControl() {
    return allIncludedEntryControl;
  }


  public void setAllIncludedEntryControl(List<String> allIncludedEntryControl) {
    
    
    
    this.allIncludedEntryControl = allIncludedEntryControl;
  }


  public SimpleSearchEntryCriteriaShared anyIncludedEntryControl(List<String> anyIncludedEntryControl) {
    
    
    
    
    this.anyIncludedEntryControl = anyIncludedEntryControl;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addAnyIncludedEntryControlItem(String anyIncludedEntryControlItem) {
    if (this.anyIncludedEntryControl == null) {
      this.anyIncludedEntryControl = new ArrayList<>();
    }
    this.anyIncludedEntryControl.add(anyIncludedEntryControlItem);
    return this;
  }

   /**
   * Specifies the OID of a control that may be present in search result entries included in this Simple Search Entry Criteria. If any control OIDs are provided, then the entry must contain at least one of those controls.
   * @return anyIncludedEntryControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OID of a control that may be present in search result entries included in this Simple Search Entry Criteria. If any control OIDs are provided, then the entry must contain at least one of those controls.")

  public List<String> getAnyIncludedEntryControl() {
    return anyIncludedEntryControl;
  }


  public void setAnyIncludedEntryControl(List<String> anyIncludedEntryControl) {
    
    
    
    this.anyIncludedEntryControl = anyIncludedEntryControl;
  }


  public SimpleSearchEntryCriteriaShared notAllIncludedEntryControl(List<String> notAllIncludedEntryControl) {
    
    
    
    
    this.notAllIncludedEntryControl = notAllIncludedEntryControl;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addNotAllIncludedEntryControlItem(String notAllIncludedEntryControlItem) {
    if (this.notAllIncludedEntryControl == null) {
      this.notAllIncludedEntryControl = new ArrayList<>();
    }
    this.notAllIncludedEntryControl.add(notAllIncludedEntryControlItem);
    return this;
  }

   /**
   * Specifies the OID of a control that should not be present in search result entries included in this Simple Search Entry Criteria. If any control OIDs are provided, then the entry must not contain at least one of those controls (that is, it may contain zero or more of those controls, but not all of them).
   * @return notAllIncludedEntryControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OID of a control that should not be present in search result entries included in this Simple Search Entry Criteria. If any control OIDs are provided, then the entry must not contain at least one of those controls (that is, it may contain zero or more of those controls, but not all of them).")

  public List<String> getNotAllIncludedEntryControl() {
    return notAllIncludedEntryControl;
  }


  public void setNotAllIncludedEntryControl(List<String> notAllIncludedEntryControl) {
    
    
    
    this.notAllIncludedEntryControl = notAllIncludedEntryControl;
  }


  public SimpleSearchEntryCriteriaShared noneIncludedEntryControl(List<String> noneIncludedEntryControl) {
    
    
    
    
    this.noneIncludedEntryControl = noneIncludedEntryControl;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addNoneIncludedEntryControlItem(String noneIncludedEntryControlItem) {
    if (this.noneIncludedEntryControl == null) {
      this.noneIncludedEntryControl = new ArrayList<>();
    }
    this.noneIncludedEntryControl.add(noneIncludedEntryControlItem);
    return this;
  }

   /**
   * Specifies the OID of a control that must not be present in search result entries included in this Simple Search Entry Criteria. If any control OIDs are provided, then the entry must not contain any of those controls.
   * @return noneIncludedEntryControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OID of a control that must not be present in search result entries included in this Simple Search Entry Criteria. If any control OIDs are provided, then the entry must not contain any of those controls.")

  public List<String> getNoneIncludedEntryControl() {
    return noneIncludedEntryControl;
  }


  public void setNoneIncludedEntryControl(List<String> noneIncludedEntryControl) {
    
    
    
    this.noneIncludedEntryControl = noneIncludedEntryControl;
  }


  public SimpleSearchEntryCriteriaShared includedEntryBaseDN(List<String> includedEntryBaseDN) {
    
    
    
    
    this.includedEntryBaseDN = includedEntryBaseDN;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addIncludedEntryBaseDNItem(String includedEntryBaseDNItem) {
    if (this.includedEntryBaseDN == null) {
      this.includedEntryBaseDN = new ArrayList<>();
    }
    this.includedEntryBaseDN.add(includedEntryBaseDNItem);
    return this;
  }

   /**
   * Specifies a base DN below which entries included in this Simple Search Entry Criteria may exist.
   * @return includedEntryBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a base DN below which entries included in this Simple Search Entry Criteria may exist.")

  public List<String> getIncludedEntryBaseDN() {
    return includedEntryBaseDN;
  }


  public void setIncludedEntryBaseDN(List<String> includedEntryBaseDN) {
    
    
    
    this.includedEntryBaseDN = includedEntryBaseDN;
  }


  public SimpleSearchEntryCriteriaShared excludedEntryBaseDN(List<String> excludedEntryBaseDN) {
    
    
    
    
    this.excludedEntryBaseDN = excludedEntryBaseDN;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addExcludedEntryBaseDNItem(String excludedEntryBaseDNItem) {
    if (this.excludedEntryBaseDN == null) {
      this.excludedEntryBaseDN = new ArrayList<>();
    }
    this.excludedEntryBaseDN.add(excludedEntryBaseDNItem);
    return this;
  }

   /**
   * Specifies a base DN below which entries included in this Simple Search Entry Criteria may not exist.
   * @return excludedEntryBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a base DN below which entries included in this Simple Search Entry Criteria may not exist.")

  public List<String> getExcludedEntryBaseDN() {
    return excludedEntryBaseDN;
  }


  public void setExcludedEntryBaseDN(List<String> excludedEntryBaseDN) {
    
    
    
    this.excludedEntryBaseDN = excludedEntryBaseDN;
  }


  public SimpleSearchEntryCriteriaShared allIncludedEntryFilter(List<String> allIncludedEntryFilter) {
    
    
    
    
    this.allIncludedEntryFilter = allIncludedEntryFilter;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addAllIncludedEntryFilterItem(String allIncludedEntryFilterItem) {
    if (this.allIncludedEntryFilter == null) {
      this.allIncludedEntryFilter = new ArrayList<>();
    }
    this.allIncludedEntryFilter.add(allIncludedEntryFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that must match search result entries included in this Simple Search Entry Criteria. Note that this matching will be performed against the entry that is actually returned to the client and may not reflect the complete entry stored in the server. If any filters are provided, then the returned entry must match all of those filters.
   * @return allIncludedEntryFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that must match search result entries included in this Simple Search Entry Criteria. Note that this matching will be performed against the entry that is actually returned to the client and may not reflect the complete entry stored in the server. If any filters are provided, then the returned entry must match all of those filters.")

  public List<String> getAllIncludedEntryFilter() {
    return allIncludedEntryFilter;
  }


  public void setAllIncludedEntryFilter(List<String> allIncludedEntryFilter) {
    
    
    
    this.allIncludedEntryFilter = allIncludedEntryFilter;
  }


  public SimpleSearchEntryCriteriaShared anyIncludedEntryFilter(List<String> anyIncludedEntryFilter) {
    
    
    
    
    this.anyIncludedEntryFilter = anyIncludedEntryFilter;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addAnyIncludedEntryFilterItem(String anyIncludedEntryFilterItem) {
    if (this.anyIncludedEntryFilter == null) {
      this.anyIncludedEntryFilter = new ArrayList<>();
    }
    this.anyIncludedEntryFilter.add(anyIncludedEntryFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that may match search result entries included in this Simple Search Entry Criteria. Note that this matching will be performed against the entry that is actually returned to the client and may not reflect the complete entry stored in the server. If any filters are provided, then the entry must match at least one of those filters.
   * @return anyIncludedEntryFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that may match search result entries included in this Simple Search Entry Criteria. Note that this matching will be performed against the entry that is actually returned to the client and may not reflect the complete entry stored in the server. If any filters are provided, then the entry must match at least one of those filters.")

  public List<String> getAnyIncludedEntryFilter() {
    return anyIncludedEntryFilter;
  }


  public void setAnyIncludedEntryFilter(List<String> anyIncludedEntryFilter) {
    
    
    
    this.anyIncludedEntryFilter = anyIncludedEntryFilter;
  }


  public SimpleSearchEntryCriteriaShared notAllIncludedEntryFilter(List<String> notAllIncludedEntryFilter) {
    
    
    
    
    this.notAllIncludedEntryFilter = notAllIncludedEntryFilter;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addNotAllIncludedEntryFilterItem(String notAllIncludedEntryFilterItem) {
    if (this.notAllIncludedEntryFilter == null) {
      this.notAllIncludedEntryFilter = new ArrayList<>();
    }
    this.notAllIncludedEntryFilter.add(notAllIncludedEntryFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that should not match search result entries included in this Simple Search Entry Criteria. Note that this matching will be performed against the entry that is actually returned to the client and may not reflect the complete entry stored in the server. If any filters are provided, then the entry must not match at least one of those filters (that is, the entry may match zero or more of those filters, but not of all of them).
   * @return notAllIncludedEntryFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that should not match search result entries included in this Simple Search Entry Criteria. Note that this matching will be performed against the entry that is actually returned to the client and may not reflect the complete entry stored in the server. If any filters are provided, then the entry must not match at least one of those filters (that is, the entry may match zero or more of those filters, but not of all of them).")

  public List<String> getNotAllIncludedEntryFilter() {
    return notAllIncludedEntryFilter;
  }


  public void setNotAllIncludedEntryFilter(List<String> notAllIncludedEntryFilter) {
    
    
    
    this.notAllIncludedEntryFilter = notAllIncludedEntryFilter;
  }


  public SimpleSearchEntryCriteriaShared noneIncludedEntryFilter(List<String> noneIncludedEntryFilter) {
    
    
    
    
    this.noneIncludedEntryFilter = noneIncludedEntryFilter;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addNoneIncludedEntryFilterItem(String noneIncludedEntryFilterItem) {
    if (this.noneIncludedEntryFilter == null) {
      this.noneIncludedEntryFilter = new ArrayList<>();
    }
    this.noneIncludedEntryFilter.add(noneIncludedEntryFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that must not match search result entries included in this Simple Search Entry Criteria. Note that this matching will be performed against the entry that is actually returned to the client and may not reflect the complete entry stored in the server. If any filters are provided, then the entry must not match any of those filters.
   * @return noneIncludedEntryFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that must not match search result entries included in this Simple Search Entry Criteria. Note that this matching will be performed against the entry that is actually returned to the client and may not reflect the complete entry stored in the server. If any filters are provided, then the entry must not match any of those filters.")

  public List<String> getNoneIncludedEntryFilter() {
    return noneIncludedEntryFilter;
  }


  public void setNoneIncludedEntryFilter(List<String> noneIncludedEntryFilter) {
    
    
    
    this.noneIncludedEntryFilter = noneIncludedEntryFilter;
  }


  public SimpleSearchEntryCriteriaShared allIncludedEntryGroupDN(List<String> allIncludedEntryGroupDN) {
    
    
    
    
    this.allIncludedEntryGroupDN = allIncludedEntryGroupDN;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addAllIncludedEntryGroupDNItem(String allIncludedEntryGroupDNItem) {
    if (this.allIncludedEntryGroupDN == null) {
      this.allIncludedEntryGroupDN = new ArrayList<>();
    }
    this.allIncludedEntryGroupDN.add(allIncludedEntryGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which the user associated with the entry must be a member to be included in this Simple Search Entry Criteria. If any group DNs are provided, then the entry must be a member of all of them.
   * @return allIncludedEntryGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which the user associated with the entry must be a member to be included in this Simple Search Entry Criteria. If any group DNs are provided, then the entry must be a member of all of them.")

  public List<String> getAllIncludedEntryGroupDN() {
    return allIncludedEntryGroupDN;
  }


  public void setAllIncludedEntryGroupDN(List<String> allIncludedEntryGroupDN) {
    
    
    
    this.allIncludedEntryGroupDN = allIncludedEntryGroupDN;
  }


  public SimpleSearchEntryCriteriaShared anyIncludedEntryGroupDN(List<String> anyIncludedEntryGroupDN) {
    
    
    
    
    this.anyIncludedEntryGroupDN = anyIncludedEntryGroupDN;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addAnyIncludedEntryGroupDNItem(String anyIncludedEntryGroupDNItem) {
    if (this.anyIncludedEntryGroupDN == null) {
      this.anyIncludedEntryGroupDN = new ArrayList<>();
    }
    this.anyIncludedEntryGroupDN.add(anyIncludedEntryGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which the user associated with the entry may be a member to be included in this Simple Search Entry Criteria. If any group DNs are provided, then the entry must be a member of at least one of them.
   * @return anyIncludedEntryGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which the user associated with the entry may be a member to be included in this Simple Search Entry Criteria. If any group DNs are provided, then the entry must be a member of at least one of them.")

  public List<String> getAnyIncludedEntryGroupDN() {
    return anyIncludedEntryGroupDN;
  }


  public void setAnyIncludedEntryGroupDN(List<String> anyIncludedEntryGroupDN) {
    
    
    
    this.anyIncludedEntryGroupDN = anyIncludedEntryGroupDN;
  }


  public SimpleSearchEntryCriteriaShared notAllIncludedEntryGroupDN(List<String> notAllIncludedEntryGroupDN) {
    
    
    
    
    this.notAllIncludedEntryGroupDN = notAllIncludedEntryGroupDN;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addNotAllIncludedEntryGroupDNItem(String notAllIncludedEntryGroupDNItem) {
    if (this.notAllIncludedEntryGroupDN == null) {
      this.notAllIncludedEntryGroupDN = new ArrayList<>();
    }
    this.notAllIncludedEntryGroupDN.add(notAllIncludedEntryGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which the user associated with the entry should not be a member to be included in this Simple Search Entry Criteria. If any group DNs are provided, then the entry must not be a member of at least one of them (that is, the entry may be a member of zero or more of the specified groups, but not of all of them).
   * @return notAllIncludedEntryGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which the user associated with the entry should not be a member to be included in this Simple Search Entry Criteria. If any group DNs are provided, then the entry must not be a member of at least one of them (that is, the entry may be a member of zero or more of the specified groups, but not of all of them).")

  public List<String> getNotAllIncludedEntryGroupDN() {
    return notAllIncludedEntryGroupDN;
  }


  public void setNotAllIncludedEntryGroupDN(List<String> notAllIncludedEntryGroupDN) {
    
    
    
    this.notAllIncludedEntryGroupDN = notAllIncludedEntryGroupDN;
  }


  public SimpleSearchEntryCriteriaShared noneIncludedEntryGroupDN(List<String> noneIncludedEntryGroupDN) {
    
    
    
    
    this.noneIncludedEntryGroupDN = noneIncludedEntryGroupDN;
    return this;
  }

  public SimpleSearchEntryCriteriaShared addNoneIncludedEntryGroupDNItem(String noneIncludedEntryGroupDNItem) {
    if (this.noneIncludedEntryGroupDN == null) {
      this.noneIncludedEntryGroupDN = new ArrayList<>();
    }
    this.noneIncludedEntryGroupDN.add(noneIncludedEntryGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which the user associated with the entry must not be a member to be included in this Simple Search Entry Criteria. If any group DNs are provided, then the entry must not be a member of any of them.
   * @return noneIncludedEntryGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which the user associated with the entry must not be a member to be included in this Simple Search Entry Criteria. If any group DNs are provided, then the entry must not be a member of any of them.")

  public List<String> getNoneIncludedEntryGroupDN() {
    return noneIncludedEntryGroupDN;
  }


  public void setNoneIncludedEntryGroupDN(List<String> noneIncludedEntryGroupDN) {
    
    
    
    this.noneIncludedEntryGroupDN = noneIncludedEntryGroupDN;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SimpleSearchEntryCriteriaShared instance itself
   */
  public SimpleSearchEntryCriteriaShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleSearchEntryCriteriaShared simpleSearchEntryCriteriaShared = (SimpleSearchEntryCriteriaShared) o;
    return Objects.equals(this.description, simpleSearchEntryCriteriaShared.description) &&
        Objects.equals(this.schemas, simpleSearchEntryCriteriaShared.schemas) &&
        Objects.equals(this.requestCriteria, simpleSearchEntryCriteriaShared.requestCriteria) &&
        Objects.equals(this.allIncludedEntryControl, simpleSearchEntryCriteriaShared.allIncludedEntryControl) &&
        Objects.equals(this.anyIncludedEntryControl, simpleSearchEntryCriteriaShared.anyIncludedEntryControl) &&
        Objects.equals(this.notAllIncludedEntryControl, simpleSearchEntryCriteriaShared.notAllIncludedEntryControl) &&
        Objects.equals(this.noneIncludedEntryControl, simpleSearchEntryCriteriaShared.noneIncludedEntryControl) &&
        Objects.equals(this.includedEntryBaseDN, simpleSearchEntryCriteriaShared.includedEntryBaseDN) &&
        Objects.equals(this.excludedEntryBaseDN, simpleSearchEntryCriteriaShared.excludedEntryBaseDN) &&
        Objects.equals(this.allIncludedEntryFilter, simpleSearchEntryCriteriaShared.allIncludedEntryFilter) &&
        Objects.equals(this.anyIncludedEntryFilter, simpleSearchEntryCriteriaShared.anyIncludedEntryFilter) &&
        Objects.equals(this.notAllIncludedEntryFilter, simpleSearchEntryCriteriaShared.notAllIncludedEntryFilter) &&
        Objects.equals(this.noneIncludedEntryFilter, simpleSearchEntryCriteriaShared.noneIncludedEntryFilter) &&
        Objects.equals(this.allIncludedEntryGroupDN, simpleSearchEntryCriteriaShared.allIncludedEntryGroupDN) &&
        Objects.equals(this.anyIncludedEntryGroupDN, simpleSearchEntryCriteriaShared.anyIncludedEntryGroupDN) &&
        Objects.equals(this.notAllIncludedEntryGroupDN, simpleSearchEntryCriteriaShared.notAllIncludedEntryGroupDN) &&
        Objects.equals(this.noneIncludedEntryGroupDN, simpleSearchEntryCriteriaShared.noneIncludedEntryGroupDN)&&
        Objects.equals(this.additionalProperties, simpleSearchEntryCriteriaShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, requestCriteria, allIncludedEntryControl, anyIncludedEntryControl, notAllIncludedEntryControl, noneIncludedEntryControl, includedEntryBaseDN, excludedEntryBaseDN, allIncludedEntryFilter, anyIncludedEntryFilter, notAllIncludedEntryFilter, noneIncludedEntryFilter, allIncludedEntryGroupDN, anyIncludedEntryGroupDN, notAllIncludedEntryGroupDN, noneIncludedEntryGroupDN, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleSearchEntryCriteriaShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    requestCriteria: ").append(toIndentedString(requestCriteria)).append("\n");
    sb.append("    allIncludedEntryControl: ").append(toIndentedString(allIncludedEntryControl)).append("\n");
    sb.append("    anyIncludedEntryControl: ").append(toIndentedString(anyIncludedEntryControl)).append("\n");
    sb.append("    notAllIncludedEntryControl: ").append(toIndentedString(notAllIncludedEntryControl)).append("\n");
    sb.append("    noneIncludedEntryControl: ").append(toIndentedString(noneIncludedEntryControl)).append("\n");
    sb.append("    includedEntryBaseDN: ").append(toIndentedString(includedEntryBaseDN)).append("\n");
    sb.append("    excludedEntryBaseDN: ").append(toIndentedString(excludedEntryBaseDN)).append("\n");
    sb.append("    allIncludedEntryFilter: ").append(toIndentedString(allIncludedEntryFilter)).append("\n");
    sb.append("    anyIncludedEntryFilter: ").append(toIndentedString(anyIncludedEntryFilter)).append("\n");
    sb.append("    notAllIncludedEntryFilter: ").append(toIndentedString(notAllIncludedEntryFilter)).append("\n");
    sb.append("    noneIncludedEntryFilter: ").append(toIndentedString(noneIncludedEntryFilter)).append("\n");
    sb.append("    allIncludedEntryGroupDN: ").append(toIndentedString(allIncludedEntryGroupDN)).append("\n");
    sb.append("    anyIncludedEntryGroupDN: ").append(toIndentedString(anyIncludedEntryGroupDN)).append("\n");
    sb.append("    notAllIncludedEntryGroupDN: ").append(toIndentedString(notAllIncludedEntryGroupDN)).append("\n");
    sb.append("    noneIncludedEntryGroupDN: ").append(toIndentedString(noneIncludedEntryGroupDN)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("requestCriteria");
    openapiFields.add("allIncludedEntryControl");
    openapiFields.add("anyIncludedEntryControl");
    openapiFields.add("notAllIncludedEntryControl");
    openapiFields.add("noneIncludedEntryControl");
    openapiFields.add("includedEntryBaseDN");
    openapiFields.add("excludedEntryBaseDN");
    openapiFields.add("allIncludedEntryFilter");
    openapiFields.add("anyIncludedEntryFilter");
    openapiFields.add("notAllIncludedEntryFilter");
    openapiFields.add("noneIncludedEntryFilter");
    openapiFields.add("allIncludedEntryGroupDN");
    openapiFields.add("anyIncludedEntryGroupDN");
    openapiFields.add("notAllIncludedEntryGroupDN");
    openapiFields.add("noneIncludedEntryGroupDN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SimpleSearchEntryCriteriaShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SimpleSearchEntryCriteriaShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleSearchEntryCriteriaShared is not found in the empty JSON string", SimpleSearchEntryCriteriaShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimpleSearchEntryCriteriaShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("requestCriteria") != null && !jsonObj.get("requestCriteria").isJsonNull()) && !jsonObj.get("requestCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestCriteria").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedEntryControl") != null && !jsonObj.get("allIncludedEntryControl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedEntryControl` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedEntryControl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedEntryControl") != null && !jsonObj.get("anyIncludedEntryControl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedEntryControl` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedEntryControl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedEntryControl") != null && !jsonObj.get("notAllIncludedEntryControl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedEntryControl` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedEntryControl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedEntryControl") != null && !jsonObj.get("noneIncludedEntryControl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedEntryControl` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedEntryControl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedEntryBaseDN") != null && !jsonObj.get("includedEntryBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedEntryBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("includedEntryBaseDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedEntryBaseDN") != null && !jsonObj.get("excludedEntryBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedEntryBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("excludedEntryBaseDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedEntryFilter") != null && !jsonObj.get("allIncludedEntryFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedEntryFilter` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedEntryFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedEntryFilter") != null && !jsonObj.get("anyIncludedEntryFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedEntryFilter` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedEntryFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedEntryFilter") != null && !jsonObj.get("notAllIncludedEntryFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedEntryFilter` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedEntryFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedEntryFilter") != null && !jsonObj.get("noneIncludedEntryFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedEntryFilter` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedEntryFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedEntryGroupDN") != null && !jsonObj.get("allIncludedEntryGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedEntryGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedEntryGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedEntryGroupDN") != null && !jsonObj.get("anyIncludedEntryGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedEntryGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedEntryGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedEntryGroupDN") != null && !jsonObj.get("notAllIncludedEntryGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedEntryGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedEntryGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedEntryGroupDN") != null && !jsonObj.get("noneIncludedEntryGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedEntryGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedEntryGroupDN").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleSearchEntryCriteriaShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleSearchEntryCriteriaShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleSearchEntryCriteriaShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleSearchEntryCriteriaShared.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleSearchEntryCriteriaShared>() {
           @Override
           public void write(JsonWriter out, SimpleSearchEntryCriteriaShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleSearchEntryCriteriaShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SimpleSearchEntryCriteriaShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimpleSearchEntryCriteriaShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimpleSearchEntryCriteriaShared
  * @throws IOException if the JSON string is invalid with respect to SimpleSearchEntryCriteriaShared
  */
  public static SimpleSearchEntryCriteriaShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleSearchEntryCriteriaShared.class);
  }

 /**
  * Convert an instance of SimpleSearchEntryCriteriaShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

