/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumbackendWritabilityModeProp;
import com.konfigthis.client.model.EnumconfigFileHandlerBackendSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ConfigFileHandlerBackendResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ConfigFileHandlerBackendResponseAllOf {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumconfigFileHandlerBackendSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BACKEND_I_D = "backendID";
  @SerializedName(SERIALIZED_NAME_BACKEND_I_D)
  private String backendID;

  public static final String SERIALIZED_NAME_BASE_D_N = "baseDN";
  @SerializedName(SERIALIZED_NAME_BASE_D_N)
  private List<String> baseDN = null;

  public static final String SERIALIZED_NAME_WRITABILITY_MODE = "writabilityMode";
  @SerializedName(SERIALIZED_NAME_WRITABILITY_MODE)
  private EnumbackendWritabilityModeProp writabilityMode;

  public static final String SERIALIZED_NAME_INSIGNIFICANT_CONFIG_ARCHIVE_ATTRIBUTE = "insignificantConfigArchiveAttribute";
  @SerializedName(SERIALIZED_NAME_INSIGNIFICANT_CONFIG_ARCHIVE_ATTRIBUTE)
  private List<String> insignificantConfigArchiveAttribute = null;

  public static final String SERIALIZED_NAME_INSIGNIFICANT_CONFIG_ARCHIVE_BASE_D_N = "insignificantConfigArchiveBaseDN";
  @SerializedName(SERIALIZED_NAME_INSIGNIFICANT_CONFIG_ARCHIVE_BASE_D_N)
  private List<String> insignificantConfigArchiveBaseDN = null;

  public static final String SERIALIZED_NAME_MAINTAIN_CONFIG_ARCHIVE = "maintainConfigArchive";
  @SerializedName(SERIALIZED_NAME_MAINTAIN_CONFIG_ARCHIVE)
  private Boolean maintainConfigArchive;

  public static final String SERIALIZED_NAME_MAX_CONFIG_ARCHIVE_COUNT = "maxConfigArchiveCount";
  @SerializedName(SERIALIZED_NAME_MAX_CONFIG_ARCHIVE_COUNT)
  private Integer maxConfigArchiveCount;

  public static final String SERIALIZED_NAME_MIRRORED_SUBTREE_PEER_POLLING_INTERVAL = "mirroredSubtreePeerPollingInterval";
  @SerializedName(SERIALIZED_NAME_MIRRORED_SUBTREE_PEER_POLLING_INTERVAL)
  private String mirroredSubtreePeerPollingInterval;

  public static final String SERIALIZED_NAME_MIRRORED_SUBTREE_ENTRY_UPDATE_TIMEOUT = "mirroredSubtreeEntryUpdateTimeout";
  @SerializedName(SERIALIZED_NAME_MIRRORED_SUBTREE_ENTRY_UPDATE_TIMEOUT)
  private String mirroredSubtreeEntryUpdateTimeout;

  public static final String SERIALIZED_NAME_MIRRORED_SUBTREE_SEARCH_TIMEOUT = "mirroredSubtreeSearchTimeout";
  @SerializedName(SERIALIZED_NAME_MIRRORED_SUBTREE_SEARCH_TIMEOUT)
  private String mirroredSubtreeSearchTimeout;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED = "setDegradedAlertWhenDisabled";
  @SerializedName(SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED)
  private Boolean setDegradedAlertWhenDisabled;

  public static final String SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED = "returnUnavailableWhenDisabled";
  @SerializedName(SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED)
  private Boolean returnUnavailableWhenDisabled;

  public static final String SERIALIZED_NAME_BACKUP_FILE_PERMISSIONS = "backupFilePermissions";
  @SerializedName(SERIALIZED_NAME_BACKUP_FILE_PERMISSIONS)
  private String backupFilePermissions;

  public static final String SERIALIZED_NAME_NOTIFICATION_MANAGER = "notificationManager";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_MANAGER)
  private String notificationManager;

  public ConfigFileHandlerBackendResponseAllOf() {
  }

  public ConfigFileHandlerBackendResponseAllOf description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Backend
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Backend")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ConfigFileHandlerBackendResponseAllOf schemas(List<EnumconfigFileHandlerBackendSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public ConfigFileHandlerBackendResponseAllOf addSchemasItem(EnumconfigFileHandlerBackendSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumconfigFileHandlerBackendSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumconfigFileHandlerBackendSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public ConfigFileHandlerBackendResponseAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Backend
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Backend")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ConfigFileHandlerBackendResponseAllOf backendID(String backendID) {
    
    
    
    
    this.backendID = backendID;
    return this;
  }

   /**
   * Specifies a name to identify the associated backend.
   * @return backendID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a name to identify the associated backend.")

  public String getBackendID() {
    return backendID;
  }


  public void setBackendID(String backendID) {
    
    
    
    this.backendID = backendID;
  }


  public ConfigFileHandlerBackendResponseAllOf baseDN(List<String> baseDN) {
    
    
    
    
    this.baseDN = baseDN;
    return this;
  }

  public ConfigFileHandlerBackendResponseAllOf addBaseDNItem(String baseDNItem) {
    if (this.baseDN == null) {
      this.baseDN = new ArrayList<>();
    }
    this.baseDN.add(baseDNItem);
    return this;
  }

   /**
   * Specifies the base DN(s) for the data that the backend handles.
   * @return baseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the base DN(s) for the data that the backend handles.")

  public List<String> getBaseDN() {
    return baseDN;
  }


  public void setBaseDN(List<String> baseDN) {
    
    
    
    this.baseDN = baseDN;
  }


  public ConfigFileHandlerBackendResponseAllOf writabilityMode(EnumbackendWritabilityModeProp writabilityMode) {
    
    
    
    
    this.writabilityMode = writabilityMode;
    return this;
  }

   /**
   * Get writabilityMode
   * @return writabilityMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendWritabilityModeProp getWritabilityMode() {
    return writabilityMode;
  }


  public void setWritabilityMode(EnumbackendWritabilityModeProp writabilityMode) {
    
    
    
    this.writabilityMode = writabilityMode;
  }


  public ConfigFileHandlerBackendResponseAllOf insignificantConfigArchiveAttribute(List<String> insignificantConfigArchiveAttribute) {
    
    
    
    
    this.insignificantConfigArchiveAttribute = insignificantConfigArchiveAttribute;
    return this;
  }

  public ConfigFileHandlerBackendResponseAllOf addInsignificantConfigArchiveAttributeItem(String insignificantConfigArchiveAttributeItem) {
    if (this.insignificantConfigArchiveAttribute == null) {
      this.insignificantConfigArchiveAttribute = new ArrayList<>();
    }
    this.insignificantConfigArchiveAttribute.add(insignificantConfigArchiveAttributeItem);
    return this;
  }

   /**
   * The name or OID of an attribute type that is considered insignificant for the purpose of maintaining the configuration archive.
   * @return insignificantConfigArchiveAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name or OID of an attribute type that is considered insignificant for the purpose of maintaining the configuration archive.")

  public List<String> getInsignificantConfigArchiveAttribute() {
    return insignificantConfigArchiveAttribute;
  }


  public void setInsignificantConfigArchiveAttribute(List<String> insignificantConfigArchiveAttribute) {
    
    
    
    this.insignificantConfigArchiveAttribute = insignificantConfigArchiveAttribute;
  }


  public ConfigFileHandlerBackendResponseAllOf insignificantConfigArchiveBaseDN(List<String> insignificantConfigArchiveBaseDN) {
    
    
    
    
    this.insignificantConfigArchiveBaseDN = insignificantConfigArchiveBaseDN;
    return this;
  }

  public ConfigFileHandlerBackendResponseAllOf addInsignificantConfigArchiveBaseDNItem(String insignificantConfigArchiveBaseDNItem) {
    if (this.insignificantConfigArchiveBaseDN == null) {
      this.insignificantConfigArchiveBaseDN = new ArrayList<>();
    }
    this.insignificantConfigArchiveBaseDN.add(insignificantConfigArchiveBaseDNItem);
    return this;
  }

   /**
   * The base DN that is considered insignificant for the purpose of maintaining the configuration archive.
   * @return insignificantConfigArchiveBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The base DN that is considered insignificant for the purpose of maintaining the configuration archive.")

  public List<String> getInsignificantConfigArchiveBaseDN() {
    return insignificantConfigArchiveBaseDN;
  }


  public void setInsignificantConfigArchiveBaseDN(List<String> insignificantConfigArchiveBaseDN) {
    
    
    
    this.insignificantConfigArchiveBaseDN = insignificantConfigArchiveBaseDN;
  }


  public ConfigFileHandlerBackendResponseAllOf maintainConfigArchive(Boolean maintainConfigArchive) {
    
    
    
    
    this.maintainConfigArchive = maintainConfigArchive;
    return this;
  }

   /**
   * Indicates whether the server should maintain the config archive with new changes to the config backend.
   * @return maintainConfigArchive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should maintain the config archive with new changes to the config backend.")

  public Boolean getMaintainConfigArchive() {
    return maintainConfigArchive;
  }


  public void setMaintainConfigArchive(Boolean maintainConfigArchive) {
    
    
    
    this.maintainConfigArchive = maintainConfigArchive;
  }


  public ConfigFileHandlerBackendResponseAllOf maxConfigArchiveCount(Integer maxConfigArchiveCount) {
    
    
    
    
    this.maxConfigArchiveCount = maxConfigArchiveCount;
    return this;
  }

   /**
   * Indicates the maximum number of previous config files to keep as part of maintaining the config archive.
   * @return maxConfigArchiveCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates the maximum number of previous config files to keep as part of maintaining the config archive.")

  public Integer getMaxConfigArchiveCount() {
    return maxConfigArchiveCount;
  }


  public void setMaxConfigArchiveCount(Integer maxConfigArchiveCount) {
    
    
    
    this.maxConfigArchiveCount = maxConfigArchiveCount;
  }


  public ConfigFileHandlerBackendResponseAllOf mirroredSubtreePeerPollingInterval(String mirroredSubtreePeerPollingInterval) {
    
    
    
    
    this.mirroredSubtreePeerPollingInterval = mirroredSubtreePeerPollingInterval;
    return this;
  }

   /**
   * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.
   * @return mirroredSubtreePeerPollingInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.")

  public String getMirroredSubtreePeerPollingInterval() {
    return mirroredSubtreePeerPollingInterval;
  }


  public void setMirroredSubtreePeerPollingInterval(String mirroredSubtreePeerPollingInterval) {
    
    
    
    this.mirroredSubtreePeerPollingInterval = mirroredSubtreePeerPollingInterval;
  }


  public ConfigFileHandlerBackendResponseAllOf mirroredSubtreeEntryUpdateTimeout(String mirroredSubtreeEntryUpdateTimeout) {
    
    
    
    
    this.mirroredSubtreeEntryUpdateTimeout = mirroredSubtreeEntryUpdateTimeout;
    return this;
  }

   /**
   * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all servers in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.
   * @return mirroredSubtreeEntryUpdateTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all servers in the topology. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data.")

  public String getMirroredSubtreeEntryUpdateTimeout() {
    return mirroredSubtreeEntryUpdateTimeout;
  }


  public void setMirroredSubtreeEntryUpdateTimeout(String mirroredSubtreeEntryUpdateTimeout) {
    
    
    
    this.mirroredSubtreeEntryUpdateTimeout = mirroredSubtreeEntryUpdateTimeout;
  }


  public ConfigFileHandlerBackendResponseAllOf mirroredSubtreeSearchTimeout(String mirroredSubtreeSearchTimeout) {
    
    
    
    
    this.mirroredSubtreeSearchTimeout = mirroredSubtreeSearchTimeout;
    return this;
  }

   /**
   * Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for a search operation to complete. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data. Search requests that take longer than this timeout will be canceled and considered failures.
   * @return mirroredSubtreeSearchTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Tells the server component that is responsible for mirroring configuration data across a topology of servers the maximum amount of time to wait for a search operation to complete. Mirrored data includes meta-data about the servers in the topology as well as cluster-wide configuration data. Search requests that take longer than this timeout will be canceled and considered failures.")

  public String getMirroredSubtreeSearchTimeout() {
    return mirroredSubtreeSearchTimeout;
  }


  public void setMirroredSubtreeSearchTimeout(String mirroredSubtreeSearchTimeout) {
    
    
    
    this.mirroredSubtreeSearchTimeout = mirroredSubtreeSearchTimeout;
  }


  public ConfigFileHandlerBackendResponseAllOf enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the backend is enabled in the server.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the backend is enabled in the server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public ConfigFileHandlerBackendResponseAllOf setDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
    return this;
  }

   /**
   * Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
   * @return setDegradedAlertWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.")

  public Boolean getSetDegradedAlertWhenDisabled() {
    return setDegradedAlertWhenDisabled;
  }


  public void setSetDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
  }


  public ConfigFileHandlerBackendResponseAllOf returnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
    return this;
  }

   /**
   * Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
   * @return returnUnavailableWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.")

  public Boolean getReturnUnavailableWhenDisabled() {
    return returnUnavailableWhenDisabled;
  }


  public void setReturnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
  }


  public ConfigFileHandlerBackendResponseAllOf backupFilePermissions(String backupFilePermissions) {
    
    
    
    
    this.backupFilePermissions = backupFilePermissions;
    return this;
  }

   /**
   * Specifies the permissions that should be applied to files and directories created by a backup of the backend.
   * @return backupFilePermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the permissions that should be applied to files and directories created by a backup of the backend.")

  public String getBackupFilePermissions() {
    return backupFilePermissions;
  }


  public void setBackupFilePermissions(String backupFilePermissions) {
    
    
    
    this.backupFilePermissions = backupFilePermissions;
  }


  public ConfigFileHandlerBackendResponseAllOf notificationManager(String notificationManager) {
    
    
    
    
    this.notificationManager = notificationManager;
    return this;
  }

   /**
   * Specifies a notification manager for changes resulting from operations processed through this Backend
   * @return notificationManager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a notification manager for changes resulting from operations processed through this Backend")

  public String getNotificationManager() {
    return notificationManager;
  }


  public void setNotificationManager(String notificationManager) {
    
    
    
    this.notificationManager = notificationManager;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConfigFileHandlerBackendResponseAllOf instance itself
   */
  public ConfigFileHandlerBackendResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigFileHandlerBackendResponseAllOf configFileHandlerBackendResponseAllOf = (ConfigFileHandlerBackendResponseAllOf) o;
    return Objects.equals(this.description, configFileHandlerBackendResponseAllOf.description) &&
        Objects.equals(this.schemas, configFileHandlerBackendResponseAllOf.schemas) &&
        Objects.equals(this.id, configFileHandlerBackendResponseAllOf.id) &&
        Objects.equals(this.backendID, configFileHandlerBackendResponseAllOf.backendID) &&
        Objects.equals(this.baseDN, configFileHandlerBackendResponseAllOf.baseDN) &&
        Objects.equals(this.writabilityMode, configFileHandlerBackendResponseAllOf.writabilityMode) &&
        Objects.equals(this.insignificantConfigArchiveAttribute, configFileHandlerBackendResponseAllOf.insignificantConfigArchiveAttribute) &&
        Objects.equals(this.insignificantConfigArchiveBaseDN, configFileHandlerBackendResponseAllOf.insignificantConfigArchiveBaseDN) &&
        Objects.equals(this.maintainConfigArchive, configFileHandlerBackendResponseAllOf.maintainConfigArchive) &&
        Objects.equals(this.maxConfigArchiveCount, configFileHandlerBackendResponseAllOf.maxConfigArchiveCount) &&
        Objects.equals(this.mirroredSubtreePeerPollingInterval, configFileHandlerBackendResponseAllOf.mirroredSubtreePeerPollingInterval) &&
        Objects.equals(this.mirroredSubtreeEntryUpdateTimeout, configFileHandlerBackendResponseAllOf.mirroredSubtreeEntryUpdateTimeout) &&
        Objects.equals(this.mirroredSubtreeSearchTimeout, configFileHandlerBackendResponseAllOf.mirroredSubtreeSearchTimeout) &&
        Objects.equals(this.enabled, configFileHandlerBackendResponseAllOf.enabled) &&
        Objects.equals(this.setDegradedAlertWhenDisabled, configFileHandlerBackendResponseAllOf.setDegradedAlertWhenDisabled) &&
        Objects.equals(this.returnUnavailableWhenDisabled, configFileHandlerBackendResponseAllOf.returnUnavailableWhenDisabled) &&
        Objects.equals(this.backupFilePermissions, configFileHandlerBackendResponseAllOf.backupFilePermissions) &&
        Objects.equals(this.notificationManager, configFileHandlerBackendResponseAllOf.notificationManager)&&
        Objects.equals(this.additionalProperties, configFileHandlerBackendResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, backendID, baseDN, writabilityMode, insignificantConfigArchiveAttribute, insignificantConfigArchiveBaseDN, maintainConfigArchive, maxConfigArchiveCount, mirroredSubtreePeerPollingInterval, mirroredSubtreeEntryUpdateTimeout, mirroredSubtreeSearchTimeout, enabled, setDegradedAlertWhenDisabled, returnUnavailableWhenDisabled, backupFilePermissions, notificationManager, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigFileHandlerBackendResponseAllOf {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    backendID: ").append(toIndentedString(backendID)).append("\n");
    sb.append("    baseDN: ").append(toIndentedString(baseDN)).append("\n");
    sb.append("    writabilityMode: ").append(toIndentedString(writabilityMode)).append("\n");
    sb.append("    insignificantConfigArchiveAttribute: ").append(toIndentedString(insignificantConfigArchiveAttribute)).append("\n");
    sb.append("    insignificantConfigArchiveBaseDN: ").append(toIndentedString(insignificantConfigArchiveBaseDN)).append("\n");
    sb.append("    maintainConfigArchive: ").append(toIndentedString(maintainConfigArchive)).append("\n");
    sb.append("    maxConfigArchiveCount: ").append(toIndentedString(maxConfigArchiveCount)).append("\n");
    sb.append("    mirroredSubtreePeerPollingInterval: ").append(toIndentedString(mirroredSubtreePeerPollingInterval)).append("\n");
    sb.append("    mirroredSubtreeEntryUpdateTimeout: ").append(toIndentedString(mirroredSubtreeEntryUpdateTimeout)).append("\n");
    sb.append("    mirroredSubtreeSearchTimeout: ").append(toIndentedString(mirroredSubtreeSearchTimeout)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    setDegradedAlertWhenDisabled: ").append(toIndentedString(setDegradedAlertWhenDisabled)).append("\n");
    sb.append("    returnUnavailableWhenDisabled: ").append(toIndentedString(returnUnavailableWhenDisabled)).append("\n");
    sb.append("    backupFilePermissions: ").append(toIndentedString(backupFilePermissions)).append("\n");
    sb.append("    notificationManager: ").append(toIndentedString(notificationManager)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("backendID");
    openapiFields.add("baseDN");
    openapiFields.add("writabilityMode");
    openapiFields.add("insignificantConfigArchiveAttribute");
    openapiFields.add("insignificantConfigArchiveBaseDN");
    openapiFields.add("maintainConfigArchive");
    openapiFields.add("maxConfigArchiveCount");
    openapiFields.add("mirroredSubtreePeerPollingInterval");
    openapiFields.add("mirroredSubtreeEntryUpdateTimeout");
    openapiFields.add("mirroredSubtreeSearchTimeout");
    openapiFields.add("enabled");
    openapiFields.add("setDegradedAlertWhenDisabled");
    openapiFields.add("returnUnavailableWhenDisabled");
    openapiFields.add("backupFilePermissions");
    openapiFields.add("notificationManager");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConfigFileHandlerBackendResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConfigFileHandlerBackendResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigFileHandlerBackendResponseAllOf is not found in the empty JSON string", ConfigFileHandlerBackendResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("backendID") != null && !jsonObj.get("backendID").isJsonNull()) && !jsonObj.get("backendID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("baseDN") != null && !jsonObj.get("baseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseDN` to be an array in the JSON string but got `%s`", jsonObj.get("baseDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("insignificantConfigArchiveAttribute") != null && !jsonObj.get("insignificantConfigArchiveAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `insignificantConfigArchiveAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("insignificantConfigArchiveAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("insignificantConfigArchiveBaseDN") != null && !jsonObj.get("insignificantConfigArchiveBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `insignificantConfigArchiveBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("insignificantConfigArchiveBaseDN").toString()));
      }
      if ((jsonObj.get("mirroredSubtreePeerPollingInterval") != null && !jsonObj.get("mirroredSubtreePeerPollingInterval").isJsonNull()) && !jsonObj.get("mirroredSubtreePeerPollingInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirroredSubtreePeerPollingInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirroredSubtreePeerPollingInterval").toString()));
      }
      if ((jsonObj.get("mirroredSubtreeEntryUpdateTimeout") != null && !jsonObj.get("mirroredSubtreeEntryUpdateTimeout").isJsonNull()) && !jsonObj.get("mirroredSubtreeEntryUpdateTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirroredSubtreeEntryUpdateTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirroredSubtreeEntryUpdateTimeout").toString()));
      }
      if ((jsonObj.get("mirroredSubtreeSearchTimeout") != null && !jsonObj.get("mirroredSubtreeSearchTimeout").isJsonNull()) && !jsonObj.get("mirroredSubtreeSearchTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirroredSubtreeSearchTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirroredSubtreeSearchTimeout").toString()));
      }
      if ((jsonObj.get("backupFilePermissions") != null && !jsonObj.get("backupFilePermissions").isJsonNull()) && !jsonObj.get("backupFilePermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupFilePermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupFilePermissions").toString()));
      }
      if ((jsonObj.get("notificationManager") != null && !jsonObj.get("notificationManager").isJsonNull()) && !jsonObj.get("notificationManager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationManager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationManager").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigFileHandlerBackendResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigFileHandlerBackendResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigFileHandlerBackendResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigFileHandlerBackendResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigFileHandlerBackendResponseAllOf>() {
           @Override
           public void write(JsonWriter out, ConfigFileHandlerBackendResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigFileHandlerBackendResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ConfigFileHandlerBackendResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConfigFileHandlerBackendResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConfigFileHandlerBackendResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to ConfigFileHandlerBackendResponseAllOf
  */
  public static ConfigFileHandlerBackendResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigFileHandlerBackendResponseAllOf.class);
  }

 /**
  * Convert an instance of ConfigFileHandlerBackendResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

