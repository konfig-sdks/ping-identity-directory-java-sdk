/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumpluginAgentAuthenticationProtocolProp;
import com.konfigthis.client.model.EnumpluginAgentPrivacyProtocolProp;
import com.konfigthis.client.model.EnumpluginAgentSNMPVersionProp;
import com.konfigthis.client.model.EnumpluginAgentSecurityLevelProp;
import com.konfigthis.client.model.EnumpluginAgentxTransportProp;
import com.konfigthis.client.model.EnumsnmpMasterAgentPluginSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SnmpMasterAgentPluginResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SnmpMasterAgentPluginResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumsnmpMasterAgentPluginSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LISTEN_ADDRESS = "listenAddress";
  @SerializedName(SERIALIZED_NAME_LISTEN_ADDRESS)
  private String listenAddress;

  public static final String SERIALIZED_NAME_LISTEN_PORT = "listenPort";
  @SerializedName(SERIALIZED_NAME_LISTEN_PORT)
  private Integer listenPort;

  public static final String SERIALIZED_NAME_AGENTX_TRANSPORT = "agentxTransport";
  @SerializedName(SERIALIZED_NAME_AGENTX_TRANSPORT)
  private EnumpluginAgentxTransportProp agentxTransport;

  public static final String SERIALIZED_NAME_AGENTX_LISTEN_ADDRESS = "agentxListenAddress";
  @SerializedName(SERIALIZED_NAME_AGENTX_LISTEN_ADDRESS)
  private String agentxListenAddress;

  public static final String SERIALIZED_NAME_AGENTX_LISTEN_PORT = "agentxListenPort";
  @SerializedName(SERIALIZED_NAME_AGENTX_LISTEN_PORT)
  private Integer agentxListenPort;

  public static final String SERIALIZED_NAME_NOTIFICATION_TARGET_ADDRESS = "notificationTargetAddress";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TARGET_ADDRESS)
  private String notificationTargetAddress;

  public static final String SERIALIZED_NAME_NOTIFICATION_TARGET_PORT = "notificationTargetPort";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TARGET_PORT)
  private Integer notificationTargetPort;

  public static final String SERIALIZED_NAME_AGENT_S_N_M_P_VERSION = "agentSNMPVersion";
  @SerializedName(SERIALIZED_NAME_AGENT_S_N_M_P_VERSION)
  private List<EnumpluginAgentSNMPVersionProp> agentSNMPVersion = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMUNITY_NAME = "communityName";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_NAME)
  private String communityName;

  public static final String SERIALIZED_NAME_AGENT_SECURITY_NAME = "agentSecurityName";
  @SerializedName(SERIALIZED_NAME_AGENT_SECURITY_NAME)
  private String agentSecurityName;

  public static final String SERIALIZED_NAME_AGENT_SECURITY_LEVEL = "agentSecurityLevel";
  @SerializedName(SERIALIZED_NAME_AGENT_SECURITY_LEVEL)
  private EnumpluginAgentSecurityLevelProp agentSecurityLevel;

  public static final String SERIALIZED_NAME_AGENT_AUTHENTICATION_PROTOCOL = "agentAuthenticationProtocol";
  @SerializedName(SERIALIZED_NAME_AGENT_AUTHENTICATION_PROTOCOL)
  private EnumpluginAgentAuthenticationProtocolProp agentAuthenticationProtocol;

  public static final String SERIALIZED_NAME_AGENT_AUTHENTICATION_PASSPHRASE = "agentAuthenticationPassphrase";
  @SerializedName(SERIALIZED_NAME_AGENT_AUTHENTICATION_PASSPHRASE)
  private String agentAuthenticationPassphrase;

  public static final String SERIALIZED_NAME_AGENT_PRIVACY_PROTOCOL = "agentPrivacyProtocol";
  @SerializedName(SERIALIZED_NAME_AGENT_PRIVACY_PROTOCOL)
  private EnumpluginAgentPrivacyProtocolProp agentPrivacyProtocol;

  public static final String SERIALIZED_NAME_AGENT_PRIVACY_PASSPHRASE = "agentPrivacyPassphrase";
  @SerializedName(SERIALIZED_NAME_AGENT_PRIVACY_PASSPHRASE)
  private String agentPrivacyPassphrase;

  public static final String SERIALIZED_NAME_NUM_WORKER_THREADS = "numWorkerThreads";
  @SerializedName(SERIALIZED_NAME_NUM_WORKER_THREADS)
  private Integer numWorkerThreads;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS = "invokeForInternalOperations";
  @SerializedName(SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS)
  private Boolean invokeForInternalOperations;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public SnmpMasterAgentPluginResponse() {
  }

  public SnmpMasterAgentPluginResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public SnmpMasterAgentPluginResponse schemas(List<EnumsnmpMasterAgentPluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public SnmpMasterAgentPluginResponse addSchemasItem(EnumsnmpMasterAgentPluginSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumsnmpMasterAgentPluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumsnmpMasterAgentPluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public SnmpMasterAgentPluginResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Plugin
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Plugin")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public SnmpMasterAgentPluginResponse listenAddress(String listenAddress) {
    
    
    
    
    this.listenAddress = listenAddress;
    return this;
  }

   /**
   * The IP address on which the SNMP agent will listen for client requests.
   * @return listenAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The IP address on which the SNMP agent will listen for client requests.")

  public String getListenAddress() {
    return listenAddress;
  }


  public void setListenAddress(String listenAddress) {
    
    
    
    this.listenAddress = listenAddress;
  }


  public SnmpMasterAgentPluginResponse listenPort(Integer listenPort) {
    
    
    
    
    this.listenPort = listenPort;
    return this;
  }

   /**
   * The port number on which the SNMP agent will listen for client requests.
   * @return listenPort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The port number on which the SNMP agent will listen for client requests.")

  public Integer getListenPort() {
    return listenPort;
  }


  public void setListenPort(Integer listenPort) {
    
    
    
    this.listenPort = listenPort;
  }


  public SnmpMasterAgentPluginResponse agentxTransport(EnumpluginAgentxTransportProp agentxTransport) {
    
    
    
    
    this.agentxTransport = agentxTransport;
    return this;
  }

   /**
   * Get agentxTransport
   * @return agentxTransport
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumpluginAgentxTransportProp getAgentxTransport() {
    return agentxTransport;
  }


  public void setAgentxTransport(EnumpluginAgentxTransportProp agentxTransport) {
    
    
    
    this.agentxTransport = agentxTransport;
  }


  public SnmpMasterAgentPluginResponse agentxListenAddress(String agentxListenAddress) {
    
    
    
    
    this.agentxListenAddress = agentxListenAddress;
    return this;
  }

   /**
   * The IP address on which the SNMP agent will listen for sub-agent sessions.
   * @return agentxListenAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The IP address on which the SNMP agent will listen for sub-agent sessions.")

  public String getAgentxListenAddress() {
    return agentxListenAddress;
  }


  public void setAgentxListenAddress(String agentxListenAddress) {
    
    
    
    this.agentxListenAddress = agentxListenAddress;
  }


  public SnmpMasterAgentPluginResponse agentxListenPort(Integer agentxListenPort) {
    
    
    
    
    this.agentxListenPort = agentxListenPort;
    return this;
  }

   /**
   * The port number on which the SNMP agent will listen for sub-agent sessions.
   * @return agentxListenPort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The port number on which the SNMP agent will listen for sub-agent sessions.")

  public Integer getAgentxListenPort() {
    return agentxListenPort;
  }


  public void setAgentxListenPort(Integer agentxListenPort) {
    
    
    
    this.agentxListenPort = agentxListenPort;
  }


  public SnmpMasterAgentPluginResponse notificationTargetAddress(String notificationTargetAddress) {
    
    
    
    
    this.notificationTargetAddress = notificationTargetAddress;
    return this;
  }

   /**
   * The IP address of the target to which the SNMP agent should send notifications (traps).
   * @return notificationTargetAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The IP address of the target to which the SNMP agent should send notifications (traps).")

  public String getNotificationTargetAddress() {
    return notificationTargetAddress;
  }


  public void setNotificationTargetAddress(String notificationTargetAddress) {
    
    
    
    this.notificationTargetAddress = notificationTargetAddress;
  }


  public SnmpMasterAgentPluginResponse notificationTargetPort(Integer notificationTargetPort) {
    
    
    
    
    this.notificationTargetPort = notificationTargetPort;
    return this;
  }

   /**
   * The port number of the target to which the SNMP agent should send notifications (traps).
   * @return notificationTargetPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The port number of the target to which the SNMP agent should send notifications (traps).")

  public Integer getNotificationTargetPort() {
    return notificationTargetPort;
  }


  public void setNotificationTargetPort(Integer notificationTargetPort) {
    
    
    
    this.notificationTargetPort = notificationTargetPort;
  }


  public SnmpMasterAgentPluginResponse agentSNMPVersion(List<EnumpluginAgentSNMPVersionProp> agentSNMPVersion) {
    
    
    
    
    this.agentSNMPVersion = agentSNMPVersion;
    return this;
  }

  public SnmpMasterAgentPluginResponse addAgentSNMPVersionItem(EnumpluginAgentSNMPVersionProp agentSNMPVersionItem) {
    this.agentSNMPVersion.add(agentSNMPVersionItem);
    return this;
  }

   /**
   * Get agentSNMPVersion
   * @return agentSNMPVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumpluginAgentSNMPVersionProp> getAgentSNMPVersion() {
    return agentSNMPVersion;
  }


  public void setAgentSNMPVersion(List<EnumpluginAgentSNMPVersionProp> agentSNMPVersion) {
    
    
    
    this.agentSNMPVersion = agentSNMPVersion;
  }


  public SnmpMasterAgentPluginResponse communityName(String communityName) {
    
    
    
    
    this.communityName = communityName;
    return this;
  }

   /**
   * The name of the community to use for the SNMP agent.
   * @return communityName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the community to use for the SNMP agent.")

  public String getCommunityName() {
    return communityName;
  }


  public void setCommunityName(String communityName) {
    
    
    
    this.communityName = communityName;
  }


  public SnmpMasterAgentPluginResponse agentSecurityName(String agentSecurityName) {
    
    
    
    
    this.agentSecurityName = agentSecurityName;
    return this;
  }

   /**
   * The security name (i.e., username) to use for the SNMP agent. This must be defined if SNMPv3 is to be used.
   * @return agentSecurityName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The security name (i.e., username) to use for the SNMP agent. This must be defined if SNMPv3 is to be used.")

  public String getAgentSecurityName() {
    return agentSecurityName;
  }


  public void setAgentSecurityName(String agentSecurityName) {
    
    
    
    this.agentSecurityName = agentSecurityName;
  }


  public SnmpMasterAgentPluginResponse agentSecurityLevel(EnumpluginAgentSecurityLevelProp agentSecurityLevel) {
    
    
    
    
    this.agentSecurityLevel = agentSecurityLevel;
    return this;
  }

   /**
   * Get agentSecurityLevel
   * @return agentSecurityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginAgentSecurityLevelProp getAgentSecurityLevel() {
    return agentSecurityLevel;
  }


  public void setAgentSecurityLevel(EnumpluginAgentSecurityLevelProp agentSecurityLevel) {
    
    
    
    this.agentSecurityLevel = agentSecurityLevel;
  }


  public SnmpMasterAgentPluginResponse agentAuthenticationProtocol(EnumpluginAgentAuthenticationProtocolProp agentAuthenticationProtocol) {
    
    
    
    
    this.agentAuthenticationProtocol = agentAuthenticationProtocol;
    return this;
  }

   /**
   * Get agentAuthenticationProtocol
   * @return agentAuthenticationProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginAgentAuthenticationProtocolProp getAgentAuthenticationProtocol() {
    return agentAuthenticationProtocol;
  }


  public void setAgentAuthenticationProtocol(EnumpluginAgentAuthenticationProtocolProp agentAuthenticationProtocol) {
    
    
    
    this.agentAuthenticationProtocol = agentAuthenticationProtocol;
  }


  public SnmpMasterAgentPluginResponse agentAuthenticationPassphrase(String agentAuthenticationPassphrase) {
    
    
    
    
    this.agentAuthenticationPassphrase = agentAuthenticationPassphrase;
    return this;
  }

   /**
   * The authentication passphrase to use for SNMPv3 if authentication is to be performed.
   * @return agentAuthenticationPassphrase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The authentication passphrase to use for SNMPv3 if authentication is to be performed.")

  public String getAgentAuthenticationPassphrase() {
    return agentAuthenticationPassphrase;
  }


  public void setAgentAuthenticationPassphrase(String agentAuthenticationPassphrase) {
    
    
    
    this.agentAuthenticationPassphrase = agentAuthenticationPassphrase;
  }


  public SnmpMasterAgentPluginResponse agentPrivacyProtocol(EnumpluginAgentPrivacyProtocolProp agentPrivacyProtocol) {
    
    
    
    
    this.agentPrivacyProtocol = agentPrivacyProtocol;
    return this;
  }

   /**
   * Get agentPrivacyProtocol
   * @return agentPrivacyProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginAgentPrivacyProtocolProp getAgentPrivacyProtocol() {
    return agentPrivacyProtocol;
  }


  public void setAgentPrivacyProtocol(EnumpluginAgentPrivacyProtocolProp agentPrivacyProtocol) {
    
    
    
    this.agentPrivacyProtocol = agentPrivacyProtocol;
  }


  public SnmpMasterAgentPluginResponse agentPrivacyPassphrase(String agentPrivacyPassphrase) {
    
    
    
    
    this.agentPrivacyPassphrase = agentPrivacyPassphrase;
    return this;
  }

   /**
   * The privacy passphrase to use for SNMPv3 if privacy is to be used.
   * @return agentPrivacyPassphrase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The privacy passphrase to use for SNMPv3 if privacy is to be used.")

  public String getAgentPrivacyPassphrase() {
    return agentPrivacyPassphrase;
  }


  public void setAgentPrivacyPassphrase(String agentPrivacyPassphrase) {
    
    
    
    this.agentPrivacyPassphrase = agentPrivacyPassphrase;
  }


  public SnmpMasterAgentPluginResponse numWorkerThreads(Integer numWorkerThreads) {
    
    
    
    
    this.numWorkerThreads = numWorkerThreads;
    return this;
  }

   /**
   * The number of worker threads to use to handle SNMP requests.
   * @return numWorkerThreads
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The number of worker threads to use to handle SNMP requests.")

  public Integer getNumWorkerThreads() {
    return numWorkerThreads;
  }


  public void setNumWorkerThreads(Integer numWorkerThreads) {
    
    
    
    this.numWorkerThreads = numWorkerThreads;
  }


  public SnmpMasterAgentPluginResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public SnmpMasterAgentPluginResponse invokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
    return this;
  }

   /**
   * Indicates whether the plug-in should be invoked for internal operations.
   * @return invokeForInternalOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the plug-in should be invoked for internal operations.")

  public Boolean getInvokeForInternalOperations() {
    return invokeForInternalOperations;
  }


  public void setInvokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
  }


  public SnmpMasterAgentPluginResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public SnmpMasterAgentPluginResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SnmpMasterAgentPluginResponse instance itself
   */
  public SnmpMasterAgentPluginResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnmpMasterAgentPluginResponse snmpMasterAgentPluginResponse = (SnmpMasterAgentPluginResponse) o;
    return Objects.equals(this.description, snmpMasterAgentPluginResponse.description) &&
        Objects.equals(this.schemas, snmpMasterAgentPluginResponse.schemas) &&
        Objects.equals(this.id, snmpMasterAgentPluginResponse.id) &&
        Objects.equals(this.listenAddress, snmpMasterAgentPluginResponse.listenAddress) &&
        Objects.equals(this.listenPort, snmpMasterAgentPluginResponse.listenPort) &&
        Objects.equals(this.agentxTransport, snmpMasterAgentPluginResponse.agentxTransport) &&
        Objects.equals(this.agentxListenAddress, snmpMasterAgentPluginResponse.agentxListenAddress) &&
        Objects.equals(this.agentxListenPort, snmpMasterAgentPluginResponse.agentxListenPort) &&
        Objects.equals(this.notificationTargetAddress, snmpMasterAgentPluginResponse.notificationTargetAddress) &&
        Objects.equals(this.notificationTargetPort, snmpMasterAgentPluginResponse.notificationTargetPort) &&
        Objects.equals(this.agentSNMPVersion, snmpMasterAgentPluginResponse.agentSNMPVersion) &&
        Objects.equals(this.communityName, snmpMasterAgentPluginResponse.communityName) &&
        Objects.equals(this.agentSecurityName, snmpMasterAgentPluginResponse.agentSecurityName) &&
        Objects.equals(this.agentSecurityLevel, snmpMasterAgentPluginResponse.agentSecurityLevel) &&
        Objects.equals(this.agentAuthenticationProtocol, snmpMasterAgentPluginResponse.agentAuthenticationProtocol) &&
        Objects.equals(this.agentAuthenticationPassphrase, snmpMasterAgentPluginResponse.agentAuthenticationPassphrase) &&
        Objects.equals(this.agentPrivacyProtocol, snmpMasterAgentPluginResponse.agentPrivacyProtocol) &&
        Objects.equals(this.agentPrivacyPassphrase, snmpMasterAgentPluginResponse.agentPrivacyPassphrase) &&
        Objects.equals(this.numWorkerThreads, snmpMasterAgentPluginResponse.numWorkerThreads) &&
        Objects.equals(this.enabled, snmpMasterAgentPluginResponse.enabled) &&
        Objects.equals(this.invokeForInternalOperations, snmpMasterAgentPluginResponse.invokeForInternalOperations) &&
        Objects.equals(this.meta, snmpMasterAgentPluginResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, snmpMasterAgentPluginResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, snmpMasterAgentPluginResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, listenAddress, listenPort, agentxTransport, agentxListenAddress, agentxListenPort, notificationTargetAddress, notificationTargetPort, agentSNMPVersion, communityName, agentSecurityName, agentSecurityLevel, agentAuthenticationProtocol, agentAuthenticationPassphrase, agentPrivacyProtocol, agentPrivacyPassphrase, numWorkerThreads, enabled, invokeForInternalOperations, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnmpMasterAgentPluginResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    listenAddress: ").append(toIndentedString(listenAddress)).append("\n");
    sb.append("    listenPort: ").append(toIndentedString(listenPort)).append("\n");
    sb.append("    agentxTransport: ").append(toIndentedString(agentxTransport)).append("\n");
    sb.append("    agentxListenAddress: ").append(toIndentedString(agentxListenAddress)).append("\n");
    sb.append("    agentxListenPort: ").append(toIndentedString(agentxListenPort)).append("\n");
    sb.append("    notificationTargetAddress: ").append(toIndentedString(notificationTargetAddress)).append("\n");
    sb.append("    notificationTargetPort: ").append(toIndentedString(notificationTargetPort)).append("\n");
    sb.append("    agentSNMPVersion: ").append(toIndentedString(agentSNMPVersion)).append("\n");
    sb.append("    communityName: ").append(toIndentedString(communityName)).append("\n");
    sb.append("    agentSecurityName: ").append(toIndentedString(agentSecurityName)).append("\n");
    sb.append("    agentSecurityLevel: ").append(toIndentedString(agentSecurityLevel)).append("\n");
    sb.append("    agentAuthenticationProtocol: ").append(toIndentedString(agentAuthenticationProtocol)).append("\n");
    sb.append("    agentAuthenticationPassphrase: ").append(toIndentedString(agentAuthenticationPassphrase)).append("\n");
    sb.append("    agentPrivacyProtocol: ").append(toIndentedString(agentPrivacyProtocol)).append("\n");
    sb.append("    agentPrivacyPassphrase: ").append(toIndentedString(agentPrivacyPassphrase)).append("\n");
    sb.append("    numWorkerThreads: ").append(toIndentedString(numWorkerThreads)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    invokeForInternalOperations: ").append(toIndentedString(invokeForInternalOperations)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("listenAddress");
    openapiFields.add("listenPort");
    openapiFields.add("agentxTransport");
    openapiFields.add("agentxListenAddress");
    openapiFields.add("agentxListenPort");
    openapiFields.add("notificationTargetAddress");
    openapiFields.add("notificationTargetPort");
    openapiFields.add("agentSNMPVersion");
    openapiFields.add("communityName");
    openapiFields.add("agentSecurityName");
    openapiFields.add("agentSecurityLevel");
    openapiFields.add("agentAuthenticationProtocol");
    openapiFields.add("agentAuthenticationPassphrase");
    openapiFields.add("agentPrivacyProtocol");
    openapiFields.add("agentPrivacyPassphrase");
    openapiFields.add("numWorkerThreads");
    openapiFields.add("enabled");
    openapiFields.add("invokeForInternalOperations");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("listenAddress");
    openapiRequiredFields.add("listenPort");
    openapiRequiredFields.add("agentxTransport");
    openapiRequiredFields.add("agentxListenAddress");
    openapiRequiredFields.add("agentxListenPort");
    openapiRequiredFields.add("agentSNMPVersion");
    openapiRequiredFields.add("communityName");
    openapiRequiredFields.add("numWorkerThreads");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SnmpMasterAgentPluginResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SnmpMasterAgentPluginResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnmpMasterAgentPluginResponse is not found in the empty JSON string", SnmpMasterAgentPluginResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SnmpMasterAgentPluginResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("listenAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listenAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listenAddress").toString()));
      }
      if (!jsonObj.get("agentxListenAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentxListenAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentxListenAddress").toString()));
      }
      if ((jsonObj.get("notificationTargetAddress") != null && !jsonObj.get("notificationTargetAddress").isJsonNull()) && !jsonObj.get("notificationTargetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationTargetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationTargetAddress").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("agentSNMPVersion") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("agentSNMPVersion").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentSNMPVersion` to be an array in the JSON string but got `%s`", jsonObj.get("agentSNMPVersion").toString()));
      }
      if (!jsonObj.get("communityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communityName").toString()));
      }
      if ((jsonObj.get("agentSecurityName") != null && !jsonObj.get("agentSecurityName").isJsonNull()) && !jsonObj.get("agentSecurityName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentSecurityName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentSecurityName").toString()));
      }
      if ((jsonObj.get("agentAuthenticationPassphrase") != null && !jsonObj.get("agentAuthenticationPassphrase").isJsonNull()) && !jsonObj.get("agentAuthenticationPassphrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentAuthenticationPassphrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentAuthenticationPassphrase").toString()));
      }
      if ((jsonObj.get("agentPrivacyPassphrase") != null && !jsonObj.get("agentPrivacyPassphrase").isJsonNull()) && !jsonObj.get("agentPrivacyPassphrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentPrivacyPassphrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentPrivacyPassphrase").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnmpMasterAgentPluginResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnmpMasterAgentPluginResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnmpMasterAgentPluginResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnmpMasterAgentPluginResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SnmpMasterAgentPluginResponse>() {
           @Override
           public void write(JsonWriter out, SnmpMasterAgentPluginResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SnmpMasterAgentPluginResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SnmpMasterAgentPluginResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SnmpMasterAgentPluginResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SnmpMasterAgentPluginResponse
  * @throws IOException if the JSON string is invalid with respect to SnmpMasterAgentPluginResponse
  */
  public static SnmpMasterAgentPluginResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnmpMasterAgentPluginResponse.class);
  }

 /**
  * Convert an instance of SnmpMasterAgentPluginResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

