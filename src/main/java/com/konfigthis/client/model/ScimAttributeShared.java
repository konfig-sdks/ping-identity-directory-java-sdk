/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumscimAttributeMutabilityProp;
import com.konfigthis.client.model.EnumscimAttributeReturnedProp;
import com.konfigthis.client.model.EnumscimAttributeSchemaUrn;
import com.konfigthis.client.model.EnumscimAttributeTypeProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ScimAttributeShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ScimAttributeShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumscimAttributeSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EnumscimAttributeTypeProp type;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_CASE_EXACT = "caseExact";
  @SerializedName(SERIALIZED_NAME_CASE_EXACT)
  private Boolean caseExact;

  public static final String SERIALIZED_NAME_MULTI_VALUED = "multiValued";
  @SerializedName(SERIALIZED_NAME_MULTI_VALUED)
  private Boolean multiValued;

  public static final String SERIALIZED_NAME_CANONICAL_VALUE = "canonicalValue";
  @SerializedName(SERIALIZED_NAME_CANONICAL_VALUE)
  private List<String> canonicalValue = null;

  public static final String SERIALIZED_NAME_MUTABILITY = "mutability";
  @SerializedName(SERIALIZED_NAME_MUTABILITY)
  private EnumscimAttributeMutabilityProp mutability;

  public static final String SERIALIZED_NAME_RETURNED = "returned";
  @SerializedName(SERIALIZED_NAME_RETURNED)
  private EnumscimAttributeReturnedProp returned;

  public static final String SERIALIZED_NAME_REFERENCE_TYPE = "referenceType";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TYPE)
  private List<String> referenceType = null;

  public ScimAttributeShared() {
  }

  public ScimAttributeShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this SCIM Attribute
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this SCIM Attribute")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ScimAttributeShared schemas(List<EnumscimAttributeSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public ScimAttributeShared addSchemasItem(EnumscimAttributeSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumscimAttributeSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumscimAttributeSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public ScimAttributeShared name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the attribute.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the attribute.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ScimAttributeShared type(EnumscimAttributeTypeProp type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumscimAttributeTypeProp getType() {
    return type;
  }


  public void setType(EnumscimAttributeTypeProp type) {
    
    
    
    this.type = type;
  }


  public ScimAttributeShared required(Boolean required) {
    
    
    
    
    this.required = required;
    return this;
  }

   /**
   * Specifies whether this attribute is required.
   * @return required
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether this attribute is required.")

  public Boolean getRequired() {
    return required;
  }


  public void setRequired(Boolean required) {
    
    
    
    this.required = required;
  }


  public ScimAttributeShared caseExact(Boolean caseExact) {
    
    
    
    
    this.caseExact = caseExact;
    return this;
  }

   /**
   * Specifies whether the attribute values are case sensitive.
   * @return caseExact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the attribute values are case sensitive.")

  public Boolean getCaseExact() {
    return caseExact;
  }


  public void setCaseExact(Boolean caseExact) {
    
    
    
    this.caseExact = caseExact;
  }


  public ScimAttributeShared multiValued(Boolean multiValued) {
    
    
    
    
    this.multiValued = multiValued;
    return this;
  }

   /**
   * Specifies whether this attribute may have multiple values.
   * @return multiValued
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether this attribute may have multiple values.")

  public Boolean getMultiValued() {
    return multiValued;
  }


  public void setMultiValued(Boolean multiValued) {
    
    
    
    this.multiValued = multiValued;
  }


  public ScimAttributeShared canonicalValue(List<String> canonicalValue) {
    
    
    
    
    this.canonicalValue = canonicalValue;
    return this;
  }

  public ScimAttributeShared addCanonicalValueItem(String canonicalValueItem) {
    if (this.canonicalValue == null) {
      this.canonicalValue = new ArrayList<>();
    }
    this.canonicalValue.add(canonicalValueItem);
    return this;
  }

   /**
   * Specifies the suggested canonical type values for the attribute.
   * @return canonicalValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the suggested canonical type values for the attribute.")

  public List<String> getCanonicalValue() {
    return canonicalValue;
  }


  public void setCanonicalValue(List<String> canonicalValue) {
    
    
    
    this.canonicalValue = canonicalValue;
  }


  public ScimAttributeShared mutability(EnumscimAttributeMutabilityProp mutability) {
    
    
    
    
    this.mutability = mutability;
    return this;
  }

   /**
   * Get mutability
   * @return mutability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumscimAttributeMutabilityProp getMutability() {
    return mutability;
  }


  public void setMutability(EnumscimAttributeMutabilityProp mutability) {
    
    
    
    this.mutability = mutability;
  }


  public ScimAttributeShared returned(EnumscimAttributeReturnedProp returned) {
    
    
    
    
    this.returned = returned;
    return this;
  }

   /**
   * Get returned
   * @return returned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumscimAttributeReturnedProp getReturned() {
    return returned;
  }


  public void setReturned(EnumscimAttributeReturnedProp returned) {
    
    
    
    this.returned = returned;
  }


  public ScimAttributeShared referenceType(List<String> referenceType) {
    
    
    
    
    this.referenceType = referenceType;
    return this;
  }

  public ScimAttributeShared addReferenceTypeItem(String referenceTypeItem) {
    if (this.referenceType == null) {
      this.referenceType = new ArrayList<>();
    }
    this.referenceType.add(referenceTypeItem);
    return this;
  }

   /**
   * Specifies the SCIM resource types that may be referenced. This property is only applicable for attributes that are of type &#39;reference&#39;. Valid values are: A SCIM resource type (e.g., &#39;User&#39; or &#39;Group&#39;), &#39;external&#39; - indicating the resource is an external resource (e.g., such as a photo), or &#39;uri&#39; - indicating that the reference is to a service endpoint or an identifier (such as a schema urn).
   * @return referenceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the SCIM resource types that may be referenced. This property is only applicable for attributes that are of type 'reference'. Valid values are: A SCIM resource type (e.g., 'User' or 'Group'), 'external' - indicating the resource is an external resource (e.g., such as a photo), or 'uri' - indicating that the reference is to a service endpoint or an identifier (such as a schema urn).")

  public List<String> getReferenceType() {
    return referenceType;
  }


  public void setReferenceType(List<String> referenceType) {
    
    
    
    this.referenceType = referenceType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ScimAttributeShared instance itself
   */
  public ScimAttributeShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScimAttributeShared scimAttributeShared = (ScimAttributeShared) o;
    return Objects.equals(this.description, scimAttributeShared.description) &&
        Objects.equals(this.schemas, scimAttributeShared.schemas) &&
        Objects.equals(this.name, scimAttributeShared.name) &&
        Objects.equals(this.type, scimAttributeShared.type) &&
        Objects.equals(this.required, scimAttributeShared.required) &&
        Objects.equals(this.caseExact, scimAttributeShared.caseExact) &&
        Objects.equals(this.multiValued, scimAttributeShared.multiValued) &&
        Objects.equals(this.canonicalValue, scimAttributeShared.canonicalValue) &&
        Objects.equals(this.mutability, scimAttributeShared.mutability) &&
        Objects.equals(this.returned, scimAttributeShared.returned) &&
        Objects.equals(this.referenceType, scimAttributeShared.referenceType)&&
        Objects.equals(this.additionalProperties, scimAttributeShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, name, type, required, caseExact, multiValued, canonicalValue, mutability, returned, referenceType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScimAttributeShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    caseExact: ").append(toIndentedString(caseExact)).append("\n");
    sb.append("    multiValued: ").append(toIndentedString(multiValued)).append("\n");
    sb.append("    canonicalValue: ").append(toIndentedString(canonicalValue)).append("\n");
    sb.append("    mutability: ").append(toIndentedString(mutability)).append("\n");
    sb.append("    returned: ").append(toIndentedString(returned)).append("\n");
    sb.append("    referenceType: ").append(toIndentedString(referenceType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("required");
    openapiFields.add("caseExact");
    openapiFields.add("multiValued");
    openapiFields.add("canonicalValue");
    openapiFields.add("mutability");
    openapiFields.add("returned");
    openapiFields.add("referenceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScimAttributeShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ScimAttributeShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScimAttributeShared is not found in the empty JSON string", ScimAttributeShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScimAttributeShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("canonicalValue") != null && !jsonObj.get("canonicalValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalValue` to be an array in the JSON string but got `%s`", jsonObj.get("canonicalValue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("referenceType") != null && !jsonObj.get("referenceType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceType` to be an array in the JSON string but got `%s`", jsonObj.get("referenceType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScimAttributeShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScimAttributeShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScimAttributeShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScimAttributeShared.class));

       return (TypeAdapter<T>) new TypeAdapter<ScimAttributeShared>() {
           @Override
           public void write(JsonWriter out, ScimAttributeShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ScimAttributeShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ScimAttributeShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScimAttributeShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScimAttributeShared
  * @throws IOException if the JSON string is invalid with respect to ScimAttributeShared
  */
  public static ScimAttributeShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScimAttributeShared.class);
  }

 /**
  * Convert an instance of ScimAttributeShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

