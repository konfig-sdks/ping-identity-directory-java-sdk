/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumbackupRecurringTaskSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BackupRecurringTaskResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BackupRecurringTaskResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumbackupRecurringTaskSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKUP_DIRECTORY = "backupDirectory";
  @SerializedName(SERIALIZED_NAME_BACKUP_DIRECTORY)
  private String backupDirectory;

  public static final String SERIALIZED_NAME_INCLUDED_BACKEND_I_D = "includedBackendID";
  @SerializedName(SERIALIZED_NAME_INCLUDED_BACKEND_I_D)
  private List<String> includedBackendID = null;

  public static final String SERIALIZED_NAME_EXCLUDED_BACKEND_I_D = "excludedBackendID";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_BACKEND_I_D)
  private List<String> excludedBackendID = null;

  public static final String SERIALIZED_NAME_COMPRESS = "compress";
  @SerializedName(SERIALIZED_NAME_COMPRESS)
  private Boolean compress;

  public static final String SERIALIZED_NAME_ENCRYPT = "encrypt";
  @SerializedName(SERIALIZED_NAME_ENCRYPT)
  private Boolean encrypt;

  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS_DEFINITION_I_D = "encryptionSettingsDefinitionID";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS_DEFINITION_I_D)
  private String encryptionSettingsDefinitionID;

  public static final String SERIALIZED_NAME_SIGN = "sign";
  @SerializedName(SERIALIZED_NAME_SIGN)
  private Boolean sign;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_FULL_BACKUP_COUNT = "retainPreviousFullBackupCount";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_FULL_BACKUP_COUNT)
  private Integer retainPreviousFullBackupCount;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_FULL_BACKUP_AGE = "retainPreviousFullBackupAge";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_FULL_BACKUP_AGE)
  private String retainPreviousFullBackupAge;

  public static final String SERIALIZED_NAME_MAX_MEGABYTES_PER_SECOND = "maxMegabytesPerSecond";
  @SerializedName(SERIALIZED_NAME_MAX_MEGABYTES_PER_SECOND)
  private Integer maxMegabytesPerSecond;

  public static final String SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE = "cancelOnTaskDependencyFailure";
  @SerializedName(SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE)
  private Boolean cancelOnTaskDependencyFailure;

  public static final String SERIALIZED_NAME_EMAIL_ON_START = "emailOnStart";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_START)
  private List<String> emailOnStart = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_SUCCESS = "emailOnSuccess";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_SUCCESS)
  private List<String> emailOnSuccess = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_FAILURE = "emailOnFailure";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_FAILURE)
  private List<String> emailOnFailure = null;

  public static final String SERIALIZED_NAME_ALERT_ON_START = "alertOnStart";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_START)
  private Boolean alertOnStart;

  public static final String SERIALIZED_NAME_ALERT_ON_SUCCESS = "alertOnSuccess";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_SUCCESS)
  private Boolean alertOnSuccess;

  public static final String SERIALIZED_NAME_ALERT_ON_FAILURE = "alertOnFailure";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_FAILURE)
  private Boolean alertOnFailure;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public BackupRecurringTaskResponse() {
  }

  public BackupRecurringTaskResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Recurring Task
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Recurring Task")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public BackupRecurringTaskResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Recurring Task
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Recurring Task")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public BackupRecurringTaskResponse schemas(List<EnumbackupRecurringTaskSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public BackupRecurringTaskResponse addSchemasItem(EnumbackupRecurringTaskSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumbackupRecurringTaskSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumbackupRecurringTaskSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public BackupRecurringTaskResponse backupDirectory(String backupDirectory) {
    
    
    
    
    this.backupDirectory = backupDirectory;
    return this;
  }

   /**
   * The directory in which backup files will be placed. When backing up a single backend, the backup files will be placed directly in this directory. When backing up multiple backends, the backup files for each backend will be placed in a subdirectory whose name is the corresponding backend ID.
   * @return backupDirectory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The directory in which backup files will be placed. When backing up a single backend, the backup files will be placed directly in this directory. When backing up multiple backends, the backup files for each backend will be placed in a subdirectory whose name is the corresponding backend ID.")

  public String getBackupDirectory() {
    return backupDirectory;
  }


  public void setBackupDirectory(String backupDirectory) {
    
    
    
    this.backupDirectory = backupDirectory;
  }


  public BackupRecurringTaskResponse includedBackendID(List<String> includedBackendID) {
    
    
    
    
    this.includedBackendID = includedBackendID;
    return this;
  }

  public BackupRecurringTaskResponse addIncludedBackendIDItem(String includedBackendIDItem) {
    if (this.includedBackendID == null) {
      this.includedBackendID = new ArrayList<>();
    }
    this.includedBackendID.add(includedBackendIDItem);
    return this;
  }

   /**
   * The backend IDs of any backends that should be included in the backup.
   * @return includedBackendID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The backend IDs of any backends that should be included in the backup.")

  public List<String> getIncludedBackendID() {
    return includedBackendID;
  }


  public void setIncludedBackendID(List<String> includedBackendID) {
    
    
    
    this.includedBackendID = includedBackendID;
  }


  public BackupRecurringTaskResponse excludedBackendID(List<String> excludedBackendID) {
    
    
    
    
    this.excludedBackendID = excludedBackendID;
    return this;
  }

  public BackupRecurringTaskResponse addExcludedBackendIDItem(String excludedBackendIDItem) {
    if (this.excludedBackendID == null) {
      this.excludedBackendID = new ArrayList<>();
    }
    this.excludedBackendID.add(excludedBackendIDItem);
    return this;
  }

   /**
   * The backend IDs of any backends that should be excluded from the backup. All backends that support backups and are not listed will be included.
   * @return excludedBackendID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The backend IDs of any backends that should be excluded from the backup. All backends that support backups and are not listed will be included.")

  public List<String> getExcludedBackendID() {
    return excludedBackendID;
  }


  public void setExcludedBackendID(List<String> excludedBackendID) {
    
    
    
    this.excludedBackendID = excludedBackendID;
  }


  public BackupRecurringTaskResponse compress(Boolean compress) {
    
    
    
    
    this.compress = compress;
    return this;
  }

   /**
   * Indicates whether to compress the data as it is written into the backup.
   * @return compress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to compress the data as it is written into the backup.")

  public Boolean getCompress() {
    return compress;
  }


  public void setCompress(Boolean compress) {
    
    
    
    this.compress = compress;
  }


  public BackupRecurringTaskResponse encrypt(Boolean encrypt) {
    
    
    
    
    this.encrypt = encrypt;
    return this;
  }

   /**
   * Indicates whether to encrypt the data as it is written into the backup.
   * @return encrypt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to encrypt the data as it is written into the backup.")

  public Boolean getEncrypt() {
    return encrypt;
  }


  public void setEncrypt(Boolean encrypt) {
    
    
    
    this.encrypt = encrypt;
  }


  public BackupRecurringTaskResponse encryptionSettingsDefinitionID(String encryptionSettingsDefinitionID) {
    
    
    
    
    this.encryptionSettingsDefinitionID = encryptionSettingsDefinitionID;
    return this;
  }

   /**
   * The ID of an encryption settings definition to use to obtain the backup encryption key.
   * @return encryptionSettingsDefinitionID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of an encryption settings definition to use to obtain the backup encryption key.")

  public String getEncryptionSettingsDefinitionID() {
    return encryptionSettingsDefinitionID;
  }


  public void setEncryptionSettingsDefinitionID(String encryptionSettingsDefinitionID) {
    
    
    
    this.encryptionSettingsDefinitionID = encryptionSettingsDefinitionID;
  }


  public BackupRecurringTaskResponse sign(Boolean sign) {
    
    
    
    
    this.sign = sign;
    return this;
  }

   /**
   * Indicates whether to cryptographically sign backups, which will make it possible to detect whether the backup has been altered since it was created.
   * @return sign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to cryptographically sign backups, which will make it possible to detect whether the backup has been altered since it was created.")

  public Boolean getSign() {
    return sign;
  }


  public void setSign(Boolean sign) {
    
    
    
    this.sign = sign;
  }


  public BackupRecurringTaskResponse retainPreviousFullBackupCount(Integer retainPreviousFullBackupCount) {
    
    
    
    
    this.retainPreviousFullBackupCount = retainPreviousFullBackupCount;
    return this;
  }

   /**
   * The minimum number of previous full backups that should be preserved after a new backup completes successfully.
   * @return retainPreviousFullBackupCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum number of previous full backups that should be preserved after a new backup completes successfully.")

  public Integer getRetainPreviousFullBackupCount() {
    return retainPreviousFullBackupCount;
  }


  public void setRetainPreviousFullBackupCount(Integer retainPreviousFullBackupCount) {
    
    
    
    this.retainPreviousFullBackupCount = retainPreviousFullBackupCount;
  }


  public BackupRecurringTaskResponse retainPreviousFullBackupAge(String retainPreviousFullBackupAge) {
    
    
    
    
    this.retainPreviousFullBackupAge = retainPreviousFullBackupAge;
    return this;
  }

   /**
   * The minimum age of previous full backups that should be preserved after a new backup completes successfully.
   * @return retainPreviousFullBackupAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum age of previous full backups that should be preserved after a new backup completes successfully.")

  public String getRetainPreviousFullBackupAge() {
    return retainPreviousFullBackupAge;
  }


  public void setRetainPreviousFullBackupAge(String retainPreviousFullBackupAge) {
    
    
    
    this.retainPreviousFullBackupAge = retainPreviousFullBackupAge;
  }


  public BackupRecurringTaskResponse maxMegabytesPerSecond(Integer maxMegabytesPerSecond) {
    
    
    
    
    this.maxMegabytesPerSecond = maxMegabytesPerSecond;
    return this;
  }

   /**
   * The maximum rate, in megabytes per second, at which backups should be written.
   * @return maxMegabytesPerSecond
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum rate, in megabytes per second, at which backups should be written.")

  public Integer getMaxMegabytesPerSecond() {
    return maxMegabytesPerSecond;
  }


  public void setMaxMegabytesPerSecond(Integer maxMegabytesPerSecond) {
    
    
    
    this.maxMegabytesPerSecond = maxMegabytesPerSecond;
  }


  public BackupRecurringTaskResponse cancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
    return this;
  }

   /**
   * Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
   * @return cancelOnTaskDependencyFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).")

  public Boolean getCancelOnTaskDependencyFailure() {
    return cancelOnTaskDependencyFailure;
  }


  public void setCancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
  }


  public BackupRecurringTaskResponse emailOnStart(List<String> emailOnStart) {
    
    
    
    
    this.emailOnStart = emailOnStart;
    return this;
  }

  public BackupRecurringTaskResponse addEmailOnStartItem(String emailOnStartItem) {
    if (this.emailOnStart == null) {
      this.emailOnStart = new ArrayList<>();
    }
    this.emailOnStart.add(emailOnStartItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnStart() {
    return emailOnStart;
  }


  public void setEmailOnStart(List<String> emailOnStart) {
    
    
    
    this.emailOnStart = emailOnStart;
  }


  public BackupRecurringTaskResponse emailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    
    this.emailOnSuccess = emailOnSuccess;
    return this;
  }

  public BackupRecurringTaskResponse addEmailOnSuccessItem(String emailOnSuccessItem) {
    if (this.emailOnSuccess == null) {
      this.emailOnSuccess = new ArrayList<>();
    }
    this.emailOnSuccess.add(emailOnSuccessItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnSuccess() {
    return emailOnSuccess;
  }


  public void setEmailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    this.emailOnSuccess = emailOnSuccess;
  }


  public BackupRecurringTaskResponse emailOnFailure(List<String> emailOnFailure) {
    
    
    
    
    this.emailOnFailure = emailOnFailure;
    return this;
  }

  public BackupRecurringTaskResponse addEmailOnFailureItem(String emailOnFailureItem) {
    if (this.emailOnFailure == null) {
      this.emailOnFailure = new ArrayList<>();
    }
    this.emailOnFailure.add(emailOnFailureItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnFailure() {
    return emailOnFailure;
  }


  public void setEmailOnFailure(List<String> emailOnFailure) {
    
    
    
    this.emailOnFailure = emailOnFailure;
  }


  public BackupRecurringTaskResponse alertOnStart(Boolean alertOnStart) {
    
    
    
    
    this.alertOnStart = alertOnStart;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
   * @return alertOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.")

  public Boolean getAlertOnStart() {
    return alertOnStart;
  }


  public void setAlertOnStart(Boolean alertOnStart) {
    
    
    
    this.alertOnStart = alertOnStart;
  }


  public BackupRecurringTaskResponse alertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    
    this.alertOnSuccess = alertOnSuccess;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
   * @return alertOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.")

  public Boolean getAlertOnSuccess() {
    return alertOnSuccess;
  }


  public void setAlertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    this.alertOnSuccess = alertOnSuccess;
  }


  public BackupRecurringTaskResponse alertOnFailure(Boolean alertOnFailure) {
    
    
    
    
    this.alertOnFailure = alertOnFailure;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
   * @return alertOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.")

  public Boolean getAlertOnFailure() {
    return alertOnFailure;
  }


  public void setAlertOnFailure(Boolean alertOnFailure) {
    
    
    
    this.alertOnFailure = alertOnFailure;
  }


  public BackupRecurringTaskResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public BackupRecurringTaskResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BackupRecurringTaskResponse instance itself
   */
  public BackupRecurringTaskResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupRecurringTaskResponse backupRecurringTaskResponse = (BackupRecurringTaskResponse) o;
    return Objects.equals(this.id, backupRecurringTaskResponse.id) &&
        Objects.equals(this.description, backupRecurringTaskResponse.description) &&
        Objects.equals(this.schemas, backupRecurringTaskResponse.schemas) &&
        Objects.equals(this.backupDirectory, backupRecurringTaskResponse.backupDirectory) &&
        Objects.equals(this.includedBackendID, backupRecurringTaskResponse.includedBackendID) &&
        Objects.equals(this.excludedBackendID, backupRecurringTaskResponse.excludedBackendID) &&
        Objects.equals(this.compress, backupRecurringTaskResponse.compress) &&
        Objects.equals(this.encrypt, backupRecurringTaskResponse.encrypt) &&
        Objects.equals(this.encryptionSettingsDefinitionID, backupRecurringTaskResponse.encryptionSettingsDefinitionID) &&
        Objects.equals(this.sign, backupRecurringTaskResponse.sign) &&
        Objects.equals(this.retainPreviousFullBackupCount, backupRecurringTaskResponse.retainPreviousFullBackupCount) &&
        Objects.equals(this.retainPreviousFullBackupAge, backupRecurringTaskResponse.retainPreviousFullBackupAge) &&
        Objects.equals(this.maxMegabytesPerSecond, backupRecurringTaskResponse.maxMegabytesPerSecond) &&
        Objects.equals(this.cancelOnTaskDependencyFailure, backupRecurringTaskResponse.cancelOnTaskDependencyFailure) &&
        Objects.equals(this.emailOnStart, backupRecurringTaskResponse.emailOnStart) &&
        Objects.equals(this.emailOnSuccess, backupRecurringTaskResponse.emailOnSuccess) &&
        Objects.equals(this.emailOnFailure, backupRecurringTaskResponse.emailOnFailure) &&
        Objects.equals(this.alertOnStart, backupRecurringTaskResponse.alertOnStart) &&
        Objects.equals(this.alertOnSuccess, backupRecurringTaskResponse.alertOnSuccess) &&
        Objects.equals(this.alertOnFailure, backupRecurringTaskResponse.alertOnFailure) &&
        Objects.equals(this.meta, backupRecurringTaskResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, backupRecurringTaskResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, backupRecurringTaskResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, backupDirectory, includedBackendID, excludedBackendID, compress, encrypt, encryptionSettingsDefinitionID, sign, retainPreviousFullBackupCount, retainPreviousFullBackupAge, maxMegabytesPerSecond, cancelOnTaskDependencyFailure, emailOnStart, emailOnSuccess, emailOnFailure, alertOnStart, alertOnSuccess, alertOnFailure, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupRecurringTaskResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    backupDirectory: ").append(toIndentedString(backupDirectory)).append("\n");
    sb.append("    includedBackendID: ").append(toIndentedString(includedBackendID)).append("\n");
    sb.append("    excludedBackendID: ").append(toIndentedString(excludedBackendID)).append("\n");
    sb.append("    compress: ").append(toIndentedString(compress)).append("\n");
    sb.append("    encrypt: ").append(toIndentedString(encrypt)).append("\n");
    sb.append("    encryptionSettingsDefinitionID: ").append(toIndentedString(encryptionSettingsDefinitionID)).append("\n");
    sb.append("    sign: ").append(toIndentedString(sign)).append("\n");
    sb.append("    retainPreviousFullBackupCount: ").append(toIndentedString(retainPreviousFullBackupCount)).append("\n");
    sb.append("    retainPreviousFullBackupAge: ").append(toIndentedString(retainPreviousFullBackupAge)).append("\n");
    sb.append("    maxMegabytesPerSecond: ").append(toIndentedString(maxMegabytesPerSecond)).append("\n");
    sb.append("    cancelOnTaskDependencyFailure: ").append(toIndentedString(cancelOnTaskDependencyFailure)).append("\n");
    sb.append("    emailOnStart: ").append(toIndentedString(emailOnStart)).append("\n");
    sb.append("    emailOnSuccess: ").append(toIndentedString(emailOnSuccess)).append("\n");
    sb.append("    emailOnFailure: ").append(toIndentedString(emailOnFailure)).append("\n");
    sb.append("    alertOnStart: ").append(toIndentedString(alertOnStart)).append("\n");
    sb.append("    alertOnSuccess: ").append(toIndentedString(alertOnSuccess)).append("\n");
    sb.append("    alertOnFailure: ").append(toIndentedString(alertOnFailure)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("backupDirectory");
    openapiFields.add("includedBackendID");
    openapiFields.add("excludedBackendID");
    openapiFields.add("compress");
    openapiFields.add("encrypt");
    openapiFields.add("encryptionSettingsDefinitionID");
    openapiFields.add("sign");
    openapiFields.add("retainPreviousFullBackupCount");
    openapiFields.add("retainPreviousFullBackupAge");
    openapiFields.add("maxMegabytesPerSecond");
    openapiFields.add("cancelOnTaskDependencyFailure");
    openapiFields.add("emailOnStart");
    openapiFields.add("emailOnSuccess");
    openapiFields.add("emailOnFailure");
    openapiFields.add("alertOnStart");
    openapiFields.add("alertOnSuccess");
    openapiFields.add("alertOnFailure");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("backupDirectory");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BackupRecurringTaskResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BackupRecurringTaskResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupRecurringTaskResponse is not found in the empty JSON string", BackupRecurringTaskResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BackupRecurringTaskResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("backupDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupDirectory").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedBackendID") != null && !jsonObj.get("includedBackendID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedBackendID` to be an array in the JSON string but got `%s`", jsonObj.get("includedBackendID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedBackendID") != null && !jsonObj.get("excludedBackendID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedBackendID` to be an array in the JSON string but got `%s`", jsonObj.get("excludedBackendID").toString()));
      }
      if ((jsonObj.get("encryptionSettingsDefinitionID") != null && !jsonObj.get("encryptionSettingsDefinitionID").isJsonNull()) && !jsonObj.get("encryptionSettingsDefinitionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionSettingsDefinitionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionSettingsDefinitionID").toString()));
      }
      if ((jsonObj.get("retainPreviousFullBackupAge") != null && !jsonObj.get("retainPreviousFullBackupAge").isJsonNull()) && !jsonObj.get("retainPreviousFullBackupAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retainPreviousFullBackupAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retainPreviousFullBackupAge").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnStart") != null && !jsonObj.get("emailOnStart").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnStart` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnStart").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnSuccess") != null && !jsonObj.get("emailOnSuccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnSuccess` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnSuccess").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnFailure") != null && !jsonObj.get("emailOnFailure").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnFailure` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnFailure").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupRecurringTaskResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupRecurringTaskResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupRecurringTaskResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupRecurringTaskResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupRecurringTaskResponse>() {
           @Override
           public void write(JsonWriter out, BackupRecurringTaskResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupRecurringTaskResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BackupRecurringTaskResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BackupRecurringTaskResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BackupRecurringTaskResponse
  * @throws IOException if the JSON string is invalid with respect to BackupRecurringTaskResponse
  */
  public static BackupRecurringTaskResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupRecurringTaskResponse.class);
  }

 /**
  * Convert an instance of BackupRecurringTaskResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

