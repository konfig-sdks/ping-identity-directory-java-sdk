/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumpluginEntryCacheInfoProp;
import com.konfigthis.client.model.EnumpluginHostInfoProp;
import com.konfigthis.client.model.EnumpluginLdapChangelogInfoProp;
import com.konfigthis.client.model.EnumpluginLdapInfoProp;
import com.konfigthis.client.model.EnumpluginLocalDBBackendInfoProp;
import com.konfigthis.client.model.EnumpluginReplicationInfoProp;
import com.konfigthis.client.model.EnumpluginServerInfoProp;
import com.konfigthis.client.model.EnumpluginStatsCollectorPerApplicationLDAPStatsProp;
import com.konfigthis.client.model.EnumpluginStatusSummaryInfoProp;
import com.konfigthis.client.model.EnumstatsCollectorPluginSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * StatsCollectorPluginResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class StatsCollectorPluginResponseAllOf {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumstatsCollectorPluginSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SAMPLE_INTERVAL = "sampleInterval";
  @SerializedName(SERIALIZED_NAME_SAMPLE_INTERVAL)
  private String sampleInterval;

  public static final String SERIALIZED_NAME_COLLECTION_INTERVAL = "collectionInterval";
  @SerializedName(SERIALIZED_NAME_COLLECTION_INTERVAL)
  private String collectionInterval;

  public static final String SERIALIZED_NAME_LDAP_INFO = "ldapInfo";
  @SerializedName(SERIALIZED_NAME_LDAP_INFO)
  private EnumpluginLdapInfoProp ldapInfo;

  public static final String SERIALIZED_NAME_SERVER_INFO = "serverInfo";
  @SerializedName(SERIALIZED_NAME_SERVER_INFO)
  private EnumpluginServerInfoProp serverInfo;

  public static final String SERIALIZED_NAME_PER_APPLICATION_L_D_A_P_STATS = "perApplicationLDAPStats";
  @SerializedName(SERIALIZED_NAME_PER_APPLICATION_L_D_A_P_STATS)
  private EnumpluginStatsCollectorPerApplicationLDAPStatsProp perApplicationLDAPStats;

  public static final String SERIALIZED_NAME_LDAP_CHANGELOG_INFO = "ldapChangelogInfo";
  @SerializedName(SERIALIZED_NAME_LDAP_CHANGELOG_INFO)
  private EnumpluginLdapChangelogInfoProp ldapChangelogInfo;

  public static final String SERIALIZED_NAME_STATUS_SUMMARY_INFO = "statusSummaryInfo";
  @SerializedName(SERIALIZED_NAME_STATUS_SUMMARY_INFO)
  private EnumpluginStatusSummaryInfoProp statusSummaryInfo;

  public static final String SERIALIZED_NAME_GENERATE_COLLECTOR_FILES = "generateCollectorFiles";
  @SerializedName(SERIALIZED_NAME_GENERATE_COLLECTOR_FILES)
  private Boolean generateCollectorFiles;

  public static final String SERIALIZED_NAME_LOCAL_D_B_BACKEND_INFO = "localDBBackendInfo";
  @SerializedName(SERIALIZED_NAME_LOCAL_D_B_BACKEND_INFO)
  private EnumpluginLocalDBBackendInfoProp localDBBackendInfo;

  public static final String SERIALIZED_NAME_REPLICATION_INFO = "replicationInfo";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INFO)
  private EnumpluginReplicationInfoProp replicationInfo;

  public static final String SERIALIZED_NAME_ENTRY_CACHE_INFO = "entryCacheInfo";
  @SerializedName(SERIALIZED_NAME_ENTRY_CACHE_INFO)
  private EnumpluginEntryCacheInfoProp entryCacheInfo;

  public static final String SERIALIZED_NAME_HOST_INFO = "hostInfo";
  @SerializedName(SERIALIZED_NAME_HOST_INFO)
  private List<EnumpluginHostInfoProp> hostInfo = null;

  public static final String SERIALIZED_NAME_INCLUDED_L_D_A_P_APPLICATION = "includedLDAPApplication";
  @SerializedName(SERIALIZED_NAME_INCLUDED_L_D_A_P_APPLICATION)
  private List<String> includedLDAPApplication = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public StatsCollectorPluginResponseAllOf() {
  }

  public StatsCollectorPluginResponseAllOf description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public StatsCollectorPluginResponseAllOf schemas(List<EnumstatsCollectorPluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public StatsCollectorPluginResponseAllOf addSchemasItem(EnumstatsCollectorPluginSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumstatsCollectorPluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumstatsCollectorPluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public StatsCollectorPluginResponseAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Plugin
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Plugin")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public StatsCollectorPluginResponseAllOf sampleInterval(String sampleInterval) {
    
    
    
    
    this.sampleInterval = sampleInterval;
    return this;
  }

   /**
   * The duration between statistics collections. Setting this value too small can have an impact on performance. This value should be a multiple of collection-interval.
   * @return sampleInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The duration between statistics collections. Setting this value too small can have an impact on performance. This value should be a multiple of collection-interval.")

  public String getSampleInterval() {
    return sampleInterval;
  }


  public void setSampleInterval(String sampleInterval) {
    
    
    
    this.sampleInterval = sampleInterval;
  }


  public StatsCollectorPluginResponseAllOf collectionInterval(String collectionInterval) {
    
    
    
    
    this.collectionInterval = collectionInterval;
    return this;
  }

   /**
   * Some of the calculated statistics, such as the average and maximum queue sizes, can use multiple samples within a log interval. This value controls how often samples are gathered, and setting this value too small can have an adverse impact on performance.
   * @return collectionInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Some of the calculated statistics, such as the average and maximum queue sizes, can use multiple samples within a log interval. This value controls how often samples are gathered, and setting this value too small can have an adverse impact on performance.")

  public String getCollectionInterval() {
    return collectionInterval;
  }


  public void setCollectionInterval(String collectionInterval) {
    
    
    
    this.collectionInterval = collectionInterval;
  }


  public StatsCollectorPluginResponseAllOf ldapInfo(EnumpluginLdapInfoProp ldapInfo) {
    
    
    
    
    this.ldapInfo = ldapInfo;
    return this;
  }

   /**
   * Get ldapInfo
   * @return ldapInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginLdapInfoProp getLdapInfo() {
    return ldapInfo;
  }


  public void setLdapInfo(EnumpluginLdapInfoProp ldapInfo) {
    
    
    
    this.ldapInfo = ldapInfo;
  }


  public StatsCollectorPluginResponseAllOf serverInfo(EnumpluginServerInfoProp serverInfo) {
    
    
    
    
    this.serverInfo = serverInfo;
    return this;
  }

   /**
   * Get serverInfo
   * @return serverInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginServerInfoProp getServerInfo() {
    return serverInfo;
  }


  public void setServerInfo(EnumpluginServerInfoProp serverInfo) {
    
    
    
    this.serverInfo = serverInfo;
  }


  public StatsCollectorPluginResponseAllOf perApplicationLDAPStats(EnumpluginStatsCollectorPerApplicationLDAPStatsProp perApplicationLDAPStats) {
    
    
    
    
    this.perApplicationLDAPStats = perApplicationLDAPStats;
    return this;
  }

   /**
   * Get perApplicationLDAPStats
   * @return perApplicationLDAPStats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginStatsCollectorPerApplicationLDAPStatsProp getPerApplicationLDAPStats() {
    return perApplicationLDAPStats;
  }


  public void setPerApplicationLDAPStats(EnumpluginStatsCollectorPerApplicationLDAPStatsProp perApplicationLDAPStats) {
    
    
    
    this.perApplicationLDAPStats = perApplicationLDAPStats;
  }


  public StatsCollectorPluginResponseAllOf ldapChangelogInfo(EnumpluginLdapChangelogInfoProp ldapChangelogInfo) {
    
    
    
    
    this.ldapChangelogInfo = ldapChangelogInfo;
    return this;
  }

   /**
   * Get ldapChangelogInfo
   * @return ldapChangelogInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginLdapChangelogInfoProp getLdapChangelogInfo() {
    return ldapChangelogInfo;
  }


  public void setLdapChangelogInfo(EnumpluginLdapChangelogInfoProp ldapChangelogInfo) {
    
    
    
    this.ldapChangelogInfo = ldapChangelogInfo;
  }


  public StatsCollectorPluginResponseAllOf statusSummaryInfo(EnumpluginStatusSummaryInfoProp statusSummaryInfo) {
    
    
    
    
    this.statusSummaryInfo = statusSummaryInfo;
    return this;
  }

   /**
   * Get statusSummaryInfo
   * @return statusSummaryInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginStatusSummaryInfoProp getStatusSummaryInfo() {
    return statusSummaryInfo;
  }


  public void setStatusSummaryInfo(EnumpluginStatusSummaryInfoProp statusSummaryInfo) {
    
    
    
    this.statusSummaryInfo = statusSummaryInfo;
  }


  public StatsCollectorPluginResponseAllOf generateCollectorFiles(Boolean generateCollectorFiles) {
    
    
    
    
    this.generateCollectorFiles = generateCollectorFiles;
    return this;
  }

   /**
   * Indicates whether this plugin should store metric samples on disk for use by the Data Metrics Server. If the Stats Collector Plugin is only being used to collect metrics for one or more StatsD Monitoring Endpoints, then this can be set to false to prevent unnecessary I/O.
   * @return generateCollectorFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this plugin should store metric samples on disk for use by the Data Metrics Server. If the Stats Collector Plugin is only being used to collect metrics for one or more StatsD Monitoring Endpoints, then this can be set to false to prevent unnecessary I/O.")

  public Boolean getGenerateCollectorFiles() {
    return generateCollectorFiles;
  }


  public void setGenerateCollectorFiles(Boolean generateCollectorFiles) {
    
    
    
    this.generateCollectorFiles = generateCollectorFiles;
  }


  public StatsCollectorPluginResponseAllOf localDBBackendInfo(EnumpluginLocalDBBackendInfoProp localDBBackendInfo) {
    
    
    
    
    this.localDBBackendInfo = localDBBackendInfo;
    return this;
  }

   /**
   * Get localDBBackendInfo
   * @return localDBBackendInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginLocalDBBackendInfoProp getLocalDBBackendInfo() {
    return localDBBackendInfo;
  }


  public void setLocalDBBackendInfo(EnumpluginLocalDBBackendInfoProp localDBBackendInfo) {
    
    
    
    this.localDBBackendInfo = localDBBackendInfo;
  }


  public StatsCollectorPluginResponseAllOf replicationInfo(EnumpluginReplicationInfoProp replicationInfo) {
    
    
    
    
    this.replicationInfo = replicationInfo;
    return this;
  }

   /**
   * Get replicationInfo
   * @return replicationInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginReplicationInfoProp getReplicationInfo() {
    return replicationInfo;
  }


  public void setReplicationInfo(EnumpluginReplicationInfoProp replicationInfo) {
    
    
    
    this.replicationInfo = replicationInfo;
  }


  public StatsCollectorPluginResponseAllOf entryCacheInfo(EnumpluginEntryCacheInfoProp entryCacheInfo) {
    
    
    
    
    this.entryCacheInfo = entryCacheInfo;
    return this;
  }

   /**
   * Get entryCacheInfo
   * @return entryCacheInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginEntryCacheInfoProp getEntryCacheInfo() {
    return entryCacheInfo;
  }


  public void setEntryCacheInfo(EnumpluginEntryCacheInfoProp entryCacheInfo) {
    
    
    
    this.entryCacheInfo = entryCacheInfo;
  }


  public StatsCollectorPluginResponseAllOf hostInfo(List<EnumpluginHostInfoProp> hostInfo) {
    
    
    
    
    this.hostInfo = hostInfo;
    return this;
  }

  public StatsCollectorPluginResponseAllOf addHostInfoItem(EnumpluginHostInfoProp hostInfoItem) {
    if (this.hostInfo == null) {
      this.hostInfo = new ArrayList<>();
    }
    this.hostInfo.add(hostInfoItem);
    return this;
  }

   /**
   * Get hostInfo
   * @return hostInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpluginHostInfoProp> getHostInfo() {
    return hostInfo;
  }


  public void setHostInfo(List<EnumpluginHostInfoProp> hostInfo) {
    
    
    
    this.hostInfo = hostInfo;
  }


  public StatsCollectorPluginResponseAllOf includedLDAPApplication(List<String> includedLDAPApplication) {
    
    
    
    
    this.includedLDAPApplication = includedLDAPApplication;
    return this;
  }

  public StatsCollectorPluginResponseAllOf addIncludedLDAPApplicationItem(String includedLDAPApplicationItem) {
    if (this.includedLDAPApplication == null) {
      this.includedLDAPApplication = new ArrayList<>();
    }
    this.includedLDAPApplication.add(includedLDAPApplicationItem);
    return this;
  }

   /**
   * If statistics should not be included for all applications, this property names the subset of applications that should be included.
   * @return includedLDAPApplication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If statistics should not be included for all applications, this property names the subset of applications that should be included.")

  public List<String> getIncludedLDAPApplication() {
    return includedLDAPApplication;
  }


  public void setIncludedLDAPApplication(List<String> includedLDAPApplication) {
    
    
    
    this.includedLDAPApplication = includedLDAPApplication;
  }


  public StatsCollectorPluginResponseAllOf enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StatsCollectorPluginResponseAllOf instance itself
   */
  public StatsCollectorPluginResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatsCollectorPluginResponseAllOf statsCollectorPluginResponseAllOf = (StatsCollectorPluginResponseAllOf) o;
    return Objects.equals(this.description, statsCollectorPluginResponseAllOf.description) &&
        Objects.equals(this.schemas, statsCollectorPluginResponseAllOf.schemas) &&
        Objects.equals(this.id, statsCollectorPluginResponseAllOf.id) &&
        Objects.equals(this.sampleInterval, statsCollectorPluginResponseAllOf.sampleInterval) &&
        Objects.equals(this.collectionInterval, statsCollectorPluginResponseAllOf.collectionInterval) &&
        Objects.equals(this.ldapInfo, statsCollectorPluginResponseAllOf.ldapInfo) &&
        Objects.equals(this.serverInfo, statsCollectorPluginResponseAllOf.serverInfo) &&
        Objects.equals(this.perApplicationLDAPStats, statsCollectorPluginResponseAllOf.perApplicationLDAPStats) &&
        Objects.equals(this.ldapChangelogInfo, statsCollectorPluginResponseAllOf.ldapChangelogInfo) &&
        Objects.equals(this.statusSummaryInfo, statsCollectorPluginResponseAllOf.statusSummaryInfo) &&
        Objects.equals(this.generateCollectorFiles, statsCollectorPluginResponseAllOf.generateCollectorFiles) &&
        Objects.equals(this.localDBBackendInfo, statsCollectorPluginResponseAllOf.localDBBackendInfo) &&
        Objects.equals(this.replicationInfo, statsCollectorPluginResponseAllOf.replicationInfo) &&
        Objects.equals(this.entryCacheInfo, statsCollectorPluginResponseAllOf.entryCacheInfo) &&
        Objects.equals(this.hostInfo, statsCollectorPluginResponseAllOf.hostInfo) &&
        Objects.equals(this.includedLDAPApplication, statsCollectorPluginResponseAllOf.includedLDAPApplication) &&
        Objects.equals(this.enabled, statsCollectorPluginResponseAllOf.enabled)&&
        Objects.equals(this.additionalProperties, statsCollectorPluginResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, sampleInterval, collectionInterval, ldapInfo, serverInfo, perApplicationLDAPStats, ldapChangelogInfo, statusSummaryInfo, generateCollectorFiles, localDBBackendInfo, replicationInfo, entryCacheInfo, hostInfo, includedLDAPApplication, enabled, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatsCollectorPluginResponseAllOf {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    sampleInterval: ").append(toIndentedString(sampleInterval)).append("\n");
    sb.append("    collectionInterval: ").append(toIndentedString(collectionInterval)).append("\n");
    sb.append("    ldapInfo: ").append(toIndentedString(ldapInfo)).append("\n");
    sb.append("    serverInfo: ").append(toIndentedString(serverInfo)).append("\n");
    sb.append("    perApplicationLDAPStats: ").append(toIndentedString(perApplicationLDAPStats)).append("\n");
    sb.append("    ldapChangelogInfo: ").append(toIndentedString(ldapChangelogInfo)).append("\n");
    sb.append("    statusSummaryInfo: ").append(toIndentedString(statusSummaryInfo)).append("\n");
    sb.append("    generateCollectorFiles: ").append(toIndentedString(generateCollectorFiles)).append("\n");
    sb.append("    localDBBackendInfo: ").append(toIndentedString(localDBBackendInfo)).append("\n");
    sb.append("    replicationInfo: ").append(toIndentedString(replicationInfo)).append("\n");
    sb.append("    entryCacheInfo: ").append(toIndentedString(entryCacheInfo)).append("\n");
    sb.append("    hostInfo: ").append(toIndentedString(hostInfo)).append("\n");
    sb.append("    includedLDAPApplication: ").append(toIndentedString(includedLDAPApplication)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("sampleInterval");
    openapiFields.add("collectionInterval");
    openapiFields.add("ldapInfo");
    openapiFields.add("serverInfo");
    openapiFields.add("perApplicationLDAPStats");
    openapiFields.add("ldapChangelogInfo");
    openapiFields.add("statusSummaryInfo");
    openapiFields.add("generateCollectorFiles");
    openapiFields.add("localDBBackendInfo");
    openapiFields.add("replicationInfo");
    openapiFields.add("entryCacheInfo");
    openapiFields.add("hostInfo");
    openapiFields.add("includedLDAPApplication");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StatsCollectorPluginResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StatsCollectorPluginResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatsCollectorPluginResponseAllOf is not found in the empty JSON string", StatsCollectorPluginResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("sampleInterval") != null && !jsonObj.get("sampleInterval").isJsonNull()) && !jsonObj.get("sampleInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleInterval").toString()));
      }
      if ((jsonObj.get("collectionInterval") != null && !jsonObj.get("collectionInterval").isJsonNull()) && !jsonObj.get("collectionInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collectionInterval").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hostInfo") != null && !jsonObj.get("hostInfo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostInfo` to be an array in the JSON string but got `%s`", jsonObj.get("hostInfo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedLDAPApplication") != null && !jsonObj.get("includedLDAPApplication").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedLDAPApplication` to be an array in the JSON string but got `%s`", jsonObj.get("includedLDAPApplication").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatsCollectorPluginResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatsCollectorPluginResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatsCollectorPluginResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatsCollectorPluginResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<StatsCollectorPluginResponseAllOf>() {
           @Override
           public void write(JsonWriter out, StatsCollectorPluginResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StatsCollectorPluginResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StatsCollectorPluginResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StatsCollectorPluginResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StatsCollectorPluginResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to StatsCollectorPluginResponseAllOf
  */
  public static StatsCollectorPluginResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatsCollectorPluginResponseAllOf.class);
  }

 /**
  * Convert an instance of StatsCollectorPluginResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

