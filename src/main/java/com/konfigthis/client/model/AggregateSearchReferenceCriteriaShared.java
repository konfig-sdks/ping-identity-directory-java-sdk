/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumaggregateSearchReferenceCriteriaSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AggregateSearchReferenceCriteriaShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AggregateSearchReferenceCriteriaShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumaggregateSearchReferenceCriteriaSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALL_INCLUDED_SEARCH_REFERENCE_CRITERIA = "allIncludedSearchReferenceCriteria";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_SEARCH_REFERENCE_CRITERIA)
  private List<String> allIncludedSearchReferenceCriteria = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_SEARCH_REFERENCE_CRITERIA = "anyIncludedSearchReferenceCriteria";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_SEARCH_REFERENCE_CRITERIA)
  private List<String> anyIncludedSearchReferenceCriteria = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_SEARCH_REFERENCE_CRITERIA = "notAllIncludedSearchReferenceCriteria";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_SEARCH_REFERENCE_CRITERIA)
  private List<String> notAllIncludedSearchReferenceCriteria = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_SEARCH_REFERENCE_CRITERIA = "noneIncludedSearchReferenceCriteria";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_SEARCH_REFERENCE_CRITERIA)
  private List<String> noneIncludedSearchReferenceCriteria = null;

  public AggregateSearchReferenceCriteriaShared() {
  }

  public AggregateSearchReferenceCriteriaShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Search Reference Criteria
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Search Reference Criteria")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AggregateSearchReferenceCriteriaShared schemas(List<EnumaggregateSearchReferenceCriteriaSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AggregateSearchReferenceCriteriaShared addSchemasItem(EnumaggregateSearchReferenceCriteriaSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumaggregateSearchReferenceCriteriaSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumaggregateSearchReferenceCriteriaSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AggregateSearchReferenceCriteriaShared allIncludedSearchReferenceCriteria(List<String> allIncludedSearchReferenceCriteria) {
    
    
    
    
    this.allIncludedSearchReferenceCriteria = allIncludedSearchReferenceCriteria;
    return this;
  }

  public AggregateSearchReferenceCriteriaShared addAllIncludedSearchReferenceCriteriaItem(String allIncludedSearchReferenceCriteriaItem) {
    if (this.allIncludedSearchReferenceCriteria == null) {
      this.allIncludedSearchReferenceCriteria = new ArrayList<>();
    }
    this.allIncludedSearchReferenceCriteria.add(allIncludedSearchReferenceCriteriaItem);
    return this;
  }

   /**
   * Specifies a search reference criteria object that must match the associated search result reference in order to match the aggregate search reference criteria. If one or more all-included search reference criteria objects are provided, then a search result reference must match all of them in order to match the aggregate search reference criteria.
   * @return allIncludedSearchReferenceCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search reference criteria object that must match the associated search result reference in order to match the aggregate search reference criteria. If one or more all-included search reference criteria objects are provided, then a search result reference must match all of them in order to match the aggregate search reference criteria.")

  public List<String> getAllIncludedSearchReferenceCriteria() {
    return allIncludedSearchReferenceCriteria;
  }


  public void setAllIncludedSearchReferenceCriteria(List<String> allIncludedSearchReferenceCriteria) {
    
    
    
    this.allIncludedSearchReferenceCriteria = allIncludedSearchReferenceCriteria;
  }


  public AggregateSearchReferenceCriteriaShared anyIncludedSearchReferenceCriteria(List<String> anyIncludedSearchReferenceCriteria) {
    
    
    
    
    this.anyIncludedSearchReferenceCriteria = anyIncludedSearchReferenceCriteria;
    return this;
  }

  public AggregateSearchReferenceCriteriaShared addAnyIncludedSearchReferenceCriteriaItem(String anyIncludedSearchReferenceCriteriaItem) {
    if (this.anyIncludedSearchReferenceCriteria == null) {
      this.anyIncludedSearchReferenceCriteria = new ArrayList<>();
    }
    this.anyIncludedSearchReferenceCriteria.add(anyIncludedSearchReferenceCriteriaItem);
    return this;
  }

   /**
   * Specifies a search reference criteria object that may match the associated search result reference in order to match the aggregate search reference criteria. If one or more any-included search reference criteria objects are provided, then a search result reference must match at least one of them in order to match the aggregate search reference criteria.
   * @return anyIncludedSearchReferenceCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search reference criteria object that may match the associated search result reference in order to match the aggregate search reference criteria. If one or more any-included search reference criteria objects are provided, then a search result reference must match at least one of them in order to match the aggregate search reference criteria.")

  public List<String> getAnyIncludedSearchReferenceCriteria() {
    return anyIncludedSearchReferenceCriteria;
  }


  public void setAnyIncludedSearchReferenceCriteria(List<String> anyIncludedSearchReferenceCriteria) {
    
    
    
    this.anyIncludedSearchReferenceCriteria = anyIncludedSearchReferenceCriteria;
  }


  public AggregateSearchReferenceCriteriaShared notAllIncludedSearchReferenceCriteria(List<String> notAllIncludedSearchReferenceCriteria) {
    
    
    
    
    this.notAllIncludedSearchReferenceCriteria = notAllIncludedSearchReferenceCriteria;
    return this;
  }

  public AggregateSearchReferenceCriteriaShared addNotAllIncludedSearchReferenceCriteriaItem(String notAllIncludedSearchReferenceCriteriaItem) {
    if (this.notAllIncludedSearchReferenceCriteria == null) {
      this.notAllIncludedSearchReferenceCriteria = new ArrayList<>();
    }
    this.notAllIncludedSearchReferenceCriteria.add(notAllIncludedSearchReferenceCriteriaItem);
    return this;
  }

   /**
   * Specifies a search reference criteria object that should not match the associated search result reference in order to match the aggregate search reference criteria. If one or more not-all-included search reference criteria objects are provided, then a search result reference must not match all of them (that is, it may match zero or more of them, but it must not match all of them) in order to match the aggregate search reference criteria.
   * @return notAllIncludedSearchReferenceCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search reference criteria object that should not match the associated search result reference in order to match the aggregate search reference criteria. If one or more not-all-included search reference criteria objects are provided, then a search result reference must not match all of them (that is, it may match zero or more of them, but it must not match all of them) in order to match the aggregate search reference criteria.")

  public List<String> getNotAllIncludedSearchReferenceCriteria() {
    return notAllIncludedSearchReferenceCriteria;
  }


  public void setNotAllIncludedSearchReferenceCriteria(List<String> notAllIncludedSearchReferenceCriteria) {
    
    
    
    this.notAllIncludedSearchReferenceCriteria = notAllIncludedSearchReferenceCriteria;
  }


  public AggregateSearchReferenceCriteriaShared noneIncludedSearchReferenceCriteria(List<String> noneIncludedSearchReferenceCriteria) {
    
    
    
    
    this.noneIncludedSearchReferenceCriteria = noneIncludedSearchReferenceCriteria;
    return this;
  }

  public AggregateSearchReferenceCriteriaShared addNoneIncludedSearchReferenceCriteriaItem(String noneIncludedSearchReferenceCriteriaItem) {
    if (this.noneIncludedSearchReferenceCriteria == null) {
      this.noneIncludedSearchReferenceCriteria = new ArrayList<>();
    }
    this.noneIncludedSearchReferenceCriteria.add(noneIncludedSearchReferenceCriteriaItem);
    return this;
  }

   /**
   * Specifies a search reference criteria object that must not match the associated search result reference in order to match the aggregate search reference criteria. If one or more none-included search reference criteria objects are provided, then a search result reference must not match any of them in order to match the aggregate search reference criteria.
   * @return noneIncludedSearchReferenceCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search reference criteria object that must not match the associated search result reference in order to match the aggregate search reference criteria. If one or more none-included search reference criteria objects are provided, then a search result reference must not match any of them in order to match the aggregate search reference criteria.")

  public List<String> getNoneIncludedSearchReferenceCriteria() {
    return noneIncludedSearchReferenceCriteria;
  }


  public void setNoneIncludedSearchReferenceCriteria(List<String> noneIncludedSearchReferenceCriteria) {
    
    
    
    this.noneIncludedSearchReferenceCriteria = noneIncludedSearchReferenceCriteria;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AggregateSearchReferenceCriteriaShared instance itself
   */
  public AggregateSearchReferenceCriteriaShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregateSearchReferenceCriteriaShared aggregateSearchReferenceCriteriaShared = (AggregateSearchReferenceCriteriaShared) o;
    return Objects.equals(this.description, aggregateSearchReferenceCriteriaShared.description) &&
        Objects.equals(this.schemas, aggregateSearchReferenceCriteriaShared.schemas) &&
        Objects.equals(this.allIncludedSearchReferenceCriteria, aggregateSearchReferenceCriteriaShared.allIncludedSearchReferenceCriteria) &&
        Objects.equals(this.anyIncludedSearchReferenceCriteria, aggregateSearchReferenceCriteriaShared.anyIncludedSearchReferenceCriteria) &&
        Objects.equals(this.notAllIncludedSearchReferenceCriteria, aggregateSearchReferenceCriteriaShared.notAllIncludedSearchReferenceCriteria) &&
        Objects.equals(this.noneIncludedSearchReferenceCriteria, aggregateSearchReferenceCriteriaShared.noneIncludedSearchReferenceCriteria)&&
        Objects.equals(this.additionalProperties, aggregateSearchReferenceCriteriaShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, allIncludedSearchReferenceCriteria, anyIncludedSearchReferenceCriteria, notAllIncludedSearchReferenceCriteria, noneIncludedSearchReferenceCriteria, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregateSearchReferenceCriteriaShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    allIncludedSearchReferenceCriteria: ").append(toIndentedString(allIncludedSearchReferenceCriteria)).append("\n");
    sb.append("    anyIncludedSearchReferenceCriteria: ").append(toIndentedString(anyIncludedSearchReferenceCriteria)).append("\n");
    sb.append("    notAllIncludedSearchReferenceCriteria: ").append(toIndentedString(notAllIncludedSearchReferenceCriteria)).append("\n");
    sb.append("    noneIncludedSearchReferenceCriteria: ").append(toIndentedString(noneIncludedSearchReferenceCriteria)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("allIncludedSearchReferenceCriteria");
    openapiFields.add("anyIncludedSearchReferenceCriteria");
    openapiFields.add("notAllIncludedSearchReferenceCriteria");
    openapiFields.add("noneIncludedSearchReferenceCriteria");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AggregateSearchReferenceCriteriaShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AggregateSearchReferenceCriteriaShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregateSearchReferenceCriteriaShared is not found in the empty JSON string", AggregateSearchReferenceCriteriaShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AggregateSearchReferenceCriteriaShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedSearchReferenceCriteria") != null && !jsonObj.get("allIncludedSearchReferenceCriteria").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedSearchReferenceCriteria` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedSearchReferenceCriteria").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedSearchReferenceCriteria") != null && !jsonObj.get("anyIncludedSearchReferenceCriteria").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedSearchReferenceCriteria` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedSearchReferenceCriteria").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedSearchReferenceCriteria") != null && !jsonObj.get("notAllIncludedSearchReferenceCriteria").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedSearchReferenceCriteria` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedSearchReferenceCriteria").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedSearchReferenceCriteria") != null && !jsonObj.get("noneIncludedSearchReferenceCriteria").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedSearchReferenceCriteria` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedSearchReferenceCriteria").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregateSearchReferenceCriteriaShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregateSearchReferenceCriteriaShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregateSearchReferenceCriteriaShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregateSearchReferenceCriteriaShared.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregateSearchReferenceCriteriaShared>() {
           @Override
           public void write(JsonWriter out, AggregateSearchReferenceCriteriaShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregateSearchReferenceCriteriaShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AggregateSearchReferenceCriteriaShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AggregateSearchReferenceCriteriaShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AggregateSearchReferenceCriteriaShared
  * @throws IOException if the JSON string is invalid with respect to AggregateSearchReferenceCriteriaShared
  */
  public static AggregateSearchReferenceCriteriaShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregateSearchReferenceCriteriaShared.class);
  }

 /**
  * Convert an instance of AggregateSearchReferenceCriteriaShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

