/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumhttpServletExtensionDebugLevelProp;
import com.konfigthis.client.model.EnumhttpServletExtensionDebugTypeProp;
import com.konfigthis.client.model.EnumhttpServletExtensionMapAccessTokensToLocalUsersProp;
import com.konfigthis.client.model.Enumscim2HttpServletExtensionSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Scim2HttpServletExtensionResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Scim2HttpServletExtensionResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<Enumscim2HttpServletExtensionSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BASE_CONTEXT_PATH = "baseContextPath";
  @SerializedName(SERIALIZED_NAME_BASE_CONTEXT_PATH)
  private String baseContextPath;

  public static final String SERIALIZED_NAME_ACCESS_TOKEN_VALIDATOR = "accessTokenValidator";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_VALIDATOR)
  private List<String> accessTokenValidator = null;

  public static final String SERIALIZED_NAME_MAP_ACCESS_TOKENS_TO_LOCAL_USERS = "mapAccessTokensToLocalUsers";
  @SerializedName(SERIALIZED_NAME_MAP_ACCESS_TOKENS_TO_LOCAL_USERS)
  private EnumhttpServletExtensionMapAccessTokensToLocalUsersProp mapAccessTokensToLocalUsers;

  public static final String SERIALIZED_NAME_DEBUG_ENABLED = "debugEnabled";
  @SerializedName(SERIALIZED_NAME_DEBUG_ENABLED)
  private Boolean debugEnabled;

  public static final String SERIALIZED_NAME_DEBUG_LEVEL = "debugLevel";
  @SerializedName(SERIALIZED_NAME_DEBUG_LEVEL)
  private EnumhttpServletExtensionDebugLevelProp debugLevel;

  public static final String SERIALIZED_NAME_DEBUG_TYPE = "debugType";
  @SerializedName(SERIALIZED_NAME_DEBUG_TYPE)
  private List<EnumhttpServletExtensionDebugTypeProp> debugType = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDE_STACK_TRACE = "includeStackTrace";
  @SerializedName(SERIALIZED_NAME_INCLUDE_STACK_TRACE)
  private Boolean includeStackTrace;

  public static final String SERIALIZED_NAME_SWAGGER_ENABLED = "swaggerEnabled";
  @SerializedName(SERIALIZED_NAME_SWAGGER_ENABLED)
  private Boolean swaggerEnabled;

  public static final String SERIALIZED_NAME_CROSS_ORIGIN_POLICY = "crossOriginPolicy";
  @SerializedName(SERIALIZED_NAME_CROSS_ORIGIN_POLICY)
  private String crossOriginPolicy;

  public static final String SERIALIZED_NAME_RESPONSE_HEADER = "responseHeader";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER)
  private List<String> responseHeader = null;

  public static final String SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER = "correlationIDResponseHeader";
  @SerializedName(SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER)
  private String correlationIDResponseHeader;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public Scim2HttpServletExtensionResponse() {
  }

  public Scim2HttpServletExtensionResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this HTTP Servlet Extension
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this HTTP Servlet Extension")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Scim2HttpServletExtensionResponse schemas(List<Enumscim2HttpServletExtensionSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public Scim2HttpServletExtensionResponse addSchemasItem(Enumscim2HttpServletExtensionSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Enumscim2HttpServletExtensionSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<Enumscim2HttpServletExtensionSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public Scim2HttpServletExtensionResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the HTTP Servlet Extension
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the HTTP Servlet Extension")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Scim2HttpServletExtensionResponse baseContextPath(String baseContextPath) {
    
    
    
    
    this.baseContextPath = baseContextPath;
    return this;
  }

   /**
   * The context path to use to access the SCIM 2.0 interface. The value must start with a forward slash and must represent a valid HTTP context path.
   * @return baseContextPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The context path to use to access the SCIM 2.0 interface. The value must start with a forward slash and must represent a valid HTTP context path.")

  public String getBaseContextPath() {
    return baseContextPath;
  }


  public void setBaseContextPath(String baseContextPath) {
    
    
    
    this.baseContextPath = baseContextPath;
  }


  public Scim2HttpServletExtensionResponse accessTokenValidator(List<String> accessTokenValidator) {
    
    
    
    
    this.accessTokenValidator = accessTokenValidator;
    return this;
  }

  public Scim2HttpServletExtensionResponse addAccessTokenValidatorItem(String accessTokenValidatorItem) {
    if (this.accessTokenValidator == null) {
      this.accessTokenValidator = new ArrayList<>();
    }
    this.accessTokenValidator.add(accessTokenValidatorItem);
    return this;
  }

   /**
   * If specified, the Access Token Validator(s) that may be used to validate access tokens for requests submitted to this SCIM2 HTTP Servlet Extension.
   * @return accessTokenValidator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If specified, the Access Token Validator(s) that may be used to validate access tokens for requests submitted to this SCIM2 HTTP Servlet Extension.")

  public List<String> getAccessTokenValidator() {
    return accessTokenValidator;
  }


  public void setAccessTokenValidator(List<String> accessTokenValidator) {
    
    
    
    this.accessTokenValidator = accessTokenValidator;
  }


  public Scim2HttpServletExtensionResponse mapAccessTokensToLocalUsers(EnumhttpServletExtensionMapAccessTokensToLocalUsersProp mapAccessTokensToLocalUsers) {
    
    
    
    
    this.mapAccessTokensToLocalUsers = mapAccessTokensToLocalUsers;
    return this;
  }

   /**
   * Get mapAccessTokensToLocalUsers
   * @return mapAccessTokensToLocalUsers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumhttpServletExtensionMapAccessTokensToLocalUsersProp getMapAccessTokensToLocalUsers() {
    return mapAccessTokensToLocalUsers;
  }


  public void setMapAccessTokensToLocalUsers(EnumhttpServletExtensionMapAccessTokensToLocalUsersProp mapAccessTokensToLocalUsers) {
    
    
    
    this.mapAccessTokensToLocalUsers = mapAccessTokensToLocalUsers;
  }


  public Scim2HttpServletExtensionResponse debugEnabled(Boolean debugEnabled) {
    
    
    
    
    this.debugEnabled = debugEnabled;
    return this;
  }

   /**
   * Enables debug logging of the SCIM 2.0 SDK. Debug messages will be forwarded to the Directory Server debug logger with the scope of com.unboundid.directory.broker.http.scim2.extension.SCIM2HTTPServletExtension.
   * @return debugEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enables debug logging of the SCIM 2.0 SDK. Debug messages will be forwarded to the Directory Server debug logger with the scope of com.unboundid.directory.broker.http.scim2.extension.SCIM2HTTPServletExtension.")

  public Boolean getDebugEnabled() {
    return debugEnabled;
  }


  public void setDebugEnabled(Boolean debugEnabled) {
    
    
    
    this.debugEnabled = debugEnabled;
  }


  public Scim2HttpServletExtensionResponse debugLevel(EnumhttpServletExtensionDebugLevelProp debugLevel) {
    
    
    
    
    this.debugLevel = debugLevel;
    return this;
  }

   /**
   * Get debugLevel
   * @return debugLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumhttpServletExtensionDebugLevelProp getDebugLevel() {
    return debugLevel;
  }


  public void setDebugLevel(EnumhttpServletExtensionDebugLevelProp debugLevel) {
    
    
    
    this.debugLevel = debugLevel;
  }


  public Scim2HttpServletExtensionResponse debugType(List<EnumhttpServletExtensionDebugTypeProp> debugType) {
    
    
    
    
    this.debugType = debugType;
    return this;
  }

  public Scim2HttpServletExtensionResponse addDebugTypeItem(EnumhttpServletExtensionDebugTypeProp debugTypeItem) {
    this.debugType.add(debugTypeItem);
    return this;
  }

   /**
   * Get debugType
   * @return debugType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumhttpServletExtensionDebugTypeProp> getDebugType() {
    return debugType;
  }


  public void setDebugType(List<EnumhttpServletExtensionDebugTypeProp> debugType) {
    
    
    
    this.debugType = debugType;
  }


  public Scim2HttpServletExtensionResponse includeStackTrace(Boolean includeStackTrace) {
    
    
    
    
    this.includeStackTrace = includeStackTrace;
    return this;
  }

   /**
   * Indicates whether a stack trace of the thread which called the debug method should be included in debug log messages.
   * @return includeStackTrace
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether a stack trace of the thread which called the debug method should be included in debug log messages.")

  public Boolean getIncludeStackTrace() {
    return includeStackTrace;
  }


  public void setIncludeStackTrace(Boolean includeStackTrace) {
    
    
    
    this.includeStackTrace = includeStackTrace;
  }


  public Scim2HttpServletExtensionResponse swaggerEnabled(Boolean swaggerEnabled) {
    
    
    
    
    this.swaggerEnabled = swaggerEnabled;
    return this;
  }

   /**
   * Indicates whether the SCIM2 HTTP Servlet Extension will generate a Swagger specification document.
   * @return swaggerEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the SCIM2 HTTP Servlet Extension will generate a Swagger specification document.")

  public Boolean getSwaggerEnabled() {
    return swaggerEnabled;
  }


  public void setSwaggerEnabled(Boolean swaggerEnabled) {
    
    
    
    this.swaggerEnabled = swaggerEnabled;
  }


  public Scim2HttpServletExtensionResponse crossOriginPolicy(String crossOriginPolicy) {
    
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
    return this;
  }

   /**
   * The cross-origin request policy to use for the HTTP Servlet Extension.
   * @return crossOriginPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cross-origin request policy to use for the HTTP Servlet Extension.")

  public String getCrossOriginPolicy() {
    return crossOriginPolicy;
  }


  public void setCrossOriginPolicy(String crossOriginPolicy) {
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
  }


  public Scim2HttpServletExtensionResponse responseHeader(List<String> responseHeader) {
    
    
    
    
    this.responseHeader = responseHeader;
    return this;
  }

  public Scim2HttpServletExtensionResponse addResponseHeaderItem(String responseHeaderItem) {
    if (this.responseHeader == null) {
      this.responseHeader = new ArrayList<>();
    }
    this.responseHeader.add(responseHeaderItem);
    return this;
  }

   /**
   * Specifies HTTP header fields and values added to response headers for all requests.
   * @return responseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies HTTP header fields and values added to response headers for all requests.")

  public List<String> getResponseHeader() {
    return responseHeader;
  }


  public void setResponseHeader(List<String> responseHeader) {
    
    
    
    this.responseHeader = responseHeader;
  }


  public Scim2HttpServletExtensionResponse correlationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
    return this;
  }

   /**
   * Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \&quot;Correlation-Id\&quot;, \&quot;X-Amzn-Trace-Id\&quot;, and \&quot;X-Request-Id\&quot;.
   * @return correlationIDResponseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \"Correlation-Id\", \"X-Amzn-Trace-Id\", and \"X-Request-Id\".")

  public String getCorrelationIDResponseHeader() {
    return correlationIDResponseHeader;
  }


  public void setCorrelationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
  }


  public Scim2HttpServletExtensionResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public Scim2HttpServletExtensionResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Scim2HttpServletExtensionResponse instance itself
   */
  public Scim2HttpServletExtensionResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scim2HttpServletExtensionResponse scim2HttpServletExtensionResponse = (Scim2HttpServletExtensionResponse) o;
    return Objects.equals(this.description, scim2HttpServletExtensionResponse.description) &&
        Objects.equals(this.schemas, scim2HttpServletExtensionResponse.schemas) &&
        Objects.equals(this.id, scim2HttpServletExtensionResponse.id) &&
        Objects.equals(this.baseContextPath, scim2HttpServletExtensionResponse.baseContextPath) &&
        Objects.equals(this.accessTokenValidator, scim2HttpServletExtensionResponse.accessTokenValidator) &&
        Objects.equals(this.mapAccessTokensToLocalUsers, scim2HttpServletExtensionResponse.mapAccessTokensToLocalUsers) &&
        Objects.equals(this.debugEnabled, scim2HttpServletExtensionResponse.debugEnabled) &&
        Objects.equals(this.debugLevel, scim2HttpServletExtensionResponse.debugLevel) &&
        Objects.equals(this.debugType, scim2HttpServletExtensionResponse.debugType) &&
        Objects.equals(this.includeStackTrace, scim2HttpServletExtensionResponse.includeStackTrace) &&
        Objects.equals(this.swaggerEnabled, scim2HttpServletExtensionResponse.swaggerEnabled) &&
        Objects.equals(this.crossOriginPolicy, scim2HttpServletExtensionResponse.crossOriginPolicy) &&
        Objects.equals(this.responseHeader, scim2HttpServletExtensionResponse.responseHeader) &&
        Objects.equals(this.correlationIDResponseHeader, scim2HttpServletExtensionResponse.correlationIDResponseHeader) &&
        Objects.equals(this.meta, scim2HttpServletExtensionResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, scim2HttpServletExtensionResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, scim2HttpServletExtensionResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, baseContextPath, accessTokenValidator, mapAccessTokensToLocalUsers, debugEnabled, debugLevel, debugType, includeStackTrace, swaggerEnabled, crossOriginPolicy, responseHeader, correlationIDResponseHeader, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scim2HttpServletExtensionResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    baseContextPath: ").append(toIndentedString(baseContextPath)).append("\n");
    sb.append("    accessTokenValidator: ").append(toIndentedString(accessTokenValidator)).append("\n");
    sb.append("    mapAccessTokensToLocalUsers: ").append(toIndentedString(mapAccessTokensToLocalUsers)).append("\n");
    sb.append("    debugEnabled: ").append(toIndentedString(debugEnabled)).append("\n");
    sb.append("    debugLevel: ").append(toIndentedString(debugLevel)).append("\n");
    sb.append("    debugType: ").append(toIndentedString(debugType)).append("\n");
    sb.append("    includeStackTrace: ").append(toIndentedString(includeStackTrace)).append("\n");
    sb.append("    swaggerEnabled: ").append(toIndentedString(swaggerEnabled)).append("\n");
    sb.append("    crossOriginPolicy: ").append(toIndentedString(crossOriginPolicy)).append("\n");
    sb.append("    responseHeader: ").append(toIndentedString(responseHeader)).append("\n");
    sb.append("    correlationIDResponseHeader: ").append(toIndentedString(correlationIDResponseHeader)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("baseContextPath");
    openapiFields.add("accessTokenValidator");
    openapiFields.add("mapAccessTokensToLocalUsers");
    openapiFields.add("debugEnabled");
    openapiFields.add("debugLevel");
    openapiFields.add("debugType");
    openapiFields.add("includeStackTrace");
    openapiFields.add("swaggerEnabled");
    openapiFields.add("crossOriginPolicy");
    openapiFields.add("responseHeader");
    openapiFields.add("correlationIDResponseHeader");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("baseContextPath");
    openapiRequiredFields.add("debugLevel");
    openapiRequiredFields.add("debugType");
    openapiRequiredFields.add("includeStackTrace");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Scim2HttpServletExtensionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Scim2HttpServletExtensionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Scim2HttpServletExtensionResponse is not found in the empty JSON string", Scim2HttpServletExtensionResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Scim2HttpServletExtensionResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("baseContextPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseContextPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseContextPath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessTokenValidator") != null && !jsonObj.get("accessTokenValidator").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTokenValidator` to be an array in the JSON string but got `%s`", jsonObj.get("accessTokenValidator").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("debugType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("debugType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugType` to be an array in the JSON string but got `%s`", jsonObj.get("debugType").toString()));
      }
      if ((jsonObj.get("crossOriginPolicy") != null && !jsonObj.get("crossOriginPolicy").isJsonNull()) && !jsonObj.get("crossOriginPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossOriginPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossOriginPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("responseHeader") != null && !jsonObj.get("responseHeader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseHeader` to be an array in the JSON string but got `%s`", jsonObj.get("responseHeader").toString()));
      }
      if ((jsonObj.get("correlationIDResponseHeader") != null && !jsonObj.get("correlationIDResponseHeader").isJsonNull()) && !jsonObj.get("correlationIDResponseHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationIDResponseHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationIDResponseHeader").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Scim2HttpServletExtensionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Scim2HttpServletExtensionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Scim2HttpServletExtensionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Scim2HttpServletExtensionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Scim2HttpServletExtensionResponse>() {
           @Override
           public void write(JsonWriter out, Scim2HttpServletExtensionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Scim2HttpServletExtensionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Scim2HttpServletExtensionResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Scim2HttpServletExtensionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Scim2HttpServletExtensionResponse
  * @throws IOException if the JSON string is invalid with respect to Scim2HttpServletExtensionResponse
  */
  public static Scim2HttpServletExtensionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Scim2HttpServletExtensionResponse.class);
  }

 /**
  * Convert an instance of Scim2HttpServletExtensionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

