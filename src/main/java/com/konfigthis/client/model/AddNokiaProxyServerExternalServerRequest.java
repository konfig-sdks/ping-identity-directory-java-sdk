/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumexternalServerDefunctConnectionResultCodeProp;
import com.konfigthis.client.model.EnumexternalServerNokiaProxyServerAuthenticationMethodProp;
import com.konfigthis.client.model.EnumexternalServerNokiaProxyServerConnectionSecurityProp;
import com.konfigthis.client.model.EnumexternalServerVerifyCredentialsMethodProp;
import com.konfigthis.client.model.EnumnokiaProxyServerExternalServerSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddNokiaProxyServerExternalServerRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddNokiaProxyServerExternalServerRequest {
  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumnokiaProxyServerExternalServerSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFY_CREDENTIALS_METHOD = "verifyCredentialsMethod";
  @SerializedName(SERIALIZED_NAME_VERIFY_CREDENTIALS_METHOD)
  private EnumexternalServerVerifyCredentialsMethodProp verifyCredentialsMethod;

  public static final String SERIALIZED_NAME_USE_ADMINISTRATIVE_OPERATION_CONTROL = "useAdministrativeOperationControl";
  @SerializedName(SERIALIZED_NAME_USE_ADMINISTRATIVE_OPERATION_CONTROL)
  private Boolean useAdministrativeOperationControl;

  public static final String SERIALIZED_NAME_SERVER_HOST_NAME = "serverHostName";
  @SerializedName(SERIALIZED_NAME_SERVER_HOST_NAME)
  private String serverHostName;

  public static final String SERIALIZED_NAME_SERVER_PORT = "serverPort";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_BIND_D_N = "bindDN";
  @SerializedName(SERIALIZED_NAME_BIND_D_N)
  private String bindDN;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PASSPHRASE_PROVIDER = "passphraseProvider";
  @SerializedName(SERIALIZED_NAME_PASSPHRASE_PROVIDER)
  private String passphraseProvider;

  public static final String SERIALIZED_NAME_CONNECTION_SECURITY = "connectionSecurity";
  @SerializedName(SERIALIZED_NAME_CONNECTION_SECURITY)
  private EnumexternalServerNokiaProxyServerConnectionSecurityProp connectionSecurity;

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHOD = "authenticationMethod";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHOD)
  private EnumexternalServerNokiaProxyServerAuthenticationMethodProp authenticationMethod;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_CONNECT_TIMEOUT = "healthCheckConnectTimeout";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_CONNECT_TIMEOUT)
  private String healthCheckConnectTimeout;

  public static final String SERIALIZED_NAME_MAX_CONNECTION_AGE = "maxConnectionAge";
  @SerializedName(SERIALIZED_NAME_MAX_CONNECTION_AGE)
  private String maxConnectionAge;

  public static final String SERIALIZED_NAME_MIN_EXPIRED_CONNECTION_DISCONNECT_INTERVAL = "minExpiredConnectionDisconnectInterval";
  @SerializedName(SERIALIZED_NAME_MIN_EXPIRED_CONNECTION_DISCONNECT_INTERVAL)
  private String minExpiredConnectionDisconnectInterval;

  public static final String SERIALIZED_NAME_CONNECT_TIMEOUT = "connectTimeout";
  @SerializedName(SERIALIZED_NAME_CONNECT_TIMEOUT)
  private String connectTimeout;

  public static final String SERIALIZED_NAME_MAX_RESPONSE_SIZE = "maxResponseSize";
  @SerializedName(SERIALIZED_NAME_MAX_RESPONSE_SIZE)
  private String maxResponseSize;

  public static final String SERIALIZED_NAME_KEY_MANAGER_PROVIDER = "keyManagerProvider";
  @SerializedName(SERIALIZED_NAME_KEY_MANAGER_PROVIDER)
  private String keyManagerProvider;

  public static final String SERIALIZED_NAME_TRUST_MANAGER_PROVIDER = "trustManagerProvider";
  @SerializedName(SERIALIZED_NAME_TRUST_MANAGER_PROVIDER)
  private String trustManagerProvider;

  public static final String SERIALIZED_NAME_INITIAL_CONNECTIONS = "initialConnections";
  @SerializedName(SERIALIZED_NAME_INITIAL_CONNECTIONS)
  private Integer initialConnections;

  public static final String SERIALIZED_NAME_MAX_CONNECTIONS = "maxConnections";
  @SerializedName(SERIALIZED_NAME_MAX_CONNECTIONS)
  private Integer maxConnections;

  public static final String SERIALIZED_NAME_DEFUNCT_CONNECTION_RESULT_CODE = "defunctConnectionResultCode";
  @SerializedName(SERIALIZED_NAME_DEFUNCT_CONNECTION_RESULT_CODE)
  private List<EnumexternalServerDefunctConnectionResultCodeProp> defunctConnectionResultCode = null;

  public static final String SERIALIZED_NAME_ABANDON_ON_TIMEOUT = "abandonOnTimeout";
  @SerializedName(SERIALIZED_NAME_ABANDON_ON_TIMEOUT)
  private Boolean abandonOnTimeout;

  public AddNokiaProxyServerExternalServerRequest() {
  }

  public AddNokiaProxyServerExternalServerRequest serverName(String serverName) {
    
    
    
    
    this.serverName = serverName;
    return this;
  }

   /**
   * Name of the new External Server
   * @return serverName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new External Server")

  public String getServerName() {
    return serverName;
  }


  public void setServerName(String serverName) {
    
    
    
    this.serverName = serverName;
  }


  public AddNokiaProxyServerExternalServerRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this External Server
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this External Server")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddNokiaProxyServerExternalServerRequest schemas(List<EnumnokiaProxyServerExternalServerSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddNokiaProxyServerExternalServerRequest addSchemasItem(EnumnokiaProxyServerExternalServerSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumnokiaProxyServerExternalServerSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumnokiaProxyServerExternalServerSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddNokiaProxyServerExternalServerRequest verifyCredentialsMethod(EnumexternalServerVerifyCredentialsMethodProp verifyCredentialsMethod) {
    
    
    
    
    this.verifyCredentialsMethod = verifyCredentialsMethod;
    return this;
  }

   /**
   * Get verifyCredentialsMethod
   * @return verifyCredentialsMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumexternalServerVerifyCredentialsMethodProp getVerifyCredentialsMethod() {
    return verifyCredentialsMethod;
  }


  public void setVerifyCredentialsMethod(EnumexternalServerVerifyCredentialsMethodProp verifyCredentialsMethod) {
    
    
    
    this.verifyCredentialsMethod = verifyCredentialsMethod;
  }


  public AddNokiaProxyServerExternalServerRequest useAdministrativeOperationControl(Boolean useAdministrativeOperationControl) {
    
    
    
    
    this.useAdministrativeOperationControl = useAdministrativeOperationControl;
    return this;
  }

   /**
   * Indicates whether to include the administrative operation request control in requests sent to this server which are intended for administrative operations (e.g., health checking) rather than requests directly from clients.
   * @return useAdministrativeOperationControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to include the administrative operation request control in requests sent to this server which are intended for administrative operations (e.g., health checking) rather than requests directly from clients.")

  public Boolean getUseAdministrativeOperationControl() {
    return useAdministrativeOperationControl;
  }


  public void setUseAdministrativeOperationControl(Boolean useAdministrativeOperationControl) {
    
    
    
    this.useAdministrativeOperationControl = useAdministrativeOperationControl;
  }


  public AddNokiaProxyServerExternalServerRequest serverHostName(String serverHostName) {
    
    
    
    
    this.serverHostName = serverHostName;
    return this;
  }

   /**
   * The host name or IP address of the target LDAP server.
   * @return serverHostName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The host name or IP address of the target LDAP server.")

  public String getServerHostName() {
    return serverHostName;
  }


  public void setServerHostName(String serverHostName) {
    
    
    
    this.serverHostName = serverHostName;
  }


  public AddNokiaProxyServerExternalServerRequest serverPort(Integer serverPort) {
    
    
    
    
    this.serverPort = serverPort;
    return this;
  }

   /**
   * The port number on which the server listens for requests.
   * @return serverPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The port number on which the server listens for requests.")

  public Integer getServerPort() {
    return serverPort;
  }


  public void setServerPort(Integer serverPort) {
    
    
    
    this.serverPort = serverPort;
  }


  public AddNokiaProxyServerExternalServerRequest location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Specifies the location for the LDAP External Server.
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the location for the LDAP External Server.")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public AddNokiaProxyServerExternalServerRequest bindDN(String bindDN) {
    
    
    
    
    this.bindDN = bindDN;
    return this;
  }

   /**
   * The DN to use to bind to the target LDAP server if simple authentication is required.
   * @return bindDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The DN to use to bind to the target LDAP server if simple authentication is required.")

  public String getBindDN() {
    return bindDN;
  }


  public void setBindDN(String bindDN) {
    
    
    
    this.bindDN = bindDN;
  }


  public AddNokiaProxyServerExternalServerRequest password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * The login password for the specified user.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The login password for the specified user.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public AddNokiaProxyServerExternalServerRequest passphraseProvider(String passphraseProvider) {
    
    
    
    
    this.passphraseProvider = passphraseProvider;
    return this;
  }

   /**
   * The passphrase provider to use to obtain the login password for the specified user.
   * @return passphraseProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The passphrase provider to use to obtain the login password for the specified user.")

  public String getPassphraseProvider() {
    return passphraseProvider;
  }


  public void setPassphraseProvider(String passphraseProvider) {
    
    
    
    this.passphraseProvider = passphraseProvider;
  }


  public AddNokiaProxyServerExternalServerRequest connectionSecurity(EnumexternalServerNokiaProxyServerConnectionSecurityProp connectionSecurity) {
    
    
    
    
    this.connectionSecurity = connectionSecurity;
    return this;
  }

   /**
   * Get connectionSecurity
   * @return connectionSecurity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumexternalServerNokiaProxyServerConnectionSecurityProp getConnectionSecurity() {
    return connectionSecurity;
  }


  public void setConnectionSecurity(EnumexternalServerNokiaProxyServerConnectionSecurityProp connectionSecurity) {
    
    
    
    this.connectionSecurity = connectionSecurity;
  }


  public AddNokiaProxyServerExternalServerRequest authenticationMethod(EnumexternalServerNokiaProxyServerAuthenticationMethodProp authenticationMethod) {
    
    
    
    
    this.authenticationMethod = authenticationMethod;
    return this;
  }

   /**
   * Get authenticationMethod
   * @return authenticationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumexternalServerNokiaProxyServerAuthenticationMethodProp getAuthenticationMethod() {
    return authenticationMethod;
  }


  public void setAuthenticationMethod(EnumexternalServerNokiaProxyServerAuthenticationMethodProp authenticationMethod) {
    
    
    
    this.authenticationMethod = authenticationMethod;
  }


  public AddNokiaProxyServerExternalServerRequest healthCheckConnectTimeout(String healthCheckConnectTimeout) {
    
    
    
    
    this.healthCheckConnectTimeout = healthCheckConnectTimeout;
    return this;
  }

   /**
   * Specifies the maximum length of time to wait for a connection to be established for the purpose of performing a health check. If the connection cannot be established within this length of time, the server will be classified as unavailable.
   * @return healthCheckConnectTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time to wait for a connection to be established for the purpose of performing a health check. If the connection cannot be established within this length of time, the server will be classified as unavailable.")

  public String getHealthCheckConnectTimeout() {
    return healthCheckConnectTimeout;
  }


  public void setHealthCheckConnectTimeout(String healthCheckConnectTimeout) {
    
    
    
    this.healthCheckConnectTimeout = healthCheckConnectTimeout;
  }


  public AddNokiaProxyServerExternalServerRequest maxConnectionAge(String maxConnectionAge) {
    
    
    
    
    this.maxConnectionAge = maxConnectionAge;
    return this;
  }

   /**
   * Specifies the maximum length of time that connections to this server should be allowed to remain established before being closed and replaced with newly-established connections.
   * @return maxConnectionAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that connections to this server should be allowed to remain established before being closed and replaced with newly-established connections.")

  public String getMaxConnectionAge() {
    return maxConnectionAge;
  }


  public void setMaxConnectionAge(String maxConnectionAge) {
    
    
    
    this.maxConnectionAge = maxConnectionAge;
  }


  public AddNokiaProxyServerExternalServerRequest minExpiredConnectionDisconnectInterval(String minExpiredConnectionDisconnectInterval) {
    
    
    
    
    this.minExpiredConnectionDisconnectInterval = minExpiredConnectionDisconnectInterval;
    return this;
  }

   /**
   * Specifies the minimum length of time that should pass between connection closures as a result of the connections being established for longer than the maximum connection age. This may help avoid cases in which a large number of connections are closed and re-established in a short period of time because of the maximum connection age.
   * @return minExpiredConnectionDisconnectInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the minimum length of time that should pass between connection closures as a result of the connections being established for longer than the maximum connection age. This may help avoid cases in which a large number of connections are closed and re-established in a short period of time because of the maximum connection age.")

  public String getMinExpiredConnectionDisconnectInterval() {
    return minExpiredConnectionDisconnectInterval;
  }


  public void setMinExpiredConnectionDisconnectInterval(String minExpiredConnectionDisconnectInterval) {
    
    
    
    this.minExpiredConnectionDisconnectInterval = minExpiredConnectionDisconnectInterval;
  }


  public AddNokiaProxyServerExternalServerRequest connectTimeout(String connectTimeout) {
    
    
    
    
    this.connectTimeout = connectTimeout;
    return this;
  }

   /**
   * Specifies the maximum length of time to wait for a connection to be established before giving up and considering the server unavailable.
   * @return connectTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time to wait for a connection to be established before giving up and considering the server unavailable.")

  public String getConnectTimeout() {
    return connectTimeout;
  }


  public void setConnectTimeout(String connectTimeout) {
    
    
    
    this.connectTimeout = connectTimeout;
  }


  public AddNokiaProxyServerExternalServerRequest maxResponseSize(String maxResponseSize) {
    
    
    
    
    this.maxResponseSize = maxResponseSize;
    return this;
  }

   /**
   * Specifies the maximum response size that should be supported for messages received from the LDAP external server.
   * @return maxResponseSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum response size that should be supported for messages received from the LDAP external server.")

  public String getMaxResponseSize() {
    return maxResponseSize;
  }


  public void setMaxResponseSize(String maxResponseSize) {
    
    
    
    this.maxResponseSize = maxResponseSize;
  }


  public AddNokiaProxyServerExternalServerRequest keyManagerProvider(String keyManagerProvider) {
    
    
    
    
    this.keyManagerProvider = keyManagerProvider;
    return this;
  }

   /**
   * The key manager provider to use if SSL or StartTLS is to be used for connection-level security. When specifying a value for this property (except when using the Null key manager provider) you must ensure that the external server trusts this server&#39;s public certificate by adding this server&#39;s public certificate to the external server&#39;s trust store.
   * @return keyManagerProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key manager provider to use if SSL or StartTLS is to be used for connection-level security. When specifying a value for this property (except when using the Null key manager provider) you must ensure that the external server trusts this server's public certificate by adding this server's public certificate to the external server's trust store.")

  public String getKeyManagerProvider() {
    return keyManagerProvider;
  }


  public void setKeyManagerProvider(String keyManagerProvider) {
    
    
    
    this.keyManagerProvider = keyManagerProvider;
  }


  public AddNokiaProxyServerExternalServerRequest trustManagerProvider(String trustManagerProvider) {
    
    
    
    
    this.trustManagerProvider = trustManagerProvider;
    return this;
  }

   /**
   * The trust manager provider to use if SSL or StartTLS is to be used for connection-level security.
   * @return trustManagerProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The trust manager provider to use if SSL or StartTLS is to be used for connection-level security.")

  public String getTrustManagerProvider() {
    return trustManagerProvider;
  }


  public void setTrustManagerProvider(String trustManagerProvider) {
    
    
    
    this.trustManagerProvider = trustManagerProvider;
  }


  public AddNokiaProxyServerExternalServerRequest initialConnections(Integer initialConnections) {
    
    
    
    
    this.initialConnections = initialConnections;
    return this;
  }

   /**
   * The number of connections to initially establish to the LDAP external server. A value of zero indicates that the number of connections should be dynamically based on the number of available worker threads. This will be ignored when using a thread-local connection pool.
   * @return initialConnections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of connections to initially establish to the LDAP external server. A value of zero indicates that the number of connections should be dynamically based on the number of available worker threads. This will be ignored when using a thread-local connection pool.")

  public Integer getInitialConnections() {
    return initialConnections;
  }


  public void setInitialConnections(Integer initialConnections) {
    
    
    
    this.initialConnections = initialConnections;
  }


  public AddNokiaProxyServerExternalServerRequest maxConnections(Integer maxConnections) {
    
    
    
    
    this.maxConnections = maxConnections;
    return this;
  }

   /**
   * The maximum number of concurrent connections to maintain for the LDAP external server. A value of zero indicates that the number of connections should be dynamically based on the number of available worker threads. This will be ignored when using a thread-local connection pool.
   * @return maxConnections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of concurrent connections to maintain for the LDAP external server. A value of zero indicates that the number of connections should be dynamically based on the number of available worker threads. This will be ignored when using a thread-local connection pool.")

  public Integer getMaxConnections() {
    return maxConnections;
  }


  public void setMaxConnections(Integer maxConnections) {
    
    
    
    this.maxConnections = maxConnections;
  }


  public AddNokiaProxyServerExternalServerRequest defunctConnectionResultCode(List<EnumexternalServerDefunctConnectionResultCodeProp> defunctConnectionResultCode) {
    
    
    
    
    this.defunctConnectionResultCode = defunctConnectionResultCode;
    return this;
  }

  public AddNokiaProxyServerExternalServerRequest addDefunctConnectionResultCodeItem(EnumexternalServerDefunctConnectionResultCodeProp defunctConnectionResultCodeItem) {
    if (this.defunctConnectionResultCode == null) {
      this.defunctConnectionResultCode = new ArrayList<>();
    }
    this.defunctConnectionResultCode.add(defunctConnectionResultCodeItem);
    return this;
  }

   /**
   * Get defunctConnectionResultCode
   * @return defunctConnectionResultCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumexternalServerDefunctConnectionResultCodeProp> getDefunctConnectionResultCode() {
    return defunctConnectionResultCode;
  }


  public void setDefunctConnectionResultCode(List<EnumexternalServerDefunctConnectionResultCodeProp> defunctConnectionResultCode) {
    
    
    
    this.defunctConnectionResultCode = defunctConnectionResultCode;
  }


  public AddNokiaProxyServerExternalServerRequest abandonOnTimeout(Boolean abandonOnTimeout) {
    
    
    
    
    this.abandonOnTimeout = abandonOnTimeout;
    return this;
  }

   /**
   * Indicates whether to send an abandon request for an operation for which a response timeout is encountered. A request which has timed out on one server may be retried on another server regardless of whether an abandon request is sent, but if the initial attempt is not abandoned then a long-running operation may unnecessarily continue to consume processing resources on the initial server.
   * @return abandonOnTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to send an abandon request for an operation for which a response timeout is encountered. A request which has timed out on one server may be retried on another server regardless of whether an abandon request is sent, but if the initial attempt is not abandoned then a long-running operation may unnecessarily continue to consume processing resources on the initial server.")

  public Boolean getAbandonOnTimeout() {
    return abandonOnTimeout;
  }


  public void setAbandonOnTimeout(Boolean abandonOnTimeout) {
    
    
    
    this.abandonOnTimeout = abandonOnTimeout;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddNokiaProxyServerExternalServerRequest instance itself
   */
  public AddNokiaProxyServerExternalServerRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddNokiaProxyServerExternalServerRequest addNokiaProxyServerExternalServerRequest = (AddNokiaProxyServerExternalServerRequest) o;
    return Objects.equals(this.serverName, addNokiaProxyServerExternalServerRequest.serverName) &&
        Objects.equals(this.description, addNokiaProxyServerExternalServerRequest.description) &&
        Objects.equals(this.schemas, addNokiaProxyServerExternalServerRequest.schemas) &&
        Objects.equals(this.verifyCredentialsMethod, addNokiaProxyServerExternalServerRequest.verifyCredentialsMethod) &&
        Objects.equals(this.useAdministrativeOperationControl, addNokiaProxyServerExternalServerRequest.useAdministrativeOperationControl) &&
        Objects.equals(this.serverHostName, addNokiaProxyServerExternalServerRequest.serverHostName) &&
        Objects.equals(this.serverPort, addNokiaProxyServerExternalServerRequest.serverPort) &&
        Objects.equals(this.location, addNokiaProxyServerExternalServerRequest.location) &&
        Objects.equals(this.bindDN, addNokiaProxyServerExternalServerRequest.bindDN) &&
        Objects.equals(this.password, addNokiaProxyServerExternalServerRequest.password) &&
        Objects.equals(this.passphraseProvider, addNokiaProxyServerExternalServerRequest.passphraseProvider) &&
        Objects.equals(this.connectionSecurity, addNokiaProxyServerExternalServerRequest.connectionSecurity) &&
        Objects.equals(this.authenticationMethod, addNokiaProxyServerExternalServerRequest.authenticationMethod) &&
        Objects.equals(this.healthCheckConnectTimeout, addNokiaProxyServerExternalServerRequest.healthCheckConnectTimeout) &&
        Objects.equals(this.maxConnectionAge, addNokiaProxyServerExternalServerRequest.maxConnectionAge) &&
        Objects.equals(this.minExpiredConnectionDisconnectInterval, addNokiaProxyServerExternalServerRequest.minExpiredConnectionDisconnectInterval) &&
        Objects.equals(this.connectTimeout, addNokiaProxyServerExternalServerRequest.connectTimeout) &&
        Objects.equals(this.maxResponseSize, addNokiaProxyServerExternalServerRequest.maxResponseSize) &&
        Objects.equals(this.keyManagerProvider, addNokiaProxyServerExternalServerRequest.keyManagerProvider) &&
        Objects.equals(this.trustManagerProvider, addNokiaProxyServerExternalServerRequest.trustManagerProvider) &&
        Objects.equals(this.initialConnections, addNokiaProxyServerExternalServerRequest.initialConnections) &&
        Objects.equals(this.maxConnections, addNokiaProxyServerExternalServerRequest.maxConnections) &&
        Objects.equals(this.defunctConnectionResultCode, addNokiaProxyServerExternalServerRequest.defunctConnectionResultCode) &&
        Objects.equals(this.abandonOnTimeout, addNokiaProxyServerExternalServerRequest.abandonOnTimeout)&&
        Objects.equals(this.additionalProperties, addNokiaProxyServerExternalServerRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverName, description, schemas, verifyCredentialsMethod, useAdministrativeOperationControl, serverHostName, serverPort, location, bindDN, password, passphraseProvider, connectionSecurity, authenticationMethod, healthCheckConnectTimeout, maxConnectionAge, minExpiredConnectionDisconnectInterval, connectTimeout, maxResponseSize, keyManagerProvider, trustManagerProvider, initialConnections, maxConnections, defunctConnectionResultCode, abandonOnTimeout, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddNokiaProxyServerExternalServerRequest {\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    verifyCredentialsMethod: ").append(toIndentedString(verifyCredentialsMethod)).append("\n");
    sb.append("    useAdministrativeOperationControl: ").append(toIndentedString(useAdministrativeOperationControl)).append("\n");
    sb.append("    serverHostName: ").append(toIndentedString(serverHostName)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    bindDN: ").append(toIndentedString(bindDN)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passphraseProvider: ").append(toIndentedString(passphraseProvider)).append("\n");
    sb.append("    connectionSecurity: ").append(toIndentedString(connectionSecurity)).append("\n");
    sb.append("    authenticationMethod: ").append(toIndentedString(authenticationMethod)).append("\n");
    sb.append("    healthCheckConnectTimeout: ").append(toIndentedString(healthCheckConnectTimeout)).append("\n");
    sb.append("    maxConnectionAge: ").append(toIndentedString(maxConnectionAge)).append("\n");
    sb.append("    minExpiredConnectionDisconnectInterval: ").append(toIndentedString(minExpiredConnectionDisconnectInterval)).append("\n");
    sb.append("    connectTimeout: ").append(toIndentedString(connectTimeout)).append("\n");
    sb.append("    maxResponseSize: ").append(toIndentedString(maxResponseSize)).append("\n");
    sb.append("    keyManagerProvider: ").append(toIndentedString(keyManagerProvider)).append("\n");
    sb.append("    trustManagerProvider: ").append(toIndentedString(trustManagerProvider)).append("\n");
    sb.append("    initialConnections: ").append(toIndentedString(initialConnections)).append("\n");
    sb.append("    maxConnections: ").append(toIndentedString(maxConnections)).append("\n");
    sb.append("    defunctConnectionResultCode: ").append(toIndentedString(defunctConnectionResultCode)).append("\n");
    sb.append("    abandonOnTimeout: ").append(toIndentedString(abandonOnTimeout)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("serverName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("verifyCredentialsMethod");
    openapiFields.add("useAdministrativeOperationControl");
    openapiFields.add("serverHostName");
    openapiFields.add("serverPort");
    openapiFields.add("location");
    openapiFields.add("bindDN");
    openapiFields.add("password");
    openapiFields.add("passphraseProvider");
    openapiFields.add("connectionSecurity");
    openapiFields.add("authenticationMethod");
    openapiFields.add("healthCheckConnectTimeout");
    openapiFields.add("maxConnectionAge");
    openapiFields.add("minExpiredConnectionDisconnectInterval");
    openapiFields.add("connectTimeout");
    openapiFields.add("maxResponseSize");
    openapiFields.add("keyManagerProvider");
    openapiFields.add("trustManagerProvider");
    openapiFields.add("initialConnections");
    openapiFields.add("maxConnections");
    openapiFields.add("defunctConnectionResultCode");
    openapiFields.add("abandonOnTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("serverName");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("serverHostName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddNokiaProxyServerExternalServerRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddNokiaProxyServerExternalServerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddNokiaProxyServerExternalServerRequest is not found in the empty JSON string", AddNokiaProxyServerExternalServerRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddNokiaProxyServerExternalServerRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("serverHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverHostName").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("bindDN") != null && !jsonObj.get("bindDN").isJsonNull()) && !jsonObj.get("bindDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bindDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bindDN").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("passphraseProvider") != null && !jsonObj.get("passphraseProvider").isJsonNull()) && !jsonObj.get("passphraseProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passphraseProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passphraseProvider").toString()));
      }
      if ((jsonObj.get("healthCheckConnectTimeout") != null && !jsonObj.get("healthCheckConnectTimeout").isJsonNull()) && !jsonObj.get("healthCheckConnectTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckConnectTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckConnectTimeout").toString()));
      }
      if ((jsonObj.get("maxConnectionAge") != null && !jsonObj.get("maxConnectionAge").isJsonNull()) && !jsonObj.get("maxConnectionAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxConnectionAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxConnectionAge").toString()));
      }
      if ((jsonObj.get("minExpiredConnectionDisconnectInterval") != null && !jsonObj.get("minExpiredConnectionDisconnectInterval").isJsonNull()) && !jsonObj.get("minExpiredConnectionDisconnectInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minExpiredConnectionDisconnectInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minExpiredConnectionDisconnectInterval").toString()));
      }
      if ((jsonObj.get("connectTimeout") != null && !jsonObj.get("connectTimeout").isJsonNull()) && !jsonObj.get("connectTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectTimeout").toString()));
      }
      if ((jsonObj.get("maxResponseSize") != null && !jsonObj.get("maxResponseSize").isJsonNull()) && !jsonObj.get("maxResponseSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxResponseSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxResponseSize").toString()));
      }
      if ((jsonObj.get("keyManagerProvider") != null && !jsonObj.get("keyManagerProvider").isJsonNull()) && !jsonObj.get("keyManagerProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyManagerProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyManagerProvider").toString()));
      }
      if ((jsonObj.get("trustManagerProvider") != null && !jsonObj.get("trustManagerProvider").isJsonNull()) && !jsonObj.get("trustManagerProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustManagerProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustManagerProvider").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("defunctConnectionResultCode") != null && !jsonObj.get("defunctConnectionResultCode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defunctConnectionResultCode` to be an array in the JSON string but got `%s`", jsonObj.get("defunctConnectionResultCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddNokiaProxyServerExternalServerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddNokiaProxyServerExternalServerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddNokiaProxyServerExternalServerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddNokiaProxyServerExternalServerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddNokiaProxyServerExternalServerRequest>() {
           @Override
           public void write(JsonWriter out, AddNokiaProxyServerExternalServerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddNokiaProxyServerExternalServerRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddNokiaProxyServerExternalServerRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddNokiaProxyServerExternalServerRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddNokiaProxyServerExternalServerRequest
  * @throws IOException if the JSON string is invalid with respect to AddNokiaProxyServerExternalServerRequest
  */
  public static AddNokiaProxyServerExternalServerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddNokiaProxyServerExternalServerRequest.class);
  }

 /**
  * Convert an instance of AddNokiaProxyServerExternalServerRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

