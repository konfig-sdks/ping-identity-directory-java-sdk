/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumhighThroughputWorkQueueSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * HighThroughputWorkQueueResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class HighThroughputWorkQueueResponse {
  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumhighThroughputWorkQueueSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUM_WORKER_THREADS = "numWorkerThreads";
  @SerializedName(SERIALIZED_NAME_NUM_WORKER_THREADS)
  private Integer numWorkerThreads;

  public static final String SERIALIZED_NAME_NUM_WRITE_WORKER_THREADS = "numWriteWorkerThreads";
  @SerializedName(SERIALIZED_NAME_NUM_WRITE_WORKER_THREADS)
  private Integer numWriteWorkerThreads;

  public static final String SERIALIZED_NAME_NUM_ADMINISTRATIVE_SESSION_WORKER_THREADS = "numAdministrativeSessionWorkerThreads";
  @SerializedName(SERIALIZED_NAME_NUM_ADMINISTRATIVE_SESSION_WORKER_THREADS)
  private Integer numAdministrativeSessionWorkerThreads;

  public static final String SERIALIZED_NAME_NUM_QUEUES = "numQueues";
  @SerializedName(SERIALIZED_NAME_NUM_QUEUES)
  private Integer numQueues;

  public static final String SERIALIZED_NAME_NUM_WRITE_QUEUES = "numWriteQueues";
  @SerializedName(SERIALIZED_NAME_NUM_WRITE_QUEUES)
  private Integer numWriteQueues;

  public static final String SERIALIZED_NAME_MAX_WORK_QUEUE_CAPACITY = "maxWorkQueueCapacity";
  @SerializedName(SERIALIZED_NAME_MAX_WORK_QUEUE_CAPACITY)
  private Integer maxWorkQueueCapacity;

  public static final String SERIALIZED_NAME_MAX_OFFER_TIME = "maxOfferTime";
  @SerializedName(SERIALIZED_NAME_MAX_OFFER_TIME)
  private String maxOfferTime;

  public static final String SERIALIZED_NAME_MONITOR_QUEUE_TIME = "monitorQueueTime";
  @SerializedName(SERIALIZED_NAME_MONITOR_QUEUE_TIME)
  private Boolean monitorQueueTime;

  public static final String SERIALIZED_NAME_MAX_QUEUE_TIME = "maxQueueTime";
  @SerializedName(SERIALIZED_NAME_MAX_QUEUE_TIME)
  private String maxQueueTime;

  public static final String SERIALIZED_NAME_EXPENSIVE_OPERATION_CHECK_INTERVAL = "expensiveOperationCheckInterval";
  @SerializedName(SERIALIZED_NAME_EXPENSIVE_OPERATION_CHECK_INTERVAL)
  private String expensiveOperationCheckInterval;

  public static final String SERIALIZED_NAME_EXPENSIVE_OPERATION_MINIMUM_CONCURRENT_COUNT = "expensiveOperationMinimumConcurrentCount";
  @SerializedName(SERIALIZED_NAME_EXPENSIVE_OPERATION_MINIMUM_CONCURRENT_COUNT)
  private Integer expensiveOperationMinimumConcurrentCount;

  public static final String SERIALIZED_NAME_EXPENSIVE_OPERATION_MINIMUM_DUMP_INTERVAL = "expensiveOperationMinimumDumpInterval";
  @SerializedName(SERIALIZED_NAME_EXPENSIVE_OPERATION_MINIMUM_DUMP_INTERVAL)
  private String expensiveOperationMinimumDumpInterval;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public HighThroughputWorkQueueResponse() {
  }

  public HighThroughputWorkQueueResponse schemas(List<EnumhighThroughputWorkQueueSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public HighThroughputWorkQueueResponse addSchemasItem(EnumhighThroughputWorkQueueSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumhighThroughputWorkQueueSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumhighThroughputWorkQueueSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public HighThroughputWorkQueueResponse numWorkerThreads(Integer numWorkerThreads) {
    
    
    
    
    this.numWorkerThreads = numWorkerThreads;
    return this;
  }

   /**
   * Specifies the total number of worker threads that should be used within the server in order to process requested operations. The worker threads will be split evenly across all of the configured queues.
   * @return numWorkerThreads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the total number of worker threads that should be used within the server in order to process requested operations. The worker threads will be split evenly across all of the configured queues.")

  public Integer getNumWorkerThreads() {
    return numWorkerThreads;
  }


  public void setNumWorkerThreads(Integer numWorkerThreads) {
    
    
    
    this.numWorkerThreads = numWorkerThreads;
  }


  public HighThroughputWorkQueueResponse numWriteWorkerThreads(Integer numWriteWorkerThreads) {
    
    
    
    
    this.numWriteWorkerThreads = numWriteWorkerThreads;
    return this;
  }

   /**
   * Specifies the number of worker threads that should be used within the server to process write (add, delete, modify, and modify DN) operations. If this is specified, then separate sets of worker threads will be used for processing read and write operations, and the value of the num-worker-threads property will reflect the number of threads to use to process read operations.
   * @return numWriteWorkerThreads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of worker threads that should be used within the server to process write (add, delete, modify, and modify DN) operations. If this is specified, then separate sets of worker threads will be used for processing read and write operations, and the value of the num-worker-threads property will reflect the number of threads to use to process read operations.")

  public Integer getNumWriteWorkerThreads() {
    return numWriteWorkerThreads;
  }


  public void setNumWriteWorkerThreads(Integer numWriteWorkerThreads) {
    
    
    
    this.numWriteWorkerThreads = numWriteWorkerThreads;
  }


  public HighThroughputWorkQueueResponse numAdministrativeSessionWorkerThreads(Integer numAdministrativeSessionWorkerThreads) {
    
    
    
    
    this.numAdministrativeSessionWorkerThreads = numAdministrativeSessionWorkerThreads;
    return this;
  }

   /**
   * Specifies the number of worker threads that should be used to process operations as part of an administrative session. These threads may be reserved only for special use by management applications like dsconfig, the administration console, and other administrative tools, so that these applications may be used to diagnose problems and take any necessary corrective action even if all \&quot;normal\&quot; worker threads are busy processing other requests.
   * @return numAdministrativeSessionWorkerThreads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of worker threads that should be used to process operations as part of an administrative session. These threads may be reserved only for special use by management applications like dsconfig, the administration console, and other administrative tools, so that these applications may be used to diagnose problems and take any necessary corrective action even if all \"normal\" worker threads are busy processing other requests.")

  public Integer getNumAdministrativeSessionWorkerThreads() {
    return numAdministrativeSessionWorkerThreads;
  }


  public void setNumAdministrativeSessionWorkerThreads(Integer numAdministrativeSessionWorkerThreads) {
    
    
    
    this.numAdministrativeSessionWorkerThreads = numAdministrativeSessionWorkerThreads;
  }


  public HighThroughputWorkQueueResponse numQueues(Integer numQueues) {
    
    
    
    
    this.numQueues = numQueues;
    return this;
  }

   /**
   * Specifies the number of blocking queues that should be maintained. A value of zero indicates that the server should attempt to automatically select an optimal value (one queue for every two worker threads).
   * @return numQueues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of blocking queues that should be maintained. A value of zero indicates that the server should attempt to automatically select an optimal value (one queue for every two worker threads).")

  public Integer getNumQueues() {
    return numQueues;
  }


  public void setNumQueues(Integer numQueues) {
    
    
    
    this.numQueues = numQueues;
  }


  public HighThroughputWorkQueueResponse numWriteQueues(Integer numWriteQueues) {
    
    
    
    
    this.numWriteQueues = numWriteQueues;
    return this;
  }

   /**
   * Specifies the number of blocking queues that should be maintained for write operations. This will only be used if a value is specified for the num-write-worker-threads property, in which case the num-queues property will specify the number of queues for read operations. Otherwise, all operations will be processed by a common set of worker threads and the value of the num-queues property will specify the number of queues for all types of operations.
   * @return numWriteQueues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of blocking queues that should be maintained for write operations. This will only be used if a value is specified for the num-write-worker-threads property, in which case the num-queues property will specify the number of queues for read operations. Otherwise, all operations will be processed by a common set of worker threads and the value of the num-queues property will specify the number of queues for all types of operations.")

  public Integer getNumWriteQueues() {
    return numWriteQueues;
  }


  public void setNumWriteQueues(Integer numWriteQueues) {
    
    
    
    this.numWriteQueues = numWriteQueues;
  }


  public HighThroughputWorkQueueResponse maxWorkQueueCapacity(Integer maxWorkQueueCapacity) {
    
    
    
    
    this.maxWorkQueueCapacity = maxWorkQueueCapacity;
    return this;
  }

   /**
   * Specifies the maximum number of pending operations that may be held in any of the queues at any given time. The total number of pending requests may be as large as this value times the total number of queues.
   * @return maxWorkQueueCapacity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of pending operations that may be held in any of the queues at any given time. The total number of pending requests may be as large as this value times the total number of queues.")

  public Integer getMaxWorkQueueCapacity() {
    return maxWorkQueueCapacity;
  }


  public void setMaxWorkQueueCapacity(Integer maxWorkQueueCapacity) {
    
    
    
    this.maxWorkQueueCapacity = maxWorkQueueCapacity;
  }


  public HighThroughputWorkQueueResponse maxOfferTime(String maxOfferTime) {
    
    
    
    
    this.maxOfferTime = maxOfferTime;
    return this;
  }

   /**
   * Specifies the maximum length of time that the connection handler should be allowed to wait to enqueue a request if the work queue is full. If the attempt to enqueue an operation does not succeed within this period of time, then the operation will be rejected and an error response will be returned to the client. A value of zero indicates that operations should be rejected immediately if the work queue is already at its maximum capacity.
   * @return maxOfferTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that the connection handler should be allowed to wait to enqueue a request if the work queue is full. If the attempt to enqueue an operation does not succeed within this period of time, then the operation will be rejected and an error response will be returned to the client. A value of zero indicates that operations should be rejected immediately if the work queue is already at its maximum capacity.")

  public String getMaxOfferTime() {
    return maxOfferTime;
  }


  public void setMaxOfferTime(String maxOfferTime) {
    
    
    
    this.maxOfferTime = maxOfferTime;
  }


  public HighThroughputWorkQueueResponse monitorQueueTime(Boolean monitorQueueTime) {
    
    
    
    
    this.monitorQueueTime = monitorQueueTime;
    return this;
  }

   /**
   * Indicates whether the work queue should monitor the length of time that operations are held in the queue. When enabled the queue time will be included with access log messages as \&quot;qtime\&quot; in milliseconds.
   * @return monitorQueueTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the work queue should monitor the length of time that operations are held in the queue. When enabled the queue time will be included with access log messages as \"qtime\" in milliseconds.")

  public Boolean getMonitorQueueTime() {
    return monitorQueueTime;
  }


  public void setMonitorQueueTime(Boolean monitorQueueTime) {
    
    
    
    this.monitorQueueTime = monitorQueueTime;
  }


  public HighThroughputWorkQueueResponse maxQueueTime(String maxQueueTime) {
    
    
    
    
    this.maxQueueTime = maxQueueTime;
    return this;
  }

   /**
   * Specifies the maximum length of time that an operation should be allowed to wait on the work queue. If an operation has been waiting on the queue longer than this period of time, then it will receive an immediate failure result rather than being processed once it has been handed off to a worker thread. A value of zero seconds indicates that there should not be any maximum queue time imposed. This setting will only be used if the monitor-queue-time property has a value of true.
   * @return maxQueueTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that an operation should be allowed to wait on the work queue. If an operation has been waiting on the queue longer than this period of time, then it will receive an immediate failure result rather than being processed once it has been handed off to a worker thread. A value of zero seconds indicates that there should not be any maximum queue time imposed. This setting will only be used if the monitor-queue-time property has a value of true.")

  public String getMaxQueueTime() {
    return maxQueueTime;
  }


  public void setMaxQueueTime(String maxQueueTime) {
    
    
    
    this.maxQueueTime = maxQueueTime;
  }


  public HighThroughputWorkQueueResponse expensiveOperationCheckInterval(String expensiveOperationCheckInterval) {
    
    
    
    
    this.expensiveOperationCheckInterval = expensiveOperationCheckInterval;
    return this;
  }

   /**
   * The interval that the work queue should use when checking for potentially expensive operations. If at least expensive-operation-minimum-concurrent-count worker threads are found to be processing the same operation on two consecutive polls separated by this time interval (i.e., the worker thread has been processing that operation for at least this length of time, and potentially up to twice this length of time), then a stack trace of all running threads will be written to a file for analysis to provide potentially useful information that may help better understand the reason it is taking so long. It may be that the operation is simply an expensive one to process, but there may be other external factors (e.g., a database checkpoint, a log rotation, lock contention, etc.) that could be to blame. This option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity support.
   * @return expensiveOperationCheckInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The interval that the work queue should use when checking for potentially expensive operations. If at least expensive-operation-minimum-concurrent-count worker threads are found to be processing the same operation on two consecutive polls separated by this time interval (i.e., the worker thread has been processing that operation for at least this length of time, and potentially up to twice this length of time), then a stack trace of all running threads will be written to a file for analysis to provide potentially useful information that may help better understand the reason it is taking so long. It may be that the operation is simply an expensive one to process, but there may be other external factors (e.g., a database checkpoint, a log rotation, lock contention, etc.) that could be to blame. This option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity support.")

  public String getExpensiveOperationCheckInterval() {
    return expensiveOperationCheckInterval;
  }


  public void setExpensiveOperationCheckInterval(String expensiveOperationCheckInterval) {
    
    
    
    this.expensiveOperationCheckInterval = expensiveOperationCheckInterval;
  }


  public HighThroughputWorkQueueResponse expensiveOperationMinimumConcurrentCount(Integer expensiveOperationMinimumConcurrentCount) {
    
    
    
    
    this.expensiveOperationMinimumConcurrentCount = expensiveOperationMinimumConcurrentCount;
    return this;
  }

   /**
   * The minimum number of concurrent expensive operations that should be detected to trigger dumping stack traces for all threads. If at least this number of worker threads are seen processing the same operations in two consecutive intervals, then the server will dump a stack trace of all threads to a file. This option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity support.
   * @return expensiveOperationMinimumConcurrentCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum number of concurrent expensive operations that should be detected to trigger dumping stack traces for all threads. If at least this number of worker threads are seen processing the same operations in two consecutive intervals, then the server will dump a stack trace of all threads to a file. This option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity support.")

  public Integer getExpensiveOperationMinimumConcurrentCount() {
    return expensiveOperationMinimumConcurrentCount;
  }


  public void setExpensiveOperationMinimumConcurrentCount(Integer expensiveOperationMinimumConcurrentCount) {
    
    
    
    this.expensiveOperationMinimumConcurrentCount = expensiveOperationMinimumConcurrentCount;
  }


  public HighThroughputWorkQueueResponse expensiveOperationMinimumDumpInterval(String expensiveOperationMinimumDumpInterval) {
    
    
    
    
    this.expensiveOperationMinimumDumpInterval = expensiveOperationMinimumDumpInterval;
    return this;
  }

   /**
   * The minimum length of time that should be required to pass after dumping stack trace information for all threads before the server should be allowed to create a second dump. This will help prevent the server from dumping stack traces too frequently and eventually consuming all available disk space with stack trace log output. This option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity support.
   * @return expensiveOperationMinimumDumpInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum length of time that should be required to pass after dumping stack trace information for all threads before the server should be allowed to create a second dump. This will help prevent the server from dumping stack traces too frequently and eventually consuming all available disk space with stack trace log output. This option is primarily intended for debugging purposes and should generally be used under the direction of Ping Identity support.")

  public String getExpensiveOperationMinimumDumpInterval() {
    return expensiveOperationMinimumDumpInterval;
  }


  public void setExpensiveOperationMinimumDumpInterval(String expensiveOperationMinimumDumpInterval) {
    
    
    
    this.expensiveOperationMinimumDumpInterval = expensiveOperationMinimumDumpInterval;
  }


  public HighThroughputWorkQueueResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public HighThroughputWorkQueueResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the HighThroughputWorkQueueResponse instance itself
   */
  public HighThroughputWorkQueueResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HighThroughputWorkQueueResponse highThroughputWorkQueueResponse = (HighThroughputWorkQueueResponse) o;
    return Objects.equals(this.schemas, highThroughputWorkQueueResponse.schemas) &&
        Objects.equals(this.numWorkerThreads, highThroughputWorkQueueResponse.numWorkerThreads) &&
        Objects.equals(this.numWriteWorkerThreads, highThroughputWorkQueueResponse.numWriteWorkerThreads) &&
        Objects.equals(this.numAdministrativeSessionWorkerThreads, highThroughputWorkQueueResponse.numAdministrativeSessionWorkerThreads) &&
        Objects.equals(this.numQueues, highThroughputWorkQueueResponse.numQueues) &&
        Objects.equals(this.numWriteQueues, highThroughputWorkQueueResponse.numWriteQueues) &&
        Objects.equals(this.maxWorkQueueCapacity, highThroughputWorkQueueResponse.maxWorkQueueCapacity) &&
        Objects.equals(this.maxOfferTime, highThroughputWorkQueueResponse.maxOfferTime) &&
        Objects.equals(this.monitorQueueTime, highThroughputWorkQueueResponse.monitorQueueTime) &&
        Objects.equals(this.maxQueueTime, highThroughputWorkQueueResponse.maxQueueTime) &&
        Objects.equals(this.expensiveOperationCheckInterval, highThroughputWorkQueueResponse.expensiveOperationCheckInterval) &&
        Objects.equals(this.expensiveOperationMinimumConcurrentCount, highThroughputWorkQueueResponse.expensiveOperationMinimumConcurrentCount) &&
        Objects.equals(this.expensiveOperationMinimumDumpInterval, highThroughputWorkQueueResponse.expensiveOperationMinimumDumpInterval) &&
        Objects.equals(this.meta, highThroughputWorkQueueResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, highThroughputWorkQueueResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, highThroughputWorkQueueResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, numWorkerThreads, numWriteWorkerThreads, numAdministrativeSessionWorkerThreads, numQueues, numWriteQueues, maxWorkQueueCapacity, maxOfferTime, monitorQueueTime, maxQueueTime, expensiveOperationCheckInterval, expensiveOperationMinimumConcurrentCount, expensiveOperationMinimumDumpInterval, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HighThroughputWorkQueueResponse {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    numWorkerThreads: ").append(toIndentedString(numWorkerThreads)).append("\n");
    sb.append("    numWriteWorkerThreads: ").append(toIndentedString(numWriteWorkerThreads)).append("\n");
    sb.append("    numAdministrativeSessionWorkerThreads: ").append(toIndentedString(numAdministrativeSessionWorkerThreads)).append("\n");
    sb.append("    numQueues: ").append(toIndentedString(numQueues)).append("\n");
    sb.append("    numWriteQueues: ").append(toIndentedString(numWriteQueues)).append("\n");
    sb.append("    maxWorkQueueCapacity: ").append(toIndentedString(maxWorkQueueCapacity)).append("\n");
    sb.append("    maxOfferTime: ").append(toIndentedString(maxOfferTime)).append("\n");
    sb.append("    monitorQueueTime: ").append(toIndentedString(monitorQueueTime)).append("\n");
    sb.append("    maxQueueTime: ").append(toIndentedString(maxQueueTime)).append("\n");
    sb.append("    expensiveOperationCheckInterval: ").append(toIndentedString(expensiveOperationCheckInterval)).append("\n");
    sb.append("    expensiveOperationMinimumConcurrentCount: ").append(toIndentedString(expensiveOperationMinimumConcurrentCount)).append("\n");
    sb.append("    expensiveOperationMinimumDumpInterval: ").append(toIndentedString(expensiveOperationMinimumDumpInterval)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemas");
    openapiFields.add("numWorkerThreads");
    openapiFields.add("numWriteWorkerThreads");
    openapiFields.add("numAdministrativeSessionWorkerThreads");
    openapiFields.add("numQueues");
    openapiFields.add("numWriteQueues");
    openapiFields.add("maxWorkQueueCapacity");
    openapiFields.add("maxOfferTime");
    openapiFields.add("monitorQueueTime");
    openapiFields.add("maxQueueTime");
    openapiFields.add("expensiveOperationCheckInterval");
    openapiFields.add("expensiveOperationMinimumConcurrentCount");
    openapiFields.add("expensiveOperationMinimumDumpInterval");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HighThroughputWorkQueueResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HighThroughputWorkQueueResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HighThroughputWorkQueueResponse is not found in the empty JSON string", HighThroughputWorkQueueResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HighThroughputWorkQueueResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("maxOfferTime") != null && !jsonObj.get("maxOfferTime").isJsonNull()) && !jsonObj.get("maxOfferTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxOfferTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxOfferTime").toString()));
      }
      if ((jsonObj.get("maxQueueTime") != null && !jsonObj.get("maxQueueTime").isJsonNull()) && !jsonObj.get("maxQueueTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxQueueTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxQueueTime").toString()));
      }
      if ((jsonObj.get("expensiveOperationCheckInterval") != null && !jsonObj.get("expensiveOperationCheckInterval").isJsonNull()) && !jsonObj.get("expensiveOperationCheckInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expensiveOperationCheckInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expensiveOperationCheckInterval").toString()));
      }
      if ((jsonObj.get("expensiveOperationMinimumDumpInterval") != null && !jsonObj.get("expensiveOperationMinimumDumpInterval").isJsonNull()) && !jsonObj.get("expensiveOperationMinimumDumpInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expensiveOperationMinimumDumpInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expensiveOperationMinimumDumpInterval").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HighThroughputWorkQueueResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HighThroughputWorkQueueResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HighThroughputWorkQueueResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HighThroughputWorkQueueResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<HighThroughputWorkQueueResponse>() {
           @Override
           public void write(JsonWriter out, HighThroughputWorkQueueResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public HighThroughputWorkQueueResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             HighThroughputWorkQueueResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HighThroughputWorkQueueResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HighThroughputWorkQueueResponse
  * @throws IOException if the JSON string is invalid with respect to HighThroughputWorkQueueResponse
  */
  public static HighThroughputWorkQueueResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HighThroughputWorkQueueResponse.class);
  }

 /**
  * Convert an instance of HighThroughputWorkQueueResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

