/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumidTokenValidatorAllowedSigningAlgorithmProp;
import com.konfigthis.client.model.EnumopenidConnectIdTokenValidatorSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OpenidConnectIdTokenValidatorResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OpenidConnectIdTokenValidatorResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumopenidConnectIdTokenValidatorSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_SIGNING_ALGORITHM = "allowedSigningAlgorithm";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SIGNING_ALGORITHM)
  private List<EnumidTokenValidatorAllowedSigningAlgorithmProp> allowedSigningAlgorithm = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNING_CERTIFICATE = "signingCertificate";
  @SerializedName(SERIALIZED_NAME_SIGNING_CERTIFICATE)
  private List<String> signingCertificate = null;

  public static final String SERIALIZED_NAME_OPEN_I_D_CONNECT_PROVIDER = "OpenIDConnectProvider";
  @SerializedName(SERIALIZED_NAME_OPEN_I_D_CONNECT_PROVIDER)
  private String openIDConnectProvider;

  public static final String SERIALIZED_NAME_JWKS_ENDPOINT_PATH = "jwksEndpointPath";
  @SerializedName(SERIALIZED_NAME_JWKS_ENDPOINT_PATH)
  private String jwksEndpointPath;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_IDENTITY_MAPPER = "identityMapper";
  @SerializedName(SERIALIZED_NAME_IDENTITY_MAPPER)
  private String identityMapper;

  public static final String SERIALIZED_NAME_SUBJECT_CLAIM_NAME = "subjectClaimName";
  @SerializedName(SERIALIZED_NAME_SUBJECT_CLAIM_NAME)
  private String subjectClaimName;

  public static final String SERIALIZED_NAME_ISSUER_U_R_L = "issuerURL";
  @SerializedName(SERIALIZED_NAME_ISSUER_U_R_L)
  private String issuerURL;

  public static final String SERIALIZED_NAME_CLOCK_SKEW_GRACE_PERIOD = "clockSkewGracePeriod";
  @SerializedName(SERIALIZED_NAME_CLOCK_SKEW_GRACE_PERIOD)
  private String clockSkewGracePeriod;

  public static final String SERIALIZED_NAME_JWKS_CACHE_DURATION = "jwksCacheDuration";
  @SerializedName(SERIALIZED_NAME_JWKS_CACHE_DURATION)
  private String jwksCacheDuration;

  public static final String SERIALIZED_NAME_EVALUATION_ORDER_INDEX = "evaluationOrderIndex";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ORDER_INDEX)
  private Integer evaluationOrderIndex;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public OpenidConnectIdTokenValidatorResponse() {
  }

  public OpenidConnectIdTokenValidatorResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the ID Token Validator
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the ID Token Validator")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public OpenidConnectIdTokenValidatorResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this ID Token Validator
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this ID Token Validator")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public OpenidConnectIdTokenValidatorResponse schemas(List<EnumopenidConnectIdTokenValidatorSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public OpenidConnectIdTokenValidatorResponse addSchemasItem(EnumopenidConnectIdTokenValidatorSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumopenidConnectIdTokenValidatorSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumopenidConnectIdTokenValidatorSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public OpenidConnectIdTokenValidatorResponse allowedSigningAlgorithm(List<EnumidTokenValidatorAllowedSigningAlgorithmProp> allowedSigningAlgorithm) {
    
    
    
    
    this.allowedSigningAlgorithm = allowedSigningAlgorithm;
    return this;
  }

  public OpenidConnectIdTokenValidatorResponse addAllowedSigningAlgorithmItem(EnumidTokenValidatorAllowedSigningAlgorithmProp allowedSigningAlgorithmItem) {
    this.allowedSigningAlgorithm.add(allowedSigningAlgorithmItem);
    return this;
  }

   /**
   * Get allowedSigningAlgorithm
   * @return allowedSigningAlgorithm
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumidTokenValidatorAllowedSigningAlgorithmProp> getAllowedSigningAlgorithm() {
    return allowedSigningAlgorithm;
  }


  public void setAllowedSigningAlgorithm(List<EnumidTokenValidatorAllowedSigningAlgorithmProp> allowedSigningAlgorithm) {
    
    
    
    this.allowedSigningAlgorithm = allowedSigningAlgorithm;
  }


  public OpenidConnectIdTokenValidatorResponse signingCertificate(List<String> signingCertificate) {
    
    
    
    
    this.signingCertificate = signingCertificate;
    return this;
  }

  public OpenidConnectIdTokenValidatorResponse addSigningCertificateItem(String signingCertificateItem) {
    if (this.signingCertificate == null) {
      this.signingCertificate = new ArrayList<>();
    }
    this.signingCertificate.add(signingCertificateItem);
    return this;
  }

   /**
   * Specifies the locally stored certificates that may be used to validate the signature of an incoming ID token. This property may be specified if a JWKS endpoint should not be used to retrieve public signing keys.
   * @return signingCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the locally stored certificates that may be used to validate the signature of an incoming ID token. This property may be specified if a JWKS endpoint should not be used to retrieve public signing keys.")

  public List<String> getSigningCertificate() {
    return signingCertificate;
  }


  public void setSigningCertificate(List<String> signingCertificate) {
    
    
    
    this.signingCertificate = signingCertificate;
  }


  public OpenidConnectIdTokenValidatorResponse openIDConnectProvider(String openIDConnectProvider) {
    
    
    
    
    this.openIDConnectProvider = openIDConnectProvider;
    return this;
  }

   /**
   * Specifies the OpenID Connect provider that issues ID tokens handled by this OpenID Connect ID Token Validator. This property is used in conjunction with the jwks-endpoint-path property.
   * @return openIDConnectProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OpenID Connect provider that issues ID tokens handled by this OpenID Connect ID Token Validator. This property is used in conjunction with the jwks-endpoint-path property.")

  public String getOpenIDConnectProvider() {
    return openIDConnectProvider;
  }


  public void setOpenIDConnectProvider(String openIDConnectProvider) {
    
    
    
    this.openIDConnectProvider = openIDConnectProvider;
  }


  public OpenidConnectIdTokenValidatorResponse jwksEndpointPath(String jwksEndpointPath) {
    
    
    
    
    this.jwksEndpointPath = jwksEndpointPath;
    return this;
  }

   /**
   * The relative path to the JWKS endpoint from which to retrieve one or more public signing keys that may be used to validate the signature of an incoming ID token. This path is relative to the base_url property defined for the validator&#39;s OpenID Connect provider. If jwks-endpoint-path is specified, the OpenID Connect ID Token Validator will not consult locally stored certificates for validating token signatures.
   * @return jwksEndpointPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The relative path to the JWKS endpoint from which to retrieve one or more public signing keys that may be used to validate the signature of an incoming ID token. This path is relative to the base_url property defined for the validator's OpenID Connect provider. If jwks-endpoint-path is specified, the OpenID Connect ID Token Validator will not consult locally stored certificates for validating token signatures.")

  public String getJwksEndpointPath() {
    return jwksEndpointPath;
  }


  public void setJwksEndpointPath(String jwksEndpointPath) {
    
    
    
    this.jwksEndpointPath = jwksEndpointPath;
  }


  public OpenidConnectIdTokenValidatorResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether this ID Token Validator is enabled for use in the Directory Server.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether this ID Token Validator is enabled for use in the Directory Server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public OpenidConnectIdTokenValidatorResponse identityMapper(String identityMapper) {
    
    
    
    
    this.identityMapper = identityMapper;
    return this;
  }

   /**
   * Specifies the name of the Identity Mapper that should be used to correlate an ID token subject value to a user entry. The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the subject-claim-name property.
   * @return identityMapper
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the name of the Identity Mapper that should be used to correlate an ID token subject value to a user entry. The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the subject-claim-name property.")

  public String getIdentityMapper() {
    return identityMapper;
  }


  public void setIdentityMapper(String identityMapper) {
    
    
    
    this.identityMapper = identityMapper;
  }


  public OpenidConnectIdTokenValidatorResponse subjectClaimName(String subjectClaimName) {
    
    
    
    
    this.subjectClaimName = subjectClaimName;
    return this;
  }

   /**
   * The name of the token claim that contains the subject; i.e., the authenticated user.
   * @return subjectClaimName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the token claim that contains the subject; i.e., the authenticated user.")

  public String getSubjectClaimName() {
    return subjectClaimName;
  }


  public void setSubjectClaimName(String subjectClaimName) {
    
    
    
    this.subjectClaimName = subjectClaimName;
  }


  public OpenidConnectIdTokenValidatorResponse issuerURL(String issuerURL) {
    
    
    
    
    this.issuerURL = issuerURL;
    return this;
  }

   /**
   * Specifies the OpenID Connect provider&#39;s issuer URL.
   * @return issuerURL
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the OpenID Connect provider's issuer URL.")

  public String getIssuerURL() {
    return issuerURL;
  }


  public void setIssuerURL(String issuerURL) {
    
    
    
    this.issuerURL = issuerURL;
  }


  public OpenidConnectIdTokenValidatorResponse clockSkewGracePeriod(String clockSkewGracePeriod) {
    
    
    
    
    this.clockSkewGracePeriod = clockSkewGracePeriod;
    return this;
  }

   /**
   * Specifies the amount of clock skew that is tolerated by the ID Token Validator when evaluating whether a token is within its valid time interval. The duration specified by this parameter will be subtracted from the token&#39;s not-before (nbf) time and added to the token&#39;s expiration (exp) time, if present, to allow for any time difference between the local server&#39;s clock and the token issuer&#39;s clock.
   * @return clockSkewGracePeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the amount of clock skew that is tolerated by the ID Token Validator when evaluating whether a token is within its valid time interval. The duration specified by this parameter will be subtracted from the token's not-before (nbf) time and added to the token's expiration (exp) time, if present, to allow for any time difference between the local server's clock and the token issuer's clock.")

  public String getClockSkewGracePeriod() {
    return clockSkewGracePeriod;
  }


  public void setClockSkewGracePeriod(String clockSkewGracePeriod) {
    
    
    
    this.clockSkewGracePeriod = clockSkewGracePeriod;
  }


  public OpenidConnectIdTokenValidatorResponse jwksCacheDuration(String jwksCacheDuration) {
    
    
    
    
    this.jwksCacheDuration = jwksCacheDuration;
    return this;
  }

   /**
   * How often the ID Token Validator should refresh its cache of JWKS token signing keys.
   * @return jwksCacheDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How often the ID Token Validator should refresh its cache of JWKS token signing keys.")

  public String getJwksCacheDuration() {
    return jwksCacheDuration;
  }


  public void setJwksCacheDuration(String jwksCacheDuration) {
    
    
    
    this.jwksCacheDuration = jwksCacheDuration;
  }


  public OpenidConnectIdTokenValidatorResponse evaluationOrderIndex(Integer evaluationOrderIndex) {
    
    
    
    
    this.evaluationOrderIndex = evaluationOrderIndex;
    return this;
  }

   /**
   * When multiple ID Token Validators are defined for a single Directory Server, this property determines the order in which the ID Token Validators are consulted. Values of this property must be unique among all ID Token Validators defined within Directory Server but not necessarily contiguous. ID Token Validators with lower values will be evaluated first to determine if they are able to validate the ID token.
   * @return evaluationOrderIndex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "When multiple ID Token Validators are defined for a single Directory Server, this property determines the order in which the ID Token Validators are consulted. Values of this property must be unique among all ID Token Validators defined within Directory Server but not necessarily contiguous. ID Token Validators with lower values will be evaluated first to determine if they are able to validate the ID token.")

  public Integer getEvaluationOrderIndex() {
    return evaluationOrderIndex;
  }


  public void setEvaluationOrderIndex(Integer evaluationOrderIndex) {
    
    
    
    this.evaluationOrderIndex = evaluationOrderIndex;
  }


  public OpenidConnectIdTokenValidatorResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public OpenidConnectIdTokenValidatorResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OpenidConnectIdTokenValidatorResponse instance itself
   */
  public OpenidConnectIdTokenValidatorResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenidConnectIdTokenValidatorResponse openidConnectIdTokenValidatorResponse = (OpenidConnectIdTokenValidatorResponse) o;
    return Objects.equals(this.id, openidConnectIdTokenValidatorResponse.id) &&
        Objects.equals(this.description, openidConnectIdTokenValidatorResponse.description) &&
        Objects.equals(this.schemas, openidConnectIdTokenValidatorResponse.schemas) &&
        Objects.equals(this.allowedSigningAlgorithm, openidConnectIdTokenValidatorResponse.allowedSigningAlgorithm) &&
        Objects.equals(this.signingCertificate, openidConnectIdTokenValidatorResponse.signingCertificate) &&
        Objects.equals(this.openIDConnectProvider, openidConnectIdTokenValidatorResponse.openIDConnectProvider) &&
        Objects.equals(this.jwksEndpointPath, openidConnectIdTokenValidatorResponse.jwksEndpointPath) &&
        Objects.equals(this.enabled, openidConnectIdTokenValidatorResponse.enabled) &&
        Objects.equals(this.identityMapper, openidConnectIdTokenValidatorResponse.identityMapper) &&
        Objects.equals(this.subjectClaimName, openidConnectIdTokenValidatorResponse.subjectClaimName) &&
        Objects.equals(this.issuerURL, openidConnectIdTokenValidatorResponse.issuerURL) &&
        Objects.equals(this.clockSkewGracePeriod, openidConnectIdTokenValidatorResponse.clockSkewGracePeriod) &&
        Objects.equals(this.jwksCacheDuration, openidConnectIdTokenValidatorResponse.jwksCacheDuration) &&
        Objects.equals(this.evaluationOrderIndex, openidConnectIdTokenValidatorResponse.evaluationOrderIndex) &&
        Objects.equals(this.meta, openidConnectIdTokenValidatorResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, openidConnectIdTokenValidatorResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, openidConnectIdTokenValidatorResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, allowedSigningAlgorithm, signingCertificate, openIDConnectProvider, jwksEndpointPath, enabled, identityMapper, subjectClaimName, issuerURL, clockSkewGracePeriod, jwksCacheDuration, evaluationOrderIndex, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenidConnectIdTokenValidatorResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    allowedSigningAlgorithm: ").append(toIndentedString(allowedSigningAlgorithm)).append("\n");
    sb.append("    signingCertificate: ").append(toIndentedString(signingCertificate)).append("\n");
    sb.append("    openIDConnectProvider: ").append(toIndentedString(openIDConnectProvider)).append("\n");
    sb.append("    jwksEndpointPath: ").append(toIndentedString(jwksEndpointPath)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    identityMapper: ").append(toIndentedString(identityMapper)).append("\n");
    sb.append("    subjectClaimName: ").append(toIndentedString(subjectClaimName)).append("\n");
    sb.append("    issuerURL: ").append(toIndentedString(issuerURL)).append("\n");
    sb.append("    clockSkewGracePeriod: ").append(toIndentedString(clockSkewGracePeriod)).append("\n");
    sb.append("    jwksCacheDuration: ").append(toIndentedString(jwksCacheDuration)).append("\n");
    sb.append("    evaluationOrderIndex: ").append(toIndentedString(evaluationOrderIndex)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("allowedSigningAlgorithm");
    openapiFields.add("signingCertificate");
    openapiFields.add("OpenIDConnectProvider");
    openapiFields.add("jwksEndpointPath");
    openapiFields.add("enabled");
    openapiFields.add("identityMapper");
    openapiFields.add("subjectClaimName");
    openapiFields.add("issuerURL");
    openapiFields.add("clockSkewGracePeriod");
    openapiFields.add("jwksCacheDuration");
    openapiFields.add("evaluationOrderIndex");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("allowedSigningAlgorithm");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("identityMapper");
    openapiRequiredFields.add("issuerURL");
    openapiRequiredFields.add("evaluationOrderIndex");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OpenidConnectIdTokenValidatorResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OpenidConnectIdTokenValidatorResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenidConnectIdTokenValidatorResponse is not found in the empty JSON string", OpenidConnectIdTokenValidatorResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OpenidConnectIdTokenValidatorResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allowedSigningAlgorithm") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowedSigningAlgorithm").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedSigningAlgorithm` to be an array in the JSON string but got `%s`", jsonObj.get("allowedSigningAlgorithm").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("signingCertificate") != null && !jsonObj.get("signingCertificate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingCertificate` to be an array in the JSON string but got `%s`", jsonObj.get("signingCertificate").toString()));
      }
      if ((jsonObj.get("OpenIDConnectProvider") != null && !jsonObj.get("OpenIDConnectProvider").isJsonNull()) && !jsonObj.get("OpenIDConnectProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OpenIDConnectProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OpenIDConnectProvider").toString()));
      }
      if ((jsonObj.get("jwksEndpointPath") != null && !jsonObj.get("jwksEndpointPath").isJsonNull()) && !jsonObj.get("jwksEndpointPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwksEndpointPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwksEndpointPath").toString()));
      }
      if (!jsonObj.get("identityMapper").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityMapper` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityMapper").toString()));
      }
      if ((jsonObj.get("subjectClaimName") != null && !jsonObj.get("subjectClaimName").isJsonNull()) && !jsonObj.get("subjectClaimName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectClaimName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectClaimName").toString()));
      }
      if (!jsonObj.get("issuerURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerURL").toString()));
      }
      if ((jsonObj.get("clockSkewGracePeriod") != null && !jsonObj.get("clockSkewGracePeriod").isJsonNull()) && !jsonObj.get("clockSkewGracePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clockSkewGracePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clockSkewGracePeriod").toString()));
      }
      if ((jsonObj.get("jwksCacheDuration") != null && !jsonObj.get("jwksCacheDuration").isJsonNull()) && !jsonObj.get("jwksCacheDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwksCacheDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwksCacheDuration").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenidConnectIdTokenValidatorResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenidConnectIdTokenValidatorResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenidConnectIdTokenValidatorResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenidConnectIdTokenValidatorResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenidConnectIdTokenValidatorResponse>() {
           @Override
           public void write(JsonWriter out, OpenidConnectIdTokenValidatorResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenidConnectIdTokenValidatorResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OpenidConnectIdTokenValidatorResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OpenidConnectIdTokenValidatorResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OpenidConnectIdTokenValidatorResponse
  * @throws IOException if the JSON string is invalid with respect to OpenidConnectIdTokenValidatorResponse
  */
  public static OpenidConnectIdTokenValidatorResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenidConnectIdTokenValidatorResponse.class);
  }

 /**
  * Convert an instance of OpenidConnectIdTokenValidatorResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

