/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumcryptoManagerSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CryptoManagerResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CryptoManagerResponseAllOf {
  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumcryptoManagerSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM = "digestAlgorithm";
  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM)
  private String digestAlgorithm;

  public static final String SERIALIZED_NAME_MAC_ALGORITHM = "macAlgorithm";
  @SerializedName(SERIALIZED_NAME_MAC_ALGORITHM)
  private String macAlgorithm;

  public static final String SERIALIZED_NAME_MAC_KEY_LENGTH = "macKeyLength";
  @SerializedName(SERIALIZED_NAME_MAC_KEY_LENGTH)
  private Integer macKeyLength;

  public static final String SERIALIZED_NAME_SIGNING_ENCRYPTION_SETTINGS_I_D = "signingEncryptionSettingsID";
  @SerializedName(SERIALIZED_NAME_SIGNING_ENCRYPTION_SETTINGS_I_D)
  private String signingEncryptionSettingsID;

  public static final String SERIALIZED_NAME_CIPHER_TRANSFORMATION = "cipherTransformation";
  @SerializedName(SERIALIZED_NAME_CIPHER_TRANSFORMATION)
  private String cipherTransformation;

  public static final String SERIALIZED_NAME_CIPHER_KEY_LENGTH = "cipherKeyLength";
  @SerializedName(SERIALIZED_NAME_CIPHER_KEY_LENGTH)
  private Integer cipherKeyLength;

  public static final String SERIALIZED_NAME_KEY_WRAPPING_TRANSFORMATION = "keyWrappingTransformation";
  @SerializedName(SERIALIZED_NAME_KEY_WRAPPING_TRANSFORMATION)
  private String keyWrappingTransformation;

  public static final String SERIALIZED_NAME_SSL_PROTOCOL = "sslProtocol";
  @SerializedName(SERIALIZED_NAME_SSL_PROTOCOL)
  private List<String> sslProtocol = null;

  public static final String SERIALIZED_NAME_SSL_CIPHER_SUITE = "sslCipherSuite";
  @SerializedName(SERIALIZED_NAME_SSL_CIPHER_SUITE)
  private List<String> sslCipherSuite = null;

  public static final String SERIALIZED_NAME_OUTBOUND_S_S_L_PROTOCOL = "outboundSSLProtocol";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_S_S_L_PROTOCOL)
  private List<String> outboundSSLProtocol = null;

  public static final String SERIALIZED_NAME_OUTBOUND_S_S_L_CIPHER_SUITE = "outboundSSLCipherSuite";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_S_S_L_CIPHER_SUITE)
  private List<String> outboundSSLCipherSuite = null;

  public static final String SERIALIZED_NAME_ENABLE_SHA1_CIPHER_SUITES = "enableSha1CipherSuites";
  @SerializedName(SERIALIZED_NAME_ENABLE_SHA1_CIPHER_SUITES)
  private Boolean enableSha1CipherSuites;

  public static final String SERIALIZED_NAME_ENABLE_RSA_KEY_EXCHANGE_CIPHER_SUITES = "enableRsaKeyExchangeCipherSuites";
  @SerializedName(SERIALIZED_NAME_ENABLE_RSA_KEY_EXCHANGE_CIPHER_SUITES)
  private Boolean enableRsaKeyExchangeCipherSuites;

  public static final String SERIALIZED_NAME_SSL_CERT_NICKNAME = "sslCertNickname";
  @SerializedName(SERIALIZED_NAME_SSL_CERT_NICKNAME)
  private String sslCertNickname;

  public CryptoManagerResponseAllOf() {
  }

  public CryptoManagerResponseAllOf schemas(List<EnumcryptoManagerSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public CryptoManagerResponseAllOf addSchemasItem(EnumcryptoManagerSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumcryptoManagerSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumcryptoManagerSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public CryptoManagerResponseAllOf digestAlgorithm(String digestAlgorithm) {
    
    
    
    
    this.digestAlgorithm = digestAlgorithm;
    return this;
  }

   /**
   * Specifies the preferred message digest algorithm for the Directory Server.
   * @return digestAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the preferred message digest algorithm for the Directory Server.")

  public String getDigestAlgorithm() {
    return digestAlgorithm;
  }


  public void setDigestAlgorithm(String digestAlgorithm) {
    
    
    
    this.digestAlgorithm = digestAlgorithm;
  }


  public CryptoManagerResponseAllOf macAlgorithm(String macAlgorithm) {
    
    
    
    
    this.macAlgorithm = macAlgorithm;
    return this;
  }

   /**
   * Specifies the preferred MAC algorithm for the Directory Server.
   * @return macAlgorithm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the preferred MAC algorithm for the Directory Server.")

  public String getMacAlgorithm() {
    return macAlgorithm;
  }


  public void setMacAlgorithm(String macAlgorithm) {
    
    
    
    this.macAlgorithm = macAlgorithm;
  }


  public CryptoManagerResponseAllOf macKeyLength(Integer macKeyLength) {
    
    
    
    
    this.macKeyLength = macKeyLength;
    return this;
  }

   /**
   * Specifies the key length in bits for the preferred MAC algorithm.
   * @return macKeyLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the key length in bits for the preferred MAC algorithm.")

  public Integer getMacKeyLength() {
    return macKeyLength;
  }


  public void setMacKeyLength(Integer macKeyLength) {
    
    
    
    this.macKeyLength = macKeyLength;
  }


  public CryptoManagerResponseAllOf signingEncryptionSettingsID(String signingEncryptionSettingsID) {
    
    
    
    
    this.signingEncryptionSettingsID = signingEncryptionSettingsID;
    return this;
  }

   /**
   * The ID of the encryption settings definition to use for generating digital signatures. If this is not specified, then the server&#39;s preferred encryption settings definition will be used.
   * @return signingEncryptionSettingsID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the encryption settings definition to use for generating digital signatures. If this is not specified, then the server's preferred encryption settings definition will be used.")

  public String getSigningEncryptionSettingsID() {
    return signingEncryptionSettingsID;
  }


  public void setSigningEncryptionSettingsID(String signingEncryptionSettingsID) {
    
    
    
    this.signingEncryptionSettingsID = signingEncryptionSettingsID;
  }


  public CryptoManagerResponseAllOf cipherTransformation(String cipherTransformation) {
    
    
    
    
    this.cipherTransformation = cipherTransformation;
    return this;
  }

   /**
   * Specifies the cipher for the Directory Server using the syntax algorithm/mode/padding.
   * @return cipherTransformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the cipher for the Directory Server using the syntax algorithm/mode/padding.")

  public String getCipherTransformation() {
    return cipherTransformation;
  }


  public void setCipherTransformation(String cipherTransformation) {
    
    
    
    this.cipherTransformation = cipherTransformation;
  }


  public CryptoManagerResponseAllOf cipherKeyLength(Integer cipherKeyLength) {
    
    
    
    
    this.cipherKeyLength = cipherKeyLength;
    return this;
  }

   /**
   * Specifies the key length in bits for the preferred cipher.
   * @return cipherKeyLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the key length in bits for the preferred cipher.")

  public Integer getCipherKeyLength() {
    return cipherKeyLength;
  }


  public void setCipherKeyLength(Integer cipherKeyLength) {
    
    
    
    this.cipherKeyLength = cipherKeyLength;
  }


  public CryptoManagerResponseAllOf keyWrappingTransformation(String keyWrappingTransformation) {
    
    
    
    
    this.keyWrappingTransformation = keyWrappingTransformation;
    return this;
  }

   /**
   * The preferred key wrapping transformation for the Directory Server. This value must be the same for all server instances in a replication topology.
   * @return keyWrappingTransformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The preferred key wrapping transformation for the Directory Server. This value must be the same for all server instances in a replication topology.")

  public String getKeyWrappingTransformation() {
    return keyWrappingTransformation;
  }


  public void setKeyWrappingTransformation(String keyWrappingTransformation) {
    
    
    
    this.keyWrappingTransformation = keyWrappingTransformation;
  }


  public CryptoManagerResponseAllOf sslProtocol(List<String> sslProtocol) {
    
    
    
    
    this.sslProtocol = sslProtocol;
    return this;
  }

  public CryptoManagerResponseAllOf addSslProtocolItem(String sslProtocolItem) {
    if (this.sslProtocol == null) {
      this.sslProtocol = new ArrayList<>();
    }
    this.sslProtocol.add(sslProtocolItem);
    return this;
  }

   /**
   * Specifies the names of TLS protocols that are allowed for use in secure communication.
   * @return sslProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of TLS protocols that are allowed for use in secure communication.")

  public List<String> getSslProtocol() {
    return sslProtocol;
  }


  public void setSslProtocol(List<String> sslProtocol) {
    
    
    
    this.sslProtocol = sslProtocol;
  }


  public CryptoManagerResponseAllOf sslCipherSuite(List<String> sslCipherSuite) {
    
    
    
    
    this.sslCipherSuite = sslCipherSuite;
    return this;
  }

  public CryptoManagerResponseAllOf addSslCipherSuiteItem(String sslCipherSuiteItem) {
    if (this.sslCipherSuite == null) {
      this.sslCipherSuite = new ArrayList<>();
    }
    this.sslCipherSuite.add(sslCipherSuiteItem);
    return this;
  }

   /**
   * Specifies the names of the TLS cipher suites that are allowed for use in secure communication.
   * @return sslCipherSuite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the TLS cipher suites that are allowed for use in secure communication.")

  public List<String> getSslCipherSuite() {
    return sslCipherSuite;
  }


  public void setSslCipherSuite(List<String> sslCipherSuite) {
    
    
    
    this.sslCipherSuite = sslCipherSuite;
  }


  public CryptoManagerResponseAllOf outboundSSLProtocol(List<String> outboundSSLProtocol) {
    
    
    
    
    this.outboundSSLProtocol = outboundSSLProtocol;
    return this;
  }

  public CryptoManagerResponseAllOf addOutboundSSLProtocolItem(String outboundSSLProtocolItem) {
    if (this.outboundSSLProtocol == null) {
      this.outboundSSLProtocol = new ArrayList<>();
    }
    this.outboundSSLProtocol.add(outboundSSLProtocolItem);
    return this;
  }

   /**
   * Specifies the names of the TLS protocols that will be enabled for outbound connections initiated by the Directory Server.
   * @return outboundSSLProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the TLS protocols that will be enabled for outbound connections initiated by the Directory Server.")

  public List<String> getOutboundSSLProtocol() {
    return outboundSSLProtocol;
  }


  public void setOutboundSSLProtocol(List<String> outboundSSLProtocol) {
    
    
    
    this.outboundSSLProtocol = outboundSSLProtocol;
  }


  public CryptoManagerResponseAllOf outboundSSLCipherSuite(List<String> outboundSSLCipherSuite) {
    
    
    
    
    this.outboundSSLCipherSuite = outboundSSLCipherSuite;
    return this;
  }

  public CryptoManagerResponseAllOf addOutboundSSLCipherSuiteItem(String outboundSSLCipherSuiteItem) {
    if (this.outboundSSLCipherSuite == null) {
      this.outboundSSLCipherSuite = new ArrayList<>();
    }
    this.outboundSSLCipherSuite.add(outboundSSLCipherSuiteItem);
    return this;
  }

   /**
   * Specifies the names of the TLS cipher suites that will be enabled for outbound connections initiated by the Directory Server.
   * @return outboundSSLCipherSuite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the TLS cipher suites that will be enabled for outbound connections initiated by the Directory Server.")

  public List<String> getOutboundSSLCipherSuite() {
    return outboundSSLCipherSuite;
  }


  public void setOutboundSSLCipherSuite(List<String> outboundSSLCipherSuite) {
    
    
    
    this.outboundSSLCipherSuite = outboundSSLCipherSuite;
  }


  public CryptoManagerResponseAllOf enableSha1CipherSuites(Boolean enableSha1CipherSuites) {
    
    
    
    
    this.enableSha1CipherSuites = enableSha1CipherSuites;
    return this;
  }

   /**
   * Indicates whether to enable support for TLS cipher suites that use the SHA-1 digest algorithm. The SHA-1 digest algorithm is no longer considered secure and is not recommended for use.
   * @return enableSha1CipherSuites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to enable support for TLS cipher suites that use the SHA-1 digest algorithm. The SHA-1 digest algorithm is no longer considered secure and is not recommended for use.")

  public Boolean getEnableSha1CipherSuites() {
    return enableSha1CipherSuites;
  }


  public void setEnableSha1CipherSuites(Boolean enableSha1CipherSuites) {
    
    
    
    this.enableSha1CipherSuites = enableSha1CipherSuites;
  }


  public CryptoManagerResponseAllOf enableRsaKeyExchangeCipherSuites(Boolean enableRsaKeyExchangeCipherSuites) {
    
    
    
    
    this.enableRsaKeyExchangeCipherSuites = enableRsaKeyExchangeCipherSuites;
    return this;
  }

   /**
   * Indicates whether to enable support for TLS cipher suites that use the RSA key exchange algorithm. Cipher suites that rely on RSA key exchange are not recommended because they do not support forward secrecy, which means that if the private key is compromised, then any communication negotiated using that private key should also be considered compromised.
   * @return enableRsaKeyExchangeCipherSuites
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to enable support for TLS cipher suites that use the RSA key exchange algorithm. Cipher suites that rely on RSA key exchange are not recommended because they do not support forward secrecy, which means that if the private key is compromised, then any communication negotiated using that private key should also be considered compromised.")

  public Boolean getEnableRsaKeyExchangeCipherSuites() {
    return enableRsaKeyExchangeCipherSuites;
  }


  public void setEnableRsaKeyExchangeCipherSuites(Boolean enableRsaKeyExchangeCipherSuites) {
    
    
    
    this.enableRsaKeyExchangeCipherSuites = enableRsaKeyExchangeCipherSuites;
  }


  public CryptoManagerResponseAllOf sslCertNickname(String sslCertNickname) {
    
    
    
    
    this.sslCertNickname = sslCertNickname;
    return this;
  }

   /**
   * Specifies the nickname (also called the alias) of the certificate that the Crypto Manager should use when performing SSL communication.
   * @return sslCertNickname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the nickname (also called the alias) of the certificate that the Crypto Manager should use when performing SSL communication.")

  public String getSslCertNickname() {
    return sslCertNickname;
  }


  public void setSslCertNickname(String sslCertNickname) {
    
    
    
    this.sslCertNickname = sslCertNickname;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CryptoManagerResponseAllOf instance itself
   */
  public CryptoManagerResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CryptoManagerResponseAllOf cryptoManagerResponseAllOf = (CryptoManagerResponseAllOf) o;
    return Objects.equals(this.schemas, cryptoManagerResponseAllOf.schemas) &&
        Objects.equals(this.digestAlgorithm, cryptoManagerResponseAllOf.digestAlgorithm) &&
        Objects.equals(this.macAlgorithm, cryptoManagerResponseAllOf.macAlgorithm) &&
        Objects.equals(this.macKeyLength, cryptoManagerResponseAllOf.macKeyLength) &&
        Objects.equals(this.signingEncryptionSettingsID, cryptoManagerResponseAllOf.signingEncryptionSettingsID) &&
        Objects.equals(this.cipherTransformation, cryptoManagerResponseAllOf.cipherTransformation) &&
        Objects.equals(this.cipherKeyLength, cryptoManagerResponseAllOf.cipherKeyLength) &&
        Objects.equals(this.keyWrappingTransformation, cryptoManagerResponseAllOf.keyWrappingTransformation) &&
        Objects.equals(this.sslProtocol, cryptoManagerResponseAllOf.sslProtocol) &&
        Objects.equals(this.sslCipherSuite, cryptoManagerResponseAllOf.sslCipherSuite) &&
        Objects.equals(this.outboundSSLProtocol, cryptoManagerResponseAllOf.outboundSSLProtocol) &&
        Objects.equals(this.outboundSSLCipherSuite, cryptoManagerResponseAllOf.outboundSSLCipherSuite) &&
        Objects.equals(this.enableSha1CipherSuites, cryptoManagerResponseAllOf.enableSha1CipherSuites) &&
        Objects.equals(this.enableRsaKeyExchangeCipherSuites, cryptoManagerResponseAllOf.enableRsaKeyExchangeCipherSuites) &&
        Objects.equals(this.sslCertNickname, cryptoManagerResponseAllOf.sslCertNickname)&&
        Objects.equals(this.additionalProperties, cryptoManagerResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, digestAlgorithm, macAlgorithm, macKeyLength, signingEncryptionSettingsID, cipherTransformation, cipherKeyLength, keyWrappingTransformation, sslProtocol, sslCipherSuite, outboundSSLProtocol, outboundSSLCipherSuite, enableSha1CipherSuites, enableRsaKeyExchangeCipherSuites, sslCertNickname, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CryptoManagerResponseAllOf {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    digestAlgorithm: ").append(toIndentedString(digestAlgorithm)).append("\n");
    sb.append("    macAlgorithm: ").append(toIndentedString(macAlgorithm)).append("\n");
    sb.append("    macKeyLength: ").append(toIndentedString(macKeyLength)).append("\n");
    sb.append("    signingEncryptionSettingsID: ").append(toIndentedString(signingEncryptionSettingsID)).append("\n");
    sb.append("    cipherTransformation: ").append(toIndentedString(cipherTransformation)).append("\n");
    sb.append("    cipherKeyLength: ").append(toIndentedString(cipherKeyLength)).append("\n");
    sb.append("    keyWrappingTransformation: ").append(toIndentedString(keyWrappingTransformation)).append("\n");
    sb.append("    sslProtocol: ").append(toIndentedString(sslProtocol)).append("\n");
    sb.append("    sslCipherSuite: ").append(toIndentedString(sslCipherSuite)).append("\n");
    sb.append("    outboundSSLProtocol: ").append(toIndentedString(outboundSSLProtocol)).append("\n");
    sb.append("    outboundSSLCipherSuite: ").append(toIndentedString(outboundSSLCipherSuite)).append("\n");
    sb.append("    enableSha1CipherSuites: ").append(toIndentedString(enableSha1CipherSuites)).append("\n");
    sb.append("    enableRsaKeyExchangeCipherSuites: ").append(toIndentedString(enableRsaKeyExchangeCipherSuites)).append("\n");
    sb.append("    sslCertNickname: ").append(toIndentedString(sslCertNickname)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemas");
    openapiFields.add("digestAlgorithm");
    openapiFields.add("macAlgorithm");
    openapiFields.add("macKeyLength");
    openapiFields.add("signingEncryptionSettingsID");
    openapiFields.add("cipherTransformation");
    openapiFields.add("cipherKeyLength");
    openapiFields.add("keyWrappingTransformation");
    openapiFields.add("sslProtocol");
    openapiFields.add("sslCipherSuite");
    openapiFields.add("outboundSSLProtocol");
    openapiFields.add("outboundSSLCipherSuite");
    openapiFields.add("enableSha1CipherSuites");
    openapiFields.add("enableRsaKeyExchangeCipherSuites");
    openapiFields.add("sslCertNickname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CryptoManagerResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CryptoManagerResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CryptoManagerResponseAllOf is not found in the empty JSON string", CryptoManagerResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("digestAlgorithm") != null && !jsonObj.get("digestAlgorithm").isJsonNull()) && !jsonObj.get("digestAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digestAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digestAlgorithm").toString()));
      }
      if ((jsonObj.get("macAlgorithm") != null && !jsonObj.get("macAlgorithm").isJsonNull()) && !jsonObj.get("macAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `macAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macAlgorithm").toString()));
      }
      if ((jsonObj.get("signingEncryptionSettingsID") != null && !jsonObj.get("signingEncryptionSettingsID").isJsonNull()) && !jsonObj.get("signingEncryptionSettingsID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingEncryptionSettingsID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signingEncryptionSettingsID").toString()));
      }
      if ((jsonObj.get("cipherTransformation") != null && !jsonObj.get("cipherTransformation").isJsonNull()) && !jsonObj.get("cipherTransformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipherTransformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cipherTransformation").toString()));
      }
      if ((jsonObj.get("keyWrappingTransformation") != null && !jsonObj.get("keyWrappingTransformation").isJsonNull()) && !jsonObj.get("keyWrappingTransformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyWrappingTransformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyWrappingTransformation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sslProtocol") != null && !jsonObj.get("sslProtocol").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslProtocol` to be an array in the JSON string but got `%s`", jsonObj.get("sslProtocol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sslCipherSuite") != null && !jsonObj.get("sslCipherSuite").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslCipherSuite` to be an array in the JSON string but got `%s`", jsonObj.get("sslCipherSuite").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outboundSSLProtocol") != null && !jsonObj.get("outboundSSLProtocol").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outboundSSLProtocol` to be an array in the JSON string but got `%s`", jsonObj.get("outboundSSLProtocol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outboundSSLCipherSuite") != null && !jsonObj.get("outboundSSLCipherSuite").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outboundSSLCipherSuite` to be an array in the JSON string but got `%s`", jsonObj.get("outboundSSLCipherSuite").toString()));
      }
      if ((jsonObj.get("sslCertNickname") != null && !jsonObj.get("sslCertNickname").isJsonNull()) && !jsonObj.get("sslCertNickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslCertNickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslCertNickname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CryptoManagerResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CryptoManagerResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CryptoManagerResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CryptoManagerResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<CryptoManagerResponseAllOf>() {
           @Override
           public void write(JsonWriter out, CryptoManagerResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CryptoManagerResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CryptoManagerResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CryptoManagerResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CryptoManagerResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to CryptoManagerResponseAllOf
  */
  public static CryptoManagerResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CryptoManagerResponseAllOf.class);
  }

 /**
  * Convert an instance of CryptoManagerResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

