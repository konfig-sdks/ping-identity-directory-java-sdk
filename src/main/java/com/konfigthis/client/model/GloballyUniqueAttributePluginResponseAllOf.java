/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumgloballyUniqueAttributePluginSchemaUrn;
import com.konfigthis.client.model.EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp;
import com.konfigthis.client.model.EnumpluginPostCommitValidationProp;
import com.konfigthis.client.model.EnumpluginPreCommitValidationProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GloballyUniqueAttributePluginResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GloballyUniqueAttributePluginResponseAllOf {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumgloballyUniqueAttributePluginSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List<String> type = null;

  public static final String SERIALIZED_NAME_MULTIPLE_ATTRIBUTE_BEHAVIOR = "multipleAttributeBehavior";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_ATTRIBUTE_BEHAVIOR)
  private EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp multipleAttributeBehavior;

  public static final String SERIALIZED_NAME_SUBTREE_VIEW = "subtreeView";
  @SerializedName(SERIALIZED_NAME_SUBTREE_VIEW)
  private List<String> subtreeView = null;

  public static final String SERIALIZED_NAME_PREVENT_CONFLICTS_WITH_SOFT_DELETED_ENTRIES = "preventConflictsWithSoftDeletedEntries";
  @SerializedName(SERIALIZED_NAME_PREVENT_CONFLICTS_WITH_SOFT_DELETED_ENTRIES)
  private Boolean preventConflictsWithSoftDeletedEntries;

  public static final String SERIALIZED_NAME_PRE_COMMIT_VALIDATION = "preCommitValidation";
  @SerializedName(SERIALIZED_NAME_PRE_COMMIT_VALIDATION)
  private EnumpluginPreCommitValidationProp preCommitValidation;

  public static final String SERIALIZED_NAME_POST_COMMIT_VALIDATION = "postCommitValidation";
  @SerializedName(SERIALIZED_NAME_POST_COMMIT_VALIDATION)
  private EnumpluginPostCommitValidationProp postCommitValidation;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS = "invokeForInternalOperations";
  @SerializedName(SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS)
  private Boolean invokeForInternalOperations;

  public GloballyUniqueAttributePluginResponseAllOf() {
  }

  public GloballyUniqueAttributePluginResponseAllOf description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public GloballyUniqueAttributePluginResponseAllOf schemas(List<EnumgloballyUniqueAttributePluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public GloballyUniqueAttributePluginResponseAllOf addSchemasItem(EnumgloballyUniqueAttributePluginSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumgloballyUniqueAttributePluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumgloballyUniqueAttributePluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public GloballyUniqueAttributePluginResponseAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Plugin
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Plugin")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public GloballyUniqueAttributePluginResponseAllOf type(List<String> type) {
    
    
    
    
    this.type = type;
    return this;
  }

  public GloballyUniqueAttributePluginResponseAllOf addTypeItem(String typeItem) {
    if (this.type == null) {
      this.type = new ArrayList<>();
    }
    this.type.add(typeItem);
    return this;
  }

   /**
   * The attribute type(s) for which to enforce global uniqueness. The attribute must be indexed for equality searches in all subtree views for which uniqueness should be maintained.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The attribute type(s) for which to enforce global uniqueness. The attribute must be indexed for equality searches in all subtree views for which uniqueness should be maintained.")

  public List<String> getType() {
    return type;
  }


  public void setType(List<String> type) {
    
    
    
    this.type = type;
  }


  public GloballyUniqueAttributePluginResponseAllOf multipleAttributeBehavior(EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp multipleAttributeBehavior) {
    
    
    
    
    this.multipleAttributeBehavior = multipleAttributeBehavior;
    return this;
  }

   /**
   * Get multipleAttributeBehavior
   * @return multipleAttributeBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp getMultipleAttributeBehavior() {
    return multipleAttributeBehavior;
  }


  public void setMultipleAttributeBehavior(EnumpluginGloballyUniqueAttributeMultipleAttributeBehaviorProp multipleAttributeBehavior) {
    
    
    
    this.multipleAttributeBehavior = multipleAttributeBehavior;
  }


  public GloballyUniqueAttributePluginResponseAllOf subtreeView(List<String> subtreeView) {
    
    
    
    
    this.subtreeView = subtreeView;
    return this;
  }

  public GloballyUniqueAttributePluginResponseAllOf addSubtreeViewItem(String subtreeViewItem) {
    if (this.subtreeView == null) {
      this.subtreeView = new ArrayList<>();
    }
    this.subtreeView.add(subtreeViewItem);
    return this;
  }

   /**
   * The subtree view(s) for which to enforce uniqueness.
   * @return subtreeView
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The subtree view(s) for which to enforce uniqueness.")

  public List<String> getSubtreeView() {
    return subtreeView;
  }


  public void setSubtreeView(List<String> subtreeView) {
    
    
    
    this.subtreeView = subtreeView;
  }


  public GloballyUniqueAttributePluginResponseAllOf preventConflictsWithSoftDeletedEntries(Boolean preventConflictsWithSoftDeletedEntries) {
    
    
    
    
    this.preventConflictsWithSoftDeletedEntries = preventConflictsWithSoftDeletedEntries;
    return this;
  }

   /**
   * Indicates whether this Globally Unique Attribute Plugin should attempt to prevent conflicts with soft-deleted entries (i.e., entries that have been removed in a way that leaves them in the server but in a way that makes them no longer visible to or accessible by normal clients).
   * @return preventConflictsWithSoftDeletedEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this Globally Unique Attribute Plugin should attempt to prevent conflicts with soft-deleted entries (i.e., entries that have been removed in a way that leaves them in the server but in a way that makes them no longer visible to or accessible by normal clients).")

  public Boolean getPreventConflictsWithSoftDeletedEntries() {
    return preventConflictsWithSoftDeletedEntries;
  }


  public void setPreventConflictsWithSoftDeletedEntries(Boolean preventConflictsWithSoftDeletedEntries) {
    
    
    
    this.preventConflictsWithSoftDeletedEntries = preventConflictsWithSoftDeletedEntries;
  }


  public GloballyUniqueAttributePluginResponseAllOf preCommitValidation(EnumpluginPreCommitValidationProp preCommitValidation) {
    
    
    
    
    this.preCommitValidation = preCommitValidation;
    return this;
  }

   /**
   * Get preCommitValidation
   * @return preCommitValidation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginPreCommitValidationProp getPreCommitValidation() {
    return preCommitValidation;
  }


  public void setPreCommitValidation(EnumpluginPreCommitValidationProp preCommitValidation) {
    
    
    
    this.preCommitValidation = preCommitValidation;
  }


  public GloballyUniqueAttributePluginResponseAllOf postCommitValidation(EnumpluginPostCommitValidationProp postCommitValidation) {
    
    
    
    
    this.postCommitValidation = postCommitValidation;
    return this;
  }

   /**
   * Get postCommitValidation
   * @return postCommitValidation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginPostCommitValidationProp getPostCommitValidation() {
    return postCommitValidation;
  }


  public void setPostCommitValidation(EnumpluginPostCommitValidationProp postCommitValidation) {
    
    
    
    this.postCommitValidation = postCommitValidation;
  }


  public GloballyUniqueAttributePluginResponseAllOf filter(String filter) {
    
    
    
    
    this.filter = filter;
    return this;
  }

   /**
   * Specifies the search filter to apply to determine if attribute uniqueness is enforced for the matching entries.
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the search filter to apply to determine if attribute uniqueness is enforced for the matching entries.")

  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    
    
    
    this.filter = filter;
  }


  public GloballyUniqueAttributePluginResponseAllOf enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public GloballyUniqueAttributePluginResponseAllOf invokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
    return this;
  }

   /**
   * Indicates whether the plug-in should be invoked for internal operations.
   * @return invokeForInternalOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the plug-in should be invoked for internal operations.")

  public Boolean getInvokeForInternalOperations() {
    return invokeForInternalOperations;
  }


  public void setInvokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GloballyUniqueAttributePluginResponseAllOf instance itself
   */
  public GloballyUniqueAttributePluginResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GloballyUniqueAttributePluginResponseAllOf globallyUniqueAttributePluginResponseAllOf = (GloballyUniqueAttributePluginResponseAllOf) o;
    return Objects.equals(this.description, globallyUniqueAttributePluginResponseAllOf.description) &&
        Objects.equals(this.schemas, globallyUniqueAttributePluginResponseAllOf.schemas) &&
        Objects.equals(this.id, globallyUniqueAttributePluginResponseAllOf.id) &&
        Objects.equals(this.type, globallyUniqueAttributePluginResponseAllOf.type) &&
        Objects.equals(this.multipleAttributeBehavior, globallyUniqueAttributePluginResponseAllOf.multipleAttributeBehavior) &&
        Objects.equals(this.subtreeView, globallyUniqueAttributePluginResponseAllOf.subtreeView) &&
        Objects.equals(this.preventConflictsWithSoftDeletedEntries, globallyUniqueAttributePluginResponseAllOf.preventConflictsWithSoftDeletedEntries) &&
        Objects.equals(this.preCommitValidation, globallyUniqueAttributePluginResponseAllOf.preCommitValidation) &&
        Objects.equals(this.postCommitValidation, globallyUniqueAttributePluginResponseAllOf.postCommitValidation) &&
        Objects.equals(this.filter, globallyUniqueAttributePluginResponseAllOf.filter) &&
        Objects.equals(this.enabled, globallyUniqueAttributePluginResponseAllOf.enabled) &&
        Objects.equals(this.invokeForInternalOperations, globallyUniqueAttributePluginResponseAllOf.invokeForInternalOperations)&&
        Objects.equals(this.additionalProperties, globallyUniqueAttributePluginResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, type, multipleAttributeBehavior, subtreeView, preventConflictsWithSoftDeletedEntries, preCommitValidation, postCommitValidation, filter, enabled, invokeForInternalOperations, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GloballyUniqueAttributePluginResponseAllOf {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    multipleAttributeBehavior: ").append(toIndentedString(multipleAttributeBehavior)).append("\n");
    sb.append("    subtreeView: ").append(toIndentedString(subtreeView)).append("\n");
    sb.append("    preventConflictsWithSoftDeletedEntries: ").append(toIndentedString(preventConflictsWithSoftDeletedEntries)).append("\n");
    sb.append("    preCommitValidation: ").append(toIndentedString(preCommitValidation)).append("\n");
    sb.append("    postCommitValidation: ").append(toIndentedString(postCommitValidation)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    invokeForInternalOperations: ").append(toIndentedString(invokeForInternalOperations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("multipleAttributeBehavior");
    openapiFields.add("subtreeView");
    openapiFields.add("preventConflictsWithSoftDeletedEntries");
    openapiFields.add("preCommitValidation");
    openapiFields.add("postCommitValidation");
    openapiFields.add("filter");
    openapiFields.add("enabled");
    openapiFields.add("invokeForInternalOperations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GloballyUniqueAttributePluginResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GloballyUniqueAttributePluginResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GloballyUniqueAttributePluginResponseAllOf is not found in the empty JSON string", GloballyUniqueAttributePluginResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be an array in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subtreeView") != null && !jsonObj.get("subtreeView").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtreeView` to be an array in the JSON string but got `%s`", jsonObj.get("subtreeView").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GloballyUniqueAttributePluginResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GloballyUniqueAttributePluginResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GloballyUniqueAttributePluginResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GloballyUniqueAttributePluginResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<GloballyUniqueAttributePluginResponseAllOf>() {
           @Override
           public void write(JsonWriter out, GloballyUniqueAttributePluginResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GloballyUniqueAttributePluginResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GloballyUniqueAttributePluginResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GloballyUniqueAttributePluginResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GloballyUniqueAttributePluginResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to GloballyUniqueAttributePluginResponseAllOf
  */
  public static GloballyUniqueAttributePluginResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GloballyUniqueAttributePluginResponseAllOf.class);
  }

 /**
  * Convert an instance of GloballyUniqueAttributePluginResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

