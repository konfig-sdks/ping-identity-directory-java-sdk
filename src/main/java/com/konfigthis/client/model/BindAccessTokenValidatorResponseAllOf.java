/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumaccessTokenValidatorAllowedAuthenticationTypeProp;
import com.konfigthis.client.model.EnumbindAccessTokenValidatorSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BindAccessTokenValidatorResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BindAccessTokenValidatorResponseAllOf {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumbindAccessTokenValidatorSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_PERSIST_ACCESS_TOKENS = "persistAccessTokens";
  @SerializedName(SERIALIZED_NAME_PERSIST_ACCESS_TOKENS)
  private Boolean persistAccessTokens;

  public static final String SERIALIZED_NAME_MAXIMUM_TOKEN_LIFETIME = "maximumTokenLifetime";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_TOKEN_LIFETIME)
  private String maximumTokenLifetime;

  public static final String SERIALIZED_NAME_ALLOWED_AUTHENTICATION_TYPE = "allowedAuthenticationType";
  @SerializedName(SERIALIZED_NAME_ALLOWED_AUTHENTICATION_TYPE)
  private List<EnumaccessTokenValidatorAllowedAuthenticationTypeProp> allowedAuthenticationType = null;

  public static final String SERIALIZED_NAME_ALLOWED_S_A_S_L_MECHANISM = "allowedSASLMechanism";
  @SerializedName(SERIALIZED_NAME_ALLOWED_S_A_S_L_MECHANISM)
  private List<String> allowedSASLMechanism = null;

  public static final String SERIALIZED_NAME_GENERATE_TOKEN_RESULT_CRITERIA = "generateTokenResultCriteria";
  @SerializedName(SERIALIZED_NAME_GENERATE_TOKEN_RESULT_CRITERIA)
  private String generateTokenResultCriteria;

  public static final String SERIALIZED_NAME_INCLUDED_SCOPE = "includedScope";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SCOPE)
  private List<String> includedScope = null;

  public static final String SERIALIZED_NAME_IDENTITY_MAPPER = "identityMapper";
  @SerializedName(SERIALIZED_NAME_IDENTITY_MAPPER)
  private String identityMapper;

  public static final String SERIALIZED_NAME_SUBJECT_CLAIM_NAME = "subjectClaimName";
  @SerializedName(SERIALIZED_NAME_SUBJECT_CLAIM_NAME)
  private String subjectClaimName;

  public static final String SERIALIZED_NAME_EVALUATION_ORDER_INDEX = "evaluationOrderIndex";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ORDER_INDEX)
  private Integer evaluationOrderIndex;

  public BindAccessTokenValidatorResponseAllOf() {
  }

  public BindAccessTokenValidatorResponseAllOf description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Access Token Validator
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Access Token Validator")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public BindAccessTokenValidatorResponseAllOf schemas(List<EnumbindAccessTokenValidatorSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public BindAccessTokenValidatorResponseAllOf addSchemasItem(EnumbindAccessTokenValidatorSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumbindAccessTokenValidatorSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumbindAccessTokenValidatorSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public BindAccessTokenValidatorResponseAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Access Token Validator
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Access Token Validator")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public BindAccessTokenValidatorResponseAllOf enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether this Bind Access Token Validator is enabled for use in Directory Server.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this Bind Access Token Validator is enabled for use in Directory Server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public BindAccessTokenValidatorResponseAllOf persistAccessTokens(Boolean persistAccessTokens) {
    
    
    
    
    this.persistAccessTokens = persistAccessTokens;
    return this;
  }

   /**
   * Indicates whether access tokens should be persisted in user entries.
   * @return persistAccessTokens
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether access tokens should be persisted in user entries.")

  public Boolean getPersistAccessTokens() {
    return persistAccessTokens;
  }


  public void setPersistAccessTokens(Boolean persistAccessTokens) {
    
    
    
    this.persistAccessTokens = persistAccessTokens;
  }


  public BindAccessTokenValidatorResponseAllOf maximumTokenLifetime(String maximumTokenLifetime) {
    
    
    
    
    this.maximumTokenLifetime = maximumTokenLifetime;
    return this;
  }

   /**
   * Specifies the maximum length of time that a generated token should be considered valid. If this is not specified, then generated access tokens will not expire.
   * @return maximumTokenLifetime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that a generated token should be considered valid. If this is not specified, then generated access tokens will not expire.")

  public String getMaximumTokenLifetime() {
    return maximumTokenLifetime;
  }


  public void setMaximumTokenLifetime(String maximumTokenLifetime) {
    
    
    
    this.maximumTokenLifetime = maximumTokenLifetime;
  }


  public BindAccessTokenValidatorResponseAllOf allowedAuthenticationType(List<EnumaccessTokenValidatorAllowedAuthenticationTypeProp> allowedAuthenticationType) {
    
    
    
    
    this.allowedAuthenticationType = allowedAuthenticationType;
    return this;
  }

  public BindAccessTokenValidatorResponseAllOf addAllowedAuthenticationTypeItem(EnumaccessTokenValidatorAllowedAuthenticationTypeProp allowedAuthenticationTypeItem) {
    if (this.allowedAuthenticationType == null) {
      this.allowedAuthenticationType = new ArrayList<>();
    }
    this.allowedAuthenticationType.add(allowedAuthenticationTypeItem);
    return this;
  }

   /**
   * Get allowedAuthenticationType
   * @return allowedAuthenticationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumaccessTokenValidatorAllowedAuthenticationTypeProp> getAllowedAuthenticationType() {
    return allowedAuthenticationType;
  }


  public void setAllowedAuthenticationType(List<EnumaccessTokenValidatorAllowedAuthenticationTypeProp> allowedAuthenticationType) {
    
    
    
    this.allowedAuthenticationType = allowedAuthenticationType;
  }


  public BindAccessTokenValidatorResponseAllOf allowedSASLMechanism(List<String> allowedSASLMechanism) {
    
    
    
    
    this.allowedSASLMechanism = allowedSASLMechanism;
    return this;
  }

  public BindAccessTokenValidatorResponseAllOf addAllowedSASLMechanismItem(String allowedSASLMechanismItem) {
    if (this.allowedSASLMechanism == null) {
      this.allowedSASLMechanism = new ArrayList<>();
    }
    this.allowedSASLMechanism.add(allowedSASLMechanismItem);
    return this;
  }

   /**
   * Specifies the names of the SASL mechanisms for which access tokens may be generated, and for which generated access tokens will be accepted.
   * @return allowedSASLMechanism
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the SASL mechanisms for which access tokens may be generated, and for which generated access tokens will be accepted.")

  public List<String> getAllowedSASLMechanism() {
    return allowedSASLMechanism;
  }


  public void setAllowedSASLMechanism(List<String> allowedSASLMechanism) {
    
    
    
    this.allowedSASLMechanism = allowedSASLMechanism;
  }


  public BindAccessTokenValidatorResponseAllOf generateTokenResultCriteria(String generateTokenResultCriteria) {
    
    
    
    
    this.generateTokenResultCriteria = generateTokenResultCriteria;
    return this;
  }

   /**
   * A reference to a request criteria object that may be used to identify the types of bind operations for which access tokens may be generated. If no criteria is specified, then access tokens may be generated for any bind operations that satisfy the other requirements configured in this validator.
   * @return generateTokenResultCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to a request criteria object that may be used to identify the types of bind operations for which access tokens may be generated. If no criteria is specified, then access tokens may be generated for any bind operations that satisfy the other requirements configured in this validator.")

  public String getGenerateTokenResultCriteria() {
    return generateTokenResultCriteria;
  }


  public void setGenerateTokenResultCriteria(String generateTokenResultCriteria) {
    
    
    
    this.generateTokenResultCriteria = generateTokenResultCriteria;
  }


  public BindAccessTokenValidatorResponseAllOf includedScope(List<String> includedScope) {
    
    
    
    
    this.includedScope = includedScope;
    return this;
  }

  public BindAccessTokenValidatorResponseAllOf addIncludedScopeItem(String includedScopeItem) {
    if (this.includedScope == null) {
      this.includedScope = new ArrayList<>();
    }
    this.includedScope.add(includedScopeItem);
    return this;
  }

   /**
   * Specifies the names of any scopes that should be granted to a client that authenticates with a bind access token. By default, no scopes will be granted.
   * @return includedScope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of any scopes that should be granted to a client that authenticates with a bind access token. By default, no scopes will be granted.")

  public List<String> getIncludedScope() {
    return includedScope;
  }


  public void setIncludedScope(List<String> includedScope) {
    
    
    
    this.includedScope = includedScope;
  }


  public BindAccessTokenValidatorResponseAllOf identityMapper(String identityMapper) {
    
    
    
    
    this.identityMapper = identityMapper;
    return this;
  }

   /**
   * Specifies the name of the Identity Mapper that should be used for associating user entries with Bearer token subject names. The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the subject-claim-name property.
   * @return identityMapper
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the Identity Mapper that should be used for associating user entries with Bearer token subject names. The claim name from which to obtain the subject (i.e. the currently logged-in user) may be configured using the subject-claim-name property.")

  public String getIdentityMapper() {
    return identityMapper;
  }


  public void setIdentityMapper(String identityMapper) {
    
    
    
    this.identityMapper = identityMapper;
  }


  public BindAccessTokenValidatorResponseAllOf subjectClaimName(String subjectClaimName) {
    
    
    
    
    this.subjectClaimName = subjectClaimName;
    return this;
  }

   /**
   * The name of the token claim that contains the subject, i.e. the logged-in user in an access token. This property goes hand-in-hand with the identity-mapper property and tells the Identity Mapper which field to use to look up the user entry on the server.
   * @return subjectClaimName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the token claim that contains the subject, i.e. the logged-in user in an access token. This property goes hand-in-hand with the identity-mapper property and tells the Identity Mapper which field to use to look up the user entry on the server.")

  public String getSubjectClaimName() {
    return subjectClaimName;
  }


  public void setSubjectClaimName(String subjectClaimName) {
    
    
    
    this.subjectClaimName = subjectClaimName;
  }


  public BindAccessTokenValidatorResponseAllOf evaluationOrderIndex(Integer evaluationOrderIndex) {
    
    
    
    
    this.evaluationOrderIndex = evaluationOrderIndex;
    return this;
  }

   /**
   * When multiple Access Token Validators are defined for a single Directory Server, this property determines the evaluation order for determining the correct validator class for an access token received by the Directory Server. Values of this property must be unique among all Access Token Validators defined within Directory Server but not necessarily contiguous. Access Token Validators with a smaller value will be evaluated first to determine if they are able to validate the access token.
   * @return evaluationOrderIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When multiple Access Token Validators are defined for a single Directory Server, this property determines the evaluation order for determining the correct validator class for an access token received by the Directory Server. Values of this property must be unique among all Access Token Validators defined within Directory Server but not necessarily contiguous. Access Token Validators with a smaller value will be evaluated first to determine if they are able to validate the access token.")

  public Integer getEvaluationOrderIndex() {
    return evaluationOrderIndex;
  }


  public void setEvaluationOrderIndex(Integer evaluationOrderIndex) {
    
    
    
    this.evaluationOrderIndex = evaluationOrderIndex;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BindAccessTokenValidatorResponseAllOf instance itself
   */
  public BindAccessTokenValidatorResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BindAccessTokenValidatorResponseAllOf bindAccessTokenValidatorResponseAllOf = (BindAccessTokenValidatorResponseAllOf) o;
    return Objects.equals(this.description, bindAccessTokenValidatorResponseAllOf.description) &&
        Objects.equals(this.schemas, bindAccessTokenValidatorResponseAllOf.schemas) &&
        Objects.equals(this.id, bindAccessTokenValidatorResponseAllOf.id) &&
        Objects.equals(this.enabled, bindAccessTokenValidatorResponseAllOf.enabled) &&
        Objects.equals(this.persistAccessTokens, bindAccessTokenValidatorResponseAllOf.persistAccessTokens) &&
        Objects.equals(this.maximumTokenLifetime, bindAccessTokenValidatorResponseAllOf.maximumTokenLifetime) &&
        Objects.equals(this.allowedAuthenticationType, bindAccessTokenValidatorResponseAllOf.allowedAuthenticationType) &&
        Objects.equals(this.allowedSASLMechanism, bindAccessTokenValidatorResponseAllOf.allowedSASLMechanism) &&
        Objects.equals(this.generateTokenResultCriteria, bindAccessTokenValidatorResponseAllOf.generateTokenResultCriteria) &&
        Objects.equals(this.includedScope, bindAccessTokenValidatorResponseAllOf.includedScope) &&
        Objects.equals(this.identityMapper, bindAccessTokenValidatorResponseAllOf.identityMapper) &&
        Objects.equals(this.subjectClaimName, bindAccessTokenValidatorResponseAllOf.subjectClaimName) &&
        Objects.equals(this.evaluationOrderIndex, bindAccessTokenValidatorResponseAllOf.evaluationOrderIndex)&&
        Objects.equals(this.additionalProperties, bindAccessTokenValidatorResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, enabled, persistAccessTokens, maximumTokenLifetime, allowedAuthenticationType, allowedSASLMechanism, generateTokenResultCriteria, includedScope, identityMapper, subjectClaimName, evaluationOrderIndex, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BindAccessTokenValidatorResponseAllOf {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    persistAccessTokens: ").append(toIndentedString(persistAccessTokens)).append("\n");
    sb.append("    maximumTokenLifetime: ").append(toIndentedString(maximumTokenLifetime)).append("\n");
    sb.append("    allowedAuthenticationType: ").append(toIndentedString(allowedAuthenticationType)).append("\n");
    sb.append("    allowedSASLMechanism: ").append(toIndentedString(allowedSASLMechanism)).append("\n");
    sb.append("    generateTokenResultCriteria: ").append(toIndentedString(generateTokenResultCriteria)).append("\n");
    sb.append("    includedScope: ").append(toIndentedString(includedScope)).append("\n");
    sb.append("    identityMapper: ").append(toIndentedString(identityMapper)).append("\n");
    sb.append("    subjectClaimName: ").append(toIndentedString(subjectClaimName)).append("\n");
    sb.append("    evaluationOrderIndex: ").append(toIndentedString(evaluationOrderIndex)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("enabled");
    openapiFields.add("persistAccessTokens");
    openapiFields.add("maximumTokenLifetime");
    openapiFields.add("allowedAuthenticationType");
    openapiFields.add("allowedSASLMechanism");
    openapiFields.add("generateTokenResultCriteria");
    openapiFields.add("includedScope");
    openapiFields.add("identityMapper");
    openapiFields.add("subjectClaimName");
    openapiFields.add("evaluationOrderIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BindAccessTokenValidatorResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BindAccessTokenValidatorResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BindAccessTokenValidatorResponseAllOf is not found in the empty JSON string", BindAccessTokenValidatorResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("maximumTokenLifetime") != null && !jsonObj.get("maximumTokenLifetime").isJsonNull()) && !jsonObj.get("maximumTokenLifetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumTokenLifetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumTokenLifetime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedAuthenticationType") != null && !jsonObj.get("allowedAuthenticationType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedAuthenticationType` to be an array in the JSON string but got `%s`", jsonObj.get("allowedAuthenticationType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedSASLMechanism") != null && !jsonObj.get("allowedSASLMechanism").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedSASLMechanism` to be an array in the JSON string but got `%s`", jsonObj.get("allowedSASLMechanism").toString()));
      }
      if ((jsonObj.get("generateTokenResultCriteria") != null && !jsonObj.get("generateTokenResultCriteria").isJsonNull()) && !jsonObj.get("generateTokenResultCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `generateTokenResultCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("generateTokenResultCriteria").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedScope") != null && !jsonObj.get("includedScope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedScope` to be an array in the JSON string but got `%s`", jsonObj.get("includedScope").toString()));
      }
      if ((jsonObj.get("identityMapper") != null && !jsonObj.get("identityMapper").isJsonNull()) && !jsonObj.get("identityMapper").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityMapper` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityMapper").toString()));
      }
      if ((jsonObj.get("subjectClaimName") != null && !jsonObj.get("subjectClaimName").isJsonNull()) && !jsonObj.get("subjectClaimName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjectClaimName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subjectClaimName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BindAccessTokenValidatorResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BindAccessTokenValidatorResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BindAccessTokenValidatorResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BindAccessTokenValidatorResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<BindAccessTokenValidatorResponseAllOf>() {
           @Override
           public void write(JsonWriter out, BindAccessTokenValidatorResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BindAccessTokenValidatorResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BindAccessTokenValidatorResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BindAccessTokenValidatorResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BindAccessTokenValidatorResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to BindAccessTokenValidatorResponseAllOf
  */
  public static BindAccessTokenValidatorResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BindAccessTokenValidatorResponseAllOf.class);
  }

 /**
  * Convert an instance of BindAccessTokenValidatorResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

