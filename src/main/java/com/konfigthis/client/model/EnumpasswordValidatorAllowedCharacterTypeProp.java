/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies the set of character types that are allowed to be present in passwords.
 */
@JsonAdapter(EnumpasswordValidatorAllowedCharacterTypeProp.Adapter.class)public enum EnumpasswordValidatorAllowedCharacterTypeProp {
  
  LETTERS("letters"),
  
  NUMBERS("numbers"),
  
  PUNCTUATION("punctuation"),
  
  SYMBOLS("symbols"),
  
  SPACES("spaces"),
  
  NON_SPACE_SEPARATORS("non-space-separators"),
  
  MARKS("marks"),
  
  CONTROL("control"),
  
  PRIVATE_USE("private-use");

  private String value;

  EnumpasswordValidatorAllowedCharacterTypeProp(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EnumpasswordValidatorAllowedCharacterTypeProp fromValue(String value) {
    for (EnumpasswordValidatorAllowedCharacterTypeProp b : EnumpasswordValidatorAllowedCharacterTypeProp.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EnumpasswordValidatorAllowedCharacterTypeProp> {
    @Override
    public void write(final JsonWriter jsonWriter, final EnumpasswordValidatorAllowedCharacterTypeProp enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EnumpasswordValidatorAllowedCharacterTypeProp read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EnumpasswordValidatorAllowedCharacterTypeProp.fromValue(value);
    }
  }
}

