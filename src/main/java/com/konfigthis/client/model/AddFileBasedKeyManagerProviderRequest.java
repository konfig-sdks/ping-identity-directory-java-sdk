/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumfileBasedKeyManagerProviderSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddFileBasedKeyManagerProviderRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddFileBasedKeyManagerProviderRequest {
  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumfileBasedKeyManagerProviderSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_KEY_STORE_FILE = "keyStoreFile";
  @SerializedName(SERIALIZED_NAME_KEY_STORE_FILE)
  private String keyStoreFile;

  public static final String SERIALIZED_NAME_KEY_STORE_TYPE = "keyStoreType";
  @SerializedName(SERIALIZED_NAME_KEY_STORE_TYPE)
  private String keyStoreType;

  public static final String SERIALIZED_NAME_KEY_STORE_PIN = "keyStorePin";
  @SerializedName(SERIALIZED_NAME_KEY_STORE_PIN)
  private String keyStorePin;

  public static final String SERIALIZED_NAME_KEY_STORE_PIN_FILE = "keyStorePinFile";
  @SerializedName(SERIALIZED_NAME_KEY_STORE_PIN_FILE)
  private String keyStorePinFile;

  public static final String SERIALIZED_NAME_KEY_STORE_PIN_PASSPHRASE_PROVIDER = "keyStorePinPassphraseProvider";
  @SerializedName(SERIALIZED_NAME_KEY_STORE_PIN_PASSPHRASE_PROVIDER)
  private String keyStorePinPassphraseProvider;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_PIN = "privateKeyPin";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_PIN)
  private String privateKeyPin;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_PIN_FILE = "privateKeyPinFile";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_PIN_FILE)
  private String privateKeyPinFile;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_PIN_PASSPHRASE_PROVIDER = "privateKeyPinPassphraseProvider";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_PIN_PASSPHRASE_PROVIDER)
  private String privateKeyPinPassphraseProvider;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public AddFileBasedKeyManagerProviderRequest() {
  }

  public AddFileBasedKeyManagerProviderRequest providerName(String providerName) {
    
    
    
    
    this.providerName = providerName;
    return this;
  }

   /**
   * Name of the new Key Manager Provider
   * @return providerName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Key Manager Provider")

  public String getProviderName() {
    return providerName;
  }


  public void setProviderName(String providerName) {
    
    
    
    this.providerName = providerName;
  }


  public AddFileBasedKeyManagerProviderRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Key Manager Provider
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Key Manager Provider")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddFileBasedKeyManagerProviderRequest schemas(List<EnumfileBasedKeyManagerProviderSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddFileBasedKeyManagerProviderRequest addSchemasItem(EnumfileBasedKeyManagerProviderSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumfileBasedKeyManagerProviderSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumfileBasedKeyManagerProviderSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddFileBasedKeyManagerProviderRequest keyStoreFile(String keyStoreFile) {
    
    
    
    
    this.keyStoreFile = keyStoreFile;
    return this;
  }

   /**
   * Specifies the path to the file that contains the private key information. This may be an absolute path, or a path that is relative to the Directory Server instance root.
   * @return keyStoreFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the path to the file that contains the private key information. This may be an absolute path, or a path that is relative to the Directory Server instance root.")

  public String getKeyStoreFile() {
    return keyStoreFile;
  }


  public void setKeyStoreFile(String keyStoreFile) {
    
    
    
    this.keyStoreFile = keyStoreFile;
  }


  public AddFileBasedKeyManagerProviderRequest keyStoreType(String keyStoreType) {
    
    
    
    
    this.keyStoreType = keyStoreType;
    return this;
  }

   /**
   * Specifies the format for the data in the key store file.
   * @return keyStoreType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the format for the data in the key store file.")

  public String getKeyStoreType() {
    return keyStoreType;
  }


  public void setKeyStoreType(String keyStoreType) {
    
    
    
    this.keyStoreType = keyStoreType;
  }


  public AddFileBasedKeyManagerProviderRequest keyStorePin(String keyStorePin) {
    
    
    
    
    this.keyStorePin = keyStorePin;
    return this;
  }

   /**
   * Specifies the PIN needed to access the File Based Key Manager Provider.
   * @return keyStorePin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the PIN needed to access the File Based Key Manager Provider.")

  public String getKeyStorePin() {
    return keyStorePin;
  }


  public void setKeyStorePin(String keyStorePin) {
    
    
    
    this.keyStorePin = keyStorePin;
  }


  public AddFileBasedKeyManagerProviderRequest keyStorePinFile(String keyStorePinFile) {
    
    
    
    
    this.keyStorePinFile = keyStorePinFile;
    return this;
  }

   /**
   * Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to access the File Based Key Manager Provider.
   * @return keyStorePinFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to access the File Based Key Manager Provider.")

  public String getKeyStorePinFile() {
    return keyStorePinFile;
  }


  public void setKeyStorePinFile(String keyStorePinFile) {
    
    
    
    this.keyStorePinFile = keyStorePinFile;
  }


  public AddFileBasedKeyManagerProviderRequest keyStorePinPassphraseProvider(String keyStorePinPassphraseProvider) {
    
    
    
    
    this.keyStorePinPassphraseProvider = keyStorePinPassphraseProvider;
    return this;
  }

   /**
   * The passphrase provider to use to obtain the clear-text PIN needed to access the File Based Key Manager Provider.
   * @return keyStorePinPassphraseProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The passphrase provider to use to obtain the clear-text PIN needed to access the File Based Key Manager Provider.")

  public String getKeyStorePinPassphraseProvider() {
    return keyStorePinPassphraseProvider;
  }


  public void setKeyStorePinPassphraseProvider(String keyStorePinPassphraseProvider) {
    
    
    
    this.keyStorePinPassphraseProvider = keyStorePinPassphraseProvider;
  }


  public AddFileBasedKeyManagerProviderRequest privateKeyPin(String privateKeyPin) {
    
    
    
    
    this.privateKeyPin = privateKeyPin;
    return this;
  }

   /**
   * Specifies the clear-text PIN needed to access the File Based Key Manager Provider private key. If no private key PIN is specified the PIN defaults to the key store PIN.
   * @return privateKeyPin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the clear-text PIN needed to access the File Based Key Manager Provider private key. If no private key PIN is specified the PIN defaults to the key store PIN.")

  public String getPrivateKeyPin() {
    return privateKeyPin;
  }


  public void setPrivateKeyPin(String privateKeyPin) {
    
    
    
    this.privateKeyPin = privateKeyPin;
  }


  public AddFileBasedKeyManagerProviderRequest privateKeyPinFile(String privateKeyPinFile) {
    
    
    
    
    this.privateKeyPinFile = privateKeyPinFile;
    return this;
  }

   /**
   * Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to access the File Based Key Manager Provider private key. If no private key PIN is specified the PIN defaults to the key store PIN.
   * @return privateKeyPinFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to access the File Based Key Manager Provider private key. If no private key PIN is specified the PIN defaults to the key store PIN.")

  public String getPrivateKeyPinFile() {
    return privateKeyPinFile;
  }


  public void setPrivateKeyPinFile(String privateKeyPinFile) {
    
    
    
    this.privateKeyPinFile = privateKeyPinFile;
  }


  public AddFileBasedKeyManagerProviderRequest privateKeyPinPassphraseProvider(String privateKeyPinPassphraseProvider) {
    
    
    
    
    this.privateKeyPinPassphraseProvider = privateKeyPinPassphraseProvider;
    return this;
  }

   /**
   * The passphrase provider to use to obtain the clear-text PIN needed to access the File Based Key Manager Provider private key. If no private key PIN is specified the PIN defaults to the key store PIN.
   * @return privateKeyPinPassphraseProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The passphrase provider to use to obtain the clear-text PIN needed to access the File Based Key Manager Provider private key. If no private key PIN is specified the PIN defaults to the key store PIN.")

  public String getPrivateKeyPinPassphraseProvider() {
    return privateKeyPinPassphraseProvider;
  }


  public void setPrivateKeyPinPassphraseProvider(String privateKeyPinPassphraseProvider) {
    
    
    
    this.privateKeyPinPassphraseProvider = privateKeyPinPassphraseProvider;
  }


  public AddFileBasedKeyManagerProviderRequest enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Key Manager Provider is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Key Manager Provider is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddFileBasedKeyManagerProviderRequest instance itself
   */
  public AddFileBasedKeyManagerProviderRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddFileBasedKeyManagerProviderRequest addFileBasedKeyManagerProviderRequest = (AddFileBasedKeyManagerProviderRequest) o;
    return Objects.equals(this.providerName, addFileBasedKeyManagerProviderRequest.providerName) &&
        Objects.equals(this.description, addFileBasedKeyManagerProviderRequest.description) &&
        Objects.equals(this.schemas, addFileBasedKeyManagerProviderRequest.schemas) &&
        Objects.equals(this.keyStoreFile, addFileBasedKeyManagerProviderRequest.keyStoreFile) &&
        Objects.equals(this.keyStoreType, addFileBasedKeyManagerProviderRequest.keyStoreType) &&
        Objects.equals(this.keyStorePin, addFileBasedKeyManagerProviderRequest.keyStorePin) &&
        Objects.equals(this.keyStorePinFile, addFileBasedKeyManagerProviderRequest.keyStorePinFile) &&
        Objects.equals(this.keyStorePinPassphraseProvider, addFileBasedKeyManagerProviderRequest.keyStorePinPassphraseProvider) &&
        Objects.equals(this.privateKeyPin, addFileBasedKeyManagerProviderRequest.privateKeyPin) &&
        Objects.equals(this.privateKeyPinFile, addFileBasedKeyManagerProviderRequest.privateKeyPinFile) &&
        Objects.equals(this.privateKeyPinPassphraseProvider, addFileBasedKeyManagerProviderRequest.privateKeyPinPassphraseProvider) &&
        Objects.equals(this.enabled, addFileBasedKeyManagerProviderRequest.enabled)&&
        Objects.equals(this.additionalProperties, addFileBasedKeyManagerProviderRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerName, description, schemas, keyStoreFile, keyStoreType, keyStorePin, keyStorePinFile, keyStorePinPassphraseProvider, privateKeyPin, privateKeyPinFile, privateKeyPinPassphraseProvider, enabled, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddFileBasedKeyManagerProviderRequest {\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    keyStoreFile: ").append(toIndentedString(keyStoreFile)).append("\n");
    sb.append("    keyStoreType: ").append(toIndentedString(keyStoreType)).append("\n");
    sb.append("    keyStorePin: ").append(toIndentedString(keyStorePin)).append("\n");
    sb.append("    keyStorePinFile: ").append(toIndentedString(keyStorePinFile)).append("\n");
    sb.append("    keyStorePinPassphraseProvider: ").append(toIndentedString(keyStorePinPassphraseProvider)).append("\n");
    sb.append("    privateKeyPin: ").append(toIndentedString(privateKeyPin)).append("\n");
    sb.append("    privateKeyPinFile: ").append(toIndentedString(privateKeyPinFile)).append("\n");
    sb.append("    privateKeyPinPassphraseProvider: ").append(toIndentedString(privateKeyPinPassphraseProvider)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("providerName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("keyStoreFile");
    openapiFields.add("keyStoreType");
    openapiFields.add("keyStorePin");
    openapiFields.add("keyStorePinFile");
    openapiFields.add("keyStorePinPassphraseProvider");
    openapiFields.add("privateKeyPin");
    openapiFields.add("privateKeyPinFile");
    openapiFields.add("privateKeyPinPassphraseProvider");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("providerName");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("keyStoreFile");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddFileBasedKeyManagerProviderRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddFileBasedKeyManagerProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddFileBasedKeyManagerProviderRequest is not found in the empty JSON string", AddFileBasedKeyManagerProviderRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddFileBasedKeyManagerProviderRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("keyStoreFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStoreFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStoreFile").toString()));
      }
      if ((jsonObj.get("keyStoreType") != null && !jsonObj.get("keyStoreType").isJsonNull()) && !jsonObj.get("keyStoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStoreType").toString()));
      }
      if ((jsonObj.get("keyStorePin") != null && !jsonObj.get("keyStorePin").isJsonNull()) && !jsonObj.get("keyStorePin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStorePin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStorePin").toString()));
      }
      if ((jsonObj.get("keyStorePinFile") != null && !jsonObj.get("keyStorePinFile").isJsonNull()) && !jsonObj.get("keyStorePinFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStorePinFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStorePinFile").toString()));
      }
      if ((jsonObj.get("keyStorePinPassphraseProvider") != null && !jsonObj.get("keyStorePinPassphraseProvider").isJsonNull()) && !jsonObj.get("keyStorePinPassphraseProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyStorePinPassphraseProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyStorePinPassphraseProvider").toString()));
      }
      if ((jsonObj.get("privateKeyPin") != null && !jsonObj.get("privateKeyPin").isJsonNull()) && !jsonObj.get("privateKeyPin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateKeyPin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateKeyPin").toString()));
      }
      if ((jsonObj.get("privateKeyPinFile") != null && !jsonObj.get("privateKeyPinFile").isJsonNull()) && !jsonObj.get("privateKeyPinFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateKeyPinFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateKeyPinFile").toString()));
      }
      if ((jsonObj.get("privateKeyPinPassphraseProvider") != null && !jsonObj.get("privateKeyPinPassphraseProvider").isJsonNull()) && !jsonObj.get("privateKeyPinPassphraseProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateKeyPinPassphraseProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateKeyPinPassphraseProvider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddFileBasedKeyManagerProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddFileBasedKeyManagerProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddFileBasedKeyManagerProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddFileBasedKeyManagerProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddFileBasedKeyManagerProviderRequest>() {
           @Override
           public void write(JsonWriter out, AddFileBasedKeyManagerProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddFileBasedKeyManagerProviderRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddFileBasedKeyManagerProviderRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddFileBasedKeyManagerProviderRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddFileBasedKeyManagerProviderRequest
  * @throws IOException if the JSON string is invalid with respect to AddFileBasedKeyManagerProviderRequest
  */
  public static AddFileBasedKeyManagerProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddFileBasedKeyManagerProviderRequest.class);
  }

 /**
  * Convert an instance of AddFileBasedKeyManagerProviderRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

