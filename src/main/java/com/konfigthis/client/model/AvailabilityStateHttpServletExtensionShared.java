/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumavailabilityStateHttpServletExtensionSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AvailabilityStateHttpServletExtensionShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AvailabilityStateHttpServletExtensionShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumavailabilityStateHttpServletExtensionSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_CONTEXT_PATH = "baseContextPath";
  @SerializedName(SERIALIZED_NAME_BASE_CONTEXT_PATH)
  private String baseContextPath;

  public static final String SERIALIZED_NAME_AVAILABLE_STATUS_CODE = "availableStatusCode";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_STATUS_CODE)
  private Integer availableStatusCode;

  public static final String SERIALIZED_NAME_DEGRADED_STATUS_CODE = "degradedStatusCode";
  @SerializedName(SERIALIZED_NAME_DEGRADED_STATUS_CODE)
  private Integer degradedStatusCode;

  public static final String SERIALIZED_NAME_UNAVAILABLE_STATUS_CODE = "unavailableStatusCode";
  @SerializedName(SERIALIZED_NAME_UNAVAILABLE_STATUS_CODE)
  private Integer unavailableStatusCode;

  public static final String SERIALIZED_NAME_OVERRIDE_STATUS_CODE = "overrideStatusCode";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_STATUS_CODE)
  private Integer overrideStatusCode;

  public static final String SERIALIZED_NAME_INCLUDE_RESPONSE_BODY = "includeResponseBody";
  @SerializedName(SERIALIZED_NAME_INCLUDE_RESPONSE_BODY)
  private Boolean includeResponseBody;

  public static final String SERIALIZED_NAME_ADDITIONAL_RESPONSE_CONTENTS = "additionalResponseContents";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RESPONSE_CONTENTS)
  private String additionalResponseContents;

  public static final String SERIALIZED_NAME_CROSS_ORIGIN_POLICY = "crossOriginPolicy";
  @SerializedName(SERIALIZED_NAME_CROSS_ORIGIN_POLICY)
  private String crossOriginPolicy;

  public static final String SERIALIZED_NAME_RESPONSE_HEADER = "responseHeader";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER)
  private List<String> responseHeader = null;

  public static final String SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER = "correlationIDResponseHeader";
  @SerializedName(SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER)
  private String correlationIDResponseHeader;

  public AvailabilityStateHttpServletExtensionShared() {
  }

  public AvailabilityStateHttpServletExtensionShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this HTTP Servlet Extension
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this HTTP Servlet Extension")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AvailabilityStateHttpServletExtensionShared schemas(List<EnumavailabilityStateHttpServletExtensionSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AvailabilityStateHttpServletExtensionShared addSchemasItem(EnumavailabilityStateHttpServletExtensionSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumavailabilityStateHttpServletExtensionSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumavailabilityStateHttpServletExtensionSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AvailabilityStateHttpServletExtensionShared baseContextPath(String baseContextPath) {
    
    
    
    
    this.baseContextPath = baseContextPath;
    return this;
  }

   /**
   * Specifies the base context path that HTTP clients should use to access this servlet. The value must start with a forward slash and must represent a valid HTTP context path.
   * @return baseContextPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the base context path that HTTP clients should use to access this servlet. The value must start with a forward slash and must represent a valid HTTP context path.")

  public String getBaseContextPath() {
    return baseContextPath;
  }


  public void setBaseContextPath(String baseContextPath) {
    
    
    
    this.baseContextPath = baseContextPath;
  }


  public AvailabilityStateHttpServletExtensionShared availableStatusCode(Integer availableStatusCode) {
    
    
    
    
    this.availableStatusCode = availableStatusCode;
    return this;
  }

   /**
   * Specifies the HTTP status code that the servlet should return if the server considers itself to be available.
   * @return availableStatusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the HTTP status code that the servlet should return if the server considers itself to be available.")

  public Integer getAvailableStatusCode() {
    return availableStatusCode;
  }


  public void setAvailableStatusCode(Integer availableStatusCode) {
    
    
    
    this.availableStatusCode = availableStatusCode;
  }


  public AvailabilityStateHttpServletExtensionShared degradedStatusCode(Integer degradedStatusCode) {
    
    
    
    
    this.degradedStatusCode = degradedStatusCode;
    return this;
  }

   /**
   * Specifies the HTTP status code that the servlet should return if the server considers itself to be degraded.
   * @return degradedStatusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the HTTP status code that the servlet should return if the server considers itself to be degraded.")

  public Integer getDegradedStatusCode() {
    return degradedStatusCode;
  }


  public void setDegradedStatusCode(Integer degradedStatusCode) {
    
    
    
    this.degradedStatusCode = degradedStatusCode;
  }


  public AvailabilityStateHttpServletExtensionShared unavailableStatusCode(Integer unavailableStatusCode) {
    
    
    
    
    this.unavailableStatusCode = unavailableStatusCode;
    return this;
  }

   /**
   * Specifies the HTTP status code that the servlet should return if the server considers itself to be unavailable.
   * @return unavailableStatusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the HTTP status code that the servlet should return if the server considers itself to be unavailable.")

  public Integer getUnavailableStatusCode() {
    return unavailableStatusCode;
  }


  public void setUnavailableStatusCode(Integer unavailableStatusCode) {
    
    
    
    this.unavailableStatusCode = unavailableStatusCode;
  }


  public AvailabilityStateHttpServletExtensionShared overrideStatusCode(Integer overrideStatusCode) {
    
    
    
    
    this.overrideStatusCode = overrideStatusCode;
    return this;
  }

   /**
   * Specifies a HTTP status code that the servlet should always return, regardless of the server&#39;s availability. If this value is defined, it will override the availability-based return codes.
   * @return overrideStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a HTTP status code that the servlet should always return, regardless of the server's availability. If this value is defined, it will override the availability-based return codes.")

  public Integer getOverrideStatusCode() {
    return overrideStatusCode;
  }


  public void setOverrideStatusCode(Integer overrideStatusCode) {
    
    
    
    this.overrideStatusCode = overrideStatusCode;
  }


  public AvailabilityStateHttpServletExtensionShared includeResponseBody(Boolean includeResponseBody) {
    
    
    
    
    this.includeResponseBody = includeResponseBody;
    return this;
  }

   /**
   * Indicates whether the response should include a body that is a JSON object.
   * @return includeResponseBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the response should include a body that is a JSON object.")

  public Boolean getIncludeResponseBody() {
    return includeResponseBody;
  }


  public void setIncludeResponseBody(Boolean includeResponseBody) {
    
    
    
    this.includeResponseBody = includeResponseBody;
  }


  public AvailabilityStateHttpServletExtensionShared additionalResponseContents(String additionalResponseContents) {
    
    
    
    
    this.additionalResponseContents = additionalResponseContents;
    return this;
  }

   /**
   * A JSON-formatted string containing additional fields to be returned in the response body. For example, an additional-response-contents value of &#39;{ \&quot;key\&quot;: \&quot;value\&quot; }&#39; would add the key and value to the root of the JSON response body.
   * @return additionalResponseContents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON-formatted string containing additional fields to be returned in the response body. For example, an additional-response-contents value of '{ \"key\": \"value\" }' would add the key and value to the root of the JSON response body.")

  public String getAdditionalResponseContents() {
    return additionalResponseContents;
  }


  public void setAdditionalResponseContents(String additionalResponseContents) {
    
    
    
    this.additionalResponseContents = additionalResponseContents;
  }


  public AvailabilityStateHttpServletExtensionShared crossOriginPolicy(String crossOriginPolicy) {
    
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
    return this;
  }

   /**
   * The cross-origin request policy to use for the HTTP Servlet Extension.
   * @return crossOriginPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cross-origin request policy to use for the HTTP Servlet Extension.")

  public String getCrossOriginPolicy() {
    return crossOriginPolicy;
  }


  public void setCrossOriginPolicy(String crossOriginPolicy) {
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
  }


  public AvailabilityStateHttpServletExtensionShared responseHeader(List<String> responseHeader) {
    
    
    
    
    this.responseHeader = responseHeader;
    return this;
  }

  public AvailabilityStateHttpServletExtensionShared addResponseHeaderItem(String responseHeaderItem) {
    if (this.responseHeader == null) {
      this.responseHeader = new ArrayList<>();
    }
    this.responseHeader.add(responseHeaderItem);
    return this;
  }

   /**
   * Specifies HTTP header fields and values added to response headers for all requests.
   * @return responseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies HTTP header fields and values added to response headers for all requests.")

  public List<String> getResponseHeader() {
    return responseHeader;
  }


  public void setResponseHeader(List<String> responseHeader) {
    
    
    
    this.responseHeader = responseHeader;
  }


  public AvailabilityStateHttpServletExtensionShared correlationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
    return this;
  }

   /**
   * Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \&quot;Correlation-Id\&quot;, \&quot;X-Amzn-Trace-Id\&quot;, and \&quot;X-Request-Id\&quot;.
   * @return correlationIDResponseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \"Correlation-Id\", \"X-Amzn-Trace-Id\", and \"X-Request-Id\".")

  public String getCorrelationIDResponseHeader() {
    return correlationIDResponseHeader;
  }


  public void setCorrelationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AvailabilityStateHttpServletExtensionShared instance itself
   */
  public AvailabilityStateHttpServletExtensionShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityStateHttpServletExtensionShared availabilityStateHttpServletExtensionShared = (AvailabilityStateHttpServletExtensionShared) o;
    return Objects.equals(this.description, availabilityStateHttpServletExtensionShared.description) &&
        Objects.equals(this.schemas, availabilityStateHttpServletExtensionShared.schemas) &&
        Objects.equals(this.baseContextPath, availabilityStateHttpServletExtensionShared.baseContextPath) &&
        Objects.equals(this.availableStatusCode, availabilityStateHttpServletExtensionShared.availableStatusCode) &&
        Objects.equals(this.degradedStatusCode, availabilityStateHttpServletExtensionShared.degradedStatusCode) &&
        Objects.equals(this.unavailableStatusCode, availabilityStateHttpServletExtensionShared.unavailableStatusCode) &&
        Objects.equals(this.overrideStatusCode, availabilityStateHttpServletExtensionShared.overrideStatusCode) &&
        Objects.equals(this.includeResponseBody, availabilityStateHttpServletExtensionShared.includeResponseBody) &&
        Objects.equals(this.additionalResponseContents, availabilityStateHttpServletExtensionShared.additionalResponseContents) &&
        Objects.equals(this.crossOriginPolicy, availabilityStateHttpServletExtensionShared.crossOriginPolicy) &&
        Objects.equals(this.responseHeader, availabilityStateHttpServletExtensionShared.responseHeader) &&
        Objects.equals(this.correlationIDResponseHeader, availabilityStateHttpServletExtensionShared.correlationIDResponseHeader)&&
        Objects.equals(this.additionalProperties, availabilityStateHttpServletExtensionShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, baseContextPath, availableStatusCode, degradedStatusCode, unavailableStatusCode, overrideStatusCode, includeResponseBody, additionalResponseContents, crossOriginPolicy, responseHeader, correlationIDResponseHeader, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityStateHttpServletExtensionShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    baseContextPath: ").append(toIndentedString(baseContextPath)).append("\n");
    sb.append("    availableStatusCode: ").append(toIndentedString(availableStatusCode)).append("\n");
    sb.append("    degradedStatusCode: ").append(toIndentedString(degradedStatusCode)).append("\n");
    sb.append("    unavailableStatusCode: ").append(toIndentedString(unavailableStatusCode)).append("\n");
    sb.append("    overrideStatusCode: ").append(toIndentedString(overrideStatusCode)).append("\n");
    sb.append("    includeResponseBody: ").append(toIndentedString(includeResponseBody)).append("\n");
    sb.append("    additionalResponseContents: ").append(toIndentedString(additionalResponseContents)).append("\n");
    sb.append("    crossOriginPolicy: ").append(toIndentedString(crossOriginPolicy)).append("\n");
    sb.append("    responseHeader: ").append(toIndentedString(responseHeader)).append("\n");
    sb.append("    correlationIDResponseHeader: ").append(toIndentedString(correlationIDResponseHeader)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("baseContextPath");
    openapiFields.add("availableStatusCode");
    openapiFields.add("degradedStatusCode");
    openapiFields.add("unavailableStatusCode");
    openapiFields.add("overrideStatusCode");
    openapiFields.add("includeResponseBody");
    openapiFields.add("additionalResponseContents");
    openapiFields.add("crossOriginPolicy");
    openapiFields.add("responseHeader");
    openapiFields.add("correlationIDResponseHeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("baseContextPath");
    openapiRequiredFields.add("availableStatusCode");
    openapiRequiredFields.add("degradedStatusCode");
    openapiRequiredFields.add("unavailableStatusCode");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AvailabilityStateHttpServletExtensionShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AvailabilityStateHttpServletExtensionShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailabilityStateHttpServletExtensionShared is not found in the empty JSON string", AvailabilityStateHttpServletExtensionShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AvailabilityStateHttpServletExtensionShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("baseContextPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseContextPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseContextPath").toString()));
      }
      if ((jsonObj.get("additionalResponseContents") != null && !jsonObj.get("additionalResponseContents").isJsonNull()) && !jsonObj.get("additionalResponseContents").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalResponseContents` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalResponseContents").toString()));
      }
      if ((jsonObj.get("crossOriginPolicy") != null && !jsonObj.get("crossOriginPolicy").isJsonNull()) && !jsonObj.get("crossOriginPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossOriginPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossOriginPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("responseHeader") != null && !jsonObj.get("responseHeader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseHeader` to be an array in the JSON string but got `%s`", jsonObj.get("responseHeader").toString()));
      }
      if ((jsonObj.get("correlationIDResponseHeader") != null && !jsonObj.get("correlationIDResponseHeader").isJsonNull()) && !jsonObj.get("correlationIDResponseHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationIDResponseHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationIDResponseHeader").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailabilityStateHttpServletExtensionShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailabilityStateHttpServletExtensionShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailabilityStateHttpServletExtensionShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailabilityStateHttpServletExtensionShared.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailabilityStateHttpServletExtensionShared>() {
           @Override
           public void write(JsonWriter out, AvailabilityStateHttpServletExtensionShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailabilityStateHttpServletExtensionShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AvailabilityStateHttpServletExtensionShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AvailabilityStateHttpServletExtensionShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AvailabilityStateHttpServletExtensionShared
  * @throws IOException if the JSON string is invalid with respect to AvailabilityStateHttpServletExtensionShared
  */
  public static AvailabilityStateHttpServletExtensionShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailabilityStateHttpServletExtensionShared.class);
  }

 /**
  * Convert an instance of AvailabilityStateHttpServletExtensionShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

