/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumvelocityTemplateLoaderSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VelocityTemplateLoaderShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VelocityTemplateLoaderShared {
  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumvelocityTemplateLoaderSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EVALUATION_ORDER_INDEX = "evaluationOrderIndex";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ORDER_INDEX)
  private Integer evaluationOrderIndex;

  public static final String SERIALIZED_NAME_MIME_TYPE_MATCHER = "mimeTypeMatcher";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE_MATCHER)
  private String mimeTypeMatcher;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_TEMPLATE_SUFFIX = "templateSuffix";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_SUFFIX)
  private String templateSuffix;

  public static final String SERIALIZED_NAME_TEMPLATE_DIRECTORY = "templateDirectory";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_DIRECTORY)
  private String templateDirectory;

  public VelocityTemplateLoaderShared() {
  }

  public VelocityTemplateLoaderShared schemas(List<EnumvelocityTemplateLoaderSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public VelocityTemplateLoaderShared addSchemasItem(EnumvelocityTemplateLoaderSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumvelocityTemplateLoaderSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumvelocityTemplateLoaderSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public VelocityTemplateLoaderShared enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether this Velocity Template Loader is enabled.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this Velocity Template Loader is enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public VelocityTemplateLoaderShared evaluationOrderIndex(Integer evaluationOrderIndex) {
    
    
    
    
    this.evaluationOrderIndex = evaluationOrderIndex;
    return this;
  }

   /**
   * This property determines the evaluation order for determining the correct Velocity Template Loader to load a template for generating content for a particular request.
   * @return evaluationOrderIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This property determines the evaluation order for determining the correct Velocity Template Loader to load a template for generating content for a particular request.")

  public Integer getEvaluationOrderIndex() {
    return evaluationOrderIndex;
  }


  public void setEvaluationOrderIndex(Integer evaluationOrderIndex) {
    
    
    
    this.evaluationOrderIndex = evaluationOrderIndex;
  }


  public VelocityTemplateLoaderShared mimeTypeMatcher(String mimeTypeMatcher) {
    
    
    
    
    this.mimeTypeMatcher = mimeTypeMatcher;
    return this;
  }

   /**
   * Specifies a media type for matching Accept request-header values.
   * @return mimeTypeMatcher
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies a media type for matching Accept request-header values.")

  public String getMimeTypeMatcher() {
    return mimeTypeMatcher;
  }


  public void setMimeTypeMatcher(String mimeTypeMatcher) {
    
    
    
    this.mimeTypeMatcher = mimeTypeMatcher;
  }


  public VelocityTemplateLoaderShared mimeType(String mimeType) {
    
    
    
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Specifies a the value that will be used in the response&#39;s Content-Type header that indicates the type of content to return.
   * @return mimeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a the value that will be used in the response's Content-Type header that indicates the type of content to return.")

  public String getMimeType() {
    return mimeType;
  }


  public void setMimeType(String mimeType) {
    
    
    
    this.mimeType = mimeType;
  }


  public VelocityTemplateLoaderShared templateSuffix(String templateSuffix) {
    
    
    
    
    this.templateSuffix = templateSuffix;
    return this;
  }

   /**
   * Specifies the suffix to append to the requested resource name when searching for the template file with which to form a response.
   * @return templateSuffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the suffix to append to the requested resource name when searching for the template file with which to form a response.")

  public String getTemplateSuffix() {
    return templateSuffix;
  }


  public void setTemplateSuffix(String templateSuffix) {
    
    
    
    this.templateSuffix = templateSuffix;
  }


  public VelocityTemplateLoaderShared templateDirectory(String templateDirectory) {
    
    
    
    
    this.templateDirectory = templateDirectory;
    return this;
  }

   /**
   * Specifies the directory in which to search for the template files.
   * @return templateDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the directory in which to search for the template files.")

  public String getTemplateDirectory() {
    return templateDirectory;
  }


  public void setTemplateDirectory(String templateDirectory) {
    
    
    
    this.templateDirectory = templateDirectory;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VelocityTemplateLoaderShared instance itself
   */
  public VelocityTemplateLoaderShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VelocityTemplateLoaderShared velocityTemplateLoaderShared = (VelocityTemplateLoaderShared) o;
    return Objects.equals(this.schemas, velocityTemplateLoaderShared.schemas) &&
        Objects.equals(this.enabled, velocityTemplateLoaderShared.enabled) &&
        Objects.equals(this.evaluationOrderIndex, velocityTemplateLoaderShared.evaluationOrderIndex) &&
        Objects.equals(this.mimeTypeMatcher, velocityTemplateLoaderShared.mimeTypeMatcher) &&
        Objects.equals(this.mimeType, velocityTemplateLoaderShared.mimeType) &&
        Objects.equals(this.templateSuffix, velocityTemplateLoaderShared.templateSuffix) &&
        Objects.equals(this.templateDirectory, velocityTemplateLoaderShared.templateDirectory)&&
        Objects.equals(this.additionalProperties, velocityTemplateLoaderShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, enabled, evaluationOrderIndex, mimeTypeMatcher, mimeType, templateSuffix, templateDirectory, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VelocityTemplateLoaderShared {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    evaluationOrderIndex: ").append(toIndentedString(evaluationOrderIndex)).append("\n");
    sb.append("    mimeTypeMatcher: ").append(toIndentedString(mimeTypeMatcher)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    templateSuffix: ").append(toIndentedString(templateSuffix)).append("\n");
    sb.append("    templateDirectory: ").append(toIndentedString(templateDirectory)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemas");
    openapiFields.add("enabled");
    openapiFields.add("evaluationOrderIndex");
    openapiFields.add("mimeTypeMatcher");
    openapiFields.add("mimeType");
    openapiFields.add("templateSuffix");
    openapiFields.add("templateDirectory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mimeTypeMatcher");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VelocityTemplateLoaderShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VelocityTemplateLoaderShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VelocityTemplateLoaderShared is not found in the empty JSON string", VelocityTemplateLoaderShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VelocityTemplateLoaderShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("mimeTypeMatcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeTypeMatcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeTypeMatcher").toString()));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("templateSuffix") != null && !jsonObj.get("templateSuffix").isJsonNull()) && !jsonObj.get("templateSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateSuffix").toString()));
      }
      if ((jsonObj.get("templateDirectory") != null && !jsonObj.get("templateDirectory").isJsonNull()) && !jsonObj.get("templateDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateDirectory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VelocityTemplateLoaderShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VelocityTemplateLoaderShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VelocityTemplateLoaderShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VelocityTemplateLoaderShared.class));

       return (TypeAdapter<T>) new TypeAdapter<VelocityTemplateLoaderShared>() {
           @Override
           public void write(JsonWriter out, VelocityTemplateLoaderShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VelocityTemplateLoaderShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VelocityTemplateLoaderShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VelocityTemplateLoaderShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VelocityTemplateLoaderShared
  * @throws IOException if the JSON string is invalid with respect to VelocityTemplateLoaderShared
  */
  public static VelocityTemplateLoaderShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VelocityTemplateLoaderShared.class);
  }

 /**
  * Convert an instance of VelocityTemplateLoaderShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

