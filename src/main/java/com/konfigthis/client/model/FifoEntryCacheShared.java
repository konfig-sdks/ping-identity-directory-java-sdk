/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumfifoEntryCacheSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FifoEntryCacheShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FifoEntryCacheShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumfifoEntryCacheSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_MEMORY_PERCENT = "maxMemoryPercent";
  @SerializedName(SERIALIZED_NAME_MAX_MEMORY_PERCENT)
  private Integer maxMemoryPercent;

  public static final String SERIALIZED_NAME_MAX_ENTRIES = "maxEntries";
  @SerializedName(SERIALIZED_NAME_MAX_ENTRIES)
  private Integer maxEntries;

  public static final String SERIALIZED_NAME_ONLY_CACHE_FREQUENTLY_ACCESSED = "onlyCacheFrequentlyAccessed";
  @SerializedName(SERIALIZED_NAME_ONLY_CACHE_FREQUENTLY_ACCESSED)
  private Boolean onlyCacheFrequentlyAccessed;

  public static final String SERIALIZED_NAME_INCLUDE_FILTER = "includeFilter";
  @SerializedName(SERIALIZED_NAME_INCLUDE_FILTER)
  private List<String> includeFilter = null;

  public static final String SERIALIZED_NAME_EXCLUDE_FILTER = "excludeFilter";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_FILTER)
  private List<String> excludeFilter = null;

  public static final String SERIALIZED_NAME_MIN_CACHE_ENTRY_VALUE_COUNT = "minCacheEntryValueCount";
  @SerializedName(SERIALIZED_NAME_MIN_CACHE_ENTRY_VALUE_COUNT)
  private Integer minCacheEntryValueCount;

  public static final String SERIALIZED_NAME_MIN_CACHE_ENTRY_ATTRIBUTE = "minCacheEntryAttribute";
  @SerializedName(SERIALIZED_NAME_MIN_CACHE_ENTRY_ATTRIBUTE)
  private List<String> minCacheEntryAttribute = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_CACHE_LEVEL = "cacheLevel";
  @SerializedName(SERIALIZED_NAME_CACHE_LEVEL)
  private Integer cacheLevel;

  public static final String SERIALIZED_NAME_CACHE_UNINDEXED_SEARCH_RESULTS = "cacheUnindexedSearchResults";
  @SerializedName(SERIALIZED_NAME_CACHE_UNINDEXED_SEARCH_RESULTS)
  private Boolean cacheUnindexedSearchResults;

  public FifoEntryCacheShared() {
  }

  public FifoEntryCacheShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Entry Cache
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Entry Cache")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public FifoEntryCacheShared schemas(List<EnumfifoEntryCacheSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public FifoEntryCacheShared addSchemasItem(EnumfifoEntryCacheSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumfifoEntryCacheSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumfifoEntryCacheSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public FifoEntryCacheShared maxMemoryPercent(Integer maxMemoryPercent) {
    
    
    
    
    this.maxMemoryPercent = maxMemoryPercent;
    return this;
  }

   /**
   * Specifies the maximum amount of memory, as a percentage of the total maximum JVM heap size, that this cache should occupy when full. If the amount of memory the cache is using is greater than this amount, then an attempt to put a new entry in the cache will be ignored and will cause the oldest entry to be purged.
   * @return maxMemoryPercent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum amount of memory, as a percentage of the total maximum JVM heap size, that this cache should occupy when full. If the amount of memory the cache is using is greater than this amount, then an attempt to put a new entry in the cache will be ignored and will cause the oldest entry to be purged.")

  public Integer getMaxMemoryPercent() {
    return maxMemoryPercent;
  }


  public void setMaxMemoryPercent(Integer maxMemoryPercent) {
    
    
    
    this.maxMemoryPercent = maxMemoryPercent;
  }


  public FifoEntryCacheShared maxEntries(Integer maxEntries) {
    
    
    
    
    this.maxEntries = maxEntries;
    return this;
  }

   /**
   * Specifies the maximum number of entries that will be allowed in the cache. Once the cache reaches this size, then adding new entries will cause existing entries to be purged, starting with the oldest.
   * @return maxEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of entries that will be allowed in the cache. Once the cache reaches this size, then adding new entries will cause existing entries to be purged, starting with the oldest.")

  public Integer getMaxEntries() {
    return maxEntries;
  }


  public void setMaxEntries(Integer maxEntries) {
    
    
    
    this.maxEntries = maxEntries;
  }


  public FifoEntryCacheShared onlyCacheFrequentlyAccessed(Boolean onlyCacheFrequentlyAccessed) {
    
    
    
    
    this.onlyCacheFrequentlyAccessed = onlyCacheFrequentlyAccessed;
    return this;
  }

   /**
   * Specifies that the cache should only store entries which are accessed much more frequently than the average entry. The cache will observe attempts to place entries in the cache and compare an entry&#39;s accesses to the average entry&#39;s.
   * @return onlyCacheFrequentlyAccessed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies that the cache should only store entries which are accessed much more frequently than the average entry. The cache will observe attempts to place entries in the cache and compare an entry's accesses to the average entry's.")

  public Boolean getOnlyCacheFrequentlyAccessed() {
    return onlyCacheFrequentlyAccessed;
  }


  public void setOnlyCacheFrequentlyAccessed(Boolean onlyCacheFrequentlyAccessed) {
    
    
    
    this.onlyCacheFrequentlyAccessed = onlyCacheFrequentlyAccessed;
  }


  public FifoEntryCacheShared includeFilter(List<String> includeFilter) {
    
    
    
    
    this.includeFilter = includeFilter;
    return this;
  }

  public FifoEntryCacheShared addIncludeFilterItem(String includeFilterItem) {
    if (this.includeFilter == null) {
      this.includeFilter = new ArrayList<>();
    }
    this.includeFilter.add(includeFilterItem);
    return this;
  }

   /**
   * The set of filters that define the entries that should be included in the cache.
   * @return includeFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of filters that define the entries that should be included in the cache.")

  public List<String> getIncludeFilter() {
    return includeFilter;
  }


  public void setIncludeFilter(List<String> includeFilter) {
    
    
    
    this.includeFilter = includeFilter;
  }


  public FifoEntryCacheShared excludeFilter(List<String> excludeFilter) {
    
    
    
    
    this.excludeFilter = excludeFilter;
    return this;
  }

  public FifoEntryCacheShared addExcludeFilterItem(String excludeFilterItem) {
    if (this.excludeFilter == null) {
      this.excludeFilter = new ArrayList<>();
    }
    this.excludeFilter.add(excludeFilterItem);
    return this;
  }

   /**
   * The set of filters that define the entries that should be excluded from the cache.
   * @return excludeFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of filters that define the entries that should be excluded from the cache.")

  public List<String> getExcludeFilter() {
    return excludeFilter;
  }


  public void setExcludeFilter(List<String> excludeFilter) {
    
    
    
    this.excludeFilter = excludeFilter;
  }


  public FifoEntryCacheShared minCacheEntryValueCount(Integer minCacheEntryValueCount) {
    
    
    
    
    this.minCacheEntryValueCount = minCacheEntryValueCount;
    return this;
  }

   /**
   * Specifies the minimum number of attribute values (optionally across a specified subset of attributes as defined in the min-cache-entry-attributes property) for entries that should be held in the cache. Entries with fewer than this number of attribute values will be excluded from the cache.
   * @return minCacheEntryValueCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the minimum number of attribute values (optionally across a specified subset of attributes as defined in the min-cache-entry-attributes property) for entries that should be held in the cache. Entries with fewer than this number of attribute values will be excluded from the cache.")

  public Integer getMinCacheEntryValueCount() {
    return minCacheEntryValueCount;
  }


  public void setMinCacheEntryValueCount(Integer minCacheEntryValueCount) {
    
    
    
    this.minCacheEntryValueCount = minCacheEntryValueCount;
  }


  public FifoEntryCacheShared minCacheEntryAttribute(List<String> minCacheEntryAttribute) {
    
    
    
    
    this.minCacheEntryAttribute = minCacheEntryAttribute;
    return this;
  }

  public FifoEntryCacheShared addMinCacheEntryAttributeItem(String minCacheEntryAttributeItem) {
    if (this.minCacheEntryAttribute == null) {
      this.minCacheEntryAttribute = new ArrayList<>();
    }
    this.minCacheEntryAttribute.add(minCacheEntryAttributeItem);
    return this;
  }

   /**
   * Specifies the names of the attribute types for which the min-cache-entry-value-count property should apply. If no attribute types are specified, then all user attributes will be examined.
   * @return minCacheEntryAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the attribute types for which the min-cache-entry-value-count property should apply. If no attribute types are specified, then all user attributes will be examined.")

  public List<String> getMinCacheEntryAttribute() {
    return minCacheEntryAttribute;
  }


  public void setMinCacheEntryAttribute(List<String> minCacheEntryAttribute) {
    
    
    
    this.minCacheEntryAttribute = minCacheEntryAttribute;
  }


  public FifoEntryCacheShared enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Entry Cache is enabled.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Entry Cache is enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public FifoEntryCacheShared cacheLevel(Integer cacheLevel) {
    
    
    
    
    this.cacheLevel = cacheLevel;
    return this;
  }

   /**
   * Specifies the cache level in the cache order if more than one instance of the cache is configured.
   * @return cacheLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the cache level in the cache order if more than one instance of the cache is configured.")

  public Integer getCacheLevel() {
    return cacheLevel;
  }


  public void setCacheLevel(Integer cacheLevel) {
    
    
    
    this.cacheLevel = cacheLevel;
  }


  public FifoEntryCacheShared cacheUnindexedSearchResults(Boolean cacheUnindexedSearchResults) {
    
    
    
    
    this.cacheUnindexedSearchResults = cacheUnindexedSearchResults;
    return this;
  }

   /**
   * Indicates whether the entry cache should be updated with entries that have been returned to the client during the course of processing an unindexed search.
   * @return cacheUnindexedSearchResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the entry cache should be updated with entries that have been returned to the client during the course of processing an unindexed search.")

  public Boolean getCacheUnindexedSearchResults() {
    return cacheUnindexedSearchResults;
  }


  public void setCacheUnindexedSearchResults(Boolean cacheUnindexedSearchResults) {
    
    
    
    this.cacheUnindexedSearchResults = cacheUnindexedSearchResults;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FifoEntryCacheShared instance itself
   */
  public FifoEntryCacheShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FifoEntryCacheShared fifoEntryCacheShared = (FifoEntryCacheShared) o;
    return Objects.equals(this.description, fifoEntryCacheShared.description) &&
        Objects.equals(this.schemas, fifoEntryCacheShared.schemas) &&
        Objects.equals(this.maxMemoryPercent, fifoEntryCacheShared.maxMemoryPercent) &&
        Objects.equals(this.maxEntries, fifoEntryCacheShared.maxEntries) &&
        Objects.equals(this.onlyCacheFrequentlyAccessed, fifoEntryCacheShared.onlyCacheFrequentlyAccessed) &&
        Objects.equals(this.includeFilter, fifoEntryCacheShared.includeFilter) &&
        Objects.equals(this.excludeFilter, fifoEntryCacheShared.excludeFilter) &&
        Objects.equals(this.minCacheEntryValueCount, fifoEntryCacheShared.minCacheEntryValueCount) &&
        Objects.equals(this.minCacheEntryAttribute, fifoEntryCacheShared.minCacheEntryAttribute) &&
        Objects.equals(this.enabled, fifoEntryCacheShared.enabled) &&
        Objects.equals(this.cacheLevel, fifoEntryCacheShared.cacheLevel) &&
        Objects.equals(this.cacheUnindexedSearchResults, fifoEntryCacheShared.cacheUnindexedSearchResults)&&
        Objects.equals(this.additionalProperties, fifoEntryCacheShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, maxMemoryPercent, maxEntries, onlyCacheFrequentlyAccessed, includeFilter, excludeFilter, minCacheEntryValueCount, minCacheEntryAttribute, enabled, cacheLevel, cacheUnindexedSearchResults, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FifoEntryCacheShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    maxMemoryPercent: ").append(toIndentedString(maxMemoryPercent)).append("\n");
    sb.append("    maxEntries: ").append(toIndentedString(maxEntries)).append("\n");
    sb.append("    onlyCacheFrequentlyAccessed: ").append(toIndentedString(onlyCacheFrequentlyAccessed)).append("\n");
    sb.append("    includeFilter: ").append(toIndentedString(includeFilter)).append("\n");
    sb.append("    excludeFilter: ").append(toIndentedString(excludeFilter)).append("\n");
    sb.append("    minCacheEntryValueCount: ").append(toIndentedString(minCacheEntryValueCount)).append("\n");
    sb.append("    minCacheEntryAttribute: ").append(toIndentedString(minCacheEntryAttribute)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    cacheLevel: ").append(toIndentedString(cacheLevel)).append("\n");
    sb.append("    cacheUnindexedSearchResults: ").append(toIndentedString(cacheUnindexedSearchResults)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("maxMemoryPercent");
    openapiFields.add("maxEntries");
    openapiFields.add("onlyCacheFrequentlyAccessed");
    openapiFields.add("includeFilter");
    openapiFields.add("excludeFilter");
    openapiFields.add("minCacheEntryValueCount");
    openapiFields.add("minCacheEntryAttribute");
    openapiFields.add("enabled");
    openapiFields.add("cacheLevel");
    openapiFields.add("cacheUnindexedSearchResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("cacheLevel");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FifoEntryCacheShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FifoEntryCacheShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FifoEntryCacheShared is not found in the empty JSON string", FifoEntryCacheShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FifoEntryCacheShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includeFilter") != null && !jsonObj.get("includeFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeFilter` to be an array in the JSON string but got `%s`", jsonObj.get("includeFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludeFilter") != null && !jsonObj.get("excludeFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeFilter` to be an array in the JSON string but got `%s`", jsonObj.get("excludeFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("minCacheEntryAttribute") != null && !jsonObj.get("minCacheEntryAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `minCacheEntryAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("minCacheEntryAttribute").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FifoEntryCacheShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FifoEntryCacheShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FifoEntryCacheShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FifoEntryCacheShared.class));

       return (TypeAdapter<T>) new TypeAdapter<FifoEntryCacheShared>() {
           @Override
           public void write(JsonWriter out, FifoEntryCacheShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FifoEntryCacheShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FifoEntryCacheShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FifoEntryCacheShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FifoEntryCacheShared
  * @throws IOException if the JSON string is invalid with respect to FifoEntryCacheShared
  */
  public static FifoEntryCacheShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FifoEntryCacheShared.class);
  }

 /**
  * Convert an instance of FifoEntryCacheShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

