/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumconnectionHandlerSslClientAuthPolicyProp;
import com.konfigthis.client.model.EnumhttpConnectionHandlerSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * HttpConnectionHandlerResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class HttpConnectionHandlerResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumhttpConnectionHandlerSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_LISTEN_ADDRESS = "listenAddress";
  @SerializedName(SERIALIZED_NAME_LISTEN_ADDRESS)
  private String listenAddress;

  public static final String SERIALIZED_NAME_LISTEN_PORT = "listenPort";
  @SerializedName(SERIALIZED_NAME_LISTEN_PORT)
  private Integer listenPort;

  public static final String SERIALIZED_NAME_USE_S_S_L = "useSSL";
  @SerializedName(SERIALIZED_NAME_USE_S_S_L)
  private Boolean useSSL;

  public static final String SERIALIZED_NAME_SSL_CERT_NICKNAME = "sslCertNickname";
  @SerializedName(SERIALIZED_NAME_SSL_CERT_NICKNAME)
  private String sslCertNickname;

  public static final String SERIALIZED_NAME_HTTP_SERVLET_EXTENSION = "httpServletExtension";
  @SerializedName(SERIALIZED_NAME_HTTP_SERVLET_EXTENSION)
  private List<String> httpServletExtension = null;

  public static final String SERIALIZED_NAME_WEB_APPLICATION_EXTENSION = "webApplicationExtension";
  @SerializedName(SERIALIZED_NAME_WEB_APPLICATION_EXTENSION)
  private List<String> webApplicationExtension = null;

  public static final String SERIALIZED_NAME_HTTP_OPERATION_LOG_PUBLISHER = "httpOperationLogPublisher";
  @SerializedName(SERIALIZED_NAME_HTTP_OPERATION_LOG_PUBLISHER)
  private List<String> httpOperationLogPublisher = null;

  public static final String SERIALIZED_NAME_SSL_PROTOCOL = "sslProtocol";
  @SerializedName(SERIALIZED_NAME_SSL_PROTOCOL)
  private List<String> sslProtocol = null;

  public static final String SERIALIZED_NAME_SSL_CIPHER_SUITE = "sslCipherSuite";
  @SerializedName(SERIALIZED_NAME_SSL_CIPHER_SUITE)
  private List<String> sslCipherSuite = null;

  public static final String SERIALIZED_NAME_KEY_MANAGER_PROVIDER = "keyManagerProvider";
  @SerializedName(SERIALIZED_NAME_KEY_MANAGER_PROVIDER)
  private String keyManagerProvider;

  public static final String SERIALIZED_NAME_TRUST_MANAGER_PROVIDER = "trustManagerProvider";
  @SerializedName(SERIALIZED_NAME_TRUST_MANAGER_PROVIDER)
  private String trustManagerProvider;

  public static final String SERIALIZED_NAME_NUM_REQUEST_HANDLERS = "numRequestHandlers";
  @SerializedName(SERIALIZED_NAME_NUM_REQUEST_HANDLERS)
  private Integer numRequestHandlers;

  public static final String SERIALIZED_NAME_KEEP_STATS = "keepStats";
  @SerializedName(SERIALIZED_NAME_KEEP_STATS)
  private Boolean keepStats;

  public static final String SERIALIZED_NAME_ACCEPT_BACKLOG = "acceptBacklog";
  @SerializedName(SERIALIZED_NAME_ACCEPT_BACKLOG)
  private Integer acceptBacklog;

  public static final String SERIALIZED_NAME_ALLOW_T_C_P_REUSE_ADDRESS = "allowTCPReuseAddress";
  @SerializedName(SERIALIZED_NAME_ALLOW_T_C_P_REUSE_ADDRESS)
  private Boolean allowTCPReuseAddress;

  public static final String SERIALIZED_NAME_IDLE_TIME_LIMIT = "idleTimeLimit";
  @SerializedName(SERIALIZED_NAME_IDLE_TIME_LIMIT)
  private String idleTimeLimit;

  public static final String SERIALIZED_NAME_LOW_RESOURCES_CONNECTION_THRESHOLD = "lowResourcesConnectionThreshold";
  @SerializedName(SERIALIZED_NAME_LOW_RESOURCES_CONNECTION_THRESHOLD)
  private Integer lowResourcesConnectionThreshold;

  public static final String SERIALIZED_NAME_LOW_RESOURCES_IDLE_TIME_LIMIT = "lowResourcesIdleTimeLimit";
  @SerializedName(SERIALIZED_NAME_LOW_RESOURCES_IDLE_TIME_LIMIT)
  private String lowResourcesIdleTimeLimit;

  public static final String SERIALIZED_NAME_ENABLE_MULTIPART_M_I_M_E_PARAMETERS = "enableMultipartMIMEParameters";
  @SerializedName(SERIALIZED_NAME_ENABLE_MULTIPART_M_I_M_E_PARAMETERS)
  private Boolean enableMultipartMIMEParameters;

  public static final String SERIALIZED_NAME_USE_FORWARDED_HEADERS = "useForwardedHeaders";
  @SerializedName(SERIALIZED_NAME_USE_FORWARDED_HEADERS)
  private Boolean useForwardedHeaders;

  public static final String SERIALIZED_NAME_HTTP_REQUEST_HEADER_SIZE = "httpRequestHeaderSize";
  @SerializedName(SERIALIZED_NAME_HTTP_REQUEST_HEADER_SIZE)
  private Integer httpRequestHeaderSize;

  public static final String SERIALIZED_NAME_RESPONSE_HEADER = "responseHeader";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER)
  private List<String> responseHeader = null;

  public static final String SERIALIZED_NAME_USE_CORRELATION_I_D_HEADER = "useCorrelationIDHeader";
  @SerializedName(SERIALIZED_NAME_USE_CORRELATION_I_D_HEADER)
  private Boolean useCorrelationIDHeader;

  public static final String SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER = "correlationIDResponseHeader";
  @SerializedName(SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER)
  private String correlationIDResponseHeader;

  public static final String SERIALIZED_NAME_CORRELATION_I_D_REQUEST_HEADER = "correlationIDRequestHeader";
  @SerializedName(SERIALIZED_NAME_CORRELATION_I_D_REQUEST_HEADER)
  private List<String> correlationIDRequestHeader = null;

  public static final String SERIALIZED_NAME_SSL_CLIENT_AUTH_POLICY = "sslClientAuthPolicy";
  @SerializedName(SERIALIZED_NAME_SSL_CLIENT_AUTH_POLICY)
  private EnumconnectionHandlerSslClientAuthPolicyProp sslClientAuthPolicy;

  public static final String SERIALIZED_NAME_ENABLE_SNI_HOSTNAME_CHECKS = "enableSniHostnameChecks";
  @SerializedName(SERIALIZED_NAME_ENABLE_SNI_HOSTNAME_CHECKS)
  private Boolean enableSniHostnameChecks;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public HttpConnectionHandlerResponse() {
  }

  public HttpConnectionHandlerResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Connection Handler
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Connection Handler")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public HttpConnectionHandlerResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Connection Handler
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Connection Handler")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public HttpConnectionHandlerResponse schemas(List<EnumhttpConnectionHandlerSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public HttpConnectionHandlerResponse addSchemasItem(EnumhttpConnectionHandlerSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumhttpConnectionHandlerSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumhttpConnectionHandlerSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public HttpConnectionHandlerResponse listenAddress(String listenAddress) {
    
    
    
    
    this.listenAddress = listenAddress;
    return this;
  }

   /**
   * Specifies the address on which to listen for connections from HTTP clients. If no value is defined, the server will listen on all addresses on all interfaces.
   * @return listenAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the address on which to listen for connections from HTTP clients. If no value is defined, the server will listen on all addresses on all interfaces.")

  public String getListenAddress() {
    return listenAddress;
  }


  public void setListenAddress(String listenAddress) {
    
    
    
    this.listenAddress = listenAddress;
  }


  public HttpConnectionHandlerResponse listenPort(Integer listenPort) {
    
    
    
    
    this.listenPort = listenPort;
    return this;
  }

   /**
   * Specifies the port number on which the HTTP Connection Handler will listen for connections from clients.
   * @return listenPort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the port number on which the HTTP Connection Handler will listen for connections from clients.")

  public Integer getListenPort() {
    return listenPort;
  }


  public void setListenPort(Integer listenPort) {
    
    
    
    this.listenPort = listenPort;
  }


  public HttpConnectionHandlerResponse useSSL(Boolean useSSL) {
    
    
    
    
    this.useSSL = useSSL;
    return this;
  }

   /**
   * Indicates whether the HTTP Connection Handler should use SSL.
   * @return useSSL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the HTTP Connection Handler should use SSL.")

  public Boolean getUseSSL() {
    return useSSL;
  }


  public void setUseSSL(Boolean useSSL) {
    
    
    
    this.useSSL = useSSL;
  }


  public HttpConnectionHandlerResponse sslCertNickname(String sslCertNickname) {
    
    
    
    
    this.sslCertNickname = sslCertNickname;
    return this;
  }

   /**
   * Specifies the nickname (also called the alias) of the certificate that the HTTP Connection Handler should use when performing SSL communication.
   * @return sslCertNickname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the nickname (also called the alias) of the certificate that the HTTP Connection Handler should use when performing SSL communication.")

  public String getSslCertNickname() {
    return sslCertNickname;
  }


  public void setSslCertNickname(String sslCertNickname) {
    
    
    
    this.sslCertNickname = sslCertNickname;
  }


  public HttpConnectionHandlerResponse httpServletExtension(List<String> httpServletExtension) {
    
    
    
    
    this.httpServletExtension = httpServletExtension;
    return this;
  }

  public HttpConnectionHandlerResponse addHttpServletExtensionItem(String httpServletExtensionItem) {
    if (this.httpServletExtension == null) {
      this.httpServletExtension = new ArrayList<>();
    }
    this.httpServletExtension.add(httpServletExtensionItem);
    return this;
  }

   /**
   * Specifies information about servlets that will be provided via this connection handler.
   * @return httpServletExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies information about servlets that will be provided via this connection handler.")

  public List<String> getHttpServletExtension() {
    return httpServletExtension;
  }


  public void setHttpServletExtension(List<String> httpServletExtension) {
    
    
    
    this.httpServletExtension = httpServletExtension;
  }


  public HttpConnectionHandlerResponse webApplicationExtension(List<String> webApplicationExtension) {
    
    
    
    
    this.webApplicationExtension = webApplicationExtension;
    return this;
  }

  public HttpConnectionHandlerResponse addWebApplicationExtensionItem(String webApplicationExtensionItem) {
    if (this.webApplicationExtension == null) {
      this.webApplicationExtension = new ArrayList<>();
    }
    this.webApplicationExtension.add(webApplicationExtensionItem);
    return this;
  }

   /**
   * Specifies information about web applications that will be provided via this connection handler.
   * @return webApplicationExtension
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies information about web applications that will be provided via this connection handler.")

  public List<String> getWebApplicationExtension() {
    return webApplicationExtension;
  }


  public void setWebApplicationExtension(List<String> webApplicationExtension) {
    
    
    
    this.webApplicationExtension = webApplicationExtension;
  }


  public HttpConnectionHandlerResponse httpOperationLogPublisher(List<String> httpOperationLogPublisher) {
    
    
    
    
    this.httpOperationLogPublisher = httpOperationLogPublisher;
    return this;
  }

  public HttpConnectionHandlerResponse addHttpOperationLogPublisherItem(String httpOperationLogPublisherItem) {
    if (this.httpOperationLogPublisher == null) {
      this.httpOperationLogPublisher = new ArrayList<>();
    }
    this.httpOperationLogPublisher.add(httpOperationLogPublisherItem);
    return this;
  }

   /**
   * Specifies the set of HTTP operation loggers that should be used to log information about requests and responses for operations processed through this HTTP Connection Handler.
   * @return httpOperationLogPublisher
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the set of HTTP operation loggers that should be used to log information about requests and responses for operations processed through this HTTP Connection Handler.")

  public List<String> getHttpOperationLogPublisher() {
    return httpOperationLogPublisher;
  }


  public void setHttpOperationLogPublisher(List<String> httpOperationLogPublisher) {
    
    
    
    this.httpOperationLogPublisher = httpOperationLogPublisher;
  }


  public HttpConnectionHandlerResponse sslProtocol(List<String> sslProtocol) {
    
    
    
    
    this.sslProtocol = sslProtocol;
    return this;
  }

  public HttpConnectionHandlerResponse addSslProtocolItem(String sslProtocolItem) {
    if (this.sslProtocol == null) {
      this.sslProtocol = new ArrayList<>();
    }
    this.sslProtocol.add(sslProtocolItem);
    return this;
  }

   /**
   * Specifies the names of the SSL protocols that are allowed for use in SSL communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry.
   * @return sslProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the SSL protocols that are allowed for use in SSL communication. The set of supported ssl protocols can be viewed via the ssl context monitor entry.")

  public List<String> getSslProtocol() {
    return sslProtocol;
  }


  public void setSslProtocol(List<String> sslProtocol) {
    
    
    
    this.sslProtocol = sslProtocol;
  }


  public HttpConnectionHandlerResponse sslCipherSuite(List<String> sslCipherSuite) {
    
    
    
    
    this.sslCipherSuite = sslCipherSuite;
    return this;
  }

  public HttpConnectionHandlerResponse addSslCipherSuiteItem(String sslCipherSuiteItem) {
    if (this.sslCipherSuite == null) {
      this.sslCipherSuite = new ArrayList<>();
    }
    this.sslCipherSuite.add(sslCipherSuiteItem);
    return this;
  }

   /**
   * Specifies the names of the SSL cipher suites that are allowed for use in SSL communication. The set of supported cipher suites can be viewed via the ssl context monitor entry.
   * @return sslCipherSuite
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the SSL cipher suites that are allowed for use in SSL communication. The set of supported cipher suites can be viewed via the ssl context monitor entry.")

  public List<String> getSslCipherSuite() {
    return sslCipherSuite;
  }


  public void setSslCipherSuite(List<String> sslCipherSuite) {
    
    
    
    this.sslCipherSuite = sslCipherSuite;
  }


  public HttpConnectionHandlerResponse keyManagerProvider(String keyManagerProvider) {
    
    
    
    
    this.keyManagerProvider = keyManagerProvider;
    return this;
  }

   /**
   * Specifies the key manager provider that will be used to obtain the certificate to present to HTTPS clients.
   * @return keyManagerProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the key manager provider that will be used to obtain the certificate to present to HTTPS clients.")

  public String getKeyManagerProvider() {
    return keyManagerProvider;
  }


  public void setKeyManagerProvider(String keyManagerProvider) {
    
    
    
    this.keyManagerProvider = keyManagerProvider;
  }


  public HttpConnectionHandlerResponse trustManagerProvider(String trustManagerProvider) {
    
    
    
    
    this.trustManagerProvider = trustManagerProvider;
    return this;
  }

   /**
   * Specifies the trust manager provider that will be used to validate any certificates presented by HTTPS clients.
   * @return trustManagerProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the trust manager provider that will be used to validate any certificates presented by HTTPS clients.")

  public String getTrustManagerProvider() {
    return trustManagerProvider;
  }


  public void setTrustManagerProvider(String trustManagerProvider) {
    
    
    
    this.trustManagerProvider = trustManagerProvider;
  }


  public HttpConnectionHandlerResponse numRequestHandlers(Integer numRequestHandlers) {
    
    
    
    
    this.numRequestHandlers = numRequestHandlers;
    return this;
  }

   /**
   * Specifies the number of threads that will be used for accepting connections and reading requests from clients.
   * @return numRequestHandlers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of threads that will be used for accepting connections and reading requests from clients.")

  public Integer getNumRequestHandlers() {
    return numRequestHandlers;
  }


  public void setNumRequestHandlers(Integer numRequestHandlers) {
    
    
    
    this.numRequestHandlers = numRequestHandlers;
  }


  public HttpConnectionHandlerResponse keepStats(Boolean keepStats) {
    
    
    
    
    this.keepStats = keepStats;
    return this;
  }

   /**
   * Indicates whether to enable statistics collection for this connection handler.
   * @return keepStats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to enable statistics collection for this connection handler.")

  public Boolean getKeepStats() {
    return keepStats;
  }


  public void setKeepStats(Boolean keepStats) {
    
    
    
    this.keepStats = keepStats;
  }


  public HttpConnectionHandlerResponse acceptBacklog(Integer acceptBacklog) {
    
    
    
    
    this.acceptBacklog = acceptBacklog;
    return this;
  }

   /**
   * Specifies the number of concurrent outstanding connection attempts that the connection handler should allow. The default value should be acceptable in most cases, but it may need to be increased in environments that may attempt to establish large numbers of connections simultaneously.
   * @return acceptBacklog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of concurrent outstanding connection attempts that the connection handler should allow. The default value should be acceptable in most cases, but it may need to be increased in environments that may attempt to establish large numbers of connections simultaneously.")

  public Integer getAcceptBacklog() {
    return acceptBacklog;
  }


  public void setAcceptBacklog(Integer acceptBacklog) {
    
    
    
    this.acceptBacklog = acceptBacklog;
  }


  public HttpConnectionHandlerResponse allowTCPReuseAddress(Boolean allowTCPReuseAddress) {
    
    
    
    
    this.allowTCPReuseAddress = allowTCPReuseAddress;
    return this;
  }

   /**
   * Indicates whether the server should attempt to reuse socket descriptors. This may be useful in environments with a high rate of connection establishment and termination.
   * @return allowTCPReuseAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should attempt to reuse socket descriptors. This may be useful in environments with a high rate of connection establishment and termination.")

  public Boolean getAllowTCPReuseAddress() {
    return allowTCPReuseAddress;
  }


  public void setAllowTCPReuseAddress(Boolean allowTCPReuseAddress) {
    
    
    
    this.allowTCPReuseAddress = allowTCPReuseAddress;
  }


  public HttpConnectionHandlerResponse idleTimeLimit(String idleTimeLimit) {
    
    
    
    
    this.idleTimeLimit = idleTimeLimit;
    return this;
  }

   /**
   * Specifies the maximum idle time for a connection. The max idle time is applied when waiting for a new request to be received on a connection, when reading the headers and content of a request, or when writing the headers and content of a response.
   * @return idleTimeLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum idle time for a connection. The max idle time is applied when waiting for a new request to be received on a connection, when reading the headers and content of a request, or when writing the headers and content of a response.")

  public String getIdleTimeLimit() {
    return idleTimeLimit;
  }


  public void setIdleTimeLimit(String idleTimeLimit) {
    
    
    
    this.idleTimeLimit = idleTimeLimit;
  }


  public HttpConnectionHandlerResponse lowResourcesConnectionThreshold(Integer lowResourcesConnectionThreshold) {
    
    
    
    
    this.lowResourcesConnectionThreshold = lowResourcesConnectionThreshold;
    return this;
  }

   /**
   * Specifies the number of connections, which if exceeded, places this handler in a low resource state where a different idle time limit is applied on the connections.
   * @return lowResourcesConnectionThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of connections, which if exceeded, places this handler in a low resource state where a different idle time limit is applied on the connections.")

  public Integer getLowResourcesConnectionThreshold() {
    return lowResourcesConnectionThreshold;
  }


  public void setLowResourcesConnectionThreshold(Integer lowResourcesConnectionThreshold) {
    
    
    
    this.lowResourcesConnectionThreshold = lowResourcesConnectionThreshold;
  }


  public HttpConnectionHandlerResponse lowResourcesIdleTimeLimit(String lowResourcesIdleTimeLimit) {
    
    
    
    
    this.lowResourcesIdleTimeLimit = lowResourcesIdleTimeLimit;
    return this;
  }

   /**
   * Specifies the maximum idle time for a connection when this handler is in a low resource state as defined by low-resource-connections. The max idle time is applied when waiting for a new request to be received on a connection, when reading the headers and content of a request, or when writing the headers and content of a response.
   * @return lowResourcesIdleTimeLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum idle time for a connection when this handler is in a low resource state as defined by low-resource-connections. The max idle time is applied when waiting for a new request to be received on a connection, when reading the headers and content of a request, or when writing the headers and content of a response.")

  public String getLowResourcesIdleTimeLimit() {
    return lowResourcesIdleTimeLimit;
  }


  public void setLowResourcesIdleTimeLimit(String lowResourcesIdleTimeLimit) {
    
    
    
    this.lowResourcesIdleTimeLimit = lowResourcesIdleTimeLimit;
  }


  public HttpConnectionHandlerResponse enableMultipartMIMEParameters(Boolean enableMultipartMIMEParameters) {
    
    
    
    
    this.enableMultipartMIMEParameters = enableMultipartMIMEParameters;
    return this;
  }

   /**
   * Determines whether request form parameters submitted in multipart/ form-data (RFC 2388) format should be processed as request parameters.
   * @return enableMultipartMIMEParameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether request form parameters submitted in multipart/ form-data (RFC 2388) format should be processed as request parameters.")

  public Boolean getEnableMultipartMIMEParameters() {
    return enableMultipartMIMEParameters;
  }


  public void setEnableMultipartMIMEParameters(Boolean enableMultipartMIMEParameters) {
    
    
    
    this.enableMultipartMIMEParameters = enableMultipartMIMEParameters;
  }


  public HttpConnectionHandlerResponse useForwardedHeaders(Boolean useForwardedHeaders) {
    
    
    
    
    this.useForwardedHeaders = useForwardedHeaders;
    return this;
  }

   /**
   * Indicates whether to use \&quot;Forwarded\&quot; and \&quot;X-Forwarded-*\&quot; request headers to override corresponding HTTP request information available during request processing.
   * @return useForwardedHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to use \"Forwarded\" and \"X-Forwarded-*\" request headers to override corresponding HTTP request information available during request processing.")

  public Boolean getUseForwardedHeaders() {
    return useForwardedHeaders;
  }


  public void setUseForwardedHeaders(Boolean useForwardedHeaders) {
    
    
    
    this.useForwardedHeaders = useForwardedHeaders;
  }


  public HttpConnectionHandlerResponse httpRequestHeaderSize(Integer httpRequestHeaderSize) {
    
    
    
    
    this.httpRequestHeaderSize = httpRequestHeaderSize;
    return this;
  }

   /**
   * Specifies the maximum buffer size of an http request including the request uri and all of the request headers.
   * @return httpRequestHeaderSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum buffer size of an http request including the request uri and all of the request headers.")

  public Integer getHttpRequestHeaderSize() {
    return httpRequestHeaderSize;
  }


  public void setHttpRequestHeaderSize(Integer httpRequestHeaderSize) {
    
    
    
    this.httpRequestHeaderSize = httpRequestHeaderSize;
  }


  public HttpConnectionHandlerResponse responseHeader(List<String> responseHeader) {
    
    
    
    
    this.responseHeader = responseHeader;
    return this;
  }

  public HttpConnectionHandlerResponse addResponseHeaderItem(String responseHeaderItem) {
    if (this.responseHeader == null) {
      this.responseHeader = new ArrayList<>();
    }
    this.responseHeader.add(responseHeaderItem);
    return this;
  }

   /**
   * Specifies HTTP header fields and values added to response headers for all requests.
   * @return responseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies HTTP header fields and values added to response headers for all requests.")

  public List<String> getResponseHeader() {
    return responseHeader;
  }


  public void setResponseHeader(List<String> responseHeader) {
    
    
    
    this.responseHeader = responseHeader;
  }


  public HttpConnectionHandlerResponse useCorrelationIDHeader(Boolean useCorrelationIDHeader) {
    
    
    
    
    this.useCorrelationIDHeader = useCorrelationIDHeader;
    return this;
  }

   /**
   * If enabled, a correlation ID header will be added to outgoing HTTP responses.
   * @return useCorrelationIDHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, a correlation ID header will be added to outgoing HTTP responses.")

  public Boolean getUseCorrelationIDHeader() {
    return useCorrelationIDHeader;
  }


  public void setUseCorrelationIDHeader(Boolean useCorrelationIDHeader) {
    
    
    
    this.useCorrelationIDHeader = useCorrelationIDHeader;
  }


  public HttpConnectionHandlerResponse correlationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
    return this;
  }

   /**
   * Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \&quot;Correlation-Id\&quot;, \&quot;X-Amzn-Trace-Id\&quot;, and \&quot;X-Request-Id\&quot;.
   * @return correlationIDResponseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \"Correlation-Id\", \"X-Amzn-Trace-Id\", and \"X-Request-Id\".")

  public String getCorrelationIDResponseHeader() {
    return correlationIDResponseHeader;
  }


  public void setCorrelationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
  }


  public HttpConnectionHandlerResponse correlationIDRequestHeader(List<String> correlationIDRequestHeader) {
    
    
    
    
    this.correlationIDRequestHeader = correlationIDRequestHeader;
    return this;
  }

  public HttpConnectionHandlerResponse addCorrelationIDRequestHeaderItem(String correlationIDRequestHeaderItem) {
    if (this.correlationIDRequestHeader == null) {
      this.correlationIDRequestHeader = new ArrayList<>();
    }
    this.correlationIDRequestHeader.add(correlationIDRequestHeaderItem);
    return this;
  }

   /**
   * Specifies the set of HTTP request headers that may contain a value to be used as the correlation ID. Example values are \&quot;Correlation-Id\&quot;, \&quot;X-Amzn-Trace-Id\&quot;, and \&quot;X-Request-Id\&quot;.
   * @return correlationIDRequestHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the set of HTTP request headers that may contain a value to be used as the correlation ID. Example values are \"Correlation-Id\", \"X-Amzn-Trace-Id\", and \"X-Request-Id\".")

  public List<String> getCorrelationIDRequestHeader() {
    return correlationIDRequestHeader;
  }


  public void setCorrelationIDRequestHeader(List<String> correlationIDRequestHeader) {
    
    
    
    this.correlationIDRequestHeader = correlationIDRequestHeader;
  }


  public HttpConnectionHandlerResponse sslClientAuthPolicy(EnumconnectionHandlerSslClientAuthPolicyProp sslClientAuthPolicy) {
    
    
    
    
    this.sslClientAuthPolicy = sslClientAuthPolicy;
    return this;
  }

   /**
   * Get sslClientAuthPolicy
   * @return sslClientAuthPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumconnectionHandlerSslClientAuthPolicyProp getSslClientAuthPolicy() {
    return sslClientAuthPolicy;
  }


  public void setSslClientAuthPolicy(EnumconnectionHandlerSslClientAuthPolicyProp sslClientAuthPolicy) {
    
    
    
    this.sslClientAuthPolicy = sslClientAuthPolicy;
  }


  public HttpConnectionHandlerResponse enableSniHostnameChecks(Boolean enableSniHostnameChecks) {
    
    
    
    
    this.enableSniHostnameChecks = enableSniHostnameChecks;
    return this;
  }

   /**
   * Requires SNI hostnames to match or else throw an Invalid SNI error.
   * @return enableSniHostnameChecks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Requires SNI hostnames to match or else throw an Invalid SNI error.")

  public Boolean getEnableSniHostnameChecks() {
    return enableSniHostnameChecks;
  }


  public void setEnableSniHostnameChecks(Boolean enableSniHostnameChecks) {
    
    
    
    this.enableSniHostnameChecks = enableSniHostnameChecks;
  }


  public HttpConnectionHandlerResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Connection Handler is enabled.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Connection Handler is enabled.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public HttpConnectionHandlerResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public HttpConnectionHandlerResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the HttpConnectionHandlerResponse instance itself
   */
  public HttpConnectionHandlerResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpConnectionHandlerResponse httpConnectionHandlerResponse = (HttpConnectionHandlerResponse) o;
    return Objects.equals(this.id, httpConnectionHandlerResponse.id) &&
        Objects.equals(this.description, httpConnectionHandlerResponse.description) &&
        Objects.equals(this.schemas, httpConnectionHandlerResponse.schemas) &&
        Objects.equals(this.listenAddress, httpConnectionHandlerResponse.listenAddress) &&
        Objects.equals(this.listenPort, httpConnectionHandlerResponse.listenPort) &&
        Objects.equals(this.useSSL, httpConnectionHandlerResponse.useSSL) &&
        Objects.equals(this.sslCertNickname, httpConnectionHandlerResponse.sslCertNickname) &&
        Objects.equals(this.httpServletExtension, httpConnectionHandlerResponse.httpServletExtension) &&
        Objects.equals(this.webApplicationExtension, httpConnectionHandlerResponse.webApplicationExtension) &&
        Objects.equals(this.httpOperationLogPublisher, httpConnectionHandlerResponse.httpOperationLogPublisher) &&
        Objects.equals(this.sslProtocol, httpConnectionHandlerResponse.sslProtocol) &&
        Objects.equals(this.sslCipherSuite, httpConnectionHandlerResponse.sslCipherSuite) &&
        Objects.equals(this.keyManagerProvider, httpConnectionHandlerResponse.keyManagerProvider) &&
        Objects.equals(this.trustManagerProvider, httpConnectionHandlerResponse.trustManagerProvider) &&
        Objects.equals(this.numRequestHandlers, httpConnectionHandlerResponse.numRequestHandlers) &&
        Objects.equals(this.keepStats, httpConnectionHandlerResponse.keepStats) &&
        Objects.equals(this.acceptBacklog, httpConnectionHandlerResponse.acceptBacklog) &&
        Objects.equals(this.allowTCPReuseAddress, httpConnectionHandlerResponse.allowTCPReuseAddress) &&
        Objects.equals(this.idleTimeLimit, httpConnectionHandlerResponse.idleTimeLimit) &&
        Objects.equals(this.lowResourcesConnectionThreshold, httpConnectionHandlerResponse.lowResourcesConnectionThreshold) &&
        Objects.equals(this.lowResourcesIdleTimeLimit, httpConnectionHandlerResponse.lowResourcesIdleTimeLimit) &&
        Objects.equals(this.enableMultipartMIMEParameters, httpConnectionHandlerResponse.enableMultipartMIMEParameters) &&
        Objects.equals(this.useForwardedHeaders, httpConnectionHandlerResponse.useForwardedHeaders) &&
        Objects.equals(this.httpRequestHeaderSize, httpConnectionHandlerResponse.httpRequestHeaderSize) &&
        Objects.equals(this.responseHeader, httpConnectionHandlerResponse.responseHeader) &&
        Objects.equals(this.useCorrelationIDHeader, httpConnectionHandlerResponse.useCorrelationIDHeader) &&
        Objects.equals(this.correlationIDResponseHeader, httpConnectionHandlerResponse.correlationIDResponseHeader) &&
        Objects.equals(this.correlationIDRequestHeader, httpConnectionHandlerResponse.correlationIDRequestHeader) &&
        Objects.equals(this.sslClientAuthPolicy, httpConnectionHandlerResponse.sslClientAuthPolicy) &&
        Objects.equals(this.enableSniHostnameChecks, httpConnectionHandlerResponse.enableSniHostnameChecks) &&
        Objects.equals(this.enabled, httpConnectionHandlerResponse.enabled) &&
        Objects.equals(this.meta, httpConnectionHandlerResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, httpConnectionHandlerResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, httpConnectionHandlerResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, listenAddress, listenPort, useSSL, sslCertNickname, httpServletExtension, webApplicationExtension, httpOperationLogPublisher, sslProtocol, sslCipherSuite, keyManagerProvider, trustManagerProvider, numRequestHandlers, keepStats, acceptBacklog, allowTCPReuseAddress, idleTimeLimit, lowResourcesConnectionThreshold, lowResourcesIdleTimeLimit, enableMultipartMIMEParameters, useForwardedHeaders, httpRequestHeaderSize, responseHeader, useCorrelationIDHeader, correlationIDResponseHeader, correlationIDRequestHeader, sslClientAuthPolicy, enableSniHostnameChecks, enabled, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpConnectionHandlerResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    listenAddress: ").append(toIndentedString(listenAddress)).append("\n");
    sb.append("    listenPort: ").append(toIndentedString(listenPort)).append("\n");
    sb.append("    useSSL: ").append(toIndentedString(useSSL)).append("\n");
    sb.append("    sslCertNickname: ").append(toIndentedString(sslCertNickname)).append("\n");
    sb.append("    httpServletExtension: ").append(toIndentedString(httpServletExtension)).append("\n");
    sb.append("    webApplicationExtension: ").append(toIndentedString(webApplicationExtension)).append("\n");
    sb.append("    httpOperationLogPublisher: ").append(toIndentedString(httpOperationLogPublisher)).append("\n");
    sb.append("    sslProtocol: ").append(toIndentedString(sslProtocol)).append("\n");
    sb.append("    sslCipherSuite: ").append(toIndentedString(sslCipherSuite)).append("\n");
    sb.append("    keyManagerProvider: ").append(toIndentedString(keyManagerProvider)).append("\n");
    sb.append("    trustManagerProvider: ").append(toIndentedString(trustManagerProvider)).append("\n");
    sb.append("    numRequestHandlers: ").append(toIndentedString(numRequestHandlers)).append("\n");
    sb.append("    keepStats: ").append(toIndentedString(keepStats)).append("\n");
    sb.append("    acceptBacklog: ").append(toIndentedString(acceptBacklog)).append("\n");
    sb.append("    allowTCPReuseAddress: ").append(toIndentedString(allowTCPReuseAddress)).append("\n");
    sb.append("    idleTimeLimit: ").append(toIndentedString(idleTimeLimit)).append("\n");
    sb.append("    lowResourcesConnectionThreshold: ").append(toIndentedString(lowResourcesConnectionThreshold)).append("\n");
    sb.append("    lowResourcesIdleTimeLimit: ").append(toIndentedString(lowResourcesIdleTimeLimit)).append("\n");
    sb.append("    enableMultipartMIMEParameters: ").append(toIndentedString(enableMultipartMIMEParameters)).append("\n");
    sb.append("    useForwardedHeaders: ").append(toIndentedString(useForwardedHeaders)).append("\n");
    sb.append("    httpRequestHeaderSize: ").append(toIndentedString(httpRequestHeaderSize)).append("\n");
    sb.append("    responseHeader: ").append(toIndentedString(responseHeader)).append("\n");
    sb.append("    useCorrelationIDHeader: ").append(toIndentedString(useCorrelationIDHeader)).append("\n");
    sb.append("    correlationIDResponseHeader: ").append(toIndentedString(correlationIDResponseHeader)).append("\n");
    sb.append("    correlationIDRequestHeader: ").append(toIndentedString(correlationIDRequestHeader)).append("\n");
    sb.append("    sslClientAuthPolicy: ").append(toIndentedString(sslClientAuthPolicy)).append("\n");
    sb.append("    enableSniHostnameChecks: ").append(toIndentedString(enableSniHostnameChecks)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("listenAddress");
    openapiFields.add("listenPort");
    openapiFields.add("useSSL");
    openapiFields.add("sslCertNickname");
    openapiFields.add("httpServletExtension");
    openapiFields.add("webApplicationExtension");
    openapiFields.add("httpOperationLogPublisher");
    openapiFields.add("sslProtocol");
    openapiFields.add("sslCipherSuite");
    openapiFields.add("keyManagerProvider");
    openapiFields.add("trustManagerProvider");
    openapiFields.add("numRequestHandlers");
    openapiFields.add("keepStats");
    openapiFields.add("acceptBacklog");
    openapiFields.add("allowTCPReuseAddress");
    openapiFields.add("idleTimeLimit");
    openapiFields.add("lowResourcesConnectionThreshold");
    openapiFields.add("lowResourcesIdleTimeLimit");
    openapiFields.add("enableMultipartMIMEParameters");
    openapiFields.add("useForwardedHeaders");
    openapiFields.add("httpRequestHeaderSize");
    openapiFields.add("responseHeader");
    openapiFields.add("useCorrelationIDHeader");
    openapiFields.add("correlationIDResponseHeader");
    openapiFields.add("correlationIDRequestHeader");
    openapiFields.add("sslClientAuthPolicy");
    openapiFields.add("enableSniHostnameChecks");
    openapiFields.add("enabled");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("listenPort");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HttpConnectionHandlerResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HttpConnectionHandlerResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpConnectionHandlerResponse is not found in the empty JSON string", HttpConnectionHandlerResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HttpConnectionHandlerResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("listenAddress") != null && !jsonObj.get("listenAddress").isJsonNull()) && !jsonObj.get("listenAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listenAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listenAddress").toString()));
      }
      if ((jsonObj.get("sslCertNickname") != null && !jsonObj.get("sslCertNickname").isJsonNull()) && !jsonObj.get("sslCertNickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslCertNickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslCertNickname").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("httpServletExtension") != null && !jsonObj.get("httpServletExtension").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpServletExtension` to be an array in the JSON string but got `%s`", jsonObj.get("httpServletExtension").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webApplicationExtension") != null && !jsonObj.get("webApplicationExtension").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webApplicationExtension` to be an array in the JSON string but got `%s`", jsonObj.get("webApplicationExtension").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("httpOperationLogPublisher") != null && !jsonObj.get("httpOperationLogPublisher").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpOperationLogPublisher` to be an array in the JSON string but got `%s`", jsonObj.get("httpOperationLogPublisher").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sslProtocol") != null && !jsonObj.get("sslProtocol").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslProtocol` to be an array in the JSON string but got `%s`", jsonObj.get("sslProtocol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sslCipherSuite") != null && !jsonObj.get("sslCipherSuite").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslCipherSuite` to be an array in the JSON string but got `%s`", jsonObj.get("sslCipherSuite").toString()));
      }
      if ((jsonObj.get("keyManagerProvider") != null && !jsonObj.get("keyManagerProvider").isJsonNull()) && !jsonObj.get("keyManagerProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyManagerProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyManagerProvider").toString()));
      }
      if ((jsonObj.get("trustManagerProvider") != null && !jsonObj.get("trustManagerProvider").isJsonNull()) && !jsonObj.get("trustManagerProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustManagerProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustManagerProvider").toString()));
      }
      if ((jsonObj.get("idleTimeLimit") != null && !jsonObj.get("idleTimeLimit").isJsonNull()) && !jsonObj.get("idleTimeLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idleTimeLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idleTimeLimit").toString()));
      }
      if ((jsonObj.get("lowResourcesIdleTimeLimit") != null && !jsonObj.get("lowResourcesIdleTimeLimit").isJsonNull()) && !jsonObj.get("lowResourcesIdleTimeLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lowResourcesIdleTimeLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lowResourcesIdleTimeLimit").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("responseHeader") != null && !jsonObj.get("responseHeader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseHeader` to be an array in the JSON string but got `%s`", jsonObj.get("responseHeader").toString()));
      }
      if ((jsonObj.get("correlationIDResponseHeader") != null && !jsonObj.get("correlationIDResponseHeader").isJsonNull()) && !jsonObj.get("correlationIDResponseHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationIDResponseHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationIDResponseHeader").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("correlationIDRequestHeader") != null && !jsonObj.get("correlationIDRequestHeader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationIDRequestHeader` to be an array in the JSON string but got `%s`", jsonObj.get("correlationIDRequestHeader").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpConnectionHandlerResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpConnectionHandlerResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpConnectionHandlerResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpConnectionHandlerResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpConnectionHandlerResponse>() {
           @Override
           public void write(JsonWriter out, HttpConnectionHandlerResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpConnectionHandlerResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             HttpConnectionHandlerResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HttpConnectionHandlerResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HttpConnectionHandlerResponse
  * @throws IOException if the JSON string is invalid with respect to HttpConnectionHandlerResponse
  */
  public static HttpConnectionHandlerResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpConnectionHandlerResponse.class);
  }

 /**
  * Convert an instance of HttpConnectionHandlerResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

