/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumexecRecurringTaskSchemaUrn;
import com.konfigthis.client.model.EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ExecRecurringTaskShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ExecRecurringTaskShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumexecRecurringTaskSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMAND_PATH = "commandPath";
  @SerializedName(SERIALIZED_NAME_COMMAND_PATH)
  private String commandPath;

  public static final String SERIALIZED_NAME_COMMAND_ARGUMENTS = "commandArguments";
  @SerializedName(SERIALIZED_NAME_COMMAND_ARGUMENTS)
  private String commandArguments;

  public static final String SERIALIZED_NAME_COMMAND_OUTPUT_FILE_BASE_NAME = "commandOutputFileBaseName";
  @SerializedName(SERIALIZED_NAME_COMMAND_OUTPUT_FILE_BASE_NAME)
  private String commandOutputFileBaseName;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_OUTPUT_FILE_COUNT = "retainPreviousOutputFileCount";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_OUTPUT_FILE_COUNT)
  private Integer retainPreviousOutputFileCount;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_OUTPUT_FILE_AGE = "retainPreviousOutputFileAge";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_OUTPUT_FILE_AGE)
  private String retainPreviousOutputFileAge;

  public static final String SERIALIZED_NAME_LOG_COMMAND_OUTPUT = "logCommandOutput";
  @SerializedName(SERIALIZED_NAME_LOG_COMMAND_OUTPUT)
  private Boolean logCommandOutput;

  public static final String SERIALIZED_NAME_TASK_COMPLETION_STATE_FOR_NONZERO_EXIT_CODE = "taskCompletionStateForNonzeroExitCode";
  @SerializedName(SERIALIZED_NAME_TASK_COMPLETION_STATE_FOR_NONZERO_EXIT_CODE)
  private EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp taskCompletionStateForNonzeroExitCode;

  public static final String SERIALIZED_NAME_WORKING_DIRECTORY = "workingDirectory";
  @SerializedName(SERIALIZED_NAME_WORKING_DIRECTORY)
  private String workingDirectory;

  public static final String SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE = "cancelOnTaskDependencyFailure";
  @SerializedName(SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE)
  private Boolean cancelOnTaskDependencyFailure;

  public static final String SERIALIZED_NAME_EMAIL_ON_START = "emailOnStart";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_START)
  private List<String> emailOnStart = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_SUCCESS = "emailOnSuccess";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_SUCCESS)
  private List<String> emailOnSuccess = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_FAILURE = "emailOnFailure";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_FAILURE)
  private List<String> emailOnFailure = null;

  public static final String SERIALIZED_NAME_ALERT_ON_START = "alertOnStart";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_START)
  private Boolean alertOnStart;

  public static final String SERIALIZED_NAME_ALERT_ON_SUCCESS = "alertOnSuccess";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_SUCCESS)
  private Boolean alertOnSuccess;

  public static final String SERIALIZED_NAME_ALERT_ON_FAILURE = "alertOnFailure";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_FAILURE)
  private Boolean alertOnFailure;

  public ExecRecurringTaskShared() {
  }

  public ExecRecurringTaskShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Recurring Task
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Recurring Task")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ExecRecurringTaskShared schemas(List<EnumexecRecurringTaskSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public ExecRecurringTaskShared addSchemasItem(EnumexecRecurringTaskSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumexecRecurringTaskSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumexecRecurringTaskSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public ExecRecurringTaskShared commandPath(String commandPath) {
    
    
    
    
    this.commandPath = commandPath;
    return this;
  }

   /**
   * The absolute path to the command to execute. It must be an absolute path, the corresponding file must exist, and it must be listed in the config/exec-command-whitelist.txt file.
   * @return commandPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The absolute path to the command to execute. It must be an absolute path, the corresponding file must exist, and it must be listed in the config/exec-command-whitelist.txt file.")

  public String getCommandPath() {
    return commandPath;
  }


  public void setCommandPath(String commandPath) {
    
    
    
    this.commandPath = commandPath;
  }


  public ExecRecurringTaskShared commandArguments(String commandArguments) {
    
    
    
    
    this.commandArguments = commandArguments;
    return this;
  }

   /**
   * A string containing the arguments to provide to the command. If the command should be run without arguments, this property should be left undefined. If there should be multiple arguments, then they should be separated with spaces.
   * @return commandArguments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A string containing the arguments to provide to the command. If the command should be run without arguments, this property should be left undefined. If there should be multiple arguments, then they should be separated with spaces.")

  public String getCommandArguments() {
    return commandArguments;
  }


  public void setCommandArguments(String commandArguments) {
    
    
    
    this.commandArguments = commandArguments;
  }


  public ExecRecurringTaskShared commandOutputFileBaseName(String commandOutputFileBaseName) {
    
    
    
    
    this.commandOutputFileBaseName = commandOutputFileBaseName;
    return this;
  }

   /**
   * The path and base name for a file to which the command output (both standard output and standard error) should be written. This may be left undefined if the command output should not be recorded into a file.
   * @return commandOutputFileBaseName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path and base name for a file to which the command output (both standard output and standard error) should be written. This may be left undefined if the command output should not be recorded into a file.")

  public String getCommandOutputFileBaseName() {
    return commandOutputFileBaseName;
  }


  public void setCommandOutputFileBaseName(String commandOutputFileBaseName) {
    
    
    
    this.commandOutputFileBaseName = commandOutputFileBaseName;
  }


  public ExecRecurringTaskShared retainPreviousOutputFileCount(Integer retainPreviousOutputFileCount) {
    
    
    
    
    this.retainPreviousOutputFileCount = retainPreviousOutputFileCount;
    return this;
  }

   /**
   * The minimum number of previous command output files that should be preserved after a new instance of the command is invoked.
   * @return retainPreviousOutputFileCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum number of previous command output files that should be preserved after a new instance of the command is invoked.")

  public Integer getRetainPreviousOutputFileCount() {
    return retainPreviousOutputFileCount;
  }


  public void setRetainPreviousOutputFileCount(Integer retainPreviousOutputFileCount) {
    
    
    
    this.retainPreviousOutputFileCount = retainPreviousOutputFileCount;
  }


  public ExecRecurringTaskShared retainPreviousOutputFileAge(String retainPreviousOutputFileAge) {
    
    
    
    
    this.retainPreviousOutputFileAge = retainPreviousOutputFileAge;
    return this;
  }

   /**
   * The minimum age of previous command output files that should be preserved after a new instance of the command is invoked.
   * @return retainPreviousOutputFileAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum age of previous command output files that should be preserved after a new instance of the command is invoked.")

  public String getRetainPreviousOutputFileAge() {
    return retainPreviousOutputFileAge;
  }


  public void setRetainPreviousOutputFileAge(String retainPreviousOutputFileAge) {
    
    
    
    this.retainPreviousOutputFileAge = retainPreviousOutputFileAge;
  }


  public ExecRecurringTaskShared logCommandOutput(Boolean logCommandOutput) {
    
    
    
    
    this.logCommandOutput = logCommandOutput;
    return this;
  }

   /**
   * Indicates whether the command&#39;s output (both standard output and standard error) should be recorded in the server&#39;s error log.
   * @return logCommandOutput
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the command's output (both standard output and standard error) should be recorded in the server's error log.")

  public Boolean getLogCommandOutput() {
    return logCommandOutput;
  }


  public void setLogCommandOutput(Boolean logCommandOutput) {
    
    
    
    this.logCommandOutput = logCommandOutput;
  }


  public ExecRecurringTaskShared taskCompletionStateForNonzeroExitCode(EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp taskCompletionStateForNonzeroExitCode) {
    
    
    
    
    this.taskCompletionStateForNonzeroExitCode = taskCompletionStateForNonzeroExitCode;
    return this;
  }

   /**
   * Get taskCompletionStateForNonzeroExitCode
   * @return taskCompletionStateForNonzeroExitCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp getTaskCompletionStateForNonzeroExitCode() {
    return taskCompletionStateForNonzeroExitCode;
  }


  public void setTaskCompletionStateForNonzeroExitCode(EnumrecurringTaskTaskCompletionStateForNonzeroExitCodeProp taskCompletionStateForNonzeroExitCode) {
    
    
    
    this.taskCompletionStateForNonzeroExitCode = taskCompletionStateForNonzeroExitCode;
  }


  public ExecRecurringTaskShared workingDirectory(String workingDirectory) {
    
    
    
    
    this.workingDirectory = workingDirectory;
    return this;
  }

   /**
   * The absolute path to a working directory where the command should be executed. It must be an absolute path and the corresponding directory must exist.
   * @return workingDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The absolute path to a working directory where the command should be executed. It must be an absolute path and the corresponding directory must exist.")

  public String getWorkingDirectory() {
    return workingDirectory;
  }


  public void setWorkingDirectory(String workingDirectory) {
    
    
    
    this.workingDirectory = workingDirectory;
  }


  public ExecRecurringTaskShared cancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
    return this;
  }

   /**
   * Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
   * @return cancelOnTaskDependencyFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).")

  public Boolean getCancelOnTaskDependencyFailure() {
    return cancelOnTaskDependencyFailure;
  }


  public void setCancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
  }


  public ExecRecurringTaskShared emailOnStart(List<String> emailOnStart) {
    
    
    
    
    this.emailOnStart = emailOnStart;
    return this;
  }

  public ExecRecurringTaskShared addEmailOnStartItem(String emailOnStartItem) {
    if (this.emailOnStart == null) {
      this.emailOnStart = new ArrayList<>();
    }
    this.emailOnStart.add(emailOnStartItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnStart() {
    return emailOnStart;
  }


  public void setEmailOnStart(List<String> emailOnStart) {
    
    
    
    this.emailOnStart = emailOnStart;
  }


  public ExecRecurringTaskShared emailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    
    this.emailOnSuccess = emailOnSuccess;
    return this;
  }

  public ExecRecurringTaskShared addEmailOnSuccessItem(String emailOnSuccessItem) {
    if (this.emailOnSuccess == null) {
      this.emailOnSuccess = new ArrayList<>();
    }
    this.emailOnSuccess.add(emailOnSuccessItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnSuccess() {
    return emailOnSuccess;
  }


  public void setEmailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    this.emailOnSuccess = emailOnSuccess;
  }


  public ExecRecurringTaskShared emailOnFailure(List<String> emailOnFailure) {
    
    
    
    
    this.emailOnFailure = emailOnFailure;
    return this;
  }

  public ExecRecurringTaskShared addEmailOnFailureItem(String emailOnFailureItem) {
    if (this.emailOnFailure == null) {
      this.emailOnFailure = new ArrayList<>();
    }
    this.emailOnFailure.add(emailOnFailureItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnFailure() {
    return emailOnFailure;
  }


  public void setEmailOnFailure(List<String> emailOnFailure) {
    
    
    
    this.emailOnFailure = emailOnFailure;
  }


  public ExecRecurringTaskShared alertOnStart(Boolean alertOnStart) {
    
    
    
    
    this.alertOnStart = alertOnStart;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
   * @return alertOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.")

  public Boolean getAlertOnStart() {
    return alertOnStart;
  }


  public void setAlertOnStart(Boolean alertOnStart) {
    
    
    
    this.alertOnStart = alertOnStart;
  }


  public ExecRecurringTaskShared alertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    
    this.alertOnSuccess = alertOnSuccess;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
   * @return alertOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.")

  public Boolean getAlertOnSuccess() {
    return alertOnSuccess;
  }


  public void setAlertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    this.alertOnSuccess = alertOnSuccess;
  }


  public ExecRecurringTaskShared alertOnFailure(Boolean alertOnFailure) {
    
    
    
    
    this.alertOnFailure = alertOnFailure;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
   * @return alertOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.")

  public Boolean getAlertOnFailure() {
    return alertOnFailure;
  }


  public void setAlertOnFailure(Boolean alertOnFailure) {
    
    
    
    this.alertOnFailure = alertOnFailure;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ExecRecurringTaskShared instance itself
   */
  public ExecRecurringTaskShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecRecurringTaskShared execRecurringTaskShared = (ExecRecurringTaskShared) o;
    return Objects.equals(this.description, execRecurringTaskShared.description) &&
        Objects.equals(this.schemas, execRecurringTaskShared.schemas) &&
        Objects.equals(this.commandPath, execRecurringTaskShared.commandPath) &&
        Objects.equals(this.commandArguments, execRecurringTaskShared.commandArguments) &&
        Objects.equals(this.commandOutputFileBaseName, execRecurringTaskShared.commandOutputFileBaseName) &&
        Objects.equals(this.retainPreviousOutputFileCount, execRecurringTaskShared.retainPreviousOutputFileCount) &&
        Objects.equals(this.retainPreviousOutputFileAge, execRecurringTaskShared.retainPreviousOutputFileAge) &&
        Objects.equals(this.logCommandOutput, execRecurringTaskShared.logCommandOutput) &&
        Objects.equals(this.taskCompletionStateForNonzeroExitCode, execRecurringTaskShared.taskCompletionStateForNonzeroExitCode) &&
        Objects.equals(this.workingDirectory, execRecurringTaskShared.workingDirectory) &&
        Objects.equals(this.cancelOnTaskDependencyFailure, execRecurringTaskShared.cancelOnTaskDependencyFailure) &&
        Objects.equals(this.emailOnStart, execRecurringTaskShared.emailOnStart) &&
        Objects.equals(this.emailOnSuccess, execRecurringTaskShared.emailOnSuccess) &&
        Objects.equals(this.emailOnFailure, execRecurringTaskShared.emailOnFailure) &&
        Objects.equals(this.alertOnStart, execRecurringTaskShared.alertOnStart) &&
        Objects.equals(this.alertOnSuccess, execRecurringTaskShared.alertOnSuccess) &&
        Objects.equals(this.alertOnFailure, execRecurringTaskShared.alertOnFailure)&&
        Objects.equals(this.additionalProperties, execRecurringTaskShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, commandPath, commandArguments, commandOutputFileBaseName, retainPreviousOutputFileCount, retainPreviousOutputFileAge, logCommandOutput, taskCompletionStateForNonzeroExitCode, workingDirectory, cancelOnTaskDependencyFailure, emailOnStart, emailOnSuccess, emailOnFailure, alertOnStart, alertOnSuccess, alertOnFailure, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecRecurringTaskShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    commandPath: ").append(toIndentedString(commandPath)).append("\n");
    sb.append("    commandArguments: ").append(toIndentedString(commandArguments)).append("\n");
    sb.append("    commandOutputFileBaseName: ").append(toIndentedString(commandOutputFileBaseName)).append("\n");
    sb.append("    retainPreviousOutputFileCount: ").append(toIndentedString(retainPreviousOutputFileCount)).append("\n");
    sb.append("    retainPreviousOutputFileAge: ").append(toIndentedString(retainPreviousOutputFileAge)).append("\n");
    sb.append("    logCommandOutput: ").append(toIndentedString(logCommandOutput)).append("\n");
    sb.append("    taskCompletionStateForNonzeroExitCode: ").append(toIndentedString(taskCompletionStateForNonzeroExitCode)).append("\n");
    sb.append("    workingDirectory: ").append(toIndentedString(workingDirectory)).append("\n");
    sb.append("    cancelOnTaskDependencyFailure: ").append(toIndentedString(cancelOnTaskDependencyFailure)).append("\n");
    sb.append("    emailOnStart: ").append(toIndentedString(emailOnStart)).append("\n");
    sb.append("    emailOnSuccess: ").append(toIndentedString(emailOnSuccess)).append("\n");
    sb.append("    emailOnFailure: ").append(toIndentedString(emailOnFailure)).append("\n");
    sb.append("    alertOnStart: ").append(toIndentedString(alertOnStart)).append("\n");
    sb.append("    alertOnSuccess: ").append(toIndentedString(alertOnSuccess)).append("\n");
    sb.append("    alertOnFailure: ").append(toIndentedString(alertOnFailure)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("commandPath");
    openapiFields.add("commandArguments");
    openapiFields.add("commandOutputFileBaseName");
    openapiFields.add("retainPreviousOutputFileCount");
    openapiFields.add("retainPreviousOutputFileAge");
    openapiFields.add("logCommandOutput");
    openapiFields.add("taskCompletionStateForNonzeroExitCode");
    openapiFields.add("workingDirectory");
    openapiFields.add("cancelOnTaskDependencyFailure");
    openapiFields.add("emailOnStart");
    openapiFields.add("emailOnSuccess");
    openapiFields.add("emailOnFailure");
    openapiFields.add("alertOnStart");
    openapiFields.add("alertOnSuccess");
    openapiFields.add("alertOnFailure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("commandPath");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExecRecurringTaskShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExecRecurringTaskShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExecRecurringTaskShared is not found in the empty JSON string", ExecRecurringTaskShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExecRecurringTaskShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("commandPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandPath").toString()));
      }
      if ((jsonObj.get("commandArguments") != null && !jsonObj.get("commandArguments").isJsonNull()) && !jsonObj.get("commandArguments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandArguments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandArguments").toString()));
      }
      if ((jsonObj.get("commandOutputFileBaseName") != null && !jsonObj.get("commandOutputFileBaseName").isJsonNull()) && !jsonObj.get("commandOutputFileBaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commandOutputFileBaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commandOutputFileBaseName").toString()));
      }
      if ((jsonObj.get("retainPreviousOutputFileAge") != null && !jsonObj.get("retainPreviousOutputFileAge").isJsonNull()) && !jsonObj.get("retainPreviousOutputFileAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retainPreviousOutputFileAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retainPreviousOutputFileAge").toString()));
      }
      if ((jsonObj.get("workingDirectory") != null && !jsonObj.get("workingDirectory").isJsonNull()) && !jsonObj.get("workingDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workingDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workingDirectory").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnStart") != null && !jsonObj.get("emailOnStart").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnStart` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnStart").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnSuccess") != null && !jsonObj.get("emailOnSuccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnSuccess` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnSuccess").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnFailure") != null && !jsonObj.get("emailOnFailure").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnFailure` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnFailure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExecRecurringTaskShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExecRecurringTaskShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExecRecurringTaskShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExecRecurringTaskShared.class));

       return (TypeAdapter<T>) new TypeAdapter<ExecRecurringTaskShared>() {
           @Override
           public void write(JsonWriter out, ExecRecurringTaskShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ExecRecurringTaskShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ExecRecurringTaskShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExecRecurringTaskShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExecRecurringTaskShared
  * @throws IOException if the JSON string is invalid with respect to ExecRecurringTaskShared
  */
  public static ExecRecurringTaskShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExecRecurringTaskShared.class);
  }

 /**
  * Convert an instance of ExecRecurringTaskShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

