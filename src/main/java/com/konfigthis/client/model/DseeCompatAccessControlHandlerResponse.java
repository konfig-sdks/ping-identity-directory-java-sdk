/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumaccessControlHandlerAllowedBindControlProp;
import com.konfigthis.client.model.EnumdseeCompatAccessControlHandlerSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DseeCompatAccessControlHandlerResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DseeCompatAccessControlHandlerResponse {
  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumdseeCompatAccessControlHandlerSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_GLOBAL_A_C_I = "globalACI";
  @SerializedName(SERIALIZED_NAME_GLOBAL_A_C_I)
  private List<String> globalACI = null;

  public static final String SERIALIZED_NAME_ALLOWED_BIND_CONTROL = "allowedBindControl";
  @SerializedName(SERIALIZED_NAME_ALLOWED_BIND_CONTROL)
  private List<EnumaccessControlHandlerAllowedBindControlProp> allowedBindControl = null;

  public static final String SERIALIZED_NAME_ALLOWED_BIND_CONTROL_O_I_D = "allowedBindControlOID";
  @SerializedName(SERIALIZED_NAME_ALLOWED_BIND_CONTROL_O_I_D)
  private List<String> allowedBindControlOID = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public DseeCompatAccessControlHandlerResponse() {
  }

  public DseeCompatAccessControlHandlerResponse schemas(List<EnumdseeCompatAccessControlHandlerSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public DseeCompatAccessControlHandlerResponse addSchemasItem(EnumdseeCompatAccessControlHandlerSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumdseeCompatAccessControlHandlerSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumdseeCompatAccessControlHandlerSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public DseeCompatAccessControlHandlerResponse globalACI(List<String> globalACI) {
    
    
    
    
    this.globalACI = globalACI;
    return this;
  }

  public DseeCompatAccessControlHandlerResponse addGlobalACIItem(String globalACIItem) {
    if (this.globalACI == null) {
      this.globalACI = new ArrayList<>();
    }
    this.globalACI.add(globalACIItem);
    return this;
  }

   /**
   * Defines global access control rules.
   * @return globalACI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines global access control rules.")

  public List<String> getGlobalACI() {
    return globalACI;
  }


  public void setGlobalACI(List<String> globalACI) {
    
    
    
    this.globalACI = globalACI;
  }


  public DseeCompatAccessControlHandlerResponse allowedBindControl(List<EnumaccessControlHandlerAllowedBindControlProp> allowedBindControl) {
    
    
    
    
    this.allowedBindControl = allowedBindControl;
    return this;
  }

  public DseeCompatAccessControlHandlerResponse addAllowedBindControlItem(EnumaccessControlHandlerAllowedBindControlProp allowedBindControlItem) {
    if (this.allowedBindControl == null) {
      this.allowedBindControl = new ArrayList<>();
    }
    this.allowedBindControl.add(allowedBindControlItem);
    return this;
  }

   /**
   * Get allowedBindControl
   * @return allowedBindControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumaccessControlHandlerAllowedBindControlProp> getAllowedBindControl() {
    return allowedBindControl;
  }


  public void setAllowedBindControl(List<EnumaccessControlHandlerAllowedBindControlProp> allowedBindControl) {
    
    
    
    this.allowedBindControl = allowedBindControl;
  }


  public DseeCompatAccessControlHandlerResponse allowedBindControlOID(List<String> allowedBindControlOID) {
    
    
    
    
    this.allowedBindControlOID = allowedBindControlOID;
    return this;
  }

  public DseeCompatAccessControlHandlerResponse addAllowedBindControlOIDItem(String allowedBindControlOIDItem) {
    if (this.allowedBindControlOID == null) {
      this.allowedBindControlOID = new ArrayList<>();
    }
    this.allowedBindControlOID.add(allowedBindControlOIDItem);
    return this;
  }

   /**
   * Specifies the OIDs of any additional controls (not covered by the allowed-bind-control property) that should be permitted in bind requests.
   * @return allowedBindControlOID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OIDs of any additional controls (not covered by the allowed-bind-control property) that should be permitted in bind requests.")

  public List<String> getAllowedBindControlOID() {
    return allowedBindControlOID;
  }


  public void setAllowedBindControlOID(List<String> allowedBindControlOID) {
    
    
    
    this.allowedBindControlOID = allowedBindControlOID;
  }


  public DseeCompatAccessControlHandlerResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether this Access Control Handler is enabled. If set to FALSE, then no access control is enforced, and any client (including unauthenticated or anonymous clients) could be allowed to perform any operation if not subject to other restrictions, such as those enforced by the privilege subsystem.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether this Access Control Handler is enabled. If set to FALSE, then no access control is enforced, and any client (including unauthenticated or anonymous clients) could be allowed to perform any operation if not subject to other restrictions, such as those enforced by the privilege subsystem.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public DseeCompatAccessControlHandlerResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public DseeCompatAccessControlHandlerResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DseeCompatAccessControlHandlerResponse instance itself
   */
  public DseeCompatAccessControlHandlerResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DseeCompatAccessControlHandlerResponse dseeCompatAccessControlHandlerResponse = (DseeCompatAccessControlHandlerResponse) o;
    return Objects.equals(this.schemas, dseeCompatAccessControlHandlerResponse.schemas) &&
        Objects.equals(this.globalACI, dseeCompatAccessControlHandlerResponse.globalACI) &&
        Objects.equals(this.allowedBindControl, dseeCompatAccessControlHandlerResponse.allowedBindControl) &&
        Objects.equals(this.allowedBindControlOID, dseeCompatAccessControlHandlerResponse.allowedBindControlOID) &&
        Objects.equals(this.enabled, dseeCompatAccessControlHandlerResponse.enabled) &&
        Objects.equals(this.meta, dseeCompatAccessControlHandlerResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, dseeCompatAccessControlHandlerResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, dseeCompatAccessControlHandlerResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, globalACI, allowedBindControl, allowedBindControlOID, enabled, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DseeCompatAccessControlHandlerResponse {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    globalACI: ").append(toIndentedString(globalACI)).append("\n");
    sb.append("    allowedBindControl: ").append(toIndentedString(allowedBindControl)).append("\n");
    sb.append("    allowedBindControlOID: ").append(toIndentedString(allowedBindControlOID)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemas");
    openapiFields.add("globalACI");
    openapiFields.add("allowedBindControl");
    openapiFields.add("allowedBindControlOID");
    openapiFields.add("enabled");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DseeCompatAccessControlHandlerResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DseeCompatAccessControlHandlerResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DseeCompatAccessControlHandlerResponse is not found in the empty JSON string", DseeCompatAccessControlHandlerResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DseeCompatAccessControlHandlerResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("globalACI") != null && !jsonObj.get("globalACI").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalACI` to be an array in the JSON string but got `%s`", jsonObj.get("globalACI").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedBindControl") != null && !jsonObj.get("allowedBindControl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedBindControl` to be an array in the JSON string but got `%s`", jsonObj.get("allowedBindControl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedBindControlOID") != null && !jsonObj.get("allowedBindControlOID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedBindControlOID` to be an array in the JSON string but got `%s`", jsonObj.get("allowedBindControlOID").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DseeCompatAccessControlHandlerResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DseeCompatAccessControlHandlerResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DseeCompatAccessControlHandlerResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DseeCompatAccessControlHandlerResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DseeCompatAccessControlHandlerResponse>() {
           @Override
           public void write(JsonWriter out, DseeCompatAccessControlHandlerResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DseeCompatAccessControlHandlerResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DseeCompatAccessControlHandlerResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DseeCompatAccessControlHandlerResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DseeCompatAccessControlHandlerResponse
  * @throws IOException if the JSON string is invalid with respect to DseeCompatAccessControlHandlerResponse
  */
  public static DseeCompatAccessControlHandlerResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DseeCompatAccessControlHandlerResponse.class);
  }

 /**
  * Convert an instance of DseeCompatAccessControlHandlerResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

