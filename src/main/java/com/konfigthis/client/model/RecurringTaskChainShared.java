/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumrecurringTaskChainInterruptedByShutdownBehaviorProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledDateSelectionTypeProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledDayOfTheMonthProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledDayOfTheWeekProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledMonthProp;
import com.konfigthis.client.model.EnumrecurringTaskChainSchemaUrn;
import com.konfigthis.client.model.EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RecurringTaskChainShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RecurringTaskChainShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumrecurringTaskChainSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_RECURRING_TASK = "recurringTask";
  @SerializedName(SERIALIZED_NAME_RECURRING_TASK)
  private List<String> recurringTask = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULED_MONTH = "scheduledMonth";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_MONTH)
  private List<EnumrecurringTaskChainScheduledMonthProp> scheduledMonth = null;

  public static final String SERIALIZED_NAME_SCHEDULED_DATE_SELECTION_TYPE = "scheduledDateSelectionType";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DATE_SELECTION_TYPE)
  private EnumrecurringTaskChainScheduledDateSelectionTypeProp scheduledDateSelectionType;

  public static final String SERIALIZED_NAME_SCHEDULED_DAY_OF_THE_WEEK = "scheduledDayOfTheWeek";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DAY_OF_THE_WEEK)
  private List<EnumrecurringTaskChainScheduledDayOfTheWeekProp> scheduledDayOfTheWeek = null;

  public static final String SERIALIZED_NAME_SCHEDULED_DAY_OF_THE_MONTH = "scheduledDayOfTheMonth";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_DAY_OF_THE_MONTH)
  private List<EnumrecurringTaskChainScheduledDayOfTheMonthProp> scheduledDayOfTheMonth = null;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME_OF_DAY = "scheduledTimeOfDay";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME_OF_DAY)
  private List<String> scheduledTimeOfDay = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_INTERRUPTED_BY_SHUTDOWN_BEHAVIOR = "interruptedByShutdownBehavior";
  @SerializedName(SERIALIZED_NAME_INTERRUPTED_BY_SHUTDOWN_BEHAVIOR)
  private EnumrecurringTaskChainInterruptedByShutdownBehaviorProp interruptedByShutdownBehavior;

  public static final String SERIALIZED_NAME_SERVER_OFFLINE_AT_START_TIME_BEHAVIOR = "serverOfflineAtStartTimeBehavior";
  @SerializedName(SERIALIZED_NAME_SERVER_OFFLINE_AT_START_TIME_BEHAVIOR)
  private EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp serverOfflineAtStartTimeBehavior;

  public RecurringTaskChainShared() {
  }

  public RecurringTaskChainShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Recurring Task Chain
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Recurring Task Chain")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public RecurringTaskChainShared schemas(List<EnumrecurringTaskChainSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public RecurringTaskChainShared addSchemasItem(EnumrecurringTaskChainSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumrecurringTaskChainSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumrecurringTaskChainSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public RecurringTaskChainShared enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether this Recurring Task Chain is enabled for use. Recurring Task Chains that are disabled will not have any new instances scheduled, but instances that are already scheduled will be preserved. Those instances may be manually canceled if desired.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this Recurring Task Chain is enabled for use. Recurring Task Chains that are disabled will not have any new instances scheduled, but instances that are already scheduled will be preserved. Those instances may be manually canceled if desired.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public RecurringTaskChainShared recurringTask(List<String> recurringTask) {
    
    
    
    
    this.recurringTask = recurringTask;
    return this;
  }

  public RecurringTaskChainShared addRecurringTaskItem(String recurringTaskItem) {
    this.recurringTask.add(recurringTaskItem);
    return this;
  }

   /**
   * The set of recurring tasks that make up this chain. At least one value must be provided. If multiple values are given, then the task instances will be invoked in the order in which they are listed.
   * @return recurringTask
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The set of recurring tasks that make up this chain. At least one value must be provided. If multiple values are given, then the task instances will be invoked in the order in which they are listed.")

  public List<String> getRecurringTask() {
    return recurringTask;
  }


  public void setRecurringTask(List<String> recurringTask) {
    
    
    
    this.recurringTask = recurringTask;
  }


  public RecurringTaskChainShared scheduledMonth(List<EnumrecurringTaskChainScheduledMonthProp> scheduledMonth) {
    
    
    
    
    this.scheduledMonth = scheduledMonth;
    return this;
  }

  public RecurringTaskChainShared addScheduledMonthItem(EnumrecurringTaskChainScheduledMonthProp scheduledMonthItem) {
    if (this.scheduledMonth == null) {
      this.scheduledMonth = new ArrayList<>();
    }
    this.scheduledMonth.add(scheduledMonthItem);
    return this;
  }

   /**
   * Get scheduledMonth
   * @return scheduledMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumrecurringTaskChainScheduledMonthProp> getScheduledMonth() {
    return scheduledMonth;
  }


  public void setScheduledMonth(List<EnumrecurringTaskChainScheduledMonthProp> scheduledMonth) {
    
    
    
    this.scheduledMonth = scheduledMonth;
  }


  public RecurringTaskChainShared scheduledDateSelectionType(EnumrecurringTaskChainScheduledDateSelectionTypeProp scheduledDateSelectionType) {
    
    
    
    
    this.scheduledDateSelectionType = scheduledDateSelectionType;
    return this;
  }

   /**
   * Get scheduledDateSelectionType
   * @return scheduledDateSelectionType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumrecurringTaskChainScheduledDateSelectionTypeProp getScheduledDateSelectionType() {
    return scheduledDateSelectionType;
  }


  public void setScheduledDateSelectionType(EnumrecurringTaskChainScheduledDateSelectionTypeProp scheduledDateSelectionType) {
    
    
    
    this.scheduledDateSelectionType = scheduledDateSelectionType;
  }


  public RecurringTaskChainShared scheduledDayOfTheWeek(List<EnumrecurringTaskChainScheduledDayOfTheWeekProp> scheduledDayOfTheWeek) {
    
    
    
    
    this.scheduledDayOfTheWeek = scheduledDayOfTheWeek;
    return this;
  }

  public RecurringTaskChainShared addScheduledDayOfTheWeekItem(EnumrecurringTaskChainScheduledDayOfTheWeekProp scheduledDayOfTheWeekItem) {
    if (this.scheduledDayOfTheWeek == null) {
      this.scheduledDayOfTheWeek = new ArrayList<>();
    }
    this.scheduledDayOfTheWeek.add(scheduledDayOfTheWeekItem);
    return this;
  }

   /**
   * Get scheduledDayOfTheWeek
   * @return scheduledDayOfTheWeek
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumrecurringTaskChainScheduledDayOfTheWeekProp> getScheduledDayOfTheWeek() {
    return scheduledDayOfTheWeek;
  }


  public void setScheduledDayOfTheWeek(List<EnumrecurringTaskChainScheduledDayOfTheWeekProp> scheduledDayOfTheWeek) {
    
    
    
    this.scheduledDayOfTheWeek = scheduledDayOfTheWeek;
  }


  public RecurringTaskChainShared scheduledDayOfTheMonth(List<EnumrecurringTaskChainScheduledDayOfTheMonthProp> scheduledDayOfTheMonth) {
    
    
    
    
    this.scheduledDayOfTheMonth = scheduledDayOfTheMonth;
    return this;
  }

  public RecurringTaskChainShared addScheduledDayOfTheMonthItem(EnumrecurringTaskChainScheduledDayOfTheMonthProp scheduledDayOfTheMonthItem) {
    if (this.scheduledDayOfTheMonth == null) {
      this.scheduledDayOfTheMonth = new ArrayList<>();
    }
    this.scheduledDayOfTheMonth.add(scheduledDayOfTheMonthItem);
    return this;
  }

   /**
   * Get scheduledDayOfTheMonth
   * @return scheduledDayOfTheMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumrecurringTaskChainScheduledDayOfTheMonthProp> getScheduledDayOfTheMonth() {
    return scheduledDayOfTheMonth;
  }


  public void setScheduledDayOfTheMonth(List<EnumrecurringTaskChainScheduledDayOfTheMonthProp> scheduledDayOfTheMonth) {
    
    
    
    this.scheduledDayOfTheMonth = scheduledDayOfTheMonth;
  }


  public RecurringTaskChainShared scheduledTimeOfDay(List<String> scheduledTimeOfDay) {
    
    
    
    
    this.scheduledTimeOfDay = scheduledTimeOfDay;
    return this;
  }

  public RecurringTaskChainShared addScheduledTimeOfDayItem(String scheduledTimeOfDayItem) {
    this.scheduledTimeOfDay.add(scheduledTimeOfDayItem);
    return this;
  }

   /**
   * The time of day at which instances of the Recurring Task Chain should be eligible to start running. Values should be in the format HH:MM (where HH is a two-digit representation of the hour of the day, between 00 and 23, inclusive), and MM is a two-digit representation of the minute of the hour (between 00 and 59, inclusive). Alternately, the value can be in the form *:MM, which indicates that the task should be eligible to start at the specified minute of every hour. At least one value must be provided, but multiple values may be given to indicate multiple start times within the same day.
   * @return scheduledTimeOfDay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The time of day at which instances of the Recurring Task Chain should be eligible to start running. Values should be in the format HH:MM (where HH is a two-digit representation of the hour of the day, between 00 and 23, inclusive), and MM is a two-digit representation of the minute of the hour (between 00 and 59, inclusive). Alternately, the value can be in the form *:MM, which indicates that the task should be eligible to start at the specified minute of every hour. At least one value must be provided, but multiple values may be given to indicate multiple start times within the same day.")

  public List<String> getScheduledTimeOfDay() {
    return scheduledTimeOfDay;
  }


  public void setScheduledTimeOfDay(List<String> scheduledTimeOfDay) {
    
    
    
    this.scheduledTimeOfDay = scheduledTimeOfDay;
  }


  public RecurringTaskChainShared timeZone(String timeZone) {
    
    
    
    
    this.timeZone = timeZone;
    return this;
  }

   /**
   * The time zone that will be used to interpret the scheduled-time-of-day values. If no value is provided, then the JVM&#39;s default time zone will be used.
   * @return timeZone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time zone that will be used to interpret the scheduled-time-of-day values. If no value is provided, then the JVM's default time zone will be used.")

  public String getTimeZone() {
    return timeZone;
  }


  public void setTimeZone(String timeZone) {
    
    
    
    this.timeZone = timeZone;
  }


  public RecurringTaskChainShared interruptedByShutdownBehavior(EnumrecurringTaskChainInterruptedByShutdownBehaviorProp interruptedByShutdownBehavior) {
    
    
    
    
    this.interruptedByShutdownBehavior = interruptedByShutdownBehavior;
    return this;
  }

   /**
   * Get interruptedByShutdownBehavior
   * @return interruptedByShutdownBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumrecurringTaskChainInterruptedByShutdownBehaviorProp getInterruptedByShutdownBehavior() {
    return interruptedByShutdownBehavior;
  }


  public void setInterruptedByShutdownBehavior(EnumrecurringTaskChainInterruptedByShutdownBehaviorProp interruptedByShutdownBehavior) {
    
    
    
    this.interruptedByShutdownBehavior = interruptedByShutdownBehavior;
  }


  public RecurringTaskChainShared serverOfflineAtStartTimeBehavior(EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp serverOfflineAtStartTimeBehavior) {
    
    
    
    
    this.serverOfflineAtStartTimeBehavior = serverOfflineAtStartTimeBehavior;
    return this;
  }

   /**
   * Get serverOfflineAtStartTimeBehavior
   * @return serverOfflineAtStartTimeBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp getServerOfflineAtStartTimeBehavior() {
    return serverOfflineAtStartTimeBehavior;
  }


  public void setServerOfflineAtStartTimeBehavior(EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp serverOfflineAtStartTimeBehavior) {
    
    
    
    this.serverOfflineAtStartTimeBehavior = serverOfflineAtStartTimeBehavior;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RecurringTaskChainShared instance itself
   */
  public RecurringTaskChainShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurringTaskChainShared recurringTaskChainShared = (RecurringTaskChainShared) o;
    return Objects.equals(this.description, recurringTaskChainShared.description) &&
        Objects.equals(this.schemas, recurringTaskChainShared.schemas) &&
        Objects.equals(this.enabled, recurringTaskChainShared.enabled) &&
        Objects.equals(this.recurringTask, recurringTaskChainShared.recurringTask) &&
        Objects.equals(this.scheduledMonth, recurringTaskChainShared.scheduledMonth) &&
        Objects.equals(this.scheduledDateSelectionType, recurringTaskChainShared.scheduledDateSelectionType) &&
        Objects.equals(this.scheduledDayOfTheWeek, recurringTaskChainShared.scheduledDayOfTheWeek) &&
        Objects.equals(this.scheduledDayOfTheMonth, recurringTaskChainShared.scheduledDayOfTheMonth) &&
        Objects.equals(this.scheduledTimeOfDay, recurringTaskChainShared.scheduledTimeOfDay) &&
        Objects.equals(this.timeZone, recurringTaskChainShared.timeZone) &&
        Objects.equals(this.interruptedByShutdownBehavior, recurringTaskChainShared.interruptedByShutdownBehavior) &&
        Objects.equals(this.serverOfflineAtStartTimeBehavior, recurringTaskChainShared.serverOfflineAtStartTimeBehavior)&&
        Objects.equals(this.additionalProperties, recurringTaskChainShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, enabled, recurringTask, scheduledMonth, scheduledDateSelectionType, scheduledDayOfTheWeek, scheduledDayOfTheMonth, scheduledTimeOfDay, timeZone, interruptedByShutdownBehavior, serverOfflineAtStartTimeBehavior, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurringTaskChainShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    recurringTask: ").append(toIndentedString(recurringTask)).append("\n");
    sb.append("    scheduledMonth: ").append(toIndentedString(scheduledMonth)).append("\n");
    sb.append("    scheduledDateSelectionType: ").append(toIndentedString(scheduledDateSelectionType)).append("\n");
    sb.append("    scheduledDayOfTheWeek: ").append(toIndentedString(scheduledDayOfTheWeek)).append("\n");
    sb.append("    scheduledDayOfTheMonth: ").append(toIndentedString(scheduledDayOfTheMonth)).append("\n");
    sb.append("    scheduledTimeOfDay: ").append(toIndentedString(scheduledTimeOfDay)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    interruptedByShutdownBehavior: ").append(toIndentedString(interruptedByShutdownBehavior)).append("\n");
    sb.append("    serverOfflineAtStartTimeBehavior: ").append(toIndentedString(serverOfflineAtStartTimeBehavior)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("enabled");
    openapiFields.add("recurringTask");
    openapiFields.add("scheduledMonth");
    openapiFields.add("scheduledDateSelectionType");
    openapiFields.add("scheduledDayOfTheWeek");
    openapiFields.add("scheduledDayOfTheMonth");
    openapiFields.add("scheduledTimeOfDay");
    openapiFields.add("timeZone");
    openapiFields.add("interruptedByShutdownBehavior");
    openapiFields.add("serverOfflineAtStartTimeBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("recurringTask");
    openapiRequiredFields.add("scheduledDateSelectionType");
    openapiRequiredFields.add("scheduledTimeOfDay");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RecurringTaskChainShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RecurringTaskChainShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecurringTaskChainShared is not found in the empty JSON string", RecurringTaskChainShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecurringTaskChainShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("recurringTask") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("recurringTask").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurringTask` to be an array in the JSON string but got `%s`", jsonObj.get("recurringTask").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scheduledMonth") != null && !jsonObj.get("scheduledMonth").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledMonth` to be an array in the JSON string but got `%s`", jsonObj.get("scheduledMonth").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scheduledDayOfTheWeek") != null && !jsonObj.get("scheduledDayOfTheWeek").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledDayOfTheWeek` to be an array in the JSON string but got `%s`", jsonObj.get("scheduledDayOfTheWeek").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scheduledDayOfTheMonth") != null && !jsonObj.get("scheduledDayOfTheMonth").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledDayOfTheMonth` to be an array in the JSON string but got `%s`", jsonObj.get("scheduledDayOfTheMonth").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("scheduledTimeOfDay") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scheduledTimeOfDay").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledTimeOfDay` to be an array in the JSON string but got `%s`", jsonObj.get("scheduledTimeOfDay").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecurringTaskChainShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecurringTaskChainShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecurringTaskChainShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecurringTaskChainShared.class));

       return (TypeAdapter<T>) new TypeAdapter<RecurringTaskChainShared>() {
           @Override
           public void write(JsonWriter out, RecurringTaskChainShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RecurringTaskChainShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RecurringTaskChainShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecurringTaskChainShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecurringTaskChainShared
  * @throws IOException if the JSON string is invalid with respect to RecurringTaskChainShared
  */
  public static RecurringTaskChainShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecurringTaskChainShared.class);
  }

 /**
  * Convert an instance of RecurringTaskChainShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

