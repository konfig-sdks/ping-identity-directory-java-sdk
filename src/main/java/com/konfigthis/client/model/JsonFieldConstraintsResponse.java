/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumjsonFieldConstraintsCacheModeProp;
import com.konfigthis.client.model.EnumjsonFieldConstraintsIsArrayProp;
import com.konfigthis.client.model.EnumjsonFieldConstraintsSchemaUrn;
import com.konfigthis.client.model.EnumjsonFieldConstraintsValueTypeProp;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * JsonFieldConstraintsResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JsonFieldConstraintsResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumjsonFieldConstraintsSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_JSON_FIELD = "jsonField";
  @SerializedName(SERIALIZED_NAME_JSON_FIELD)
  private String jsonField;

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private EnumjsonFieldConstraintsValueTypeProp valueType;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_IS_ARRAY = "isArray";
  @SerializedName(SERIALIZED_NAME_IS_ARRAY)
  private EnumjsonFieldConstraintsIsArrayProp isArray;

  public static final String SERIALIZED_NAME_ALLOW_NULL_VALUE = "allowNullValue";
  @SerializedName(SERIALIZED_NAME_ALLOW_NULL_VALUE)
  private Boolean allowNullValue;

  public static final String SERIALIZED_NAME_ALLOW_EMPTY_OBJECT = "allowEmptyObject";
  @SerializedName(SERIALIZED_NAME_ALLOW_EMPTY_OBJECT)
  private Boolean allowEmptyObject;

  public static final String SERIALIZED_NAME_INDEX_VALUES = "indexValues";
  @SerializedName(SERIALIZED_NAME_INDEX_VALUES)
  private Boolean indexValues;

  public static final String SERIALIZED_NAME_INDEX_ENTRY_LIMIT = "indexEntryLimit";
  @SerializedName(SERIALIZED_NAME_INDEX_ENTRY_LIMIT)
  private Integer indexEntryLimit;

  public static final String SERIALIZED_NAME_PRIME_INDEX = "primeIndex";
  @SerializedName(SERIALIZED_NAME_PRIME_INDEX)
  private Boolean primeIndex;

  public static final String SERIALIZED_NAME_CACHE_MODE = "cacheMode";
  @SerializedName(SERIALIZED_NAME_CACHE_MODE)
  private EnumjsonFieldConstraintsCacheModeProp cacheMode;

  public static final String SERIALIZED_NAME_TOKENIZE_VALUES = "tokenizeValues";
  @SerializedName(SERIALIZED_NAME_TOKENIZE_VALUES)
  private Boolean tokenizeValues;

  public static final String SERIALIZED_NAME_ALLOWED_VALUE = "allowedValue";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VALUE)
  private List<String> allowedValue = null;

  public static final String SERIALIZED_NAME_ALLOWED_VALUE_REGULAR_EXPRESSION = "allowedValueRegularExpression";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VALUE_REGULAR_EXPRESSION)
  private List<String> allowedValueRegularExpression = null;

  public static final String SERIALIZED_NAME_MINIMUM_NUMERIC_VALUE = "minimumNumericValue";
  @SerializedName(SERIALIZED_NAME_MINIMUM_NUMERIC_VALUE)
  private String minimumNumericValue;

  public static final String SERIALIZED_NAME_MAXIMUM_NUMERIC_VALUE = "maximumNumericValue";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_NUMERIC_VALUE)
  private String maximumNumericValue;

  public static final String SERIALIZED_NAME_MINIMUM_VALUE_LENGTH = "minimumValueLength";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VALUE_LENGTH)
  private Integer minimumValueLength;

  public static final String SERIALIZED_NAME_MAXIMUM_VALUE_LENGTH = "maximumValueLength";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_VALUE_LENGTH)
  private Integer maximumValueLength;

  public static final String SERIALIZED_NAME_MINIMUM_VALUE_COUNT = "minimumValueCount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VALUE_COUNT)
  private Integer minimumValueCount;

  public static final String SERIALIZED_NAME_MAXIMUM_VALUE_COUNT = "maximumValueCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_VALUE_COUNT)
  private Integer maximumValueCount;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public JsonFieldConstraintsResponse() {
  }

  public JsonFieldConstraintsResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the JSON Field Constraints
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the JSON Field Constraints")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public JsonFieldConstraintsResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this JSON Field Constraints
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this JSON Field Constraints")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public JsonFieldConstraintsResponse schemas(List<EnumjsonFieldConstraintsSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public JsonFieldConstraintsResponse addSchemasItem(EnumjsonFieldConstraintsSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumjsonFieldConstraintsSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumjsonFieldConstraintsSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public JsonFieldConstraintsResponse jsonField(String jsonField) {
    
    
    
    
    this.jsonField = jsonField;
    return this;
  }

   /**
   * The full name of the JSON field to which these constraints apply.
   * @return jsonField
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The full name of the JSON field to which these constraints apply.")

  public String getJsonField() {
    return jsonField;
  }


  public void setJsonField(String jsonField) {
    
    
    
    this.jsonField = jsonField;
  }


  public JsonFieldConstraintsResponse valueType(EnumjsonFieldConstraintsValueTypeProp valueType) {
    
    
    
    
    this.valueType = valueType;
    return this;
  }

   /**
   * Get valueType
   * @return valueType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumjsonFieldConstraintsValueTypeProp getValueType() {
    return valueType;
  }


  public void setValueType(EnumjsonFieldConstraintsValueTypeProp valueType) {
    
    
    
    this.valueType = valueType;
  }


  public JsonFieldConstraintsResponse isRequired(Boolean isRequired) {
    
    
    
    
    this.isRequired = isRequired;
    return this;
  }

   /**
   * Indicates whether the target field must be present in JSON objects stored as values of the associated attribute type.
   * @return isRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the target field must be present in JSON objects stored as values of the associated attribute type.")

  public Boolean getIsRequired() {
    return isRequired;
  }


  public void setIsRequired(Boolean isRequired) {
    
    
    
    this.isRequired = isRequired;
  }


  public JsonFieldConstraintsResponse isArray(EnumjsonFieldConstraintsIsArrayProp isArray) {
    
    
    
    
    this.isArray = isArray;
    return this;
  }

   /**
   * Get isArray
   * @return isArray
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumjsonFieldConstraintsIsArrayProp getIsArray() {
    return isArray;
  }


  public void setIsArray(EnumjsonFieldConstraintsIsArrayProp isArray) {
    
    
    
    this.isArray = isArray;
  }


  public JsonFieldConstraintsResponse allowNullValue(Boolean allowNullValue) {
    
    
    
    
    this.allowNullValue = allowNullValue;
    return this;
  }

   /**
   * Indicates whether the target field may have a value that is the JSON null value as an alternative to a value (or array of values) of the specified value-type.
   * @return allowNullValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the target field may have a value that is the JSON null value as an alternative to a value (or array of values) of the specified value-type.")

  public Boolean getAllowNullValue() {
    return allowNullValue;
  }


  public void setAllowNullValue(Boolean allowNullValue) {
    
    
    
    this.allowNullValue = allowNullValue;
  }


  public JsonFieldConstraintsResponse allowEmptyObject(Boolean allowEmptyObject) {
    
    
    
    
    this.allowEmptyObject = allowEmptyObject;
    return this;
  }

   /**
   * Indicates whether the target field may have a value that is an empty JSON object (i.e., a JSON object with zero fields). This may only be set to true if value-type property is set to object.
   * @return allowEmptyObject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the target field may have a value that is an empty JSON object (i.e., a JSON object with zero fields). This may only be set to true if value-type property is set to object.")

  public Boolean getAllowEmptyObject() {
    return allowEmptyObject;
  }


  public void setAllowEmptyObject(Boolean allowEmptyObject) {
    
    
    
    this.allowEmptyObject = allowEmptyObject;
  }


  public JsonFieldConstraintsResponse indexValues(Boolean indexValues) {
    
    
    
    
    this.indexValues = indexValues;
    return this;
  }

   /**
   * Indicates whether backends that support JSON indexing should maintain an index for values of the target field.
   * @return indexValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether backends that support JSON indexing should maintain an index for values of the target field.")

  public Boolean getIndexValues() {
    return indexValues;
  }


  public void setIndexValues(Boolean indexValues) {
    
    
    
    this.indexValues = indexValues;
  }


  public JsonFieldConstraintsResponse indexEntryLimit(Integer indexEntryLimit) {
    
    
    
    
    this.indexEntryLimit = indexEntryLimit;
    return this;
  }

   /**
   * The maximum number of entries that may contain a particular value for the target field before the server will stop maintaining the index for that value.
   * @return indexEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of entries that may contain a particular value for the target field before the server will stop maintaining the index for that value.")

  public Integer getIndexEntryLimit() {
    return indexEntryLimit;
  }


  public void setIndexEntryLimit(Integer indexEntryLimit) {
    
    
    
    this.indexEntryLimit = indexEntryLimit;
  }


  public JsonFieldConstraintsResponse primeIndex(Boolean primeIndex) {
    
    
    
    
    this.primeIndex = primeIndex;
    return this;
  }

   /**
   * Indicates whether backends that support database priming should load the contents of the associated JSON index into memory whenever the backend is opened.
   * @return primeIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether backends that support database priming should load the contents of the associated JSON index into memory whenever the backend is opened.")

  public Boolean getPrimeIndex() {
    return primeIndex;
  }


  public void setPrimeIndex(Boolean primeIndex) {
    
    
    
    this.primeIndex = primeIndex;
  }


  public JsonFieldConstraintsResponse cacheMode(EnumjsonFieldConstraintsCacheModeProp cacheMode) {
    
    
    
    
    this.cacheMode = cacheMode;
    return this;
  }

   /**
   * Get cacheMode
   * @return cacheMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumjsonFieldConstraintsCacheModeProp getCacheMode() {
    return cacheMode;
  }


  public void setCacheMode(EnumjsonFieldConstraintsCacheModeProp cacheMode) {
    
    
    
    this.cacheMode = cacheMode;
  }


  public JsonFieldConstraintsResponse tokenizeValues(Boolean tokenizeValues) {
    
    
    
    
    this.tokenizeValues = tokenizeValues;
    return this;
  }

   /**
   * Indicates whether the backend should attempt to assign a compact token for each distinct value for the target field in an attempt to reduce the encoded size of the field in JSON objects. These tokens would be assigned prior to using any from the token set used for automatic compaction of some JSON string values.
   * @return tokenizeValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the backend should attempt to assign a compact token for each distinct value for the target field in an attempt to reduce the encoded size of the field in JSON objects. These tokens would be assigned prior to using any from the token set used for automatic compaction of some JSON string values.")

  public Boolean getTokenizeValues() {
    return tokenizeValues;
  }


  public void setTokenizeValues(Boolean tokenizeValues) {
    
    
    
    this.tokenizeValues = tokenizeValues;
  }


  public JsonFieldConstraintsResponse allowedValue(List<String> allowedValue) {
    
    
    
    
    this.allowedValue = allowedValue;
    return this;
  }

  public JsonFieldConstraintsResponse addAllowedValueItem(String allowedValueItem) {
    if (this.allowedValue == null) {
      this.allowedValue = new ArrayList<>();
    }
    this.allowedValue.add(allowedValueItem);
    return this;
  }

   /**
   * Specifies an explicit set of string values that will be the only values permitted for the target field. If a set of allowed values is defined, then the server will reject any attempt to store a JSON object with a value for the target field that is not included in that set.
   * @return allowedValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies an explicit set of string values that will be the only values permitted for the target field. If a set of allowed values is defined, then the server will reject any attempt to store a JSON object with a value for the target field that is not included in that set.")

  public List<String> getAllowedValue() {
    return allowedValue;
  }


  public void setAllowedValue(List<String> allowedValue) {
    
    
    
    this.allowedValue = allowedValue;
  }


  public JsonFieldConstraintsResponse allowedValueRegularExpression(List<String> allowedValueRegularExpression) {
    
    
    
    
    this.allowedValueRegularExpression = allowedValueRegularExpression;
    return this;
  }

  public JsonFieldConstraintsResponse addAllowedValueRegularExpressionItem(String allowedValueRegularExpressionItem) {
    if (this.allowedValueRegularExpression == null) {
      this.allowedValueRegularExpression = new ArrayList<>();
    }
    this.allowedValueRegularExpression.add(allowedValueRegularExpressionItem);
    return this;
  }

   /**
   * Specifies an explicit set of regular expressions that may be used to restrict the set of values that may be used for the target field. If a set of allowed value regular expressions is defined, then the server will reject any attempt to store a JSON object with a value for the target field that does not match at least one of those regular expressions.
   * @return allowedValueRegularExpression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies an explicit set of regular expressions that may be used to restrict the set of values that may be used for the target field. If a set of allowed value regular expressions is defined, then the server will reject any attempt to store a JSON object with a value for the target field that does not match at least one of those regular expressions.")

  public List<String> getAllowedValueRegularExpression() {
    return allowedValueRegularExpression;
  }


  public void setAllowedValueRegularExpression(List<String> allowedValueRegularExpression) {
    
    
    
    this.allowedValueRegularExpression = allowedValueRegularExpression;
  }


  public JsonFieldConstraintsResponse minimumNumericValue(String minimumNumericValue) {
    
    
    
    
    this.minimumNumericValue = minimumNumericValue;
    return this;
  }

   /**
   * Specifies the smallest numeric value that may be used as the value for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is less than that minimum numeric value.
   * @return minimumNumericValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the smallest numeric value that may be used as the value for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is less than that minimum numeric value.")

  public String getMinimumNumericValue() {
    return minimumNumericValue;
  }


  public void setMinimumNumericValue(String minimumNumericValue) {
    
    
    
    this.minimumNumericValue = minimumNumericValue;
  }


  public JsonFieldConstraintsResponse maximumNumericValue(String maximumNumericValue) {
    
    
    
    
    this.maximumNumericValue = maximumNumericValue;
    return this;
  }

   /**
   * Specifies the largest numeric value that may be used as the value for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is greater than that maximum numeric value.
   * @return maximumNumericValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the largest numeric value that may be used as the value for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is greater than that maximum numeric value.")

  public String getMaximumNumericValue() {
    return maximumNumericValue;
  }


  public void setMaximumNumericValue(String maximumNumericValue) {
    
    
    
    this.maximumNumericValue = maximumNumericValue;
  }


  public JsonFieldConstraintsResponse minimumValueLength(Integer minimumValueLength) {
    
    
    
    
    this.minimumValueLength = minimumValueLength;
    return this;
  }

   /**
   * Specifies the smallest number of characters that may be present in string values of the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is shorter than that minimum value length.
   * @return minimumValueLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the smallest number of characters that may be present in string values of the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is shorter than that minimum value length.")

  public Integer getMinimumValueLength() {
    return minimumValueLength;
  }


  public void setMinimumValueLength(Integer minimumValueLength) {
    
    
    
    this.minimumValueLength = minimumValueLength;
  }


  public JsonFieldConstraintsResponse maximumValueLength(Integer maximumValueLength) {
    
    
    
    
    this.maximumValueLength = maximumValueLength;
    return this;
  }

   /**
   * Specifies the largest number of characters that may be present in string values of the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is longer than that maximum value length.
   * @return maximumValueLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the largest number of characters that may be present in string values of the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is longer than that maximum value length.")

  public Integer getMaximumValueLength() {
    return maximumValueLength;
  }


  public void setMaximumValueLength(Integer maximumValueLength) {
    
    
    
    this.maximumValueLength = maximumValueLength;
  }


  public JsonFieldConstraintsResponse minimumValueCount(Integer minimumValueCount) {
    
    
    
    
    this.minimumValueCount = minimumValueCount;
    return this;
  }

   /**
   * Specifies the smallest number of elements that may be present in an array of values for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is an array with fewer than this number of elements.
   * @return minimumValueCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the smallest number of elements that may be present in an array of values for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is an array with fewer than this number of elements.")

  public Integer getMinimumValueCount() {
    return minimumValueCount;
  }


  public void setMinimumValueCount(Integer minimumValueCount) {
    
    
    
    this.minimumValueCount = minimumValueCount;
  }


  public JsonFieldConstraintsResponse maximumValueCount(Integer maximumValueCount) {
    
    
    
    
    this.maximumValueCount = maximumValueCount;
    return this;
  }

   /**
   * Specifies the largest number of elements that may be present in an array of values for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is an array with more than this number of elements.
   * @return maximumValueCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the largest number of elements that may be present in an array of values for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is an array with more than this number of elements.")

  public Integer getMaximumValueCount() {
    return maximumValueCount;
  }


  public void setMaximumValueCount(Integer maximumValueCount) {
    
    
    
    this.maximumValueCount = maximumValueCount;
  }


  public JsonFieldConstraintsResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public JsonFieldConstraintsResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JsonFieldConstraintsResponse instance itself
   */
  public JsonFieldConstraintsResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonFieldConstraintsResponse jsonFieldConstraintsResponse = (JsonFieldConstraintsResponse) o;
    return Objects.equals(this.id, jsonFieldConstraintsResponse.id) &&
        Objects.equals(this.description, jsonFieldConstraintsResponse.description) &&
        Objects.equals(this.schemas, jsonFieldConstraintsResponse.schemas) &&
        Objects.equals(this.jsonField, jsonFieldConstraintsResponse.jsonField) &&
        Objects.equals(this.valueType, jsonFieldConstraintsResponse.valueType) &&
        Objects.equals(this.isRequired, jsonFieldConstraintsResponse.isRequired) &&
        Objects.equals(this.isArray, jsonFieldConstraintsResponse.isArray) &&
        Objects.equals(this.allowNullValue, jsonFieldConstraintsResponse.allowNullValue) &&
        Objects.equals(this.allowEmptyObject, jsonFieldConstraintsResponse.allowEmptyObject) &&
        Objects.equals(this.indexValues, jsonFieldConstraintsResponse.indexValues) &&
        Objects.equals(this.indexEntryLimit, jsonFieldConstraintsResponse.indexEntryLimit) &&
        Objects.equals(this.primeIndex, jsonFieldConstraintsResponse.primeIndex) &&
        Objects.equals(this.cacheMode, jsonFieldConstraintsResponse.cacheMode) &&
        Objects.equals(this.tokenizeValues, jsonFieldConstraintsResponse.tokenizeValues) &&
        Objects.equals(this.allowedValue, jsonFieldConstraintsResponse.allowedValue) &&
        Objects.equals(this.allowedValueRegularExpression, jsonFieldConstraintsResponse.allowedValueRegularExpression) &&
        Objects.equals(this.minimumNumericValue, jsonFieldConstraintsResponse.minimumNumericValue) &&
        Objects.equals(this.maximumNumericValue, jsonFieldConstraintsResponse.maximumNumericValue) &&
        Objects.equals(this.minimumValueLength, jsonFieldConstraintsResponse.minimumValueLength) &&
        Objects.equals(this.maximumValueLength, jsonFieldConstraintsResponse.maximumValueLength) &&
        Objects.equals(this.minimumValueCount, jsonFieldConstraintsResponse.minimumValueCount) &&
        Objects.equals(this.maximumValueCount, jsonFieldConstraintsResponse.maximumValueCount) &&
        Objects.equals(this.meta, jsonFieldConstraintsResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, jsonFieldConstraintsResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, jsonFieldConstraintsResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, jsonField, valueType, isRequired, isArray, allowNullValue, allowEmptyObject, indexValues, indexEntryLimit, primeIndex, cacheMode, tokenizeValues, allowedValue, allowedValueRegularExpression, minimumNumericValue, maximumNumericValue, minimumValueLength, maximumValueLength, minimumValueCount, maximumValueCount, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonFieldConstraintsResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    jsonField: ").append(toIndentedString(jsonField)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    isArray: ").append(toIndentedString(isArray)).append("\n");
    sb.append("    allowNullValue: ").append(toIndentedString(allowNullValue)).append("\n");
    sb.append("    allowEmptyObject: ").append(toIndentedString(allowEmptyObject)).append("\n");
    sb.append("    indexValues: ").append(toIndentedString(indexValues)).append("\n");
    sb.append("    indexEntryLimit: ").append(toIndentedString(indexEntryLimit)).append("\n");
    sb.append("    primeIndex: ").append(toIndentedString(primeIndex)).append("\n");
    sb.append("    cacheMode: ").append(toIndentedString(cacheMode)).append("\n");
    sb.append("    tokenizeValues: ").append(toIndentedString(tokenizeValues)).append("\n");
    sb.append("    allowedValue: ").append(toIndentedString(allowedValue)).append("\n");
    sb.append("    allowedValueRegularExpression: ").append(toIndentedString(allowedValueRegularExpression)).append("\n");
    sb.append("    minimumNumericValue: ").append(toIndentedString(minimumNumericValue)).append("\n");
    sb.append("    maximumNumericValue: ").append(toIndentedString(maximumNumericValue)).append("\n");
    sb.append("    minimumValueLength: ").append(toIndentedString(minimumValueLength)).append("\n");
    sb.append("    maximumValueLength: ").append(toIndentedString(maximumValueLength)).append("\n");
    sb.append("    minimumValueCount: ").append(toIndentedString(minimumValueCount)).append("\n");
    sb.append("    maximumValueCount: ").append(toIndentedString(maximumValueCount)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("jsonField");
    openapiFields.add("valueType");
    openapiFields.add("isRequired");
    openapiFields.add("isArray");
    openapiFields.add("allowNullValue");
    openapiFields.add("allowEmptyObject");
    openapiFields.add("indexValues");
    openapiFields.add("indexEntryLimit");
    openapiFields.add("primeIndex");
    openapiFields.add("cacheMode");
    openapiFields.add("tokenizeValues");
    openapiFields.add("allowedValue");
    openapiFields.add("allowedValueRegularExpression");
    openapiFields.add("minimumNumericValue");
    openapiFields.add("maximumNumericValue");
    openapiFields.add("minimumValueLength");
    openapiFields.add("maximumValueLength");
    openapiFields.add("minimumValueCount");
    openapiFields.add("maximumValueCount");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("jsonField");
    openapiRequiredFields.add("valueType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JsonFieldConstraintsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JsonFieldConstraintsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonFieldConstraintsResponse is not found in the empty JSON string", JsonFieldConstraintsResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JsonFieldConstraintsResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("jsonField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jsonField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsonField").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedValue") != null && !jsonObj.get("allowedValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedValue` to be an array in the JSON string but got `%s`", jsonObj.get("allowedValue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedValueRegularExpression") != null && !jsonObj.get("allowedValueRegularExpression").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedValueRegularExpression` to be an array in the JSON string but got `%s`", jsonObj.get("allowedValueRegularExpression").toString()));
      }
      if ((jsonObj.get("minimumNumericValue") != null && !jsonObj.get("minimumNumericValue").isJsonNull()) && !jsonObj.get("minimumNumericValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumNumericValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumNumericValue").toString()));
      }
      if ((jsonObj.get("maximumNumericValue") != null && !jsonObj.get("maximumNumericValue").isJsonNull()) && !jsonObj.get("maximumNumericValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumNumericValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumNumericValue").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonFieldConstraintsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonFieldConstraintsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonFieldConstraintsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonFieldConstraintsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonFieldConstraintsResponse>() {
           @Override
           public void write(JsonWriter out, JsonFieldConstraintsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonFieldConstraintsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JsonFieldConstraintsResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JsonFieldConstraintsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JsonFieldConstraintsResponse
  * @throws IOException if the JSON string is invalid with respect to JsonFieldConstraintsResponse
  */
  public static JsonFieldConstraintsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonFieldConstraintsResponse.class);
  }

 /**
  * Convert an instance of JsonFieldConstraintsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

