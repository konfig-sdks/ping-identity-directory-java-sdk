/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies the set of plug-in types for the plug-in, which specifies the times at which the plug-in is invoked.
 */
@JsonAdapter(EnumpluginPluginTypeProp.Adapter.class)public enum EnumpluginPluginTypeProp {
  
  STARTUP("startup"),
  
  SHUTDOWN("shutdown"),
  
  POSTCONNECT("postconnect"),
  
  POSTDISCONNECT("postdisconnect"),
  
  LDIFIMPORT("ldifimport"),
  
  LDIFEXPORT("ldifexport"),
  
  PREPARSEABANDON("preparseabandon"),
  
  PREPARSEADD("preparseadd"),
  
  PREPARSEBIND("preparsebind"),
  
  PREPARSECOMPARE("preparsecompare"),
  
  PREPARSEDELETE("preparsedelete"),
  
  PREPARSEEXTENDED("preparseextended"),
  
  PREPARSEMODIFY("preparsemodify"),
  
  PREPARSEMODIFYDN("preparsemodifydn"),
  
  PREPARSESEARCH("preparsesearch"),
  
  PREPARSEUNBIND("preparseunbind"),
  
  PREOPERATIONADD("preoperationadd"),
  
  PREOPERATIONBIND("preoperationbind"),
  
  PREOPERATIONCOMPARE("preoperationcompare"),
  
  PREOPERATIONDELETE("preoperationdelete"),
  
  PREOPERATIONEXTENDED("preoperationextended"),
  
  PREOPERATIONMODIFY("preoperationmodify"),
  
  PREOPERATIONMODIFYDN("preoperationmodifydn"),
  
  PREOPERATIONSEARCH("preoperationsearch"),
  
  POSTOPERATIONABANDON("postoperationabandon"),
  
  POSTOPERATIONADD("postoperationadd"),
  
  POSTOPERATIONBIND("postoperationbind"),
  
  POSTOPERATIONCOMPARE("postoperationcompare"),
  
  POSTOPERATIONDELETE("postoperationdelete"),
  
  POSTOPERATIONEXTENDED("postoperationextended"),
  
  POSTOPERATIONMODIFY("postoperationmodify"),
  
  POSTOPERATIONMODIFYDN("postoperationmodifydn"),
  
  POSTOPERATIONSEARCH("postoperationsearch"),
  
  POSTOPERATIONUNBIND("postoperationunbind"),
  
  PRERESPONSEADD("preresponseadd"),
  
  PRERESPONSEBIND("preresponsebind"),
  
  PRERESPONSECOMPARE("preresponsecompare"),
  
  PRERESPONSEDELETE("preresponsedelete"),
  
  PRERESPONSEEXTENDED("preresponseextended"),
  
  PRERESPONSEMODIFY("preresponsemodify"),
  
  PRERESPONSEMODIFYDN("preresponsemodifydn"),
  
  PRERESPONSESEARCH("preresponsesearch"),
  
  POSTRESPONSEADD("postresponseadd"),
  
  POSTRESPONSEBIND("postresponsebind"),
  
  POSTRESPONSECOMPARE("postresponsecompare"),
  
  POSTRESPONSEDELETE("postresponsedelete"),
  
  POSTRESPONSEEXTENDED("postresponseextended"),
  
  POSTRESPONSEMODIFY("postresponsemodify"),
  
  POSTRESPONSEMODIFYDN("postresponsemodifydn"),
  
  POSTRESPONSESEARCH("postresponsesearch"),
  
  POSTSYNCHRONIZATIONADD("postsynchronizationadd"),
  
  POSTSYNCHRONIZATIONDELETE("postsynchronizationdelete"),
  
  POSTSYNCHRONIZATIONMODIFY("postsynchronizationmodify"),
  
  POSTSYNCHRONIZATIONMODIFYDN("postsynchronizationmodifydn"),
  
  SEARCHRESULTENTRY("searchresultentry"),
  
  SEARCHRESULTREFERENCE("searchresultreference"),
  
  SUBORDINATEMODIFYDN("subordinatemodifydn"),
  
  INTERMEDIATERESPONSE("intermediateresponse");

  private String value;

  EnumpluginPluginTypeProp(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static EnumpluginPluginTypeProp fromValue(String value) {
    for (EnumpluginPluginTypeProp b : EnumpluginPluginTypeProp.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<EnumpluginPluginTypeProp> {
    @Override
    public void write(final JsonWriter jsonWriter, final EnumpluginPluginTypeProp enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public EnumpluginPluginTypeProp read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return EnumpluginPluginTypeProp.fromValue(value);
    }
  }
}

