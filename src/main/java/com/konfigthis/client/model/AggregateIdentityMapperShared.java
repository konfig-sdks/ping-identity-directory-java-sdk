/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumaggregateIdentityMapperSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AggregateIdentityMapperShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AggregateIdentityMapperShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumaggregateIdentityMapperSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALL_INCLUDED_IDENTITY_MAPPER = "allIncludedIdentityMapper";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_IDENTITY_MAPPER)
  private List<String> allIncludedIdentityMapper = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_IDENTITY_MAPPER = "anyIncludedIdentityMapper";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_IDENTITY_MAPPER)
  private List<String> anyIncludedIdentityMapper = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public AggregateIdentityMapperShared() {
  }

  public AggregateIdentityMapperShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Identity Mapper
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Identity Mapper")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AggregateIdentityMapperShared schemas(List<EnumaggregateIdentityMapperSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AggregateIdentityMapperShared addSchemasItem(EnumaggregateIdentityMapperSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumaggregateIdentityMapperSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumaggregateIdentityMapperSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AggregateIdentityMapperShared allIncludedIdentityMapper(List<String> allIncludedIdentityMapper) {
    
    
    
    
    this.allIncludedIdentityMapper = allIncludedIdentityMapper;
    return this;
  }

  public AggregateIdentityMapperShared addAllIncludedIdentityMapperItem(String allIncludedIdentityMapperItem) {
    if (this.allIncludedIdentityMapper == null) {
      this.allIncludedIdentityMapper = new ArrayList<>();
    }
    this.allIncludedIdentityMapper.add(allIncludedIdentityMapperItem);
    return this;
  }

   /**
   * The set of identity mappers that must all match the target entry. Each identity mapper must uniquely match the same target entry. If any of the identity mappers match multiple entries, if any of them match zero entries, or if any of them match different entries, then the mapping will fail.
   * @return allIncludedIdentityMapper
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of identity mappers that must all match the target entry. Each identity mapper must uniquely match the same target entry. If any of the identity mappers match multiple entries, if any of them match zero entries, or if any of them match different entries, then the mapping will fail.")

  public List<String> getAllIncludedIdentityMapper() {
    return allIncludedIdentityMapper;
  }


  public void setAllIncludedIdentityMapper(List<String> allIncludedIdentityMapper) {
    
    
    
    this.allIncludedIdentityMapper = allIncludedIdentityMapper;
  }


  public AggregateIdentityMapperShared anyIncludedIdentityMapper(List<String> anyIncludedIdentityMapper) {
    
    
    
    
    this.anyIncludedIdentityMapper = anyIncludedIdentityMapper;
    return this;
  }

  public AggregateIdentityMapperShared addAnyIncludedIdentityMapperItem(String anyIncludedIdentityMapperItem) {
    if (this.anyIncludedIdentityMapper == null) {
      this.anyIncludedIdentityMapper = new ArrayList<>();
    }
    this.anyIncludedIdentityMapper.add(anyIncludedIdentityMapperItem);
    return this;
  }

   /**
   * The set of identity mappers that will be used to identify the target entry. At least one identity mapper must uniquely match an entry. If multiple identity mappers match entries, then they must all uniquely match the same entry. If none of the identity mappers match any entries, if any of them match multiple entries, or if any of them match different entries, then the mapping will fail.
   * @return anyIncludedIdentityMapper
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of identity mappers that will be used to identify the target entry. At least one identity mapper must uniquely match an entry. If multiple identity mappers match entries, then they must all uniquely match the same entry. If none of the identity mappers match any entries, if any of them match multiple entries, or if any of them match different entries, then the mapping will fail.")

  public List<String> getAnyIncludedIdentityMapper() {
    return anyIncludedIdentityMapper;
  }


  public void setAnyIncludedIdentityMapper(List<String> anyIncludedIdentityMapper) {
    
    
    
    this.anyIncludedIdentityMapper = anyIncludedIdentityMapper;
  }


  public AggregateIdentityMapperShared enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Identity Mapper is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Identity Mapper is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AggregateIdentityMapperShared instance itself
   */
  public AggregateIdentityMapperShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregateIdentityMapperShared aggregateIdentityMapperShared = (AggregateIdentityMapperShared) o;
    return Objects.equals(this.description, aggregateIdentityMapperShared.description) &&
        Objects.equals(this.schemas, aggregateIdentityMapperShared.schemas) &&
        Objects.equals(this.allIncludedIdentityMapper, aggregateIdentityMapperShared.allIncludedIdentityMapper) &&
        Objects.equals(this.anyIncludedIdentityMapper, aggregateIdentityMapperShared.anyIncludedIdentityMapper) &&
        Objects.equals(this.enabled, aggregateIdentityMapperShared.enabled)&&
        Objects.equals(this.additionalProperties, aggregateIdentityMapperShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, allIncludedIdentityMapper, anyIncludedIdentityMapper, enabled, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregateIdentityMapperShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    allIncludedIdentityMapper: ").append(toIndentedString(allIncludedIdentityMapper)).append("\n");
    sb.append("    anyIncludedIdentityMapper: ").append(toIndentedString(anyIncludedIdentityMapper)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("allIncludedIdentityMapper");
    openapiFields.add("anyIncludedIdentityMapper");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AggregateIdentityMapperShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AggregateIdentityMapperShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregateIdentityMapperShared is not found in the empty JSON string", AggregateIdentityMapperShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AggregateIdentityMapperShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedIdentityMapper") != null && !jsonObj.get("allIncludedIdentityMapper").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedIdentityMapper` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedIdentityMapper").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedIdentityMapper") != null && !jsonObj.get("anyIncludedIdentityMapper").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedIdentityMapper` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedIdentityMapper").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregateIdentityMapperShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregateIdentityMapperShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregateIdentityMapperShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregateIdentityMapperShared.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregateIdentityMapperShared>() {
           @Override
           public void write(JsonWriter out, AggregateIdentityMapperShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregateIdentityMapperShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AggregateIdentityMapperShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AggregateIdentityMapperShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AggregateIdentityMapperShared
  * @throws IOException if the JSON string is invalid with respect to AggregateIdentityMapperShared
  */
  public static AggregateIdentityMapperShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregateIdentityMapperShared.class);
  }

 /**
  * Convert an instance of AggregateIdentityMapperShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

