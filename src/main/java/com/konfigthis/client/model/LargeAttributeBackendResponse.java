/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumbackendDefaultCacheModeProp;
import com.konfigthis.client.model.EnumbackendDn2idCacheModeProp;
import com.konfigthis.client.model.EnumbackendDn2uriCacheModeProp;
import com.konfigthis.client.model.EnumbackendExternalTxnDefaultBackendLockBehaviorProp;
import com.konfigthis.client.model.EnumbackendId2childrenCacheModeProp;
import com.konfigthis.client.model.EnumbackendId2entryCacheModeProp;
import com.konfigthis.client.model.EnumbackendId2subtreeCacheModeProp;
import com.konfigthis.client.model.EnumbackendPrimeMethodProp;
import com.konfigthis.client.model.EnumbackendSingleWriterLockBehaviorProp;
import com.konfigthis.client.model.EnumbackendSystemIndexToPrimeInternalNodesOnlyProp;
import com.konfigthis.client.model.EnumbackendSystemIndexToPrimeProp;
import com.konfigthis.client.model.EnumbackendWritabilityModeProp;
import com.konfigthis.client.model.EnumlargeAttributeBackendSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LargeAttributeBackendResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LargeAttributeBackendResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumlargeAttributeBackendSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_BASE_D_N = "baseDN";
  @SerializedName(SERIALIZED_NAME_BASE_D_N)
  private List<String> baseDN = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITABILITY_MODE = "writabilityMode";
  @SerializedName(SERIALIZED_NAME_WRITABILITY_MODE)
  private EnumbackendWritabilityModeProp writabilityMode;

  public static final String SERIALIZED_NAME_IS_PRIVATE_BACKEND = "isPrivateBackend";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE_BACKEND)
  private Boolean isPrivateBackend;

  public static final String SERIALIZED_NAME_DB_CACHE_PERCENT = "dbCachePercent";
  @SerializedName(SERIALIZED_NAME_DB_CACHE_PERCENT)
  private Integer dbCachePercent;

  public static final String SERIALIZED_NAME_DEFAULT_CACHE_MODE = "defaultCacheMode";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CACHE_MODE)
  private EnumbackendDefaultCacheModeProp defaultCacheMode;

  public static final String SERIALIZED_NAME_DB_DIRECTORY = "dbDirectory";
  @SerializedName(SERIALIZED_NAME_DB_DIRECTORY)
  private String dbDirectory;

  public static final String SERIALIZED_NAME_DB_DIRECTORY_PERMISSIONS = "dbDirectoryPermissions";
  @SerializedName(SERIALIZED_NAME_DB_DIRECTORY_PERMISSIONS)
  private String dbDirectoryPermissions;

  public static final String SERIALIZED_NAME_COMPACT_COMMON_PARENT_D_N = "compactCommonParentDN";
  @SerializedName(SERIALIZED_NAME_COMPACT_COMMON_PARENT_D_N)
  private List<String> compactCommonParentDN = null;

  public static final String SERIALIZED_NAME_COMPRESS_ENTRIES = "compressEntries";
  @SerializedName(SERIALIZED_NAME_COMPRESS_ENTRIES)
  private Boolean compressEntries;

  public static final String SERIALIZED_NAME_HASH_ENTRIES = "hashEntries";
  @SerializedName(SERIALIZED_NAME_HASH_ENTRIES)
  private Boolean hashEntries;

  public static final String SERIALIZED_NAME_DB_NUM_CLEANER_THREADS = "dbNumCleanerThreads";
  @SerializedName(SERIALIZED_NAME_DB_NUM_CLEANER_THREADS)
  private Integer dbNumCleanerThreads;

  public static final String SERIALIZED_NAME_DB_CLEANER_MIN_UTILIZATION = "dbCleanerMinUtilization";
  @SerializedName(SERIALIZED_NAME_DB_CLEANER_MIN_UTILIZATION)
  private Integer dbCleanerMinUtilization;

  public static final String SERIALIZED_NAME_DB_EVICTOR_CRITICAL_PERCENTAGE = "dbEvictorCriticalPercentage";
  @SerializedName(SERIALIZED_NAME_DB_EVICTOR_CRITICAL_PERCENTAGE)
  private Integer dbEvictorCriticalPercentage;

  public static final String SERIALIZED_NAME_DB_CHECKPOINTER_WAKEUP_INTERVAL = "dbCheckpointerWakeupInterval";
  @SerializedName(SERIALIZED_NAME_DB_CHECKPOINTER_WAKEUP_INTERVAL)
  private String dbCheckpointerWakeupInterval;

  public static final String SERIALIZED_NAME_DB_BACKGROUND_SYNC_INTERVAL = "dbBackgroundSyncInterval";
  @SerializedName(SERIALIZED_NAME_DB_BACKGROUND_SYNC_INTERVAL)
  private String dbBackgroundSyncInterval;

  public static final String SERIALIZED_NAME_DB_USE_THREAD_LOCAL_HANDLES = "dbUseThreadLocalHandles";
  @SerializedName(SERIALIZED_NAME_DB_USE_THREAD_LOCAL_HANDLES)
  private Boolean dbUseThreadLocalHandles;

  public static final String SERIALIZED_NAME_DB_LOG_FILE_MAX = "dbLogFileMax";
  @SerializedName(SERIALIZED_NAME_DB_LOG_FILE_MAX)
  private String dbLogFileMax;

  public static final String SERIALIZED_NAME_DB_LOGGING_LEVEL = "dbLoggingLevel";
  @SerializedName(SERIALIZED_NAME_DB_LOGGING_LEVEL)
  private String dbLoggingLevel;

  public static final String SERIALIZED_NAME_JE_PROPERTY = "jeProperty";
  @SerializedName(SERIALIZED_NAME_JE_PROPERTY)
  private List<String> jeProperty = null;

  public static final String SERIALIZED_NAME_ID2ENTRY_CACHE_MODE = "id2entryCacheMode";
  @SerializedName(SERIALIZED_NAME_ID2ENTRY_CACHE_MODE)
  private EnumbackendId2entryCacheModeProp id2entryCacheMode;

  public static final String SERIALIZED_NAME_DN2ID_CACHE_MODE = "dn2idCacheMode";
  @SerializedName(SERIALIZED_NAME_DN2ID_CACHE_MODE)
  private EnumbackendDn2idCacheModeProp dn2idCacheMode;

  public static final String SERIALIZED_NAME_ID2CHILDREN_CACHE_MODE = "id2childrenCacheMode";
  @SerializedName(SERIALIZED_NAME_ID2CHILDREN_CACHE_MODE)
  private EnumbackendId2childrenCacheModeProp id2childrenCacheMode;

  public static final String SERIALIZED_NAME_ID2SUBTREE_CACHE_MODE = "id2subtreeCacheMode";
  @SerializedName(SERIALIZED_NAME_ID2SUBTREE_CACHE_MODE)
  private EnumbackendId2subtreeCacheModeProp id2subtreeCacheMode;

  public static final String SERIALIZED_NAME_DN2URI_CACHE_MODE = "dn2uriCacheMode";
  @SerializedName(SERIALIZED_NAME_DN2URI_CACHE_MODE)
  private EnumbackendDn2uriCacheModeProp dn2uriCacheMode;

  public static final String SERIALIZED_NAME_PRIME_METHOD = "primeMethod";
  @SerializedName(SERIALIZED_NAME_PRIME_METHOD)
  private List<EnumbackendPrimeMethodProp> primeMethod = null;

  public static final String SERIALIZED_NAME_PRIME_THREAD_COUNT = "primeThreadCount";
  @SerializedName(SERIALIZED_NAME_PRIME_THREAD_COUNT)
  private Integer primeThreadCount;

  public static final String SERIALIZED_NAME_PRIME_TIME_LIMIT = "primeTimeLimit";
  @SerializedName(SERIALIZED_NAME_PRIME_TIME_LIMIT)
  private String primeTimeLimit;

  public static final String SERIALIZED_NAME_PRIME_ALL_INDEXES = "primeAllIndexes";
  @SerializedName(SERIALIZED_NAME_PRIME_ALL_INDEXES)
  private Boolean primeAllIndexes;

  public static final String SERIALIZED_NAME_SYSTEM_INDEX_TO_PRIME = "systemIndexToPrime";
  @SerializedName(SERIALIZED_NAME_SYSTEM_INDEX_TO_PRIME)
  private List<EnumbackendSystemIndexToPrimeProp> systemIndexToPrime = null;

  public static final String SERIALIZED_NAME_SYSTEM_INDEX_TO_PRIME_INTERNAL_NODES_ONLY = "systemIndexToPrimeInternalNodesOnly";
  @SerializedName(SERIALIZED_NAME_SYSTEM_INDEX_TO_PRIME_INTERNAL_NODES_ONLY)
  private List<EnumbackendSystemIndexToPrimeInternalNodesOnlyProp> systemIndexToPrimeInternalNodesOnly = null;

  public static final String SERIALIZED_NAME_BACKGROUND_PRIME = "backgroundPrime";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_PRIME)
  private Boolean backgroundPrime;

  public static final String SERIALIZED_NAME_INDEX_ENTRY_LIMIT = "indexEntryLimit";
  @SerializedName(SERIALIZED_NAME_INDEX_ENTRY_LIMIT)
  private Integer indexEntryLimit;

  public static final String SERIALIZED_NAME_COMPOSITE_INDEX_ENTRY_LIMIT = "compositeIndexEntryLimit";
  @SerializedName(SERIALIZED_NAME_COMPOSITE_INDEX_ENTRY_LIMIT)
  private Integer compositeIndexEntryLimit;

  public static final String SERIALIZED_NAME_ID2CHILDREN_INDEX_ENTRY_LIMIT = "id2childrenIndexEntryLimit";
  @SerializedName(SERIALIZED_NAME_ID2CHILDREN_INDEX_ENTRY_LIMIT)
  private Integer id2childrenIndexEntryLimit;

  public static final String SERIALIZED_NAME_ID2SUBTREE_INDEX_ENTRY_LIMIT = "id2subtreeIndexEntryLimit";
  @SerializedName(SERIALIZED_NAME_ID2SUBTREE_INDEX_ENTRY_LIMIT)
  private Integer id2subtreeIndexEntryLimit;

  public static final String SERIALIZED_NAME_IMPORT_TEMP_DIRECTORY = "importTempDirectory";
  @SerializedName(SERIALIZED_NAME_IMPORT_TEMP_DIRECTORY)
  private String importTempDirectory;

  public static final String SERIALIZED_NAME_IMPORT_THREAD_COUNT = "importThreadCount";
  @SerializedName(SERIALIZED_NAME_IMPORT_THREAD_COUNT)
  private Integer importThreadCount;

  public static final String SERIALIZED_NAME_EXPORT_THREAD_COUNT = "exportThreadCount";
  @SerializedName(SERIALIZED_NAME_EXPORT_THREAD_COUNT)
  private Integer exportThreadCount;

  public static final String SERIALIZED_NAME_DB_IMPORT_CACHE_PERCENT = "dbImportCachePercent";
  @SerializedName(SERIALIZED_NAME_DB_IMPORT_CACHE_PERCENT)
  private Integer dbImportCachePercent;

  public static final String SERIALIZED_NAME_DB_TXN_WRITE_NO_SYNC = "dbTxnWriteNoSync";
  @SerializedName(SERIALIZED_NAME_DB_TXN_WRITE_NO_SYNC)
  private Boolean dbTxnWriteNoSync;

  public static final String SERIALIZED_NAME_DEADLOCK_RETRY_LIMIT = "deadlockRetryLimit";
  @SerializedName(SERIALIZED_NAME_DEADLOCK_RETRY_LIMIT)
  private Integer deadlockRetryLimit;

  public static final String SERIALIZED_NAME_EXTERNAL_TXN_DEFAULT_BACKEND_LOCK_BEHAVIOR = "externalTxnDefaultBackendLockBehavior";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TXN_DEFAULT_BACKEND_LOCK_BEHAVIOR)
  private EnumbackendExternalTxnDefaultBackendLockBehaviorProp externalTxnDefaultBackendLockBehavior;

  public static final String SERIALIZED_NAME_SINGLE_WRITER_LOCK_BEHAVIOR = "singleWriterLockBehavior";
  @SerializedName(SERIALIZED_NAME_SINGLE_WRITER_LOCK_BEHAVIOR)
  private EnumbackendSingleWriterLockBehaviorProp singleWriterLockBehavior;

  public static final String SERIALIZED_NAME_SUBTREE_DELETE_SIZE_LIMIT = "subtreeDeleteSizeLimit";
  @SerializedName(SERIALIZED_NAME_SUBTREE_DELETE_SIZE_LIMIT)
  private Integer subtreeDeleteSizeLimit;

  public static final String SERIALIZED_NAME_NUM_RECENT_CHANGES = "numRecentChanges";
  @SerializedName(SERIALIZED_NAME_NUM_RECENT_CHANGES)
  private Integer numRecentChanges;

  public static final String SERIALIZED_NAME_OFFLINE_PROCESS_DATABASE_OPEN_TIMEOUT = "offlineProcessDatabaseOpenTimeout";
  @SerializedName(SERIALIZED_NAME_OFFLINE_PROCESS_DATABASE_OPEN_TIMEOUT)
  private String offlineProcessDatabaseOpenTimeout;

  public static final String SERIALIZED_NAME_BACKEND_I_D = "backendID";
  @SerializedName(SERIALIZED_NAME_BACKEND_I_D)
  private String backendID;

  public static final String SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED = "setDegradedAlertWhenDisabled";
  @SerializedName(SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED)
  private Boolean setDegradedAlertWhenDisabled;

  public static final String SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED = "returnUnavailableWhenDisabled";
  @SerializedName(SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED)
  private Boolean returnUnavailableWhenDisabled;

  public static final String SERIALIZED_NAME_NOTIFICATION_MANAGER = "notificationManager";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_MANAGER)
  private String notificationManager;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public LargeAttributeBackendResponse() {
  }

  public LargeAttributeBackendResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Backend
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Backend")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public LargeAttributeBackendResponse schemas(List<EnumlargeAttributeBackendSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public LargeAttributeBackendResponse addSchemasItem(EnumlargeAttributeBackendSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumlargeAttributeBackendSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumlargeAttributeBackendSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public LargeAttributeBackendResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Backend
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Backend")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public LargeAttributeBackendResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the backend is enabled in the server.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the backend is enabled in the server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public LargeAttributeBackendResponse baseDN(List<String> baseDN) {
    
    
    
    
    this.baseDN = baseDN;
    return this;
  }

  public LargeAttributeBackendResponse addBaseDNItem(String baseDNItem) {
    this.baseDN.add(baseDNItem);
    return this;
  }

   /**
   * Specifies the base DN(s) for the data that the backend handles.
   * @return baseDN
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the base DN(s) for the data that the backend handles.")

  public List<String> getBaseDN() {
    return baseDN;
  }


  public void setBaseDN(List<String> baseDN) {
    
    
    
    this.baseDN = baseDN;
  }


  public LargeAttributeBackendResponse writabilityMode(EnumbackendWritabilityModeProp writabilityMode) {
    
    
    
    
    this.writabilityMode = writabilityMode;
    return this;
  }

   /**
   * Get writabilityMode
   * @return writabilityMode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumbackendWritabilityModeProp getWritabilityMode() {
    return writabilityMode;
  }


  public void setWritabilityMode(EnumbackendWritabilityModeProp writabilityMode) {
    
    
    
    this.writabilityMode = writabilityMode;
  }


  public LargeAttributeBackendResponse isPrivateBackend(Boolean isPrivateBackend) {
    
    
    
    
    this.isPrivateBackend = isPrivateBackend;
    return this;
  }

   /**
   * Indicates whether this backend should be considered a private backend in the server. Private backends are meant for storing server-internal information and should not be used for user or application data.
   * @return isPrivateBackend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this backend should be considered a private backend in the server. Private backends are meant for storing server-internal information and should not be used for user or application data.")

  public Boolean getIsPrivateBackend() {
    return isPrivateBackend;
  }


  public void setIsPrivateBackend(Boolean isPrivateBackend) {
    
    
    
    this.isPrivateBackend = isPrivateBackend;
  }


  public LargeAttributeBackendResponse dbCachePercent(Integer dbCachePercent) {
    
    
    
    
    this.dbCachePercent = dbCachePercent;
    return this;
  }

   /**
   * Specifies the percentage of JVM memory to allocate to the database cache.
   * @return dbCachePercent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the percentage of JVM memory to allocate to the database cache.")

  public Integer getDbCachePercent() {
    return dbCachePercent;
  }


  public void setDbCachePercent(Integer dbCachePercent) {
    
    
    
    this.dbCachePercent = dbCachePercent;
  }


  public LargeAttributeBackendResponse defaultCacheMode(EnumbackendDefaultCacheModeProp defaultCacheMode) {
    
    
    
    
    this.defaultCacheMode = defaultCacheMode;
    return this;
  }

   /**
   * Get defaultCacheMode
   * @return defaultCacheMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendDefaultCacheModeProp getDefaultCacheMode() {
    return defaultCacheMode;
  }


  public void setDefaultCacheMode(EnumbackendDefaultCacheModeProp defaultCacheMode) {
    
    
    
    this.defaultCacheMode = defaultCacheMode;
  }


  public LargeAttributeBackendResponse dbDirectory(String dbDirectory) {
    
    
    
    
    this.dbDirectory = dbDirectory;
    return this;
  }

   /**
   * Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.
   * @return dbDirectory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the path to the filesystem directory that is used to hold the Berkeley DB Java Edition database files containing the data for this backend. The files for this backend are stored in a sub-directory named after the backend-id.")

  public String getDbDirectory() {
    return dbDirectory;
  }


  public void setDbDirectory(String dbDirectory) {
    
    
    
    this.dbDirectory = dbDirectory;
  }


  public LargeAttributeBackendResponse dbDirectoryPermissions(String dbDirectoryPermissions) {
    
    
    
    
    this.dbDirectoryPermissions = dbDirectoryPermissions;
    return this;
  }

   /**
   * Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup or LDIF export of the backend.
   * @return dbDirectoryPermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the permissions that should be applied to the directory containing the backend database files and to directories and files created during backup or LDIF export of the backend.")

  public String getDbDirectoryPermissions() {
    return dbDirectoryPermissions;
  }


  public void setDbDirectoryPermissions(String dbDirectoryPermissions) {
    
    
    
    this.dbDirectoryPermissions = dbDirectoryPermissions;
  }


  public LargeAttributeBackendResponse compactCommonParentDN(List<String> compactCommonParentDN) {
    
    
    
    
    this.compactCommonParentDN = compactCommonParentDN;
    return this;
  }

  public LargeAttributeBackendResponse addCompactCommonParentDNItem(String compactCommonParentDNItem) {
    if (this.compactCommonParentDN == null) {
      this.compactCommonParentDN = new ArrayList<>();
    }
    this.compactCommonParentDN.add(compactCommonParentDNItem);
    return this;
  }

   /**
   * Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help increase the space efficiency when encoding entries for storage.
   * @return compactCommonParentDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provides a DN of an entry that may be the parent for a large number of entries in the backend. This may be used to help increase the space efficiency when encoding entries for storage.")

  public List<String> getCompactCommonParentDN() {
    return compactCommonParentDN;
  }


  public void setCompactCommonParentDN(List<String> compactCommonParentDN) {
    
    
    
    this.compactCommonParentDN = compactCommonParentDN;
  }


  public LargeAttributeBackendResponse compressEntries(Boolean compressEntries) {
    
    
    
    
    this.compressEntries = compressEntries;
    return this;
  }

   /**
   * Indicates whether the backend should attempt to compress entries before storing them in the database.
   * @return compressEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the backend should attempt to compress entries before storing them in the database.")

  public Boolean getCompressEntries() {
    return compressEntries;
  }


  public void setCompressEntries(Boolean compressEntries) {
    
    
    
    this.compressEntries = compressEntries;
  }


  public LargeAttributeBackendResponse hashEntries(Boolean hashEntries) {
    
    
    
    
    this.hashEntries = hashEntries;
    return this;
  }

   /**
   * Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to provide a means of verifying the integrity of the entry data.
   * @return hashEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to calculate and store a message digest of the entry contents along with the entry data, in order to provide a means of verifying the integrity of the entry data.")

  public Boolean getHashEntries() {
    return hashEntries;
  }


  public void setHashEntries(Boolean hashEntries) {
    
    
    
    this.hashEntries = hashEntries;
  }


  public LargeAttributeBackendResponse dbNumCleanerThreads(Integer dbNumCleanerThreads) {
    
    
    
    
    this.dbNumCleanerThreads = dbNumCleanerThreads;
    return this;
  }

   /**
   * Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on the number of available CPUs.
   * @return dbNumCleanerThreads
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of threads that the backend should maintain to keep the database log files at or near the desired utilization. A value of zero indicates that the number of cleaner threads should be automatically configured based on the number of available CPUs.")

  public Integer getDbNumCleanerThreads() {
    return dbNumCleanerThreads;
  }


  public void setDbNumCleanerThreads(Integer dbNumCleanerThreads) {
    
    
    
    this.dbNumCleanerThreads = dbNumCleanerThreads;
  }


  public LargeAttributeBackendResponse dbCleanerMinUtilization(Integer dbCleanerMinUtilization) {
    
    
    
    
    this.dbCleanerMinUtilization = dbCleanerMinUtilization;
    return this;
  }

   /**
   * Specifies the minimum percentage of \&quot;live\&quot; data that the database cleaner attempts to keep in database log files.
   * @return dbCleanerMinUtilization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the minimum percentage of \"live\" data that the database cleaner attempts to keep in database log files.")

  public Integer getDbCleanerMinUtilization() {
    return dbCleanerMinUtilization;
  }


  public void setDbCleanerMinUtilization(Integer dbCleanerMinUtilization) {
    
    
    
    this.dbCleanerMinUtilization = dbCleanerMinUtilization;
  }


  public LargeAttributeBackendResponse dbEvictorCriticalPercentage(Integer dbEvictorCriticalPercentage) {
    
    
    
    
    this.dbEvictorCriticalPercentage = dbEvictorCriticalPercentage;
    return this;
  }

   /**
   * Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server threads are blocked.
   * @return dbEvictorCriticalPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the percentage over the configured maximum that the database cache is allowed to grow. It is recommended to set this value slightly above zero when the database is too large to fully cache in memory. In this case, a dedicated background evictor thread is used to perform evictions once the cache fills up reducing the possibility that server threads are blocked.")

  public Integer getDbEvictorCriticalPercentage() {
    return dbEvictorCriticalPercentage;
  }


  public void setDbEvictorCriticalPercentage(Integer dbEvictorCriticalPercentage) {
    
    
    
    this.dbEvictorCriticalPercentage = dbEvictorCriticalPercentage;
  }


  public LargeAttributeBackendResponse dbCheckpointerWakeupInterval(String dbCheckpointerWakeupInterval) {
    
    
    
    
    this.dbCheckpointerWakeupInterval = dbCheckpointerWakeupInterval;
    return this;
  }

   /**
   * Specifies the maximum length of time that should pass between checkpoints.
   * @return dbCheckpointerWakeupInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that should pass between checkpoints.")

  public String getDbCheckpointerWakeupInterval() {
    return dbCheckpointerWakeupInterval;
  }


  public void setDbCheckpointerWakeupInterval(String dbCheckpointerWakeupInterval) {
    
    
    
    this.dbCheckpointerWakeupInterval = dbCheckpointerWakeupInterval;
  }


  public LargeAttributeBackendResponse dbBackgroundSyncInterval(String dbBackgroundSyncInterval) {
    
    
    
    
    this.dbBackgroundSyncInterval = dbBackgroundSyncInterval;
    return this;
  }

   /**
   * Specifies the interval to use when performing background synchronous writes in the database environment in order to smooth overall write performance and increase data durability. A value of \&quot;0 s\&quot; will disable background synchronous writes.
   * @return dbBackgroundSyncInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the interval to use when performing background synchronous writes in the database environment in order to smooth overall write performance and increase data durability. A value of \"0 s\" will disable background synchronous writes.")

  public String getDbBackgroundSyncInterval() {
    return dbBackgroundSyncInterval;
  }


  public void setDbBackgroundSyncInterval(String dbBackgroundSyncInterval) {
    
    
    
    this.dbBackgroundSyncInterval = dbBackgroundSyncInterval;
  }


  public LargeAttributeBackendResponse dbUseThreadLocalHandles(Boolean dbUseThreadLocalHandles) {
    
    
    
    
    this.dbUseThreadLocalHandles = dbUseThreadLocalHandles;
    return this;
  }

   /**
   * Indicates whether to use thread-local database handles to reduce contention in the backend.
   * @return dbUseThreadLocalHandles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to use thread-local database handles to reduce contention in the backend.")

  public Boolean getDbUseThreadLocalHandles() {
    return dbUseThreadLocalHandles;
  }


  public void setDbUseThreadLocalHandles(Boolean dbUseThreadLocalHandles) {
    
    
    
    this.dbUseThreadLocalHandles = dbUseThreadLocalHandles;
  }


  public LargeAttributeBackendResponse dbLogFileMax(String dbLogFileMax) {
    
    
    
    
    this.dbLogFileMax = dbLogFileMax;
    return this;
  }

   /**
   * Specifies the maximum size for a database log file.
   * @return dbLogFileMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum size for a database log file.")

  public String getDbLogFileMax() {
    return dbLogFileMax;
  }


  public void setDbLogFileMax(String dbLogFileMax) {
    
    
    
    this.dbLogFileMax = dbLogFileMax;
  }


  public LargeAttributeBackendResponse dbLoggingLevel(String dbLoggingLevel) {
    
    
    
    
    this.dbLoggingLevel = dbLoggingLevel;
    return this;
  }

   /**
   * Specifies the log level that should be used by the database when it is writing information into the je.info file.
   * @return dbLoggingLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the log level that should be used by the database when it is writing information into the je.info file.")

  public String getDbLoggingLevel() {
    return dbLoggingLevel;
  }


  public void setDbLoggingLevel(String dbLoggingLevel) {
    
    
    
    this.dbLoggingLevel = dbLoggingLevel;
  }


  public LargeAttributeBackendResponse jeProperty(List<String> jeProperty) {
    
    
    
    
    this.jeProperty = jeProperty;
    return this;
  }

  public LargeAttributeBackendResponse addJePropertyItem(String jePropertyItem) {
    if (this.jeProperty == null) {
      this.jeProperty = new ArrayList<>();
    }
    this.jeProperty.add(jePropertyItem);
    return this;
  }

   /**
   * Specifies the database and environment properties for the Berkeley DB Java Edition database serving the data for this backend.
   * @return jeProperty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the database and environment properties for the Berkeley DB Java Edition database serving the data for this backend.")

  public List<String> getJeProperty() {
    return jeProperty;
  }


  public void setJeProperty(List<String> jeProperty) {
    
    
    
    this.jeProperty = jeProperty;
  }


  public LargeAttributeBackendResponse id2entryCacheMode(EnumbackendId2entryCacheModeProp id2entryCacheMode) {
    
    
    
    
    this.id2entryCacheMode = id2entryCacheMode;
    return this;
  }

   /**
   * Get id2entryCacheMode
   * @return id2entryCacheMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendId2entryCacheModeProp getId2entryCacheMode() {
    return id2entryCacheMode;
  }


  public void setId2entryCacheMode(EnumbackendId2entryCacheModeProp id2entryCacheMode) {
    
    
    
    this.id2entryCacheMode = id2entryCacheMode;
  }


  public LargeAttributeBackendResponse dn2idCacheMode(EnumbackendDn2idCacheModeProp dn2idCacheMode) {
    
    
    
    
    this.dn2idCacheMode = dn2idCacheMode;
    return this;
  }

   /**
   * Get dn2idCacheMode
   * @return dn2idCacheMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendDn2idCacheModeProp getDn2idCacheMode() {
    return dn2idCacheMode;
  }


  public void setDn2idCacheMode(EnumbackendDn2idCacheModeProp dn2idCacheMode) {
    
    
    
    this.dn2idCacheMode = dn2idCacheMode;
  }


  public LargeAttributeBackendResponse id2childrenCacheMode(EnumbackendId2childrenCacheModeProp id2childrenCacheMode) {
    
    
    
    
    this.id2childrenCacheMode = id2childrenCacheMode;
    return this;
  }

   /**
   * Get id2childrenCacheMode
   * @return id2childrenCacheMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendId2childrenCacheModeProp getId2childrenCacheMode() {
    return id2childrenCacheMode;
  }


  public void setId2childrenCacheMode(EnumbackendId2childrenCacheModeProp id2childrenCacheMode) {
    
    
    
    this.id2childrenCacheMode = id2childrenCacheMode;
  }


  public LargeAttributeBackendResponse id2subtreeCacheMode(EnumbackendId2subtreeCacheModeProp id2subtreeCacheMode) {
    
    
    
    
    this.id2subtreeCacheMode = id2subtreeCacheMode;
    return this;
  }

   /**
   * Get id2subtreeCacheMode
   * @return id2subtreeCacheMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendId2subtreeCacheModeProp getId2subtreeCacheMode() {
    return id2subtreeCacheMode;
  }


  public void setId2subtreeCacheMode(EnumbackendId2subtreeCacheModeProp id2subtreeCacheMode) {
    
    
    
    this.id2subtreeCacheMode = id2subtreeCacheMode;
  }


  public LargeAttributeBackendResponse dn2uriCacheMode(EnumbackendDn2uriCacheModeProp dn2uriCacheMode) {
    
    
    
    
    this.dn2uriCacheMode = dn2uriCacheMode;
    return this;
  }

   /**
   * Get dn2uriCacheMode
   * @return dn2uriCacheMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendDn2uriCacheModeProp getDn2uriCacheMode() {
    return dn2uriCacheMode;
  }


  public void setDn2uriCacheMode(EnumbackendDn2uriCacheModeProp dn2uriCacheMode) {
    
    
    
    this.dn2uriCacheMode = dn2uriCacheMode;
  }


  public LargeAttributeBackendResponse primeMethod(List<EnumbackendPrimeMethodProp> primeMethod) {
    
    
    
    
    this.primeMethod = primeMethod;
    return this;
  }

  public LargeAttributeBackendResponse addPrimeMethodItem(EnumbackendPrimeMethodProp primeMethodItem) {
    if (this.primeMethod == null) {
      this.primeMethod = new ArrayList<>();
    }
    this.primeMethod.add(primeMethodItem);
    return this;
  }

   /**
   * Get primeMethod
   * @return primeMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumbackendPrimeMethodProp> getPrimeMethod() {
    return primeMethod;
  }


  public void setPrimeMethod(List<EnumbackendPrimeMethodProp> primeMethod) {
    
    
    
    this.primeMethod = primeMethod;
  }


  public LargeAttributeBackendResponse primeThreadCount(Integer primeThreadCount) {
    
    
    
    
    this.primeThreadCount = primeThreadCount;
    return this;
  }

   /**
   * Specifies the number of threads to use when priming. At present, this applies only to the preload and cursor-across-indexes prime methods.
   * @return primeThreadCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of threads to use when priming. At present, this applies only to the preload and cursor-across-indexes prime methods.")

  public Integer getPrimeThreadCount() {
    return primeThreadCount;
  }


  public void setPrimeThreadCount(Integer primeThreadCount) {
    
    
    
    this.primeThreadCount = primeThreadCount;
  }


  public LargeAttributeBackendResponse primeTimeLimit(String primeTimeLimit) {
    
    
    
    
    this.primeTimeLimit = primeTimeLimit;
    return this;
  }

   /**
   * Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds indicates that there should not be a time limit.
   * @return primeTimeLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that the backend prime should be allowed to run. A duration of zero seconds indicates that there should not be a time limit.")

  public String getPrimeTimeLimit() {
    return primeTimeLimit;
  }


  public void setPrimeTimeLimit(String primeTimeLimit) {
    
    
    
    this.primeTimeLimit = primeTimeLimit;
  }


  public LargeAttributeBackendResponse primeAllIndexes(Boolean primeAllIndexes) {
    
    
    
    
    this.primeAllIndexes = primeAllIndexes;
    return this;
  }

   /**
   * Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute index definition for attribute indexes).
   * @return primeAllIndexes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to prime all indexes associated with this backend, or to only prime the specified set of indexes (as configured with the system-index-to-prime property for the system indexes, and the prime-index property in the attribute index definition for attribute indexes).")

  public Boolean getPrimeAllIndexes() {
    return primeAllIndexes;
  }


  public void setPrimeAllIndexes(Boolean primeAllIndexes) {
    
    
    
    this.primeAllIndexes = primeAllIndexes;
  }


  public LargeAttributeBackendResponse systemIndexToPrime(List<EnumbackendSystemIndexToPrimeProp> systemIndexToPrime) {
    
    
    
    
    this.systemIndexToPrime = systemIndexToPrime;
    return this;
  }

  public LargeAttributeBackendResponse addSystemIndexToPrimeItem(EnumbackendSystemIndexToPrimeProp systemIndexToPrimeItem) {
    if (this.systemIndexToPrime == null) {
      this.systemIndexToPrime = new ArrayList<>();
    }
    this.systemIndexToPrime.add(systemIndexToPrimeItem);
    return this;
  }

   /**
   * Get systemIndexToPrime
   * @return systemIndexToPrime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumbackendSystemIndexToPrimeProp> getSystemIndexToPrime() {
    return systemIndexToPrime;
  }


  public void setSystemIndexToPrime(List<EnumbackendSystemIndexToPrimeProp> systemIndexToPrime) {
    
    
    
    this.systemIndexToPrime = systemIndexToPrime;
  }


  public LargeAttributeBackendResponse systemIndexToPrimeInternalNodesOnly(List<EnumbackendSystemIndexToPrimeInternalNodesOnlyProp> systemIndexToPrimeInternalNodesOnly) {
    
    
    
    
    this.systemIndexToPrimeInternalNodesOnly = systemIndexToPrimeInternalNodesOnly;
    return this;
  }

  public LargeAttributeBackendResponse addSystemIndexToPrimeInternalNodesOnlyItem(EnumbackendSystemIndexToPrimeInternalNodesOnlyProp systemIndexToPrimeInternalNodesOnlyItem) {
    if (this.systemIndexToPrimeInternalNodesOnly == null) {
      this.systemIndexToPrimeInternalNodesOnly = new ArrayList<>();
    }
    this.systemIndexToPrimeInternalNodesOnly.add(systemIndexToPrimeInternalNodesOnlyItem);
    return this;
  }

   /**
   * Get systemIndexToPrimeInternalNodesOnly
   * @return systemIndexToPrimeInternalNodesOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumbackendSystemIndexToPrimeInternalNodesOnlyProp> getSystemIndexToPrimeInternalNodesOnly() {
    return systemIndexToPrimeInternalNodesOnly;
  }


  public void setSystemIndexToPrimeInternalNodesOnly(List<EnumbackendSystemIndexToPrimeInternalNodesOnlyProp> systemIndexToPrimeInternalNodesOnly) {
    
    
    
    this.systemIndexToPrimeInternalNodesOnly = systemIndexToPrimeInternalNodesOnly;
  }


  public LargeAttributeBackendResponse backgroundPrime(Boolean backgroundPrime) {
    
    
    
    
    this.backgroundPrime = backgroundPrime;
    return this;
  }

   /**
   * Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is in progress.
   * @return backgroundPrime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to attempt to perform the prime using a background thread if possible. If background priming is enabled, then the Directory Server may be allowed to accept client connections and process requests while the prime is in progress.")

  public Boolean getBackgroundPrime() {
    return backgroundPrime;
  }


  public void setBackgroundPrime(Boolean backgroundPrime) {
    
    
    
    this.backgroundPrime = backgroundPrime;
  }


  public LargeAttributeBackendResponse indexEntryLimit(Integer indexEntryLimit) {
    
    
    
    
    this.indexEntryLimit = indexEntryLimit;
    return this;
  }

   /**
   * Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.
   * @return indexEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.")

  public Integer getIndexEntryLimit() {
    return indexEntryLimit;
  }


  public void setIndexEntryLimit(Integer indexEntryLimit) {
    
    
    
    this.indexEntryLimit = indexEntryLimit;
  }


  public LargeAttributeBackendResponse compositeIndexEntryLimit(Integer compositeIndexEntryLimit) {
    
    
    
    
    this.compositeIndexEntryLimit = compositeIndexEntryLimit;
    return this;
  }

   /**
   * Specifies the maximum number of entries that are allowed to match a given composite index key before that particular composite index key is no longer maintained.
   * @return compositeIndexEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of entries that are allowed to match a given composite index key before that particular composite index key is no longer maintained.")

  public Integer getCompositeIndexEntryLimit() {
    return compositeIndexEntryLimit;
  }


  public void setCompositeIndexEntryLimit(Integer compositeIndexEntryLimit) {
    
    
    
    this.compositeIndexEntryLimit = compositeIndexEntryLimit;
  }


  public LargeAttributeBackendResponse id2childrenIndexEntryLimit(Integer id2childrenIndexEntryLimit) {
    
    
    
    
    this.id2childrenIndexEntryLimit = id2childrenIndexEntryLimit;
    return this;
  }

   /**
   * Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.
   * @return id2childrenIndexEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of entry IDs to maintain for each entry in the id2children system index (which keeps track of the immediate children for an entry, to assist in otherwise unindexed searches with a single-level scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.")

  public Integer getId2childrenIndexEntryLimit() {
    return id2childrenIndexEntryLimit;
  }


  public void setId2childrenIndexEntryLimit(Integer id2childrenIndexEntryLimit) {
    
    
    
    this.id2childrenIndexEntryLimit = id2childrenIndexEntryLimit;
  }


  public LargeAttributeBackendResponse id2subtreeIndexEntryLimit(Integer id2subtreeIndexEntryLimit) {
    
    
    
    
    this.id2subtreeIndexEntryLimit = id2subtreeIndexEntryLimit;
    return this;
  }

   /**
   * Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.
   * @return id2subtreeIndexEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of entry IDs to maintain for each entry in the id2subtree system index (which keeps track of all descendants below an entry, to assist in otherwise unindexed searches with a whole-subtree or subordinate subtree scope). A value of 0 means there is no limit, however this could have a big impact on database size on disk and on server performance.")

  public Integer getId2subtreeIndexEntryLimit() {
    return id2subtreeIndexEntryLimit;
  }


  public void setId2subtreeIndexEntryLimit(Integer id2subtreeIndexEntryLimit) {
    
    
    
    this.id2subtreeIndexEntryLimit = id2subtreeIndexEntryLimit;
  }


  public LargeAttributeBackendResponse importTempDirectory(String importTempDirectory) {
    
    
    
    
    this.importTempDirectory = importTempDirectory;
    return this;
  }

   /**
   * Specifies the location of the directory that is used to hold temporary information during the index post-processing phase of an LDIF import.
   * @return importTempDirectory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the location of the directory that is used to hold temporary information during the index post-processing phase of an LDIF import.")

  public String getImportTempDirectory() {
    return importTempDirectory;
  }


  public void setImportTempDirectory(String importTempDirectory) {
    
    
    
    this.importTempDirectory = importTempDirectory;
  }


  public LargeAttributeBackendResponse importThreadCount(Integer importThreadCount) {
    
    
    
    
    this.importThreadCount = importThreadCount;
    return this;
  }

   /**
   * Specifies the number of threads to use for concurrent processing during an LDIF import.
   * @return importThreadCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of threads to use for concurrent processing during an LDIF import.")

  public Integer getImportThreadCount() {
    return importThreadCount;
  }


  public void setImportThreadCount(Integer importThreadCount) {
    
    
    
    this.importThreadCount = importThreadCount;
  }


  public LargeAttributeBackendResponse exportThreadCount(Integer exportThreadCount) {
    
    
    
    
    this.exportThreadCount = exportThreadCount;
    return this;
  }

   /**
   * Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.
   * @return exportThreadCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of threads to use for concurrently retrieving and encoding entries during an LDIF export.")

  public Integer getExportThreadCount() {
    return exportThreadCount;
  }


  public void setExportThreadCount(Integer exportThreadCount) {
    
    
    
    this.exportThreadCount = exportThreadCount;
  }


  public LargeAttributeBackendResponse dbImportCachePercent(Integer dbImportCachePercent) {
    
    
    
    
    this.dbImportCachePercent = dbImportCachePercent;
    return this;
  }

   /**
   * The percentage of JVM memory to allocate to the database cache during import operations.
   * @return dbImportCachePercent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The percentage of JVM memory to allocate to the database cache during import operations.")

  public Integer getDbImportCachePercent() {
    return dbImportCachePercent;
  }


  public void setDbImportCachePercent(Integer dbImportCachePercent) {
    
    
    
    this.dbImportCachePercent = dbImportCachePercent;
  }


  public LargeAttributeBackendResponse dbTxnWriteNoSync(Boolean dbTxnWriteNoSync) {
    
    
    
    
    this.dbTxnWriteNoSync = dbTxnWriteNoSync;
    return this;
  }

   /**
   * Indicates whether the database should synchronously flush data as it is written to disk.
   * @return dbTxnWriteNoSync
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the database should synchronously flush data as it is written to disk.")

  public Boolean getDbTxnWriteNoSync() {
    return dbTxnWriteNoSync;
  }


  public void setDbTxnWriteNoSync(Boolean dbTxnWriteNoSync) {
    
    
    
    this.dbTxnWriteNoSync = dbTxnWriteNoSync;
  }


  public LargeAttributeBackendResponse deadlockRetryLimit(Integer deadlockRetryLimit) {
    
    
    
    
    this.deadlockRetryLimit = deadlockRetryLimit;
    return this;
  }

   /**
   * Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results from two concurrent requests that interfere with each other in a conflicting manner.
   * @return deadlockRetryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of times that the server should retry an attempted operation in the backend if a deadlock results from two concurrent requests that interfere with each other in a conflicting manner.")

  public Integer getDeadlockRetryLimit() {
    return deadlockRetryLimit;
  }


  public void setDeadlockRetryLimit(Integer deadlockRetryLimit) {
    
    
    
    this.deadlockRetryLimit = deadlockRetryLimit;
  }


  public LargeAttributeBackendResponse externalTxnDefaultBackendLockBehavior(EnumbackendExternalTxnDefaultBackendLockBehaviorProp externalTxnDefaultBackendLockBehavior) {
    
    
    
    
    this.externalTxnDefaultBackendLockBehavior = externalTxnDefaultBackendLockBehavior;
    return this;
  }

   /**
   * Get externalTxnDefaultBackendLockBehavior
   * @return externalTxnDefaultBackendLockBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendExternalTxnDefaultBackendLockBehaviorProp getExternalTxnDefaultBackendLockBehavior() {
    return externalTxnDefaultBackendLockBehavior;
  }


  public void setExternalTxnDefaultBackendLockBehavior(EnumbackendExternalTxnDefaultBackendLockBehaviorProp externalTxnDefaultBackendLockBehavior) {
    
    
    
    this.externalTxnDefaultBackendLockBehavior = externalTxnDefaultBackendLockBehavior;
  }


  public LargeAttributeBackendResponse singleWriterLockBehavior(EnumbackendSingleWriterLockBehaviorProp singleWriterLockBehavior) {
    
    
    
    
    this.singleWriterLockBehavior = singleWriterLockBehavior;
    return this;
  }

   /**
   * Get singleWriterLockBehavior
   * @return singleWriterLockBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendSingleWriterLockBehaviorProp getSingleWriterLockBehavior() {
    return singleWriterLockBehavior;
  }


  public void setSingleWriterLockBehavior(EnumbackendSingleWriterLockBehaviorProp singleWriterLockBehavior) {
    
    
    
    this.singleWriterLockBehavior = singleWriterLockBehavior;
  }


  public LargeAttributeBackendResponse subtreeDeleteSizeLimit(Integer subtreeDeleteSizeLimit) {
    
    
    
    
    this.subtreeDeleteSizeLimit = subtreeDeleteSizeLimit;
    return this;
  }

   /**
   * Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.
   * @return subtreeDeleteSizeLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of entries that may be deleted from the backend when using the subtree delete control.")

  public Integer getSubtreeDeleteSizeLimit() {
    return subtreeDeleteSizeLimit;
  }


  public void setSubtreeDeleteSizeLimit(Integer subtreeDeleteSizeLimit) {
    
    
    
    this.subtreeDeleteSizeLimit = subtreeDeleteSizeLimit;
  }


  public LargeAttributeBackendResponse numRecentChanges(Integer numRecentChanges) {
    
    
    
    
    this.numRecentChanges = numRecentChanges;
    return this;
  }

   /**
   * Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak server modification rate as well as increased replication throughput.
   * @return numRecentChanges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of recent LDAP entry changes per replica for which the backend keeps a record to allow replication to recover in the event that the server is abruptly terminated. Increasing this value can lead to an increased peak server modification rate as well as increased replication throughput.")

  public Integer getNumRecentChanges() {
    return numRecentChanges;
  }


  public void setNumRecentChanges(Integer numRecentChanges) {
    
    
    
    this.numRecentChanges = numRecentChanges;
  }


  public LargeAttributeBackendResponse offlineProcessDatabaseOpenTimeout(String offlineProcessDatabaseOpenTimeout) {
    
    
    
    
    this.offlineProcessDatabaseOpenTimeout = offlineProcessDatabaseOpenTimeout;
    return this;
  }

   /**
   * Specifies a timeout duration which will be used for opening the database environment by an offline process, such as export-ldif.
   * @return offlineProcessDatabaseOpenTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a timeout duration which will be used for opening the database environment by an offline process, such as export-ldif.")

  public String getOfflineProcessDatabaseOpenTimeout() {
    return offlineProcessDatabaseOpenTimeout;
  }


  public void setOfflineProcessDatabaseOpenTimeout(String offlineProcessDatabaseOpenTimeout) {
    
    
    
    this.offlineProcessDatabaseOpenTimeout = offlineProcessDatabaseOpenTimeout;
  }


  public LargeAttributeBackendResponse backendID(String backendID) {
    
    
    
    
    this.backendID = backendID;
    return this;
  }

   /**
   * Specifies a name to identify the associated backend.
   * @return backendID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies a name to identify the associated backend.")

  public String getBackendID() {
    return backendID;
  }


  public void setBackendID(String backendID) {
    
    
    
    this.backendID = backendID;
  }


  public LargeAttributeBackendResponse setDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
    return this;
  }

   /**
   * Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
   * @return setDegradedAlertWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.")

  public Boolean getSetDegradedAlertWhenDisabled() {
    return setDegradedAlertWhenDisabled;
  }


  public void setSetDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
  }


  public LargeAttributeBackendResponse returnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
    return this;
  }

   /**
   * Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
   * @return returnUnavailableWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.")

  public Boolean getReturnUnavailableWhenDisabled() {
    return returnUnavailableWhenDisabled;
  }


  public void setReturnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
  }


  public LargeAttributeBackendResponse notificationManager(String notificationManager) {
    
    
    
    
    this.notificationManager = notificationManager;
    return this;
  }

   /**
   * Specifies a notification manager for changes resulting from operations processed through this Backend
   * @return notificationManager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a notification manager for changes resulting from operations processed through this Backend")

  public String getNotificationManager() {
    return notificationManager;
  }


  public void setNotificationManager(String notificationManager) {
    
    
    
    this.notificationManager = notificationManager;
  }


  public LargeAttributeBackendResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public LargeAttributeBackendResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LargeAttributeBackendResponse instance itself
   */
  public LargeAttributeBackendResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LargeAttributeBackendResponse largeAttributeBackendResponse = (LargeAttributeBackendResponse) o;
    return Objects.equals(this.description, largeAttributeBackendResponse.description) &&
        Objects.equals(this.schemas, largeAttributeBackendResponse.schemas) &&
        Objects.equals(this.id, largeAttributeBackendResponse.id) &&
        Objects.equals(this.enabled, largeAttributeBackendResponse.enabled) &&
        Objects.equals(this.baseDN, largeAttributeBackendResponse.baseDN) &&
        Objects.equals(this.writabilityMode, largeAttributeBackendResponse.writabilityMode) &&
        Objects.equals(this.isPrivateBackend, largeAttributeBackendResponse.isPrivateBackend) &&
        Objects.equals(this.dbCachePercent, largeAttributeBackendResponse.dbCachePercent) &&
        Objects.equals(this.defaultCacheMode, largeAttributeBackendResponse.defaultCacheMode) &&
        Objects.equals(this.dbDirectory, largeAttributeBackendResponse.dbDirectory) &&
        Objects.equals(this.dbDirectoryPermissions, largeAttributeBackendResponse.dbDirectoryPermissions) &&
        Objects.equals(this.compactCommonParentDN, largeAttributeBackendResponse.compactCommonParentDN) &&
        Objects.equals(this.compressEntries, largeAttributeBackendResponse.compressEntries) &&
        Objects.equals(this.hashEntries, largeAttributeBackendResponse.hashEntries) &&
        Objects.equals(this.dbNumCleanerThreads, largeAttributeBackendResponse.dbNumCleanerThreads) &&
        Objects.equals(this.dbCleanerMinUtilization, largeAttributeBackendResponse.dbCleanerMinUtilization) &&
        Objects.equals(this.dbEvictorCriticalPercentage, largeAttributeBackendResponse.dbEvictorCriticalPercentage) &&
        Objects.equals(this.dbCheckpointerWakeupInterval, largeAttributeBackendResponse.dbCheckpointerWakeupInterval) &&
        Objects.equals(this.dbBackgroundSyncInterval, largeAttributeBackendResponse.dbBackgroundSyncInterval) &&
        Objects.equals(this.dbUseThreadLocalHandles, largeAttributeBackendResponse.dbUseThreadLocalHandles) &&
        Objects.equals(this.dbLogFileMax, largeAttributeBackendResponse.dbLogFileMax) &&
        Objects.equals(this.dbLoggingLevel, largeAttributeBackendResponse.dbLoggingLevel) &&
        Objects.equals(this.jeProperty, largeAttributeBackendResponse.jeProperty) &&
        Objects.equals(this.id2entryCacheMode, largeAttributeBackendResponse.id2entryCacheMode) &&
        Objects.equals(this.dn2idCacheMode, largeAttributeBackendResponse.dn2idCacheMode) &&
        Objects.equals(this.id2childrenCacheMode, largeAttributeBackendResponse.id2childrenCacheMode) &&
        Objects.equals(this.id2subtreeCacheMode, largeAttributeBackendResponse.id2subtreeCacheMode) &&
        Objects.equals(this.dn2uriCacheMode, largeAttributeBackendResponse.dn2uriCacheMode) &&
        Objects.equals(this.primeMethod, largeAttributeBackendResponse.primeMethod) &&
        Objects.equals(this.primeThreadCount, largeAttributeBackendResponse.primeThreadCount) &&
        Objects.equals(this.primeTimeLimit, largeAttributeBackendResponse.primeTimeLimit) &&
        Objects.equals(this.primeAllIndexes, largeAttributeBackendResponse.primeAllIndexes) &&
        Objects.equals(this.systemIndexToPrime, largeAttributeBackendResponse.systemIndexToPrime) &&
        Objects.equals(this.systemIndexToPrimeInternalNodesOnly, largeAttributeBackendResponse.systemIndexToPrimeInternalNodesOnly) &&
        Objects.equals(this.backgroundPrime, largeAttributeBackendResponse.backgroundPrime) &&
        Objects.equals(this.indexEntryLimit, largeAttributeBackendResponse.indexEntryLimit) &&
        Objects.equals(this.compositeIndexEntryLimit, largeAttributeBackendResponse.compositeIndexEntryLimit) &&
        Objects.equals(this.id2childrenIndexEntryLimit, largeAttributeBackendResponse.id2childrenIndexEntryLimit) &&
        Objects.equals(this.id2subtreeIndexEntryLimit, largeAttributeBackendResponse.id2subtreeIndexEntryLimit) &&
        Objects.equals(this.importTempDirectory, largeAttributeBackendResponse.importTempDirectory) &&
        Objects.equals(this.importThreadCount, largeAttributeBackendResponse.importThreadCount) &&
        Objects.equals(this.exportThreadCount, largeAttributeBackendResponse.exportThreadCount) &&
        Objects.equals(this.dbImportCachePercent, largeAttributeBackendResponse.dbImportCachePercent) &&
        Objects.equals(this.dbTxnWriteNoSync, largeAttributeBackendResponse.dbTxnWriteNoSync) &&
        Objects.equals(this.deadlockRetryLimit, largeAttributeBackendResponse.deadlockRetryLimit) &&
        Objects.equals(this.externalTxnDefaultBackendLockBehavior, largeAttributeBackendResponse.externalTxnDefaultBackendLockBehavior) &&
        Objects.equals(this.singleWriterLockBehavior, largeAttributeBackendResponse.singleWriterLockBehavior) &&
        Objects.equals(this.subtreeDeleteSizeLimit, largeAttributeBackendResponse.subtreeDeleteSizeLimit) &&
        Objects.equals(this.numRecentChanges, largeAttributeBackendResponse.numRecentChanges) &&
        Objects.equals(this.offlineProcessDatabaseOpenTimeout, largeAttributeBackendResponse.offlineProcessDatabaseOpenTimeout) &&
        Objects.equals(this.backendID, largeAttributeBackendResponse.backendID) &&
        Objects.equals(this.setDegradedAlertWhenDisabled, largeAttributeBackendResponse.setDegradedAlertWhenDisabled) &&
        Objects.equals(this.returnUnavailableWhenDisabled, largeAttributeBackendResponse.returnUnavailableWhenDisabled) &&
        Objects.equals(this.notificationManager, largeAttributeBackendResponse.notificationManager) &&
        Objects.equals(this.meta, largeAttributeBackendResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, largeAttributeBackendResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, largeAttributeBackendResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, enabled, baseDN, writabilityMode, isPrivateBackend, dbCachePercent, defaultCacheMode, dbDirectory, dbDirectoryPermissions, compactCommonParentDN, compressEntries, hashEntries, dbNumCleanerThreads, dbCleanerMinUtilization, dbEvictorCriticalPercentage, dbCheckpointerWakeupInterval, dbBackgroundSyncInterval, dbUseThreadLocalHandles, dbLogFileMax, dbLoggingLevel, jeProperty, id2entryCacheMode, dn2idCacheMode, id2childrenCacheMode, id2subtreeCacheMode, dn2uriCacheMode, primeMethod, primeThreadCount, primeTimeLimit, primeAllIndexes, systemIndexToPrime, systemIndexToPrimeInternalNodesOnly, backgroundPrime, indexEntryLimit, compositeIndexEntryLimit, id2childrenIndexEntryLimit, id2subtreeIndexEntryLimit, importTempDirectory, importThreadCount, exportThreadCount, dbImportCachePercent, dbTxnWriteNoSync, deadlockRetryLimit, externalTxnDefaultBackendLockBehavior, singleWriterLockBehavior, subtreeDeleteSizeLimit, numRecentChanges, offlineProcessDatabaseOpenTimeout, backendID, setDegradedAlertWhenDisabled, returnUnavailableWhenDisabled, notificationManager, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LargeAttributeBackendResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    baseDN: ").append(toIndentedString(baseDN)).append("\n");
    sb.append("    writabilityMode: ").append(toIndentedString(writabilityMode)).append("\n");
    sb.append("    isPrivateBackend: ").append(toIndentedString(isPrivateBackend)).append("\n");
    sb.append("    dbCachePercent: ").append(toIndentedString(dbCachePercent)).append("\n");
    sb.append("    defaultCacheMode: ").append(toIndentedString(defaultCacheMode)).append("\n");
    sb.append("    dbDirectory: ").append(toIndentedString(dbDirectory)).append("\n");
    sb.append("    dbDirectoryPermissions: ").append(toIndentedString(dbDirectoryPermissions)).append("\n");
    sb.append("    compactCommonParentDN: ").append(toIndentedString(compactCommonParentDN)).append("\n");
    sb.append("    compressEntries: ").append(toIndentedString(compressEntries)).append("\n");
    sb.append("    hashEntries: ").append(toIndentedString(hashEntries)).append("\n");
    sb.append("    dbNumCleanerThreads: ").append(toIndentedString(dbNumCleanerThreads)).append("\n");
    sb.append("    dbCleanerMinUtilization: ").append(toIndentedString(dbCleanerMinUtilization)).append("\n");
    sb.append("    dbEvictorCriticalPercentage: ").append(toIndentedString(dbEvictorCriticalPercentage)).append("\n");
    sb.append("    dbCheckpointerWakeupInterval: ").append(toIndentedString(dbCheckpointerWakeupInterval)).append("\n");
    sb.append("    dbBackgroundSyncInterval: ").append(toIndentedString(dbBackgroundSyncInterval)).append("\n");
    sb.append("    dbUseThreadLocalHandles: ").append(toIndentedString(dbUseThreadLocalHandles)).append("\n");
    sb.append("    dbLogFileMax: ").append(toIndentedString(dbLogFileMax)).append("\n");
    sb.append("    dbLoggingLevel: ").append(toIndentedString(dbLoggingLevel)).append("\n");
    sb.append("    jeProperty: ").append(toIndentedString(jeProperty)).append("\n");
    sb.append("    id2entryCacheMode: ").append(toIndentedString(id2entryCacheMode)).append("\n");
    sb.append("    dn2idCacheMode: ").append(toIndentedString(dn2idCacheMode)).append("\n");
    sb.append("    id2childrenCacheMode: ").append(toIndentedString(id2childrenCacheMode)).append("\n");
    sb.append("    id2subtreeCacheMode: ").append(toIndentedString(id2subtreeCacheMode)).append("\n");
    sb.append("    dn2uriCacheMode: ").append(toIndentedString(dn2uriCacheMode)).append("\n");
    sb.append("    primeMethod: ").append(toIndentedString(primeMethod)).append("\n");
    sb.append("    primeThreadCount: ").append(toIndentedString(primeThreadCount)).append("\n");
    sb.append("    primeTimeLimit: ").append(toIndentedString(primeTimeLimit)).append("\n");
    sb.append("    primeAllIndexes: ").append(toIndentedString(primeAllIndexes)).append("\n");
    sb.append("    systemIndexToPrime: ").append(toIndentedString(systemIndexToPrime)).append("\n");
    sb.append("    systemIndexToPrimeInternalNodesOnly: ").append(toIndentedString(systemIndexToPrimeInternalNodesOnly)).append("\n");
    sb.append("    backgroundPrime: ").append(toIndentedString(backgroundPrime)).append("\n");
    sb.append("    indexEntryLimit: ").append(toIndentedString(indexEntryLimit)).append("\n");
    sb.append("    compositeIndexEntryLimit: ").append(toIndentedString(compositeIndexEntryLimit)).append("\n");
    sb.append("    id2childrenIndexEntryLimit: ").append(toIndentedString(id2childrenIndexEntryLimit)).append("\n");
    sb.append("    id2subtreeIndexEntryLimit: ").append(toIndentedString(id2subtreeIndexEntryLimit)).append("\n");
    sb.append("    importTempDirectory: ").append(toIndentedString(importTempDirectory)).append("\n");
    sb.append("    importThreadCount: ").append(toIndentedString(importThreadCount)).append("\n");
    sb.append("    exportThreadCount: ").append(toIndentedString(exportThreadCount)).append("\n");
    sb.append("    dbImportCachePercent: ").append(toIndentedString(dbImportCachePercent)).append("\n");
    sb.append("    dbTxnWriteNoSync: ").append(toIndentedString(dbTxnWriteNoSync)).append("\n");
    sb.append("    deadlockRetryLimit: ").append(toIndentedString(deadlockRetryLimit)).append("\n");
    sb.append("    externalTxnDefaultBackendLockBehavior: ").append(toIndentedString(externalTxnDefaultBackendLockBehavior)).append("\n");
    sb.append("    singleWriterLockBehavior: ").append(toIndentedString(singleWriterLockBehavior)).append("\n");
    sb.append("    subtreeDeleteSizeLimit: ").append(toIndentedString(subtreeDeleteSizeLimit)).append("\n");
    sb.append("    numRecentChanges: ").append(toIndentedString(numRecentChanges)).append("\n");
    sb.append("    offlineProcessDatabaseOpenTimeout: ").append(toIndentedString(offlineProcessDatabaseOpenTimeout)).append("\n");
    sb.append("    backendID: ").append(toIndentedString(backendID)).append("\n");
    sb.append("    setDegradedAlertWhenDisabled: ").append(toIndentedString(setDegradedAlertWhenDisabled)).append("\n");
    sb.append("    returnUnavailableWhenDisabled: ").append(toIndentedString(returnUnavailableWhenDisabled)).append("\n");
    sb.append("    notificationManager: ").append(toIndentedString(notificationManager)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("enabled");
    openapiFields.add("baseDN");
    openapiFields.add("writabilityMode");
    openapiFields.add("isPrivateBackend");
    openapiFields.add("dbCachePercent");
    openapiFields.add("defaultCacheMode");
    openapiFields.add("dbDirectory");
    openapiFields.add("dbDirectoryPermissions");
    openapiFields.add("compactCommonParentDN");
    openapiFields.add("compressEntries");
    openapiFields.add("hashEntries");
    openapiFields.add("dbNumCleanerThreads");
    openapiFields.add("dbCleanerMinUtilization");
    openapiFields.add("dbEvictorCriticalPercentage");
    openapiFields.add("dbCheckpointerWakeupInterval");
    openapiFields.add("dbBackgroundSyncInterval");
    openapiFields.add("dbUseThreadLocalHandles");
    openapiFields.add("dbLogFileMax");
    openapiFields.add("dbLoggingLevel");
    openapiFields.add("jeProperty");
    openapiFields.add("id2entryCacheMode");
    openapiFields.add("dn2idCacheMode");
    openapiFields.add("id2childrenCacheMode");
    openapiFields.add("id2subtreeCacheMode");
    openapiFields.add("dn2uriCacheMode");
    openapiFields.add("primeMethod");
    openapiFields.add("primeThreadCount");
    openapiFields.add("primeTimeLimit");
    openapiFields.add("primeAllIndexes");
    openapiFields.add("systemIndexToPrime");
    openapiFields.add("systemIndexToPrimeInternalNodesOnly");
    openapiFields.add("backgroundPrime");
    openapiFields.add("indexEntryLimit");
    openapiFields.add("compositeIndexEntryLimit");
    openapiFields.add("id2childrenIndexEntryLimit");
    openapiFields.add("id2subtreeIndexEntryLimit");
    openapiFields.add("importTempDirectory");
    openapiFields.add("importThreadCount");
    openapiFields.add("exportThreadCount");
    openapiFields.add("dbImportCachePercent");
    openapiFields.add("dbTxnWriteNoSync");
    openapiFields.add("deadlockRetryLimit");
    openapiFields.add("externalTxnDefaultBackendLockBehavior");
    openapiFields.add("singleWriterLockBehavior");
    openapiFields.add("subtreeDeleteSizeLimit");
    openapiFields.add("numRecentChanges");
    openapiFields.add("offlineProcessDatabaseOpenTimeout");
    openapiFields.add("backendID");
    openapiFields.add("setDegradedAlertWhenDisabled");
    openapiFields.add("returnUnavailableWhenDisabled");
    openapiFields.add("notificationManager");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("baseDN");
    openapiRequiredFields.add("writabilityMode");
    openapiRequiredFields.add("dbDirectory");
    openapiRequiredFields.add("importTempDirectory");
    openapiRequiredFields.add("backendID");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LargeAttributeBackendResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LargeAttributeBackendResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LargeAttributeBackendResponse is not found in the empty JSON string", LargeAttributeBackendResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LargeAttributeBackendResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("baseDN") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("baseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseDN` to be an array in the JSON string but got `%s`", jsonObj.get("baseDN").toString()));
      }
      if (!jsonObj.get("dbDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbDirectory").toString()));
      }
      if ((jsonObj.get("dbDirectoryPermissions") != null && !jsonObj.get("dbDirectoryPermissions").isJsonNull()) && !jsonObj.get("dbDirectoryPermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbDirectoryPermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbDirectoryPermissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("compactCommonParentDN") != null && !jsonObj.get("compactCommonParentDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `compactCommonParentDN` to be an array in the JSON string but got `%s`", jsonObj.get("compactCommonParentDN").toString()));
      }
      if ((jsonObj.get("dbCheckpointerWakeupInterval") != null && !jsonObj.get("dbCheckpointerWakeupInterval").isJsonNull()) && !jsonObj.get("dbCheckpointerWakeupInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbCheckpointerWakeupInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbCheckpointerWakeupInterval").toString()));
      }
      if ((jsonObj.get("dbBackgroundSyncInterval") != null && !jsonObj.get("dbBackgroundSyncInterval").isJsonNull()) && !jsonObj.get("dbBackgroundSyncInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbBackgroundSyncInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbBackgroundSyncInterval").toString()));
      }
      if ((jsonObj.get("dbLogFileMax") != null && !jsonObj.get("dbLogFileMax").isJsonNull()) && !jsonObj.get("dbLogFileMax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbLogFileMax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbLogFileMax").toString()));
      }
      if ((jsonObj.get("dbLoggingLevel") != null && !jsonObj.get("dbLoggingLevel").isJsonNull()) && !jsonObj.get("dbLoggingLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbLoggingLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbLoggingLevel").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("jeProperty") != null && !jsonObj.get("jeProperty").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jeProperty` to be an array in the JSON string but got `%s`", jsonObj.get("jeProperty").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("primeMethod") != null && !jsonObj.get("primeMethod").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `primeMethod` to be an array in the JSON string but got `%s`", jsonObj.get("primeMethod").toString()));
      }
      if ((jsonObj.get("primeTimeLimit") != null && !jsonObj.get("primeTimeLimit").isJsonNull()) && !jsonObj.get("primeTimeLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primeTimeLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primeTimeLimit").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("systemIndexToPrime") != null && !jsonObj.get("systemIndexToPrime").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemIndexToPrime` to be an array in the JSON string but got `%s`", jsonObj.get("systemIndexToPrime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("systemIndexToPrimeInternalNodesOnly") != null && !jsonObj.get("systemIndexToPrimeInternalNodesOnly").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemIndexToPrimeInternalNodesOnly` to be an array in the JSON string but got `%s`", jsonObj.get("systemIndexToPrimeInternalNodesOnly").toString()));
      }
      if (!jsonObj.get("importTempDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importTempDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importTempDirectory").toString()));
      }
      if ((jsonObj.get("offlineProcessDatabaseOpenTimeout") != null && !jsonObj.get("offlineProcessDatabaseOpenTimeout").isJsonNull()) && !jsonObj.get("offlineProcessDatabaseOpenTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offlineProcessDatabaseOpenTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offlineProcessDatabaseOpenTimeout").toString()));
      }
      if (!jsonObj.get("backendID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendID").toString()));
      }
      if ((jsonObj.get("notificationManager") != null && !jsonObj.get("notificationManager").isJsonNull()) && !jsonObj.get("notificationManager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationManager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationManager").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LargeAttributeBackendResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LargeAttributeBackendResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LargeAttributeBackendResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LargeAttributeBackendResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<LargeAttributeBackendResponse>() {
           @Override
           public void write(JsonWriter out, LargeAttributeBackendResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LargeAttributeBackendResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LargeAttributeBackendResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LargeAttributeBackendResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LargeAttributeBackendResponse
  * @throws IOException if the JSON string is invalid with respect to LargeAttributeBackendResponse
  */
  public static LargeAttributeBackendResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LargeAttributeBackendResponse.class);
  }

 /**
  * Convert an instance of LargeAttributeBackendResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

