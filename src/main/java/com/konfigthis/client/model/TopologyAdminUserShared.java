/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumtopologyAdminUserIsProxyableProp;
import com.konfigthis.client.model.EnumtopologyAdminUserPrivilegeProp;
import com.konfigthis.client.model.EnumtopologyAdminUserSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TopologyAdminUserShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TopologyAdminUserShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumtopologyAdminUserSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ALTERNATE_BIND_D_N = "alternateBindDN";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_BIND_D_N)
  private List<String> alternateBindDN = null;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private List<String> firstName = null;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private List<String> lastName = null;

  public static final String SERIALIZED_NAME_USER_I_D = "userID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  private String userID;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private List<String> emailAddress = null;

  public static final String SERIALIZED_NAME_WORK_TELEPHONE_NUMBER = "workTelephoneNumber";
  @SerializedName(SERIALIZED_NAME_WORK_TELEPHONE_NUMBER)
  private List<String> workTelephoneNumber = null;

  public static final String SERIALIZED_NAME_HOME_TELEPHONE_NUMBER = "homeTelephoneNumber";
  @SerializedName(SERIALIZED_NAME_HOME_TELEPHONE_NUMBER)
  private List<String> homeTelephoneNumber = null;

  public static final String SERIALIZED_NAME_MOBILE_TELEPHONE_NUMBER = "mobileTelephoneNumber";
  @SerializedName(SERIALIZED_NAME_MOBILE_TELEPHONE_NUMBER)
  private List<String> mobileTelephoneNumber = null;

  public static final String SERIALIZED_NAME_PAGER_TELEPHONE_NUMBER = "pagerTelephoneNumber";
  @SerializedName(SERIALIZED_NAME_PAGER_TELEPHONE_NUMBER)
  private List<String> pagerTelephoneNumber = null;

  public static final String SERIALIZED_NAME_INHERIT_DEFAULT_ROOT_PRIVILEGES = "inheritDefaultRootPrivileges";
  @SerializedName(SERIALIZED_NAME_INHERIT_DEFAULT_ROOT_PRIVILEGES)
  private Boolean inheritDefaultRootPrivileges;

  public static final String SERIALIZED_NAME_PRIVILEGE = "privilege";
  @SerializedName(SERIALIZED_NAME_PRIVILEGE)
  private List<EnumtopologyAdminUserPrivilegeProp> privilege = null;

  public static final String SERIALIZED_NAME_SEARCH_RESULT_ENTRY_LIMIT = "searchResultEntryLimit";
  @SerializedName(SERIALIZED_NAME_SEARCH_RESULT_ENTRY_LIMIT)
  private Integer searchResultEntryLimit;

  public static final String SERIALIZED_NAME_TIME_LIMIT_SECONDS = "timeLimitSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_LIMIT_SECONDS)
  private Integer timeLimitSeconds;

  public static final String SERIALIZED_NAME_LOOK_THROUGH_ENTRY_LIMIT = "lookThroughEntryLimit";
  @SerializedName(SERIALIZED_NAME_LOOK_THROUGH_ENTRY_LIMIT)
  private Integer lookThroughEntryLimit;

  public static final String SERIALIZED_NAME_IDLE_TIME_LIMIT_SECONDS = "idleTimeLimitSeconds";
  @SerializedName(SERIALIZED_NAME_IDLE_TIME_LIMIT_SECONDS)
  private Integer idleTimeLimitSeconds;

  public static final String SERIALIZED_NAME_PASSWORD_POLICY = "passwordPolicy";
  @SerializedName(SERIALIZED_NAME_PASSWORD_POLICY)
  private String passwordPolicy;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_ACCOUNT_ACTIVATION_TIME = "accountActivationTime";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ACTIVATION_TIME)
  private String accountActivationTime;

  public static final String SERIALIZED_NAME_ACCOUNT_EXPIRATION_TIME = "accountExpirationTime";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_EXPIRATION_TIME)
  private String accountExpirationTime;

  public static final String SERIALIZED_NAME_REQUIRE_SECURE_AUTHENTICATION = "requireSecureAuthentication";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SECURE_AUTHENTICATION)
  private Boolean requireSecureAuthentication;

  public static final String SERIALIZED_NAME_REQUIRE_SECURE_CONNECTIONS = "requireSecureConnections";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SECURE_CONNECTIONS)
  private Boolean requireSecureConnections;

  public static final String SERIALIZED_NAME_ALLOWED_AUTHENTICATION_TYPE = "allowedAuthenticationType";
  @SerializedName(SERIALIZED_NAME_ALLOWED_AUTHENTICATION_TYPE)
  private List<String> allowedAuthenticationType = null;

  public static final String SERIALIZED_NAME_ALLOWED_AUTHENTICATION_I_P_ADDRESS = "allowedAuthenticationIPAddress";
  @SerializedName(SERIALIZED_NAME_ALLOWED_AUTHENTICATION_I_P_ADDRESS)
  private List<String> allowedAuthenticationIPAddress = null;

  public static final String SERIALIZED_NAME_PREFERRED_O_T_P_DELIVERY_MECHANISM = "preferredOTPDeliveryMechanism";
  @SerializedName(SERIALIZED_NAME_PREFERRED_O_T_P_DELIVERY_MECHANISM)
  private List<String> preferredOTPDeliveryMechanism = null;

  public static final String SERIALIZED_NAME_IS_PROXYABLE = "isProxyable";
  @SerializedName(SERIALIZED_NAME_IS_PROXYABLE)
  private EnumtopologyAdminUserIsProxyableProp isProxyable;

  public static final String SERIALIZED_NAME_IS_PROXYABLE_BY_D_N = "isProxyableByDN";
  @SerializedName(SERIALIZED_NAME_IS_PROXYABLE_BY_D_N)
  private List<String> isProxyableByDN = null;

  public static final String SERIALIZED_NAME_IS_PROXYABLE_BY_GROUP = "isProxyableByGroup";
  @SerializedName(SERIALIZED_NAME_IS_PROXYABLE_BY_GROUP)
  private List<String> isProxyableByGroup = null;

  public static final String SERIALIZED_NAME_IS_PROXYABLE_BY_U_R_L = "isProxyableByURL";
  @SerializedName(SERIALIZED_NAME_IS_PROXYABLE_BY_U_R_L)
  private List<String> isProxyableByURL = null;

  public static final String SERIALIZED_NAME_MAY_PROXY_AS_D_N = "mayProxyAsDN";
  @SerializedName(SERIALIZED_NAME_MAY_PROXY_AS_D_N)
  private List<String> mayProxyAsDN = null;

  public static final String SERIALIZED_NAME_MAY_PROXY_AS_GROUP = "mayProxyAsGroup";
  @SerializedName(SERIALIZED_NAME_MAY_PROXY_AS_GROUP)
  private List<String> mayProxyAsGroup = null;

  public static final String SERIALIZED_NAME_MAY_PROXY_AS_U_R_L = "mayProxyAsURL";
  @SerializedName(SERIALIZED_NAME_MAY_PROXY_AS_U_R_L)
  private List<String> mayProxyAsURL = null;

  public TopologyAdminUserShared() {
  }

  public TopologyAdminUserShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this User.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this User.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TopologyAdminUserShared schemas(List<EnumtopologyAdminUserSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public TopologyAdminUserShared addSchemasItem(EnumtopologyAdminUserSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumtopologyAdminUserSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumtopologyAdminUserSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public TopologyAdminUserShared alternateBindDN(List<String> alternateBindDN) {
    
    
    
    
    this.alternateBindDN = alternateBindDN;
    return this;
  }

  public TopologyAdminUserShared addAlternateBindDNItem(String alternateBindDNItem) {
    if (this.alternateBindDN == null) {
      this.alternateBindDN = new ArrayList<>();
    }
    this.alternateBindDN.add(alternateBindDNItem);
    return this;
  }

   /**
   * Specifies one or more alternate DNs that can be used to bind to the server as this User.
   * @return alternateBindDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies one or more alternate DNs that can be used to bind to the server as this User.")

  public List<String> getAlternateBindDN() {
    return alternateBindDN;
  }


  public void setAlternateBindDN(List<String> alternateBindDN) {
    
    
    
    this.alternateBindDN = alternateBindDN;
  }


  public TopologyAdminUserShared password(String password) {
    
    
    
    
    this.password = password;
    return this;
  }

   /**
   * Specifies the user&#39;s password. This is stored in the userPassword LDAP attribute. To set a pre-hashed value, the account making the change must have the bypass-pw-policy privilege.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user's password. This is stored in the userPassword LDAP attribute. To set a pre-hashed value, the account making the change must have the bypass-pw-policy privilege.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    
    this.password = password;
  }


  public TopologyAdminUserShared firstName(List<String> firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

  public TopologyAdminUserShared addFirstNameItem(String firstNameItem) {
    if (this.firstName == null) {
      this.firstName = new ArrayList<>();
    }
    this.firstName.add(firstNameItem);
    return this;
  }

   /**
   * Specifies the user&#39;s first name. This is stored in the givenName LDAP attribute.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user's first name. This is stored in the givenName LDAP attribute.")

  public List<String> getFirstName() {
    return firstName;
  }


  public void setFirstName(List<String> firstName) {
    
    
    
    this.firstName = firstName;
  }


  public TopologyAdminUserShared lastName(List<String> lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

  public TopologyAdminUserShared addLastNameItem(String lastNameItem) {
    if (this.lastName == null) {
      this.lastName = new ArrayList<>();
    }
    this.lastName.add(lastNameItem);
    return this;
  }

   /**
   * Specifies the user&#39;s last name. This is stored in the sn LDAP attribute.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user's last name. This is stored in the sn LDAP attribute.")

  public List<String> getLastName() {
    return lastName;
  }


  public void setLastName(List<String> lastName) {
    
    
    
    this.lastName = lastName;
  }


  public TopologyAdminUserShared userID(String userID) {
    
    
    
    
    this.userID = userID;
    return this;
  }

   /**
   * Specifies the user&#39;s user ID. This is stored in the uid LDAP attribute.
   * @return userID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user's user ID. This is stored in the uid LDAP attribute.")

  public String getUserID() {
    return userID;
  }


  public void setUserID(String userID) {
    
    
    
    this.userID = userID;
  }


  public TopologyAdminUserShared emailAddress(List<String> emailAddress) {
    
    
    
    
    this.emailAddress = emailAddress;
    return this;
  }

  public TopologyAdminUserShared addEmailAddressItem(String emailAddressItem) {
    if (this.emailAddress == null) {
      this.emailAddress = new ArrayList<>();
    }
    this.emailAddress.add(emailAddressItem);
    return this;
  }

   /**
   * Specifies the user&#39;s email address. This is stored in the mail LDAP attribute.
   * @return emailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user's email address. This is stored in the mail LDAP attribute.")

  public List<String> getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(List<String> emailAddress) {
    
    
    
    this.emailAddress = emailAddress;
  }


  public TopologyAdminUserShared workTelephoneNumber(List<String> workTelephoneNumber) {
    
    
    
    
    this.workTelephoneNumber = workTelephoneNumber;
    return this;
  }

  public TopologyAdminUserShared addWorkTelephoneNumberItem(String workTelephoneNumberItem) {
    if (this.workTelephoneNumber == null) {
      this.workTelephoneNumber = new ArrayList<>();
    }
    this.workTelephoneNumber.add(workTelephoneNumberItem);
    return this;
  }

   /**
   * Specifies the user&#39;s work telephone number. This is stored in the telephoneNumber LDAP attribute.
   * @return workTelephoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user's work telephone number. This is stored in the telephoneNumber LDAP attribute.")

  public List<String> getWorkTelephoneNumber() {
    return workTelephoneNumber;
  }


  public void setWorkTelephoneNumber(List<String> workTelephoneNumber) {
    
    
    
    this.workTelephoneNumber = workTelephoneNumber;
  }


  public TopologyAdminUserShared homeTelephoneNumber(List<String> homeTelephoneNumber) {
    
    
    
    
    this.homeTelephoneNumber = homeTelephoneNumber;
    return this;
  }

  public TopologyAdminUserShared addHomeTelephoneNumberItem(String homeTelephoneNumberItem) {
    if (this.homeTelephoneNumber == null) {
      this.homeTelephoneNumber = new ArrayList<>();
    }
    this.homeTelephoneNumber.add(homeTelephoneNumberItem);
    return this;
  }

   /**
   * Specifies the user&#39;s home telephone number. This is stored in the homePhone LDAP attribute.
   * @return homeTelephoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user's home telephone number. This is stored in the homePhone LDAP attribute.")

  public List<String> getHomeTelephoneNumber() {
    return homeTelephoneNumber;
  }


  public void setHomeTelephoneNumber(List<String> homeTelephoneNumber) {
    
    
    
    this.homeTelephoneNumber = homeTelephoneNumber;
  }


  public TopologyAdminUserShared mobileTelephoneNumber(List<String> mobileTelephoneNumber) {
    
    
    
    
    this.mobileTelephoneNumber = mobileTelephoneNumber;
    return this;
  }

  public TopologyAdminUserShared addMobileTelephoneNumberItem(String mobileTelephoneNumberItem) {
    if (this.mobileTelephoneNumber == null) {
      this.mobileTelephoneNumber = new ArrayList<>();
    }
    this.mobileTelephoneNumber.add(mobileTelephoneNumberItem);
    return this;
  }

   /**
   * Specifies the user&#39;s mobile telephone number. This is stored in the mobile LDAP attribute.
   * @return mobileTelephoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user's mobile telephone number. This is stored in the mobile LDAP attribute.")

  public List<String> getMobileTelephoneNumber() {
    return mobileTelephoneNumber;
  }


  public void setMobileTelephoneNumber(List<String> mobileTelephoneNumber) {
    
    
    
    this.mobileTelephoneNumber = mobileTelephoneNumber;
  }


  public TopologyAdminUserShared pagerTelephoneNumber(List<String> pagerTelephoneNumber) {
    
    
    
    
    this.pagerTelephoneNumber = pagerTelephoneNumber;
    return this;
  }

  public TopologyAdminUserShared addPagerTelephoneNumberItem(String pagerTelephoneNumberItem) {
    if (this.pagerTelephoneNumber == null) {
      this.pagerTelephoneNumber = new ArrayList<>();
    }
    this.pagerTelephoneNumber.add(pagerTelephoneNumberItem);
    return this;
  }

   /**
   * Specifies the user&#39;s pager telephone number. This is stored in the pager LDAP attribute.
   * @return pagerTelephoneNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the user's pager telephone number. This is stored in the pager LDAP attribute.")

  public List<String> getPagerTelephoneNumber() {
    return pagerTelephoneNumber;
  }


  public void setPagerTelephoneNumber(List<String> pagerTelephoneNumber) {
    
    
    
    this.pagerTelephoneNumber = pagerTelephoneNumber;
  }


  public TopologyAdminUserShared inheritDefaultRootPrivileges(Boolean inheritDefaultRootPrivileges) {
    
    
    
    
    this.inheritDefaultRootPrivileges = inheritDefaultRootPrivileges;
    return this;
  }

   /**
   * Indicates whether this User should be automatically granted the set of privileges defined in the default-root-privilege-name property of the Root DN configuration object.
   * @return inheritDefaultRootPrivileges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this User should be automatically granted the set of privileges defined in the default-root-privilege-name property of the Root DN configuration object.")

  public Boolean getInheritDefaultRootPrivileges() {
    return inheritDefaultRootPrivileges;
  }


  public void setInheritDefaultRootPrivileges(Boolean inheritDefaultRootPrivileges) {
    
    
    
    this.inheritDefaultRootPrivileges = inheritDefaultRootPrivileges;
  }


  public TopologyAdminUserShared privilege(List<EnumtopologyAdminUserPrivilegeProp> privilege) {
    
    
    
    
    this.privilege = privilege;
    return this;
  }

  public TopologyAdminUserShared addPrivilegeItem(EnumtopologyAdminUserPrivilegeProp privilegeItem) {
    if (this.privilege == null) {
      this.privilege = new ArrayList<>();
    }
    this.privilege.add(privilegeItem);
    return this;
  }

   /**
   * Get privilege
   * @return privilege
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumtopologyAdminUserPrivilegeProp> getPrivilege() {
    return privilege;
  }


  public void setPrivilege(List<EnumtopologyAdminUserPrivilegeProp> privilege) {
    
    
    
    this.privilege = privilege;
  }


  public TopologyAdminUserShared searchResultEntryLimit(Integer searchResultEntryLimit) {
    
    
    
    
    this.searchResultEntryLimit = searchResultEntryLimit;
    return this;
  }

   /**
   * Specifies the maximum number of entries that the server may return to the user in response to any single search request. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-size-limit LDAP attribute.
   * @return searchResultEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of entries that the server may return to the user in response to any single search request. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-size-limit LDAP attribute.")

  public Integer getSearchResultEntryLimit() {
    return searchResultEntryLimit;
  }


  public void setSearchResultEntryLimit(Integer searchResultEntryLimit) {
    
    
    
    this.searchResultEntryLimit = searchResultEntryLimit;
  }


  public TopologyAdminUserShared timeLimitSeconds(Integer timeLimitSeconds) {
    
    
    
    
    this.timeLimitSeconds = timeLimitSeconds;
    return this;
  }

   /**
   * Specifies the maximum length of time (in seconds) that the server may spend processing any single search request. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-time-limit LDAP attribute.
   * @return timeLimitSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time (in seconds) that the server may spend processing any single search request. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-time-limit LDAP attribute.")

  public Integer getTimeLimitSeconds() {
    return timeLimitSeconds;
  }


  public void setTimeLimitSeconds(Integer timeLimitSeconds) {
    
    
    
    this.timeLimitSeconds = timeLimitSeconds;
  }


  public TopologyAdminUserShared lookThroughEntryLimit(Integer lookThroughEntryLimit) {
    
    
    
    
    this.lookThroughEntryLimit = lookThroughEntryLimit;
    return this;
  }

   /**
   * Specifies the maximum number of candidate entries that the server may examine in the course of processing any single search request. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-lookthrough-limit LDAP attribute.
   * @return lookThroughEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of candidate entries that the server may examine in the course of processing any single search request. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-lookthrough-limit LDAP attribute.")

  public Integer getLookThroughEntryLimit() {
    return lookThroughEntryLimit;
  }


  public void setLookThroughEntryLimit(Integer lookThroughEntryLimit) {
    
    
    
    this.lookThroughEntryLimit = lookThroughEntryLimit;
  }


  public TopologyAdminUserShared idleTimeLimitSeconds(Integer idleTimeLimitSeconds) {
    
    
    
    
    this.idleTimeLimitSeconds = idleTimeLimitSeconds;
    return this;
  }

   /**
   * Specifies the maximum length of time (in seconds) that a connection authenticated as this user may remain established without issuing any requests. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-idle-time-limit LDAP attribute.
   * @return idleTimeLimitSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time (in seconds) that a connection authenticated as this user may remain established without issuing any requests. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-idle-time-limit LDAP attribute.")

  public Integer getIdleTimeLimitSeconds() {
    return idleTimeLimitSeconds;
  }


  public void setIdleTimeLimitSeconds(Integer idleTimeLimitSeconds) {
    
    
    
    this.idleTimeLimitSeconds = idleTimeLimitSeconds;
  }


  public TopologyAdminUserShared passwordPolicy(String passwordPolicy) {
    
    
    
    
    this.passwordPolicy = passwordPolicy;
    return this;
  }

   /**
   * Specifies the password policy for the user. This is stored in the ds-pwp-password-policy-dn LDAP attribute.
   * @return passwordPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the password policy for the user. This is stored in the ds-pwp-password-policy-dn LDAP attribute.")

  public String getPasswordPolicy() {
    return passwordPolicy;
  }


  public void setPasswordPolicy(String passwordPolicy) {
    
    
    
    this.passwordPolicy = passwordPolicy;
  }


  public TopologyAdminUserShared disabled(Boolean disabled) {
    
    
    
    
    this.disabled = disabled;
    return this;
  }

   /**
   * Specifies whether the root user account should be disabled. A disabled account is not permitted to authenticate, nor can it be used as an authorization identity. This is stored in the ds-pwp-account-disabled LDAP attribute.
   * @return disabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the root user account should be disabled. A disabled account is not permitted to authenticate, nor can it be used as an authorization identity. This is stored in the ds-pwp-account-disabled LDAP attribute.")

  public Boolean getDisabled() {
    return disabled;
  }


  public void setDisabled(Boolean disabled) {
    
    
    
    this.disabled = disabled;
  }


  public TopologyAdminUserShared accountActivationTime(String accountActivationTime) {
    
    
    
    
    this.accountActivationTime = accountActivationTime;
    return this;
  }

   /**
   * Specifies the time, in generalized time format (e.g., &#39;20160101070000Z&#39;), that the root user account should become active. If an activation time is specified, the user will not be permitted to authenticate, nor can the account be used as an authorization identity, until the activation time has arrived. This is stored in the ds-pwp-account-activation-time LDAP attribute.
   * @return accountActivationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the time, in generalized time format (e.g., '20160101070000Z'), that the root user account should become active. If an activation time is specified, the user will not be permitted to authenticate, nor can the account be used as an authorization identity, until the activation time has arrived. This is stored in the ds-pwp-account-activation-time LDAP attribute.")

  public String getAccountActivationTime() {
    return accountActivationTime;
  }


  public void setAccountActivationTime(String accountActivationTime) {
    
    
    
    this.accountActivationTime = accountActivationTime;
  }


  public TopologyAdminUserShared accountExpirationTime(String accountExpirationTime) {
    
    
    
    
    this.accountExpirationTime = accountExpirationTime;
    return this;
  }

   /**
   * Specifies the time, in generalized time format (e.g., &#39;20240101070000Z&#39;), that the root user account should expire. If an expiration time is specified, the user will not be permitted to authenticate, nor can the account be used as an authorization identity, after this time has passed. This is stored in the ds-pwp-account-expiration-time LDAP attribute.
   * @return accountExpirationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the time, in generalized time format (e.g., '20240101070000Z'), that the root user account should expire. If an expiration time is specified, the user will not be permitted to authenticate, nor can the account be used as an authorization identity, after this time has passed. This is stored in the ds-pwp-account-expiration-time LDAP attribute.")

  public String getAccountExpirationTime() {
    return accountExpirationTime;
  }


  public void setAccountExpirationTime(String accountExpirationTime) {
    
    
    
    this.accountExpirationTime = accountExpirationTime;
  }


  public TopologyAdminUserShared requireSecureAuthentication(Boolean requireSecureAuthentication) {
    
    
    
    
    this.requireSecureAuthentication = requireSecureAuthentication;
    return this;
  }

   /**
   * Indicates whether this User must authenticate in a secure manner. When set to \&quot;true\&quot;, the User will only be allowed to authenticate over a secure connection or using a mechanism that does not expose user credentials (e.g., the CRAM-MD5, DIGEST-MD5, and GSSAPI SASL mechanisms).
   * @return requireSecureAuthentication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this User must authenticate in a secure manner. When set to \"true\", the User will only be allowed to authenticate over a secure connection or using a mechanism that does not expose user credentials (e.g., the CRAM-MD5, DIGEST-MD5, and GSSAPI SASL mechanisms).")

  public Boolean getRequireSecureAuthentication() {
    return requireSecureAuthentication;
  }


  public void setRequireSecureAuthentication(Boolean requireSecureAuthentication) {
    
    
    
    this.requireSecureAuthentication = requireSecureAuthentication;
  }


  public TopologyAdminUserShared requireSecureConnections(Boolean requireSecureConnections) {
    
    
    
    
    this.requireSecureConnections = requireSecureConnections;
    return this;
  }

   /**
   * Indicates whether this User must be required to communicate with the server over a secure connection. When set to \&quot;true\&quot;, the User will only be allowed to communicate with the server over a secure connection (i.e., using TLS or the StartTLS extended operation).
   * @return requireSecureConnections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this User must be required to communicate with the server over a secure connection. When set to \"true\", the User will only be allowed to communicate with the server over a secure connection (i.e., using TLS or the StartTLS extended operation).")

  public Boolean getRequireSecureConnections() {
    return requireSecureConnections;
  }


  public void setRequireSecureConnections(Boolean requireSecureConnections) {
    
    
    
    this.requireSecureConnections = requireSecureConnections;
  }


  public TopologyAdminUserShared allowedAuthenticationType(List<String> allowedAuthenticationType) {
    
    
    
    
    this.allowedAuthenticationType = allowedAuthenticationType;
    return this;
  }

  public TopologyAdminUserShared addAllowedAuthenticationTypeItem(String allowedAuthenticationTypeItem) {
    if (this.allowedAuthenticationType == null) {
      this.allowedAuthenticationType = new ArrayList<>();
    }
    this.allowedAuthenticationType.add(allowedAuthenticationTypeItem);
    return this;
  }

   /**
   * Indicates that User should only be allowed to authenticate in certain ways. Allowed values include \&quot;simple\&quot; (to indicate that the user should be allowed to bind using simple authentication) or \&quot;sasl {mech}\&quot; (to indicate that the user should be allowed to bind using the specified SASL mechanism, like \&quot;sasl PLAIN\&quot;). The list of available SASL mechanisms can be retrieved by running \&quot;dsconfig --advanced list-sasl-mechanism-handlers\&quot;.
   * @return allowedAuthenticationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates that User should only be allowed to authenticate in certain ways. Allowed values include \"simple\" (to indicate that the user should be allowed to bind using simple authentication) or \"sasl {mech}\" (to indicate that the user should be allowed to bind using the specified SASL mechanism, like \"sasl PLAIN\"). The list of available SASL mechanisms can be retrieved by running \"dsconfig --advanced list-sasl-mechanism-handlers\".")

  public List<String> getAllowedAuthenticationType() {
    return allowedAuthenticationType;
  }


  public void setAllowedAuthenticationType(List<String> allowedAuthenticationType) {
    
    
    
    this.allowedAuthenticationType = allowedAuthenticationType;
  }


  public TopologyAdminUserShared allowedAuthenticationIPAddress(List<String> allowedAuthenticationIPAddress) {
    
    
    
    
    this.allowedAuthenticationIPAddress = allowedAuthenticationIPAddress;
    return this;
  }

  public TopologyAdminUserShared addAllowedAuthenticationIPAddressItem(String allowedAuthenticationIPAddressItem) {
    if (this.allowedAuthenticationIPAddress == null) {
      this.allowedAuthenticationIPAddress = new ArrayList<>();
    }
    this.allowedAuthenticationIPAddress.add(allowedAuthenticationIPAddressItem);
    return this;
  }

   /**
   * An IPv4 or IPv6 address mask that controls the set of IP addresses from which this User can authenticate to the server. For instance a value of 127.0.0.1 (or ::1 in IPv6) would restricted access only to localhost connections, whereas 10.6.1.* would restrict access to servers on the 10.6.1.* subnet.
   * @return allowedAuthenticationIPAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An IPv4 or IPv6 address mask that controls the set of IP addresses from which this User can authenticate to the server. For instance a value of 127.0.0.1 (or ::1 in IPv6) would restricted access only to localhost connections, whereas 10.6.1.* would restrict access to servers on the 10.6.1.* subnet.")

  public List<String> getAllowedAuthenticationIPAddress() {
    return allowedAuthenticationIPAddress;
  }


  public void setAllowedAuthenticationIPAddress(List<String> allowedAuthenticationIPAddress) {
    
    
    
    this.allowedAuthenticationIPAddress = allowedAuthenticationIPAddress;
  }


  public TopologyAdminUserShared preferredOTPDeliveryMechanism(List<String> preferredOTPDeliveryMechanism) {
    
    
    
    
    this.preferredOTPDeliveryMechanism = preferredOTPDeliveryMechanism;
    return this;
  }

  public TopologyAdminUserShared addPreferredOTPDeliveryMechanismItem(String preferredOTPDeliveryMechanismItem) {
    if (this.preferredOTPDeliveryMechanism == null) {
      this.preferredOTPDeliveryMechanism = new ArrayList<>();
    }
    this.preferredOTPDeliveryMechanism.add(preferredOTPDeliveryMechanismItem);
    return this;
  }

   /**
   * Overrides the default settings for the mechanisms (e.g., email or SMS) that are used to deliver one time passwords to Users.
   * @return preferredOTPDeliveryMechanism
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Overrides the default settings for the mechanisms (e.g., email or SMS) that are used to deliver one time passwords to Users.")

  public List<String> getPreferredOTPDeliveryMechanism() {
    return preferredOTPDeliveryMechanism;
  }


  public void setPreferredOTPDeliveryMechanism(List<String> preferredOTPDeliveryMechanism) {
    
    
    
    this.preferredOTPDeliveryMechanism = preferredOTPDeliveryMechanism;
  }


  public TopologyAdminUserShared isProxyable(EnumtopologyAdminUserIsProxyableProp isProxyable) {
    
    
    
    
    this.isProxyable = isProxyable;
    return this;
  }

   /**
   * Get isProxyable
   * @return isProxyable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumtopologyAdminUserIsProxyableProp getIsProxyable() {
    return isProxyable;
  }


  public void setIsProxyable(EnumtopologyAdminUserIsProxyableProp isProxyable) {
    
    
    
    this.isProxyable = isProxyable;
  }


  public TopologyAdminUserShared isProxyableByDN(List<String> isProxyableByDN) {
    
    
    
    
    this.isProxyableByDN = isProxyableByDN;
    return this;
  }

  public TopologyAdminUserShared addIsProxyableByDNItem(String isProxyableByDNItem) {
    if (this.isProxyableByDN == null) {
      this.isProxyableByDN = new ArrayList<>();
    }
    this.isProxyableByDN.add(isProxyableByDNItem);
    return this;
  }

   /**
   * Specifies the DNs of accounts that can proxy as this User using the proxied authorization v1 or v2 control, the intermediate client control, or a SASL mechanism that allows specifying an alternate authorization identity. This property is only applicable if is-proxyable is set to \&quot;allowed\&quot; or \&quot;required\&quot;.
   * @return isProxyableByDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DNs of accounts that can proxy as this User using the proxied authorization v1 or v2 control, the intermediate client control, or a SASL mechanism that allows specifying an alternate authorization identity. This property is only applicable if is-proxyable is set to \"allowed\" or \"required\".")

  public List<String> getIsProxyableByDN() {
    return isProxyableByDN;
  }


  public void setIsProxyableByDN(List<String> isProxyableByDN) {
    
    
    
    this.isProxyableByDN = isProxyableByDN;
  }


  public TopologyAdminUserShared isProxyableByGroup(List<String> isProxyableByGroup) {
    
    
    
    
    this.isProxyableByGroup = isProxyableByGroup;
    return this;
  }

  public TopologyAdminUserShared addIsProxyableByGroupItem(String isProxyableByGroupItem) {
    if (this.isProxyableByGroup == null) {
      this.isProxyableByGroup = new ArrayList<>();
    }
    this.isProxyableByGroup.add(isProxyableByGroupItem);
    return this;
  }

   /**
   * Specifies the DNs of groups whose members can proxy as this User using the proxied authorization v1 or v2 control, the intermediate client control, or a SASL mechanism that allows specifying an alternate authorization identity. This property is only applicable if is-proxyable is set to \&quot;allowed\&quot; or \&quot;required\&quot;.
   * @return isProxyableByGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DNs of groups whose members can proxy as this User using the proxied authorization v1 or v2 control, the intermediate client control, or a SASL mechanism that allows specifying an alternate authorization identity. This property is only applicable if is-proxyable is set to \"allowed\" or \"required\".")

  public List<String> getIsProxyableByGroup() {
    return isProxyableByGroup;
  }


  public void setIsProxyableByGroup(List<String> isProxyableByGroup) {
    
    
    
    this.isProxyableByGroup = isProxyableByGroup;
  }


  public TopologyAdminUserShared isProxyableByURL(List<String> isProxyableByURL) {
    
    
    
    
    this.isProxyableByURL = isProxyableByURL;
    return this;
  }

  public TopologyAdminUserShared addIsProxyableByURLItem(String isProxyableByURLItem) {
    if (this.isProxyableByURL == null) {
      this.isProxyableByURL = new ArrayList<>();
    }
    this.isProxyableByURL.add(isProxyableByURLItem);
    return this;
  }

   /**
   * Specifies LDAP URLs of accounts that can proxy as this User using the proxied authorization v1 or v2 control, the intermediate client control, or a SASL mechanism that allows specifying an alternate authorization identity. This property is only applicable if is-proxyable is set to \&quot;allowed\&quot; or \&quot;required\&quot;.
   * @return isProxyableByURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies LDAP URLs of accounts that can proxy as this User using the proxied authorization v1 or v2 control, the intermediate client control, or a SASL mechanism that allows specifying an alternate authorization identity. This property is only applicable if is-proxyable is set to \"allowed\" or \"required\".")

  public List<String> getIsProxyableByURL() {
    return isProxyableByURL;
  }


  public void setIsProxyableByURL(List<String> isProxyableByURL) {
    
    
    
    this.isProxyableByURL = isProxyableByURL;
  }


  public TopologyAdminUserShared mayProxyAsDN(List<String> mayProxyAsDN) {
    
    
    
    
    this.mayProxyAsDN = mayProxyAsDN;
    return this;
  }

  public TopologyAdminUserShared addMayProxyAsDNItem(String mayProxyAsDNItem) {
    if (this.mayProxyAsDN == null) {
      this.mayProxyAsDN = new ArrayList<>();
    }
    this.mayProxyAsDN.add(mayProxyAsDNItem);
    return this;
  }

   /**
   * This restricts the set of accounts that this User can proxy as to entries with the specified DNs.
   * @return mayProxyAsDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This restricts the set of accounts that this User can proxy as to entries with the specified DNs.")

  public List<String> getMayProxyAsDN() {
    return mayProxyAsDN;
  }


  public void setMayProxyAsDN(List<String> mayProxyAsDN) {
    
    
    
    this.mayProxyAsDN = mayProxyAsDN;
  }


  public TopologyAdminUserShared mayProxyAsGroup(List<String> mayProxyAsGroup) {
    
    
    
    
    this.mayProxyAsGroup = mayProxyAsGroup;
    return this;
  }

  public TopologyAdminUserShared addMayProxyAsGroupItem(String mayProxyAsGroupItem) {
    if (this.mayProxyAsGroup == null) {
      this.mayProxyAsGroup = new ArrayList<>();
    }
    this.mayProxyAsGroup.add(mayProxyAsGroupItem);
    return this;
  }

   /**
   * This restricts the set of accounts that this User can proxy as to entries that are in the group with the specified DN.
   * @return mayProxyAsGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This restricts the set of accounts that this User can proxy as to entries that are in the group with the specified DN.")

  public List<String> getMayProxyAsGroup() {
    return mayProxyAsGroup;
  }


  public void setMayProxyAsGroup(List<String> mayProxyAsGroup) {
    
    
    
    this.mayProxyAsGroup = mayProxyAsGroup;
  }


  public TopologyAdminUserShared mayProxyAsURL(List<String> mayProxyAsURL) {
    
    
    
    
    this.mayProxyAsURL = mayProxyAsURL;
    return this;
  }

  public TopologyAdminUserShared addMayProxyAsURLItem(String mayProxyAsURLItem) {
    if (this.mayProxyAsURL == null) {
      this.mayProxyAsURL = new ArrayList<>();
    }
    this.mayProxyAsURL.add(mayProxyAsURLItem);
    return this;
  }

   /**
   * This restricts the set of accounts that this User can proxy as to entries that are matched by the specified LDAP URL.
   * @return mayProxyAsURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This restricts the set of accounts that this User can proxy as to entries that are matched by the specified LDAP URL.")

  public List<String> getMayProxyAsURL() {
    return mayProxyAsURL;
  }


  public void setMayProxyAsURL(List<String> mayProxyAsURL) {
    
    
    
    this.mayProxyAsURL = mayProxyAsURL;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TopologyAdminUserShared instance itself
   */
  public TopologyAdminUserShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopologyAdminUserShared topologyAdminUserShared = (TopologyAdminUserShared) o;
    return Objects.equals(this.description, topologyAdminUserShared.description) &&
        Objects.equals(this.schemas, topologyAdminUserShared.schemas) &&
        Objects.equals(this.alternateBindDN, topologyAdminUserShared.alternateBindDN) &&
        Objects.equals(this.password, topologyAdminUserShared.password) &&
        Objects.equals(this.firstName, topologyAdminUserShared.firstName) &&
        Objects.equals(this.lastName, topologyAdminUserShared.lastName) &&
        Objects.equals(this.userID, topologyAdminUserShared.userID) &&
        Objects.equals(this.emailAddress, topologyAdminUserShared.emailAddress) &&
        Objects.equals(this.workTelephoneNumber, topologyAdminUserShared.workTelephoneNumber) &&
        Objects.equals(this.homeTelephoneNumber, topologyAdminUserShared.homeTelephoneNumber) &&
        Objects.equals(this.mobileTelephoneNumber, topologyAdminUserShared.mobileTelephoneNumber) &&
        Objects.equals(this.pagerTelephoneNumber, topologyAdminUserShared.pagerTelephoneNumber) &&
        Objects.equals(this.inheritDefaultRootPrivileges, topologyAdminUserShared.inheritDefaultRootPrivileges) &&
        Objects.equals(this.privilege, topologyAdminUserShared.privilege) &&
        Objects.equals(this.searchResultEntryLimit, topologyAdminUserShared.searchResultEntryLimit) &&
        Objects.equals(this.timeLimitSeconds, topologyAdminUserShared.timeLimitSeconds) &&
        Objects.equals(this.lookThroughEntryLimit, topologyAdminUserShared.lookThroughEntryLimit) &&
        Objects.equals(this.idleTimeLimitSeconds, topologyAdminUserShared.idleTimeLimitSeconds) &&
        Objects.equals(this.passwordPolicy, topologyAdminUserShared.passwordPolicy) &&
        Objects.equals(this.disabled, topologyAdminUserShared.disabled) &&
        Objects.equals(this.accountActivationTime, topologyAdminUserShared.accountActivationTime) &&
        Objects.equals(this.accountExpirationTime, topologyAdminUserShared.accountExpirationTime) &&
        Objects.equals(this.requireSecureAuthentication, topologyAdminUserShared.requireSecureAuthentication) &&
        Objects.equals(this.requireSecureConnections, topologyAdminUserShared.requireSecureConnections) &&
        Objects.equals(this.allowedAuthenticationType, topologyAdminUserShared.allowedAuthenticationType) &&
        Objects.equals(this.allowedAuthenticationIPAddress, topologyAdminUserShared.allowedAuthenticationIPAddress) &&
        Objects.equals(this.preferredOTPDeliveryMechanism, topologyAdminUserShared.preferredOTPDeliveryMechanism) &&
        Objects.equals(this.isProxyable, topologyAdminUserShared.isProxyable) &&
        Objects.equals(this.isProxyableByDN, topologyAdminUserShared.isProxyableByDN) &&
        Objects.equals(this.isProxyableByGroup, topologyAdminUserShared.isProxyableByGroup) &&
        Objects.equals(this.isProxyableByURL, topologyAdminUserShared.isProxyableByURL) &&
        Objects.equals(this.mayProxyAsDN, topologyAdminUserShared.mayProxyAsDN) &&
        Objects.equals(this.mayProxyAsGroup, topologyAdminUserShared.mayProxyAsGroup) &&
        Objects.equals(this.mayProxyAsURL, topologyAdminUserShared.mayProxyAsURL)&&
        Objects.equals(this.additionalProperties, topologyAdminUserShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, alternateBindDN, password, firstName, lastName, userID, emailAddress, workTelephoneNumber, homeTelephoneNumber, mobileTelephoneNumber, pagerTelephoneNumber, inheritDefaultRootPrivileges, privilege, searchResultEntryLimit, timeLimitSeconds, lookThroughEntryLimit, idleTimeLimitSeconds, passwordPolicy, disabled, accountActivationTime, accountExpirationTime, requireSecureAuthentication, requireSecureConnections, allowedAuthenticationType, allowedAuthenticationIPAddress, preferredOTPDeliveryMechanism, isProxyable, isProxyableByDN, isProxyableByGroup, isProxyableByURL, mayProxyAsDN, mayProxyAsGroup, mayProxyAsURL, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopologyAdminUserShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    alternateBindDN: ").append(toIndentedString(alternateBindDN)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    workTelephoneNumber: ").append(toIndentedString(workTelephoneNumber)).append("\n");
    sb.append("    homeTelephoneNumber: ").append(toIndentedString(homeTelephoneNumber)).append("\n");
    sb.append("    mobileTelephoneNumber: ").append(toIndentedString(mobileTelephoneNumber)).append("\n");
    sb.append("    pagerTelephoneNumber: ").append(toIndentedString(pagerTelephoneNumber)).append("\n");
    sb.append("    inheritDefaultRootPrivileges: ").append(toIndentedString(inheritDefaultRootPrivileges)).append("\n");
    sb.append("    privilege: ").append(toIndentedString(privilege)).append("\n");
    sb.append("    searchResultEntryLimit: ").append(toIndentedString(searchResultEntryLimit)).append("\n");
    sb.append("    timeLimitSeconds: ").append(toIndentedString(timeLimitSeconds)).append("\n");
    sb.append("    lookThroughEntryLimit: ").append(toIndentedString(lookThroughEntryLimit)).append("\n");
    sb.append("    idleTimeLimitSeconds: ").append(toIndentedString(idleTimeLimitSeconds)).append("\n");
    sb.append("    passwordPolicy: ").append(toIndentedString(passwordPolicy)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    accountActivationTime: ").append(toIndentedString(accountActivationTime)).append("\n");
    sb.append("    accountExpirationTime: ").append(toIndentedString(accountExpirationTime)).append("\n");
    sb.append("    requireSecureAuthentication: ").append(toIndentedString(requireSecureAuthentication)).append("\n");
    sb.append("    requireSecureConnections: ").append(toIndentedString(requireSecureConnections)).append("\n");
    sb.append("    allowedAuthenticationType: ").append(toIndentedString(allowedAuthenticationType)).append("\n");
    sb.append("    allowedAuthenticationIPAddress: ").append(toIndentedString(allowedAuthenticationIPAddress)).append("\n");
    sb.append("    preferredOTPDeliveryMechanism: ").append(toIndentedString(preferredOTPDeliveryMechanism)).append("\n");
    sb.append("    isProxyable: ").append(toIndentedString(isProxyable)).append("\n");
    sb.append("    isProxyableByDN: ").append(toIndentedString(isProxyableByDN)).append("\n");
    sb.append("    isProxyableByGroup: ").append(toIndentedString(isProxyableByGroup)).append("\n");
    sb.append("    isProxyableByURL: ").append(toIndentedString(isProxyableByURL)).append("\n");
    sb.append("    mayProxyAsDN: ").append(toIndentedString(mayProxyAsDN)).append("\n");
    sb.append("    mayProxyAsGroup: ").append(toIndentedString(mayProxyAsGroup)).append("\n");
    sb.append("    mayProxyAsURL: ").append(toIndentedString(mayProxyAsURL)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("alternateBindDN");
    openapiFields.add("password");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("userID");
    openapiFields.add("emailAddress");
    openapiFields.add("workTelephoneNumber");
    openapiFields.add("homeTelephoneNumber");
    openapiFields.add("mobileTelephoneNumber");
    openapiFields.add("pagerTelephoneNumber");
    openapiFields.add("inheritDefaultRootPrivileges");
    openapiFields.add("privilege");
    openapiFields.add("searchResultEntryLimit");
    openapiFields.add("timeLimitSeconds");
    openapiFields.add("lookThroughEntryLimit");
    openapiFields.add("idleTimeLimitSeconds");
    openapiFields.add("passwordPolicy");
    openapiFields.add("disabled");
    openapiFields.add("accountActivationTime");
    openapiFields.add("accountExpirationTime");
    openapiFields.add("requireSecureAuthentication");
    openapiFields.add("requireSecureConnections");
    openapiFields.add("allowedAuthenticationType");
    openapiFields.add("allowedAuthenticationIPAddress");
    openapiFields.add("preferredOTPDeliveryMechanism");
    openapiFields.add("isProxyable");
    openapiFields.add("isProxyableByDN");
    openapiFields.add("isProxyableByGroup");
    openapiFields.add("isProxyableByURL");
    openapiFields.add("mayProxyAsDN");
    openapiFields.add("mayProxyAsGroup");
    openapiFields.add("mayProxyAsURL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TopologyAdminUserShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TopologyAdminUserShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopologyAdminUserShared is not found in the empty JSON string", TopologyAdminUserShared.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("alternateBindDN") != null && !jsonObj.get("alternateBindDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateBindDN` to be an array in the JSON string but got `%s`", jsonObj.get("alternateBindDN").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be an array in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be an array in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("userID") != null && !jsonObj.get("userID").isJsonNull()) && !jsonObj.get("userID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be an array in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("workTelephoneNumber") != null && !jsonObj.get("workTelephoneNumber").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `workTelephoneNumber` to be an array in the JSON string but got `%s`", jsonObj.get("workTelephoneNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("homeTelephoneNumber") != null && !jsonObj.get("homeTelephoneNumber").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeTelephoneNumber` to be an array in the JSON string but got `%s`", jsonObj.get("homeTelephoneNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mobileTelephoneNumber") != null && !jsonObj.get("mobileTelephoneNumber").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobileTelephoneNumber` to be an array in the JSON string but got `%s`", jsonObj.get("mobileTelephoneNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pagerTelephoneNumber") != null && !jsonObj.get("pagerTelephoneNumber").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pagerTelephoneNumber` to be an array in the JSON string but got `%s`", jsonObj.get("pagerTelephoneNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("privilege") != null && !jsonObj.get("privilege").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `privilege` to be an array in the JSON string but got `%s`", jsonObj.get("privilege").toString()));
      }
      if ((jsonObj.get("passwordPolicy") != null && !jsonObj.get("passwordPolicy").isJsonNull()) && !jsonObj.get("passwordPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordPolicy").toString()));
      }
      if ((jsonObj.get("accountActivationTime") != null && !jsonObj.get("accountActivationTime").isJsonNull()) && !jsonObj.get("accountActivationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountActivationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountActivationTime").toString()));
      }
      if ((jsonObj.get("accountExpirationTime") != null && !jsonObj.get("accountExpirationTime").isJsonNull()) && !jsonObj.get("accountExpirationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountExpirationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountExpirationTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedAuthenticationType") != null && !jsonObj.get("allowedAuthenticationType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedAuthenticationType` to be an array in the JSON string but got `%s`", jsonObj.get("allowedAuthenticationType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedAuthenticationIPAddress") != null && !jsonObj.get("allowedAuthenticationIPAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedAuthenticationIPAddress` to be an array in the JSON string but got `%s`", jsonObj.get("allowedAuthenticationIPAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("preferredOTPDeliveryMechanism") != null && !jsonObj.get("preferredOTPDeliveryMechanism").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredOTPDeliveryMechanism` to be an array in the JSON string but got `%s`", jsonObj.get("preferredOTPDeliveryMechanism").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("isProxyableByDN") != null && !jsonObj.get("isProxyableByDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `isProxyableByDN` to be an array in the JSON string but got `%s`", jsonObj.get("isProxyableByDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("isProxyableByGroup") != null && !jsonObj.get("isProxyableByGroup").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `isProxyableByGroup` to be an array in the JSON string but got `%s`", jsonObj.get("isProxyableByGroup").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("isProxyableByURL") != null && !jsonObj.get("isProxyableByURL").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `isProxyableByURL` to be an array in the JSON string but got `%s`", jsonObj.get("isProxyableByURL").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mayProxyAsDN") != null && !jsonObj.get("mayProxyAsDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mayProxyAsDN` to be an array in the JSON string but got `%s`", jsonObj.get("mayProxyAsDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mayProxyAsGroup") != null && !jsonObj.get("mayProxyAsGroup").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mayProxyAsGroup` to be an array in the JSON string but got `%s`", jsonObj.get("mayProxyAsGroup").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mayProxyAsURL") != null && !jsonObj.get("mayProxyAsURL").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mayProxyAsURL` to be an array in the JSON string but got `%s`", jsonObj.get("mayProxyAsURL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopologyAdminUserShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopologyAdminUserShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopologyAdminUserShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopologyAdminUserShared.class));

       return (TypeAdapter<T>) new TypeAdapter<TopologyAdminUserShared>() {
           @Override
           public void write(JsonWriter out, TopologyAdminUserShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TopologyAdminUserShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TopologyAdminUserShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TopologyAdminUserShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TopologyAdminUserShared
  * @throws IOException if the JSON string is invalid with respect to TopologyAdminUserShared
  */
  public static TopologyAdminUserShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopologyAdminUserShared.class);
  }

 /**
  * Convert an instance of TopologyAdminUserShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

