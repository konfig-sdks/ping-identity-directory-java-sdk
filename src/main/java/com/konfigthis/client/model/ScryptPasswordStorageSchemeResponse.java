/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumscryptPasswordStorageSchemeSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ScryptPasswordStorageSchemeResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ScryptPasswordStorageSchemeResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumscryptPasswordStorageSchemeSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCRYPT_CPU_MEMORY_COST_FACTOR_EXPONENT = "scryptCpuMemoryCostFactorExponent";
  @SerializedName(SERIALIZED_NAME_SCRYPT_CPU_MEMORY_COST_FACTOR_EXPONENT)
  private Integer scryptCpuMemoryCostFactorExponent;

  public static final String SERIALIZED_NAME_SCRYPT_BLOCK_SIZE = "scryptBlockSize";
  @SerializedName(SERIALIZED_NAME_SCRYPT_BLOCK_SIZE)
  private Integer scryptBlockSize;

  public static final String SERIALIZED_NAME_SCRYPT_PARALLELIZATION_PARAMETER = "scryptParallelizationParameter";
  @SerializedName(SERIALIZED_NAME_SCRYPT_PARALLELIZATION_PARAMETER)
  private Integer scryptParallelizationParameter;

  public static final String SERIALIZED_NAME_MAX_PASSWORD_LENGTH = "maxPasswordLength";
  @SerializedName(SERIALIZED_NAME_MAX_PASSWORD_LENGTH)
  private Integer maxPasswordLength;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public ScryptPasswordStorageSchemeResponse() {
  }

  public ScryptPasswordStorageSchemeResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Password Storage Scheme
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Password Storage Scheme")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ScryptPasswordStorageSchemeResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Password Storage Scheme
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Password Storage Scheme")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ScryptPasswordStorageSchemeResponse schemas(List<EnumscryptPasswordStorageSchemeSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public ScryptPasswordStorageSchemeResponse addSchemasItem(EnumscryptPasswordStorageSchemeSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumscryptPasswordStorageSchemeSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumscryptPasswordStorageSchemeSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public ScryptPasswordStorageSchemeResponse scryptCpuMemoryCostFactorExponent(Integer scryptCpuMemoryCostFactorExponent) {
    
    
    
    
    this.scryptCpuMemoryCostFactorExponent = scryptCpuMemoryCostFactorExponent;
    return this;
  }

   /**
   * Specifies the exponent that should be used for the CPU/memory cost factor. The cost factor must be a power of two, so the value of this property represents the power to which two is raised. The CPU/memory cost factor specifies the number of iterations required for encoding the password, and also affects the amount of memory required during processing. A higher cost factor requires more processing and more memory to generate a password, which makes attacks against the password more expensive.
   * @return scryptCpuMemoryCostFactorExponent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the exponent that should be used for the CPU/memory cost factor. The cost factor must be a power of two, so the value of this property represents the power to which two is raised. The CPU/memory cost factor specifies the number of iterations required for encoding the password, and also affects the amount of memory required during processing. A higher cost factor requires more processing and more memory to generate a password, which makes attacks against the password more expensive.")

  public Integer getScryptCpuMemoryCostFactorExponent() {
    return scryptCpuMemoryCostFactorExponent;
  }


  public void setScryptCpuMemoryCostFactorExponent(Integer scryptCpuMemoryCostFactorExponent) {
    
    
    
    this.scryptCpuMemoryCostFactorExponent = scryptCpuMemoryCostFactorExponent;
  }


  public ScryptPasswordStorageSchemeResponse scryptBlockSize(Integer scryptBlockSize) {
    
    
    
    
    this.scryptBlockSize = scryptBlockSize;
    return this;
  }

   /**
   * Specifies the block size for the digest that will be used in the course of encoding passwords. Increasing the block size while keeping the CPU/memory cost factor constant will increase the amount of memory required to encode a password, but it also increases the ratio of sequential memory access to random memory access (and sequential memory access is generally faster than random memory access).
   * @return scryptBlockSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the block size for the digest that will be used in the course of encoding passwords. Increasing the block size while keeping the CPU/memory cost factor constant will increase the amount of memory required to encode a password, but it also increases the ratio of sequential memory access to random memory access (and sequential memory access is generally faster than random memory access).")

  public Integer getScryptBlockSize() {
    return scryptBlockSize;
  }


  public void setScryptBlockSize(Integer scryptBlockSize) {
    
    
    
    this.scryptBlockSize = scryptBlockSize;
  }


  public ScryptPasswordStorageSchemeResponse scryptParallelizationParameter(Integer scryptParallelizationParameter) {
    
    
    
    
    this.scryptParallelizationParameter = scryptParallelizationParameter;
    return this;
  }

   /**
   * Specifies the number of times that scrypt has to perform the entire encoding process to produce the final result.
   * @return scryptParallelizationParameter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of times that scrypt has to perform the entire encoding process to produce the final result.")

  public Integer getScryptParallelizationParameter() {
    return scryptParallelizationParameter;
  }


  public void setScryptParallelizationParameter(Integer scryptParallelizationParameter) {
    
    
    
    this.scryptParallelizationParameter = scryptParallelizationParameter;
  }


  public ScryptPasswordStorageSchemeResponse maxPasswordLength(Integer maxPasswordLength) {
    
    
    
    
    this.maxPasswordLength = maxPasswordLength;
    return this;
  }

   /**
   * Specifies the maximum allowed length, in bytes, for passwords encoded with this scheme, which can help mitigate denial of service attacks from clients that attempt to bind with very long passwords.
   * @return maxPasswordLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum allowed length, in bytes, for passwords encoded with this scheme, which can help mitigate denial of service attacks from clients that attempt to bind with very long passwords.")

  public Integer getMaxPasswordLength() {
    return maxPasswordLength;
  }


  public void setMaxPasswordLength(Integer maxPasswordLength) {
    
    
    
    this.maxPasswordLength = maxPasswordLength;
  }


  public ScryptPasswordStorageSchemeResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Password Storage Scheme is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Password Storage Scheme is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public ScryptPasswordStorageSchemeResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public ScryptPasswordStorageSchemeResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ScryptPasswordStorageSchemeResponse instance itself
   */
  public ScryptPasswordStorageSchemeResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScryptPasswordStorageSchemeResponse scryptPasswordStorageSchemeResponse = (ScryptPasswordStorageSchemeResponse) o;
    return Objects.equals(this.id, scryptPasswordStorageSchemeResponse.id) &&
        Objects.equals(this.description, scryptPasswordStorageSchemeResponse.description) &&
        Objects.equals(this.schemas, scryptPasswordStorageSchemeResponse.schemas) &&
        Objects.equals(this.scryptCpuMemoryCostFactorExponent, scryptPasswordStorageSchemeResponse.scryptCpuMemoryCostFactorExponent) &&
        Objects.equals(this.scryptBlockSize, scryptPasswordStorageSchemeResponse.scryptBlockSize) &&
        Objects.equals(this.scryptParallelizationParameter, scryptPasswordStorageSchemeResponse.scryptParallelizationParameter) &&
        Objects.equals(this.maxPasswordLength, scryptPasswordStorageSchemeResponse.maxPasswordLength) &&
        Objects.equals(this.enabled, scryptPasswordStorageSchemeResponse.enabled) &&
        Objects.equals(this.meta, scryptPasswordStorageSchemeResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, scryptPasswordStorageSchemeResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, scryptPasswordStorageSchemeResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, scryptCpuMemoryCostFactorExponent, scryptBlockSize, scryptParallelizationParameter, maxPasswordLength, enabled, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScryptPasswordStorageSchemeResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    scryptCpuMemoryCostFactorExponent: ").append(toIndentedString(scryptCpuMemoryCostFactorExponent)).append("\n");
    sb.append("    scryptBlockSize: ").append(toIndentedString(scryptBlockSize)).append("\n");
    sb.append("    scryptParallelizationParameter: ").append(toIndentedString(scryptParallelizationParameter)).append("\n");
    sb.append("    maxPasswordLength: ").append(toIndentedString(maxPasswordLength)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("scryptCpuMemoryCostFactorExponent");
    openapiFields.add("scryptBlockSize");
    openapiFields.add("scryptParallelizationParameter");
    openapiFields.add("maxPasswordLength");
    openapiFields.add("enabled");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScryptPasswordStorageSchemeResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ScryptPasswordStorageSchemeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScryptPasswordStorageSchemeResponse is not found in the empty JSON string", ScryptPasswordStorageSchemeResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScryptPasswordStorageSchemeResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScryptPasswordStorageSchemeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScryptPasswordStorageSchemeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScryptPasswordStorageSchemeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScryptPasswordStorageSchemeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ScryptPasswordStorageSchemeResponse>() {
           @Override
           public void write(JsonWriter out, ScryptPasswordStorageSchemeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ScryptPasswordStorageSchemeResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ScryptPasswordStorageSchemeResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScryptPasswordStorageSchemeResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScryptPasswordStorageSchemeResponse
  * @throws IOException if the JSON string is invalid with respect to ScryptPasswordStorageSchemeResponse
  */
  public static ScryptPasswordStorageSchemeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScryptPasswordStorageSchemeResponse.class);
  }

 /**
  * Convert an instance of ScryptPasswordStorageSchemeResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

