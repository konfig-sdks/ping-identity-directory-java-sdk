/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumbackendWritabilityModeProp;
import com.konfigthis.client.model.EnumtrustStoreBackendSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TrustStoreBackendResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TrustStoreBackendResponseAllOf {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumtrustStoreBackendSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BACKEND_I_D = "backendID";
  @SerializedName(SERIALIZED_NAME_BACKEND_I_D)
  private String backendID;

  public static final String SERIALIZED_NAME_BASE_D_N = "baseDN";
  @SerializedName(SERIALIZED_NAME_BASE_D_N)
  private List<String> baseDN = null;

  public static final String SERIALIZED_NAME_WRITABILITY_MODE = "writabilityMode";
  @SerializedName(SERIALIZED_NAME_WRITABILITY_MODE)
  private EnumbackendWritabilityModeProp writabilityMode;

  public static final String SERIALIZED_NAME_TRUST_STORE_FILE = "trustStoreFile";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_FILE)
  private String trustStoreFile;

  public static final String SERIALIZED_NAME_TRUST_STORE_TYPE = "trustStoreType";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_TYPE)
  private String trustStoreType;

  public static final String SERIALIZED_NAME_TRUST_STORE_PIN = "trustStorePin";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_PIN)
  private String trustStorePin;

  public static final String SERIALIZED_NAME_TRUST_STORE_PIN_FILE = "trustStorePinFile";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_PIN_FILE)
  private String trustStorePinFile;

  public static final String SERIALIZED_NAME_TRUST_STORE_PIN_PASSPHRASE_PROVIDER = "trustStorePinPassphraseProvider";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_PIN_PASSPHRASE_PROVIDER)
  private String trustStorePinPassphraseProvider;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED = "setDegradedAlertWhenDisabled";
  @SerializedName(SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED)
  private Boolean setDegradedAlertWhenDisabled;

  public static final String SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED = "returnUnavailableWhenDisabled";
  @SerializedName(SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED)
  private Boolean returnUnavailableWhenDisabled;

  public static final String SERIALIZED_NAME_BACKUP_FILE_PERMISSIONS = "backupFilePermissions";
  @SerializedName(SERIALIZED_NAME_BACKUP_FILE_PERMISSIONS)
  private String backupFilePermissions;

  public static final String SERIALIZED_NAME_NOTIFICATION_MANAGER = "notificationManager";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_MANAGER)
  private String notificationManager;

  public TrustStoreBackendResponseAllOf() {
  }

  public TrustStoreBackendResponseAllOf description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Backend
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Backend")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TrustStoreBackendResponseAllOf schemas(List<EnumtrustStoreBackendSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public TrustStoreBackendResponseAllOf addSchemasItem(EnumtrustStoreBackendSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumtrustStoreBackendSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumtrustStoreBackendSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public TrustStoreBackendResponseAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Backend
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Backend")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public TrustStoreBackendResponseAllOf backendID(String backendID) {
    
    
    
    
    this.backendID = backendID;
    return this;
  }

   /**
   * Specifies a name to identify the associated backend.
   * @return backendID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a name to identify the associated backend.")

  public String getBackendID() {
    return backendID;
  }


  public void setBackendID(String backendID) {
    
    
    
    this.backendID = backendID;
  }


  public TrustStoreBackendResponseAllOf baseDN(List<String> baseDN) {
    
    
    
    
    this.baseDN = baseDN;
    return this;
  }

  public TrustStoreBackendResponseAllOf addBaseDNItem(String baseDNItem) {
    if (this.baseDN == null) {
      this.baseDN = new ArrayList<>();
    }
    this.baseDN.add(baseDNItem);
    return this;
  }

   /**
   * Specifies the base DN(s) for the data that the backend handles.
   * @return baseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the base DN(s) for the data that the backend handles.")

  public List<String> getBaseDN() {
    return baseDN;
  }


  public void setBaseDN(List<String> baseDN) {
    
    
    
    this.baseDN = baseDN;
  }


  public TrustStoreBackendResponseAllOf writabilityMode(EnumbackendWritabilityModeProp writabilityMode) {
    
    
    
    
    this.writabilityMode = writabilityMode;
    return this;
  }

   /**
   * Get writabilityMode
   * @return writabilityMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumbackendWritabilityModeProp getWritabilityMode() {
    return writabilityMode;
  }


  public void setWritabilityMode(EnumbackendWritabilityModeProp writabilityMode) {
    
    
    
    this.writabilityMode = writabilityMode;
  }


  public TrustStoreBackendResponseAllOf trustStoreFile(String trustStoreFile) {
    
    
    
    
    this.trustStoreFile = trustStoreFile;
    return this;
  }

   /**
   * Specifies the path to the file that stores the trust information.
   * @return trustStoreFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the file that stores the trust information.")

  public String getTrustStoreFile() {
    return trustStoreFile;
  }


  public void setTrustStoreFile(String trustStoreFile) {
    
    
    
    this.trustStoreFile = trustStoreFile;
  }


  public TrustStoreBackendResponseAllOf trustStoreType(String trustStoreType) {
    
    
    
    
    this.trustStoreType = trustStoreType;
    return this;
  }

   /**
   * Specifies the format for the data in the key store file.
   * @return trustStoreType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the format for the data in the key store file.")

  public String getTrustStoreType() {
    return trustStoreType;
  }


  public void setTrustStoreType(String trustStoreType) {
    
    
    
    this.trustStoreType = trustStoreType;
  }


  public TrustStoreBackendResponseAllOf trustStorePin(String trustStorePin) {
    
    
    
    
    this.trustStorePin = trustStorePin;
    return this;
  }

   /**
   * Specifies the clear-text PIN needed to access the Trust Store Backend.
   * @return trustStorePin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the clear-text PIN needed to access the Trust Store Backend.")

  public String getTrustStorePin() {
    return trustStorePin;
  }


  public void setTrustStorePin(String trustStorePin) {
    
    
    
    this.trustStorePin = trustStorePin;
  }


  public TrustStoreBackendResponseAllOf trustStorePinFile(String trustStorePinFile) {
    
    
    
    
    this.trustStorePinFile = trustStorePinFile;
    return this;
  }

   /**
   * Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to access the Trust Store Backend.
   * @return trustStorePinFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to the text file whose only contents should be a single line containing the clear-text PIN needed to access the Trust Store Backend.")

  public String getTrustStorePinFile() {
    return trustStorePinFile;
  }


  public void setTrustStorePinFile(String trustStorePinFile) {
    
    
    
    this.trustStorePinFile = trustStorePinFile;
  }


  public TrustStoreBackendResponseAllOf trustStorePinPassphraseProvider(String trustStorePinPassphraseProvider) {
    
    
    
    
    this.trustStorePinPassphraseProvider = trustStorePinPassphraseProvider;
    return this;
  }

   /**
   * The passphrase provider to use to obtain the clear-text PIN needed to access the Trust Store Backend.
   * @return trustStorePinPassphraseProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The passphrase provider to use to obtain the clear-text PIN needed to access the Trust Store Backend.")

  public String getTrustStorePinPassphraseProvider() {
    return trustStorePinPassphraseProvider;
  }


  public void setTrustStorePinPassphraseProvider(String trustStorePinPassphraseProvider) {
    
    
    
    this.trustStorePinPassphraseProvider = trustStorePinPassphraseProvider;
  }


  public TrustStoreBackendResponseAllOf enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the backend is enabled in the server.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the backend is enabled in the server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public TrustStoreBackendResponseAllOf setDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
    return this;
  }

   /**
   * Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
   * @return setDegradedAlertWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.")

  public Boolean getSetDegradedAlertWhenDisabled() {
    return setDegradedAlertWhenDisabled;
  }


  public void setSetDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
  }


  public TrustStoreBackendResponseAllOf returnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
    return this;
  }

   /**
   * Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
   * @return returnUnavailableWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.")

  public Boolean getReturnUnavailableWhenDisabled() {
    return returnUnavailableWhenDisabled;
  }


  public void setReturnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
  }


  public TrustStoreBackendResponseAllOf backupFilePermissions(String backupFilePermissions) {
    
    
    
    
    this.backupFilePermissions = backupFilePermissions;
    return this;
  }

   /**
   * Specifies the permissions that should be applied to files and directories created by a backup of the backend.
   * @return backupFilePermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the permissions that should be applied to files and directories created by a backup of the backend.")

  public String getBackupFilePermissions() {
    return backupFilePermissions;
  }


  public void setBackupFilePermissions(String backupFilePermissions) {
    
    
    
    this.backupFilePermissions = backupFilePermissions;
  }


  public TrustStoreBackendResponseAllOf notificationManager(String notificationManager) {
    
    
    
    
    this.notificationManager = notificationManager;
    return this;
  }

   /**
   * Specifies a notification manager for changes resulting from operations processed through this Backend
   * @return notificationManager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a notification manager for changes resulting from operations processed through this Backend")

  public String getNotificationManager() {
    return notificationManager;
  }


  public void setNotificationManager(String notificationManager) {
    
    
    
    this.notificationManager = notificationManager;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TrustStoreBackendResponseAllOf instance itself
   */
  public TrustStoreBackendResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrustStoreBackendResponseAllOf trustStoreBackendResponseAllOf = (TrustStoreBackendResponseAllOf) o;
    return Objects.equals(this.description, trustStoreBackendResponseAllOf.description) &&
        Objects.equals(this.schemas, trustStoreBackendResponseAllOf.schemas) &&
        Objects.equals(this.id, trustStoreBackendResponseAllOf.id) &&
        Objects.equals(this.backendID, trustStoreBackendResponseAllOf.backendID) &&
        Objects.equals(this.baseDN, trustStoreBackendResponseAllOf.baseDN) &&
        Objects.equals(this.writabilityMode, trustStoreBackendResponseAllOf.writabilityMode) &&
        Objects.equals(this.trustStoreFile, trustStoreBackendResponseAllOf.trustStoreFile) &&
        Objects.equals(this.trustStoreType, trustStoreBackendResponseAllOf.trustStoreType) &&
        Objects.equals(this.trustStorePin, trustStoreBackendResponseAllOf.trustStorePin) &&
        Objects.equals(this.trustStorePinFile, trustStoreBackendResponseAllOf.trustStorePinFile) &&
        Objects.equals(this.trustStorePinPassphraseProvider, trustStoreBackendResponseAllOf.trustStorePinPassphraseProvider) &&
        Objects.equals(this.enabled, trustStoreBackendResponseAllOf.enabled) &&
        Objects.equals(this.setDegradedAlertWhenDisabled, trustStoreBackendResponseAllOf.setDegradedAlertWhenDisabled) &&
        Objects.equals(this.returnUnavailableWhenDisabled, trustStoreBackendResponseAllOf.returnUnavailableWhenDisabled) &&
        Objects.equals(this.backupFilePermissions, trustStoreBackendResponseAllOf.backupFilePermissions) &&
        Objects.equals(this.notificationManager, trustStoreBackendResponseAllOf.notificationManager)&&
        Objects.equals(this.additionalProperties, trustStoreBackendResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, backendID, baseDN, writabilityMode, trustStoreFile, trustStoreType, trustStorePin, trustStorePinFile, trustStorePinPassphraseProvider, enabled, setDegradedAlertWhenDisabled, returnUnavailableWhenDisabled, backupFilePermissions, notificationManager, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrustStoreBackendResponseAllOf {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    backendID: ").append(toIndentedString(backendID)).append("\n");
    sb.append("    baseDN: ").append(toIndentedString(baseDN)).append("\n");
    sb.append("    writabilityMode: ").append(toIndentedString(writabilityMode)).append("\n");
    sb.append("    trustStoreFile: ").append(toIndentedString(trustStoreFile)).append("\n");
    sb.append("    trustStoreType: ").append(toIndentedString(trustStoreType)).append("\n");
    sb.append("    trustStorePin: ").append(toIndentedString(trustStorePin)).append("\n");
    sb.append("    trustStorePinFile: ").append(toIndentedString(trustStorePinFile)).append("\n");
    sb.append("    trustStorePinPassphraseProvider: ").append(toIndentedString(trustStorePinPassphraseProvider)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    setDegradedAlertWhenDisabled: ").append(toIndentedString(setDegradedAlertWhenDisabled)).append("\n");
    sb.append("    returnUnavailableWhenDisabled: ").append(toIndentedString(returnUnavailableWhenDisabled)).append("\n");
    sb.append("    backupFilePermissions: ").append(toIndentedString(backupFilePermissions)).append("\n");
    sb.append("    notificationManager: ").append(toIndentedString(notificationManager)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("backendID");
    openapiFields.add("baseDN");
    openapiFields.add("writabilityMode");
    openapiFields.add("trustStoreFile");
    openapiFields.add("trustStoreType");
    openapiFields.add("trustStorePin");
    openapiFields.add("trustStorePinFile");
    openapiFields.add("trustStorePinPassphraseProvider");
    openapiFields.add("enabled");
    openapiFields.add("setDegradedAlertWhenDisabled");
    openapiFields.add("returnUnavailableWhenDisabled");
    openapiFields.add("backupFilePermissions");
    openapiFields.add("notificationManager");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrustStoreBackendResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TrustStoreBackendResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrustStoreBackendResponseAllOf is not found in the empty JSON string", TrustStoreBackendResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("backendID") != null && !jsonObj.get("backendID").isJsonNull()) && !jsonObj.get("backendID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("baseDN") != null && !jsonObj.get("baseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseDN` to be an array in the JSON string but got `%s`", jsonObj.get("baseDN").toString()));
      }
      if ((jsonObj.get("trustStoreFile") != null && !jsonObj.get("trustStoreFile").isJsonNull()) && !jsonObj.get("trustStoreFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStoreFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStoreFile").toString()));
      }
      if ((jsonObj.get("trustStoreType") != null && !jsonObj.get("trustStoreType").isJsonNull()) && !jsonObj.get("trustStoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStoreType").toString()));
      }
      if ((jsonObj.get("trustStorePin") != null && !jsonObj.get("trustStorePin").isJsonNull()) && !jsonObj.get("trustStorePin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStorePin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStorePin").toString()));
      }
      if ((jsonObj.get("trustStorePinFile") != null && !jsonObj.get("trustStorePinFile").isJsonNull()) && !jsonObj.get("trustStorePinFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStorePinFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStorePinFile").toString()));
      }
      if ((jsonObj.get("trustStorePinPassphraseProvider") != null && !jsonObj.get("trustStorePinPassphraseProvider").isJsonNull()) && !jsonObj.get("trustStorePinPassphraseProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStorePinPassphraseProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStorePinPassphraseProvider").toString()));
      }
      if ((jsonObj.get("backupFilePermissions") != null && !jsonObj.get("backupFilePermissions").isJsonNull()) && !jsonObj.get("backupFilePermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupFilePermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupFilePermissions").toString()));
      }
      if ((jsonObj.get("notificationManager") != null && !jsonObj.get("notificationManager").isJsonNull()) && !jsonObj.get("notificationManager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationManager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationManager").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrustStoreBackendResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrustStoreBackendResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrustStoreBackendResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrustStoreBackendResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<TrustStoreBackendResponseAllOf>() {
           @Override
           public void write(JsonWriter out, TrustStoreBackendResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TrustStoreBackendResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TrustStoreBackendResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrustStoreBackendResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrustStoreBackendResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to TrustStoreBackendResponseAllOf
  */
  public static TrustStoreBackendResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrustStoreBackendResponseAllOf.class);
  }

 /**
  * Convert an instance of TrustStoreBackendResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

