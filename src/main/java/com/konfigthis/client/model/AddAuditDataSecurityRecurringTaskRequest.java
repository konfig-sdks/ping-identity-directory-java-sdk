/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumauditDataSecurityRecurringTaskSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddAuditDataSecurityRecurringTaskRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddAuditDataSecurityRecurringTaskRequest {
  public static final String SERIALIZED_NAME_TASK_NAME = "taskName";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  private String taskName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumauditDataSecurityRecurringTaskSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_BASE_OUTPUT_DIRECTORY = "baseOutputDirectory";
  @SerializedName(SERIALIZED_NAME_BASE_OUTPUT_DIRECTORY)
  private String baseOutputDirectory;

  public static final String SERIALIZED_NAME_DATA_SECURITY_AUDITOR = "dataSecurityAuditor";
  @SerializedName(SERIALIZED_NAME_DATA_SECURITY_AUDITOR)
  private List<String> dataSecurityAuditor = null;

  public static final String SERIALIZED_NAME_BACKEND = "backend";
  @SerializedName(SERIALIZED_NAME_BACKEND)
  private List<String> backend = null;

  public static final String SERIALIZED_NAME_INCLUDE_FILTER = "includeFilter";
  @SerializedName(SERIALIZED_NAME_INCLUDE_FILTER)
  private List<String> includeFilter = null;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_REPORT_COUNT = "retainPreviousReportCount";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_REPORT_COUNT)
  private Integer retainPreviousReportCount;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_REPORT_AGE = "retainPreviousReportAge";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_REPORT_AGE)
  private String retainPreviousReportAge;

  public static final String SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE = "cancelOnTaskDependencyFailure";
  @SerializedName(SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE)
  private Boolean cancelOnTaskDependencyFailure;

  public static final String SERIALIZED_NAME_EMAIL_ON_START = "emailOnStart";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_START)
  private List<String> emailOnStart = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_SUCCESS = "emailOnSuccess";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_SUCCESS)
  private List<String> emailOnSuccess = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_FAILURE = "emailOnFailure";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_FAILURE)
  private List<String> emailOnFailure = null;

  public static final String SERIALIZED_NAME_ALERT_ON_START = "alertOnStart";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_START)
  private Boolean alertOnStart;

  public static final String SERIALIZED_NAME_ALERT_ON_SUCCESS = "alertOnSuccess";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_SUCCESS)
  private Boolean alertOnSuccess;

  public static final String SERIALIZED_NAME_ALERT_ON_FAILURE = "alertOnFailure";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_FAILURE)
  private Boolean alertOnFailure;

  public AddAuditDataSecurityRecurringTaskRequest() {
  }

  public AddAuditDataSecurityRecurringTaskRequest taskName(String taskName) {
    
    
    
    
    this.taskName = taskName;
    return this;
  }

   /**
   * Name of the new Recurring Task
   * @return taskName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Recurring Task")

  public String getTaskName() {
    return taskName;
  }


  public void setTaskName(String taskName) {
    
    
    
    this.taskName = taskName;
  }


  public AddAuditDataSecurityRecurringTaskRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Recurring Task
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Recurring Task")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddAuditDataSecurityRecurringTaskRequest schemas(List<EnumauditDataSecurityRecurringTaskSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddAuditDataSecurityRecurringTaskRequest addSchemasItem(EnumauditDataSecurityRecurringTaskSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumauditDataSecurityRecurringTaskSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumauditDataSecurityRecurringTaskSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddAuditDataSecurityRecurringTaskRequest baseOutputDirectory(String baseOutputDirectory) {
    
    
    
    
    this.baseOutputDirectory = baseOutputDirectory;
    return this;
  }

   /**
   * The base directory below which generated reports will be written. Each invocation of the audit-data-security task will create a new subdirectory below this base directory whose name is a timestamp indicating when the report was generated.
   * @return baseOutputDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The base directory below which generated reports will be written. Each invocation of the audit-data-security task will create a new subdirectory below this base directory whose name is a timestamp indicating when the report was generated.")

  public String getBaseOutputDirectory() {
    return baseOutputDirectory;
  }


  public void setBaseOutputDirectory(String baseOutputDirectory) {
    
    
    
    this.baseOutputDirectory = baseOutputDirectory;
  }


  public AddAuditDataSecurityRecurringTaskRequest dataSecurityAuditor(List<String> dataSecurityAuditor) {
    
    
    
    
    this.dataSecurityAuditor = dataSecurityAuditor;
    return this;
  }

  public AddAuditDataSecurityRecurringTaskRequest addDataSecurityAuditorItem(String dataSecurityAuditorItem) {
    if (this.dataSecurityAuditor == null) {
      this.dataSecurityAuditor = new ArrayList<>();
    }
    this.dataSecurityAuditor.add(dataSecurityAuditorItem);
    return this;
  }

   /**
   * The set of data security auditors that should be invoked. If no auditors are specified, then all auditors defined in the configuration will be used.
   * @return dataSecurityAuditor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of data security auditors that should be invoked. If no auditors are specified, then all auditors defined in the configuration will be used.")

  public List<String> getDataSecurityAuditor() {
    return dataSecurityAuditor;
  }


  public void setDataSecurityAuditor(List<String> dataSecurityAuditor) {
    
    
    
    this.dataSecurityAuditor = dataSecurityAuditor;
  }


  public AddAuditDataSecurityRecurringTaskRequest backend(List<String> backend) {
    
    
    
    
    this.backend = backend;
    return this;
  }

  public AddAuditDataSecurityRecurringTaskRequest addBackendItem(String backendItem) {
    if (this.backend == null) {
      this.backend = new ArrayList<>();
    }
    this.backend.add(backendItem);
    return this;
  }

   /**
   * The set of backends that should be examined. If no backends are specified, then all backends that support this functionality will be included.
   * @return backend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of backends that should be examined. If no backends are specified, then all backends that support this functionality will be included.")

  public List<String> getBackend() {
    return backend;
  }


  public void setBackend(List<String> backend) {
    
    
    
    this.backend = backend;
  }


  public AddAuditDataSecurityRecurringTaskRequest includeFilter(List<String> includeFilter) {
    
    
    
    
    this.includeFilter = includeFilter;
    return this;
  }

  public AddAuditDataSecurityRecurringTaskRequest addIncludeFilterItem(String includeFilterItem) {
    if (this.includeFilter == null) {
      this.includeFilter = new ArrayList<>();
    }
    this.includeFilter.add(includeFilterItem);
    return this;
  }

   /**
   * A filter that will be used to identify entries that may be included in the generated report. If multiple filters are specified, then any entry that matches at least one of the filters will be included. If no filters are specified, then all entries will be included.
   * @return includeFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A filter that will be used to identify entries that may be included in the generated report. If multiple filters are specified, then any entry that matches at least one of the filters will be included. If no filters are specified, then all entries will be included.")

  public List<String> getIncludeFilter() {
    return includeFilter;
  }


  public void setIncludeFilter(List<String> includeFilter) {
    
    
    
    this.includeFilter = includeFilter;
  }


  public AddAuditDataSecurityRecurringTaskRequest retainPreviousReportCount(Integer retainPreviousReportCount) {
    
    
    
    
    this.retainPreviousReportCount = retainPreviousReportCount;
    return this;
  }

   /**
   * The minimum number of previous reports that should be preserved after a new report is generated.
   * @return retainPreviousReportCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum number of previous reports that should be preserved after a new report is generated.")

  public Integer getRetainPreviousReportCount() {
    return retainPreviousReportCount;
  }


  public void setRetainPreviousReportCount(Integer retainPreviousReportCount) {
    
    
    
    this.retainPreviousReportCount = retainPreviousReportCount;
  }


  public AddAuditDataSecurityRecurringTaskRequest retainPreviousReportAge(String retainPreviousReportAge) {
    
    
    
    
    this.retainPreviousReportAge = retainPreviousReportAge;
    return this;
  }

   /**
   * The minimum age of previous reports that should be preserved after a new report completes successfully.
   * @return retainPreviousReportAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum age of previous reports that should be preserved after a new report completes successfully.")

  public String getRetainPreviousReportAge() {
    return retainPreviousReportAge;
  }


  public void setRetainPreviousReportAge(String retainPreviousReportAge) {
    
    
    
    this.retainPreviousReportAge = retainPreviousReportAge;
  }


  public AddAuditDataSecurityRecurringTaskRequest cancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
    return this;
  }

   /**
   * Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
   * @return cancelOnTaskDependencyFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).")

  public Boolean getCancelOnTaskDependencyFailure() {
    return cancelOnTaskDependencyFailure;
  }


  public void setCancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
  }


  public AddAuditDataSecurityRecurringTaskRequest emailOnStart(List<String> emailOnStart) {
    
    
    
    
    this.emailOnStart = emailOnStart;
    return this;
  }

  public AddAuditDataSecurityRecurringTaskRequest addEmailOnStartItem(String emailOnStartItem) {
    if (this.emailOnStart == null) {
      this.emailOnStart = new ArrayList<>();
    }
    this.emailOnStart.add(emailOnStartItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnStart() {
    return emailOnStart;
  }


  public void setEmailOnStart(List<String> emailOnStart) {
    
    
    
    this.emailOnStart = emailOnStart;
  }


  public AddAuditDataSecurityRecurringTaskRequest emailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    
    this.emailOnSuccess = emailOnSuccess;
    return this;
  }

  public AddAuditDataSecurityRecurringTaskRequest addEmailOnSuccessItem(String emailOnSuccessItem) {
    if (this.emailOnSuccess == null) {
      this.emailOnSuccess = new ArrayList<>();
    }
    this.emailOnSuccess.add(emailOnSuccessItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnSuccess() {
    return emailOnSuccess;
  }


  public void setEmailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    this.emailOnSuccess = emailOnSuccess;
  }


  public AddAuditDataSecurityRecurringTaskRequest emailOnFailure(List<String> emailOnFailure) {
    
    
    
    
    this.emailOnFailure = emailOnFailure;
    return this;
  }

  public AddAuditDataSecurityRecurringTaskRequest addEmailOnFailureItem(String emailOnFailureItem) {
    if (this.emailOnFailure == null) {
      this.emailOnFailure = new ArrayList<>();
    }
    this.emailOnFailure.add(emailOnFailureItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnFailure() {
    return emailOnFailure;
  }


  public void setEmailOnFailure(List<String> emailOnFailure) {
    
    
    
    this.emailOnFailure = emailOnFailure;
  }


  public AddAuditDataSecurityRecurringTaskRequest alertOnStart(Boolean alertOnStart) {
    
    
    
    
    this.alertOnStart = alertOnStart;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
   * @return alertOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.")

  public Boolean getAlertOnStart() {
    return alertOnStart;
  }


  public void setAlertOnStart(Boolean alertOnStart) {
    
    
    
    this.alertOnStart = alertOnStart;
  }


  public AddAuditDataSecurityRecurringTaskRequest alertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    
    this.alertOnSuccess = alertOnSuccess;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
   * @return alertOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.")

  public Boolean getAlertOnSuccess() {
    return alertOnSuccess;
  }


  public void setAlertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    this.alertOnSuccess = alertOnSuccess;
  }


  public AddAuditDataSecurityRecurringTaskRequest alertOnFailure(Boolean alertOnFailure) {
    
    
    
    
    this.alertOnFailure = alertOnFailure;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
   * @return alertOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.")

  public Boolean getAlertOnFailure() {
    return alertOnFailure;
  }


  public void setAlertOnFailure(Boolean alertOnFailure) {
    
    
    
    this.alertOnFailure = alertOnFailure;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddAuditDataSecurityRecurringTaskRequest instance itself
   */
  public AddAuditDataSecurityRecurringTaskRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddAuditDataSecurityRecurringTaskRequest addAuditDataSecurityRecurringTaskRequest = (AddAuditDataSecurityRecurringTaskRequest) o;
    return Objects.equals(this.taskName, addAuditDataSecurityRecurringTaskRequest.taskName) &&
        Objects.equals(this.description, addAuditDataSecurityRecurringTaskRequest.description) &&
        Objects.equals(this.schemas, addAuditDataSecurityRecurringTaskRequest.schemas) &&
        Objects.equals(this.baseOutputDirectory, addAuditDataSecurityRecurringTaskRequest.baseOutputDirectory) &&
        Objects.equals(this.dataSecurityAuditor, addAuditDataSecurityRecurringTaskRequest.dataSecurityAuditor) &&
        Objects.equals(this.backend, addAuditDataSecurityRecurringTaskRequest.backend) &&
        Objects.equals(this.includeFilter, addAuditDataSecurityRecurringTaskRequest.includeFilter) &&
        Objects.equals(this.retainPreviousReportCount, addAuditDataSecurityRecurringTaskRequest.retainPreviousReportCount) &&
        Objects.equals(this.retainPreviousReportAge, addAuditDataSecurityRecurringTaskRequest.retainPreviousReportAge) &&
        Objects.equals(this.cancelOnTaskDependencyFailure, addAuditDataSecurityRecurringTaskRequest.cancelOnTaskDependencyFailure) &&
        Objects.equals(this.emailOnStart, addAuditDataSecurityRecurringTaskRequest.emailOnStart) &&
        Objects.equals(this.emailOnSuccess, addAuditDataSecurityRecurringTaskRequest.emailOnSuccess) &&
        Objects.equals(this.emailOnFailure, addAuditDataSecurityRecurringTaskRequest.emailOnFailure) &&
        Objects.equals(this.alertOnStart, addAuditDataSecurityRecurringTaskRequest.alertOnStart) &&
        Objects.equals(this.alertOnSuccess, addAuditDataSecurityRecurringTaskRequest.alertOnSuccess) &&
        Objects.equals(this.alertOnFailure, addAuditDataSecurityRecurringTaskRequest.alertOnFailure)&&
        Objects.equals(this.additionalProperties, addAuditDataSecurityRecurringTaskRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskName, description, schemas, baseOutputDirectory, dataSecurityAuditor, backend, includeFilter, retainPreviousReportCount, retainPreviousReportAge, cancelOnTaskDependencyFailure, emailOnStart, emailOnSuccess, emailOnFailure, alertOnStart, alertOnSuccess, alertOnFailure, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddAuditDataSecurityRecurringTaskRequest {\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    baseOutputDirectory: ").append(toIndentedString(baseOutputDirectory)).append("\n");
    sb.append("    dataSecurityAuditor: ").append(toIndentedString(dataSecurityAuditor)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    includeFilter: ").append(toIndentedString(includeFilter)).append("\n");
    sb.append("    retainPreviousReportCount: ").append(toIndentedString(retainPreviousReportCount)).append("\n");
    sb.append("    retainPreviousReportAge: ").append(toIndentedString(retainPreviousReportAge)).append("\n");
    sb.append("    cancelOnTaskDependencyFailure: ").append(toIndentedString(cancelOnTaskDependencyFailure)).append("\n");
    sb.append("    emailOnStart: ").append(toIndentedString(emailOnStart)).append("\n");
    sb.append("    emailOnSuccess: ").append(toIndentedString(emailOnSuccess)).append("\n");
    sb.append("    emailOnFailure: ").append(toIndentedString(emailOnFailure)).append("\n");
    sb.append("    alertOnStart: ").append(toIndentedString(alertOnStart)).append("\n");
    sb.append("    alertOnSuccess: ").append(toIndentedString(alertOnSuccess)).append("\n");
    sb.append("    alertOnFailure: ").append(toIndentedString(alertOnFailure)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("taskName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("baseOutputDirectory");
    openapiFields.add("dataSecurityAuditor");
    openapiFields.add("backend");
    openapiFields.add("includeFilter");
    openapiFields.add("retainPreviousReportCount");
    openapiFields.add("retainPreviousReportAge");
    openapiFields.add("cancelOnTaskDependencyFailure");
    openapiFields.add("emailOnStart");
    openapiFields.add("emailOnSuccess");
    openapiFields.add("emailOnFailure");
    openapiFields.add("alertOnStart");
    openapiFields.add("alertOnSuccess");
    openapiFields.add("alertOnFailure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("taskName");
    openapiRequiredFields.add("schemas");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddAuditDataSecurityRecurringTaskRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddAuditDataSecurityRecurringTaskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddAuditDataSecurityRecurringTaskRequest is not found in the empty JSON string", AddAuditDataSecurityRecurringTaskRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddAuditDataSecurityRecurringTaskRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("taskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("baseOutputDirectory") != null && !jsonObj.get("baseOutputDirectory").isJsonNull()) && !jsonObj.get("baseOutputDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseOutputDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseOutputDirectory").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dataSecurityAuditor") != null && !jsonObj.get("dataSecurityAuditor").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSecurityAuditor` to be an array in the JSON string but got `%s`", jsonObj.get("dataSecurityAuditor").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("backend") != null && !jsonObj.get("backend").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `backend` to be an array in the JSON string but got `%s`", jsonObj.get("backend").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includeFilter") != null && !jsonObj.get("includeFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includeFilter` to be an array in the JSON string but got `%s`", jsonObj.get("includeFilter").toString()));
      }
      if ((jsonObj.get("retainPreviousReportAge") != null && !jsonObj.get("retainPreviousReportAge").isJsonNull()) && !jsonObj.get("retainPreviousReportAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retainPreviousReportAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retainPreviousReportAge").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnStart") != null && !jsonObj.get("emailOnStart").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnStart` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnStart").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnSuccess") != null && !jsonObj.get("emailOnSuccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnSuccess` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnSuccess").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnFailure") != null && !jsonObj.get("emailOnFailure").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnFailure` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnFailure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddAuditDataSecurityRecurringTaskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddAuditDataSecurityRecurringTaskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddAuditDataSecurityRecurringTaskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddAuditDataSecurityRecurringTaskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddAuditDataSecurityRecurringTaskRequest>() {
           @Override
           public void write(JsonWriter out, AddAuditDataSecurityRecurringTaskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddAuditDataSecurityRecurringTaskRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddAuditDataSecurityRecurringTaskRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddAuditDataSecurityRecurringTaskRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddAuditDataSecurityRecurringTaskRequest
  * @throws IOException if the JSON string is invalid with respect to AddAuditDataSecurityRecurringTaskRequest
  */
  public static AddAuditDataSecurityRecurringTaskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddAuditDataSecurityRecurringTaskRequest.class);
  }

 /**
  * Convert an instance of AddAuditDataSecurityRecurringTaskRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

