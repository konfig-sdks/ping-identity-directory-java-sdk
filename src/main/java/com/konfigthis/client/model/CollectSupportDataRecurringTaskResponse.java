/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumcollectSupportDataRecurringTaskSchemaUrn;
import com.konfigthis.client.model.EnumrecurringTaskSecurityLevelProp;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CollectSupportDataRecurringTaskResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CollectSupportDataRecurringTaskResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumcollectSupportDataRecurringTaskSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_DIRECTORY = "outputDirectory";
  @SerializedName(SERIALIZED_NAME_OUTPUT_DIRECTORY)
  private String outputDirectory;

  public static final String SERIALIZED_NAME_ENCRYPTION_PASSPHRASE_FILE = "encryptionPassphraseFile";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_PASSPHRASE_FILE)
  private String encryptionPassphraseFile;

  public static final String SERIALIZED_NAME_INCLUDE_EXPENSIVE_DATA = "includeExpensiveData";
  @SerializedName(SERIALIZED_NAME_INCLUDE_EXPENSIVE_DATA)
  private Boolean includeExpensiveData;

  public static final String SERIALIZED_NAME_INCLUDE_REPLICATION_STATE_DUMP = "includeReplicationStateDump";
  @SerializedName(SERIALIZED_NAME_INCLUDE_REPLICATION_STATE_DUMP)
  private Boolean includeReplicationStateDump;

  public static final String SERIALIZED_NAME_INCLUDE_BINARY_FILES = "includeBinaryFiles";
  @SerializedName(SERIALIZED_NAME_INCLUDE_BINARY_FILES)
  private Boolean includeBinaryFiles;

  public static final String SERIALIZED_NAME_INCLUDE_EXTENSION_SOURCE = "includeExtensionSource";
  @SerializedName(SERIALIZED_NAME_INCLUDE_EXTENSION_SOURCE)
  private Boolean includeExtensionSource;

  public static final String SERIALIZED_NAME_USE_SEQUENTIAL_MODE = "useSequentialMode";
  @SerializedName(SERIALIZED_NAME_USE_SEQUENTIAL_MODE)
  private Boolean useSequentialMode;

  public static final String SERIALIZED_NAME_SECURITY_LEVEL = "securityLevel";
  @SerializedName(SERIALIZED_NAME_SECURITY_LEVEL)
  private EnumrecurringTaskSecurityLevelProp securityLevel;

  public static final String SERIALIZED_NAME_JSTACK_COUNT = "jstackCount";
  @SerializedName(SERIALIZED_NAME_JSTACK_COUNT)
  private Integer jstackCount;

  public static final String SERIALIZED_NAME_REPORT_COUNT = "reportCount";
  @SerializedName(SERIALIZED_NAME_REPORT_COUNT)
  private Integer reportCount;

  public static final String SERIALIZED_NAME_REPORT_INTERVAL_SECONDS = "reportIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_REPORT_INTERVAL_SECONDS)
  private Integer reportIntervalSeconds;

  public static final String SERIALIZED_NAME_LOG_DURATION = "logDuration";
  @SerializedName(SERIALIZED_NAME_LOG_DURATION)
  private String logDuration;

  public static final String SERIALIZED_NAME_LOG_FILE_HEAD_COLLECTION_SIZE = "logFileHeadCollectionSize";
  @SerializedName(SERIALIZED_NAME_LOG_FILE_HEAD_COLLECTION_SIZE)
  private String logFileHeadCollectionSize;

  public static final String SERIALIZED_NAME_LOG_FILE_TAIL_COLLECTION_SIZE = "logFileTailCollectionSize";
  @SerializedName(SERIALIZED_NAME_LOG_FILE_TAIL_COLLECTION_SIZE)
  private String logFileTailCollectionSize;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_SUPPORT_DATA_ARCHIVE_COUNT = "retainPreviousSupportDataArchiveCount";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_SUPPORT_DATA_ARCHIVE_COUNT)
  private Integer retainPreviousSupportDataArchiveCount;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_SUPPORT_DATA_ARCHIVE_AGE = "retainPreviousSupportDataArchiveAge";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_SUPPORT_DATA_ARCHIVE_AGE)
  private String retainPreviousSupportDataArchiveAge;

  public static final String SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE = "cancelOnTaskDependencyFailure";
  @SerializedName(SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE)
  private Boolean cancelOnTaskDependencyFailure;

  public static final String SERIALIZED_NAME_EMAIL_ON_START = "emailOnStart";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_START)
  private List<String> emailOnStart = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_SUCCESS = "emailOnSuccess";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_SUCCESS)
  private List<String> emailOnSuccess = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_FAILURE = "emailOnFailure";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_FAILURE)
  private List<String> emailOnFailure = null;

  public static final String SERIALIZED_NAME_ALERT_ON_START = "alertOnStart";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_START)
  private Boolean alertOnStart;

  public static final String SERIALIZED_NAME_ALERT_ON_SUCCESS = "alertOnSuccess";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_SUCCESS)
  private Boolean alertOnSuccess;

  public static final String SERIALIZED_NAME_ALERT_ON_FAILURE = "alertOnFailure";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_FAILURE)
  private Boolean alertOnFailure;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public CollectSupportDataRecurringTaskResponse() {
  }

  public CollectSupportDataRecurringTaskResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Recurring Task
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Recurring Task")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public CollectSupportDataRecurringTaskResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Recurring Task
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Recurring Task")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CollectSupportDataRecurringTaskResponse schemas(List<EnumcollectSupportDataRecurringTaskSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public CollectSupportDataRecurringTaskResponse addSchemasItem(EnumcollectSupportDataRecurringTaskSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumcollectSupportDataRecurringTaskSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumcollectSupportDataRecurringTaskSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public CollectSupportDataRecurringTaskResponse outputDirectory(String outputDirectory) {
    
    
    
    
    this.outputDirectory = outputDirectory;
    return this;
  }

   /**
   * The directory in which the support data archive files will be placed. The path must be a directory, and that directory must already exist. Relative paths will be interpreted as relative to the server root.
   * @return outputDirectory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The directory in which the support data archive files will be placed. The path must be a directory, and that directory must already exist. Relative paths will be interpreted as relative to the server root.")

  public String getOutputDirectory() {
    return outputDirectory;
  }


  public void setOutputDirectory(String outputDirectory) {
    
    
    
    this.outputDirectory = outputDirectory;
  }


  public CollectSupportDataRecurringTaskResponse encryptionPassphraseFile(String encryptionPassphraseFile) {
    
    
    
    
    this.encryptionPassphraseFile = encryptionPassphraseFile;
    return this;
  }

   /**
   * The path to a file that contains the passphrase to encrypt the contents of the support data archive.
   * @return encryptionPassphraseFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to a file that contains the passphrase to encrypt the contents of the support data archive.")

  public String getEncryptionPassphraseFile() {
    return encryptionPassphraseFile;
  }


  public void setEncryptionPassphraseFile(String encryptionPassphraseFile) {
    
    
    
    this.encryptionPassphraseFile = encryptionPassphraseFile;
  }


  public CollectSupportDataRecurringTaskResponse includeExpensiveData(Boolean includeExpensiveData) {
    
    
    
    
    this.includeExpensiveData = includeExpensiveData;
    return this;
  }

   /**
   * Indicates whether the support data archive should include information that may be expensive to obtain, and that may temporarily affect the server&#39;s performance or responsiveness.
   * @return includeExpensiveData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the support data archive should include information that may be expensive to obtain, and that may temporarily affect the server's performance or responsiveness.")

  public Boolean getIncludeExpensiveData() {
    return includeExpensiveData;
  }


  public void setIncludeExpensiveData(Boolean includeExpensiveData) {
    
    
    
    this.includeExpensiveData = includeExpensiveData;
  }


  public CollectSupportDataRecurringTaskResponse includeReplicationStateDump(Boolean includeReplicationStateDump) {
    
    
    
    
    this.includeReplicationStateDump = includeReplicationStateDump;
    return this;
  }

   /**
   * Indicates whether the support data archive should include a replication state dump, which may be several megabytes in size.
   * @return includeReplicationStateDump
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the support data archive should include a replication state dump, which may be several megabytes in size.")

  public Boolean getIncludeReplicationStateDump() {
    return includeReplicationStateDump;
  }


  public void setIncludeReplicationStateDump(Boolean includeReplicationStateDump) {
    
    
    
    this.includeReplicationStateDump = includeReplicationStateDump;
  }


  public CollectSupportDataRecurringTaskResponse includeBinaryFiles(Boolean includeBinaryFiles) {
    
    
    
    
    this.includeBinaryFiles = includeBinaryFiles;
    return this;
  }

   /**
   * Indicates whether the support data archive should include binary files that may not have otherwise been included. Note that it may not be possible to obscure or redact sensitive information in binary files.
   * @return includeBinaryFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the support data archive should include binary files that may not have otherwise been included. Note that it may not be possible to obscure or redact sensitive information in binary files.")

  public Boolean getIncludeBinaryFiles() {
    return includeBinaryFiles;
  }


  public void setIncludeBinaryFiles(Boolean includeBinaryFiles) {
    
    
    
    this.includeBinaryFiles = includeBinaryFiles;
  }


  public CollectSupportDataRecurringTaskResponse includeExtensionSource(Boolean includeExtensionSource) {
    
    
    
    
    this.includeExtensionSource = includeExtensionSource;
    return this;
  }

   /**
   * Indicates whether the support data archive should include the source code (if available) for any third-party extensions that may be installed in the server.
   * @return includeExtensionSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the support data archive should include the source code (if available) for any third-party extensions that may be installed in the server.")

  public Boolean getIncludeExtensionSource() {
    return includeExtensionSource;
  }


  public void setIncludeExtensionSource(Boolean includeExtensionSource) {
    
    
    
    this.includeExtensionSource = includeExtensionSource;
  }


  public CollectSupportDataRecurringTaskResponse useSequentialMode(Boolean useSequentialMode) {
    
    
    
    
    this.useSequentialMode = useSequentialMode;
    return this;
  }

   /**
   * Indicates whether to capture support data information sequentially rather than in parallel. Capturing data in sequential mode may reduce the amount of memory that the tool requires to operate, at the cost of taking longer to run.
   * @return useSequentialMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to capture support data information sequentially rather than in parallel. Capturing data in sequential mode may reduce the amount of memory that the tool requires to operate, at the cost of taking longer to run.")

  public Boolean getUseSequentialMode() {
    return useSequentialMode;
  }


  public void setUseSequentialMode(Boolean useSequentialMode) {
    
    
    
    this.useSequentialMode = useSequentialMode;
  }


  public CollectSupportDataRecurringTaskResponse securityLevel(EnumrecurringTaskSecurityLevelProp securityLevel) {
    
    
    
    
    this.securityLevel = securityLevel;
    return this;
  }

   /**
   * Get securityLevel
   * @return securityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumrecurringTaskSecurityLevelProp getSecurityLevel() {
    return securityLevel;
  }


  public void setSecurityLevel(EnumrecurringTaskSecurityLevelProp securityLevel) {
    
    
    
    this.securityLevel = securityLevel;
  }


  public CollectSupportDataRecurringTaskResponse jstackCount(Integer jstackCount) {
    
    
    
    
    this.jstackCount = jstackCount;
    return this;
  }

   /**
   * The number of times to invoke the jstack utility to obtain a stack trace of all threads running in the JVM. A value of zero indicates that the jstack utility should not be invoked.
   * @return jstackCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of times to invoke the jstack utility to obtain a stack trace of all threads running in the JVM. A value of zero indicates that the jstack utility should not be invoked.")

  public Integer getJstackCount() {
    return jstackCount;
  }


  public void setJstackCount(Integer jstackCount) {
    
    
    
    this.jstackCount = jstackCount;
  }


  public CollectSupportDataRecurringTaskResponse reportCount(Integer reportCount) {
    
    
    
    
    this.reportCount = reportCount;
    return this;
  }

   /**
   * The number of intervals of data to collect from tools that use sample-based reporting, like vmstat, iostat, and mpstat. A value of zero indicates that these kinds of tools should not be used to collect any information.
   * @return reportCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of intervals of data to collect from tools that use sample-based reporting, like vmstat, iostat, and mpstat. A value of zero indicates that these kinds of tools should not be used to collect any information.")

  public Integer getReportCount() {
    return reportCount;
  }


  public void setReportCount(Integer reportCount) {
    
    
    
    this.reportCount = reportCount;
  }


  public CollectSupportDataRecurringTaskResponse reportIntervalSeconds(Integer reportIntervalSeconds) {
    
    
    
    
    this.reportIntervalSeconds = reportIntervalSeconds;
    return this;
  }

   /**
   * The duration (in seconds) between each interval of data to collect from tools that use sample-based reporting, like vmstat, iostat, and mpstat.
   * @return reportIntervalSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The duration (in seconds) between each interval of data to collect from tools that use sample-based reporting, like vmstat, iostat, and mpstat.")

  public Integer getReportIntervalSeconds() {
    return reportIntervalSeconds;
  }


  public void setReportIntervalSeconds(Integer reportIntervalSeconds) {
    
    
    
    this.reportIntervalSeconds = reportIntervalSeconds;
  }


  public CollectSupportDataRecurringTaskResponse logDuration(String logDuration) {
    
    
    
    
    this.logDuration = logDuration;
    return this;
  }

   /**
   * The maximum age (leading up to the time the collect-support-data tool was invoked) for log content to include in the support data archive.
   * @return logDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum age (leading up to the time the collect-support-data tool was invoked) for log content to include in the support data archive.")

  public String getLogDuration() {
    return logDuration;
  }


  public void setLogDuration(String logDuration) {
    
    
    
    this.logDuration = logDuration;
  }


  public CollectSupportDataRecurringTaskResponse logFileHeadCollectionSize(String logFileHeadCollectionSize) {
    
    
    
    
    this.logFileHeadCollectionSize = logFileHeadCollectionSize;
    return this;
  }

   /**
   * The amount of data to collect from the beginning of each log file included in the support data archive.
   * @return logFileHeadCollectionSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of data to collect from the beginning of each log file included in the support data archive.")

  public String getLogFileHeadCollectionSize() {
    return logFileHeadCollectionSize;
  }


  public void setLogFileHeadCollectionSize(String logFileHeadCollectionSize) {
    
    
    
    this.logFileHeadCollectionSize = logFileHeadCollectionSize;
  }


  public CollectSupportDataRecurringTaskResponse logFileTailCollectionSize(String logFileTailCollectionSize) {
    
    
    
    
    this.logFileTailCollectionSize = logFileTailCollectionSize;
    return this;
  }

   /**
   * The amount of data to collect from the end of each log file included in the support data archive.
   * @return logFileTailCollectionSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of data to collect from the end of each log file included in the support data archive.")

  public String getLogFileTailCollectionSize() {
    return logFileTailCollectionSize;
  }


  public void setLogFileTailCollectionSize(String logFileTailCollectionSize) {
    
    
    
    this.logFileTailCollectionSize = logFileTailCollectionSize;
  }


  public CollectSupportDataRecurringTaskResponse comment(String comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * An optional comment to include in a README file within the support data archive.
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional comment to include in a README file within the support data archive.")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    
    
    
    this.comment = comment;
  }


  public CollectSupportDataRecurringTaskResponse retainPreviousSupportDataArchiveCount(Integer retainPreviousSupportDataArchiveCount) {
    
    
    
    
    this.retainPreviousSupportDataArchiveCount = retainPreviousSupportDataArchiveCount;
    return this;
  }

   /**
   * The minimum number of previous support data archives that should be preserved after a new archive is generated.
   * @return retainPreviousSupportDataArchiveCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum number of previous support data archives that should be preserved after a new archive is generated.")

  public Integer getRetainPreviousSupportDataArchiveCount() {
    return retainPreviousSupportDataArchiveCount;
  }


  public void setRetainPreviousSupportDataArchiveCount(Integer retainPreviousSupportDataArchiveCount) {
    
    
    
    this.retainPreviousSupportDataArchiveCount = retainPreviousSupportDataArchiveCount;
  }


  public CollectSupportDataRecurringTaskResponse retainPreviousSupportDataArchiveAge(String retainPreviousSupportDataArchiveAge) {
    
    
    
    
    this.retainPreviousSupportDataArchiveAge = retainPreviousSupportDataArchiveAge;
    return this;
  }

   /**
   * The minimum age of previous support data archives that should be preserved after a new archive is generated.
   * @return retainPreviousSupportDataArchiveAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum age of previous support data archives that should be preserved after a new archive is generated.")

  public String getRetainPreviousSupportDataArchiveAge() {
    return retainPreviousSupportDataArchiveAge;
  }


  public void setRetainPreviousSupportDataArchiveAge(String retainPreviousSupportDataArchiveAge) {
    
    
    
    this.retainPreviousSupportDataArchiveAge = retainPreviousSupportDataArchiveAge;
  }


  public CollectSupportDataRecurringTaskResponse cancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
    return this;
  }

   /**
   * Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
   * @return cancelOnTaskDependencyFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).")

  public Boolean getCancelOnTaskDependencyFailure() {
    return cancelOnTaskDependencyFailure;
  }


  public void setCancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
  }


  public CollectSupportDataRecurringTaskResponse emailOnStart(List<String> emailOnStart) {
    
    
    
    
    this.emailOnStart = emailOnStart;
    return this;
  }

  public CollectSupportDataRecurringTaskResponse addEmailOnStartItem(String emailOnStartItem) {
    if (this.emailOnStart == null) {
      this.emailOnStart = new ArrayList<>();
    }
    this.emailOnStart.add(emailOnStartItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnStart() {
    return emailOnStart;
  }


  public void setEmailOnStart(List<String> emailOnStart) {
    
    
    
    this.emailOnStart = emailOnStart;
  }


  public CollectSupportDataRecurringTaskResponse emailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    
    this.emailOnSuccess = emailOnSuccess;
    return this;
  }

  public CollectSupportDataRecurringTaskResponse addEmailOnSuccessItem(String emailOnSuccessItem) {
    if (this.emailOnSuccess == null) {
      this.emailOnSuccess = new ArrayList<>();
    }
    this.emailOnSuccess.add(emailOnSuccessItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnSuccess() {
    return emailOnSuccess;
  }


  public void setEmailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    this.emailOnSuccess = emailOnSuccess;
  }


  public CollectSupportDataRecurringTaskResponse emailOnFailure(List<String> emailOnFailure) {
    
    
    
    
    this.emailOnFailure = emailOnFailure;
    return this;
  }

  public CollectSupportDataRecurringTaskResponse addEmailOnFailureItem(String emailOnFailureItem) {
    if (this.emailOnFailure == null) {
      this.emailOnFailure = new ArrayList<>();
    }
    this.emailOnFailure.add(emailOnFailureItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnFailure() {
    return emailOnFailure;
  }


  public void setEmailOnFailure(List<String> emailOnFailure) {
    
    
    
    this.emailOnFailure = emailOnFailure;
  }


  public CollectSupportDataRecurringTaskResponse alertOnStart(Boolean alertOnStart) {
    
    
    
    
    this.alertOnStart = alertOnStart;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
   * @return alertOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.")

  public Boolean getAlertOnStart() {
    return alertOnStart;
  }


  public void setAlertOnStart(Boolean alertOnStart) {
    
    
    
    this.alertOnStart = alertOnStart;
  }


  public CollectSupportDataRecurringTaskResponse alertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    
    this.alertOnSuccess = alertOnSuccess;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
   * @return alertOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.")

  public Boolean getAlertOnSuccess() {
    return alertOnSuccess;
  }


  public void setAlertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    this.alertOnSuccess = alertOnSuccess;
  }


  public CollectSupportDataRecurringTaskResponse alertOnFailure(Boolean alertOnFailure) {
    
    
    
    
    this.alertOnFailure = alertOnFailure;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
   * @return alertOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.")

  public Boolean getAlertOnFailure() {
    return alertOnFailure;
  }


  public void setAlertOnFailure(Boolean alertOnFailure) {
    
    
    
    this.alertOnFailure = alertOnFailure;
  }


  public CollectSupportDataRecurringTaskResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public CollectSupportDataRecurringTaskResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CollectSupportDataRecurringTaskResponse instance itself
   */
  public CollectSupportDataRecurringTaskResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectSupportDataRecurringTaskResponse collectSupportDataRecurringTaskResponse = (CollectSupportDataRecurringTaskResponse) o;
    return Objects.equals(this.id, collectSupportDataRecurringTaskResponse.id) &&
        Objects.equals(this.description, collectSupportDataRecurringTaskResponse.description) &&
        Objects.equals(this.schemas, collectSupportDataRecurringTaskResponse.schemas) &&
        Objects.equals(this.outputDirectory, collectSupportDataRecurringTaskResponse.outputDirectory) &&
        Objects.equals(this.encryptionPassphraseFile, collectSupportDataRecurringTaskResponse.encryptionPassphraseFile) &&
        Objects.equals(this.includeExpensiveData, collectSupportDataRecurringTaskResponse.includeExpensiveData) &&
        Objects.equals(this.includeReplicationStateDump, collectSupportDataRecurringTaskResponse.includeReplicationStateDump) &&
        Objects.equals(this.includeBinaryFiles, collectSupportDataRecurringTaskResponse.includeBinaryFiles) &&
        Objects.equals(this.includeExtensionSource, collectSupportDataRecurringTaskResponse.includeExtensionSource) &&
        Objects.equals(this.useSequentialMode, collectSupportDataRecurringTaskResponse.useSequentialMode) &&
        Objects.equals(this.securityLevel, collectSupportDataRecurringTaskResponse.securityLevel) &&
        Objects.equals(this.jstackCount, collectSupportDataRecurringTaskResponse.jstackCount) &&
        Objects.equals(this.reportCount, collectSupportDataRecurringTaskResponse.reportCount) &&
        Objects.equals(this.reportIntervalSeconds, collectSupportDataRecurringTaskResponse.reportIntervalSeconds) &&
        Objects.equals(this.logDuration, collectSupportDataRecurringTaskResponse.logDuration) &&
        Objects.equals(this.logFileHeadCollectionSize, collectSupportDataRecurringTaskResponse.logFileHeadCollectionSize) &&
        Objects.equals(this.logFileTailCollectionSize, collectSupportDataRecurringTaskResponse.logFileTailCollectionSize) &&
        Objects.equals(this.comment, collectSupportDataRecurringTaskResponse.comment) &&
        Objects.equals(this.retainPreviousSupportDataArchiveCount, collectSupportDataRecurringTaskResponse.retainPreviousSupportDataArchiveCount) &&
        Objects.equals(this.retainPreviousSupportDataArchiveAge, collectSupportDataRecurringTaskResponse.retainPreviousSupportDataArchiveAge) &&
        Objects.equals(this.cancelOnTaskDependencyFailure, collectSupportDataRecurringTaskResponse.cancelOnTaskDependencyFailure) &&
        Objects.equals(this.emailOnStart, collectSupportDataRecurringTaskResponse.emailOnStart) &&
        Objects.equals(this.emailOnSuccess, collectSupportDataRecurringTaskResponse.emailOnSuccess) &&
        Objects.equals(this.emailOnFailure, collectSupportDataRecurringTaskResponse.emailOnFailure) &&
        Objects.equals(this.alertOnStart, collectSupportDataRecurringTaskResponse.alertOnStart) &&
        Objects.equals(this.alertOnSuccess, collectSupportDataRecurringTaskResponse.alertOnSuccess) &&
        Objects.equals(this.alertOnFailure, collectSupportDataRecurringTaskResponse.alertOnFailure) &&
        Objects.equals(this.meta, collectSupportDataRecurringTaskResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, collectSupportDataRecurringTaskResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, collectSupportDataRecurringTaskResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, outputDirectory, encryptionPassphraseFile, includeExpensiveData, includeReplicationStateDump, includeBinaryFiles, includeExtensionSource, useSequentialMode, securityLevel, jstackCount, reportCount, reportIntervalSeconds, logDuration, logFileHeadCollectionSize, logFileTailCollectionSize, comment, retainPreviousSupportDataArchiveCount, retainPreviousSupportDataArchiveAge, cancelOnTaskDependencyFailure, emailOnStart, emailOnSuccess, emailOnFailure, alertOnStart, alertOnSuccess, alertOnFailure, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectSupportDataRecurringTaskResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    outputDirectory: ").append(toIndentedString(outputDirectory)).append("\n");
    sb.append("    encryptionPassphraseFile: ").append(toIndentedString(encryptionPassphraseFile)).append("\n");
    sb.append("    includeExpensiveData: ").append(toIndentedString(includeExpensiveData)).append("\n");
    sb.append("    includeReplicationStateDump: ").append(toIndentedString(includeReplicationStateDump)).append("\n");
    sb.append("    includeBinaryFiles: ").append(toIndentedString(includeBinaryFiles)).append("\n");
    sb.append("    includeExtensionSource: ").append(toIndentedString(includeExtensionSource)).append("\n");
    sb.append("    useSequentialMode: ").append(toIndentedString(useSequentialMode)).append("\n");
    sb.append("    securityLevel: ").append(toIndentedString(securityLevel)).append("\n");
    sb.append("    jstackCount: ").append(toIndentedString(jstackCount)).append("\n");
    sb.append("    reportCount: ").append(toIndentedString(reportCount)).append("\n");
    sb.append("    reportIntervalSeconds: ").append(toIndentedString(reportIntervalSeconds)).append("\n");
    sb.append("    logDuration: ").append(toIndentedString(logDuration)).append("\n");
    sb.append("    logFileHeadCollectionSize: ").append(toIndentedString(logFileHeadCollectionSize)).append("\n");
    sb.append("    logFileTailCollectionSize: ").append(toIndentedString(logFileTailCollectionSize)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    retainPreviousSupportDataArchiveCount: ").append(toIndentedString(retainPreviousSupportDataArchiveCount)).append("\n");
    sb.append("    retainPreviousSupportDataArchiveAge: ").append(toIndentedString(retainPreviousSupportDataArchiveAge)).append("\n");
    sb.append("    cancelOnTaskDependencyFailure: ").append(toIndentedString(cancelOnTaskDependencyFailure)).append("\n");
    sb.append("    emailOnStart: ").append(toIndentedString(emailOnStart)).append("\n");
    sb.append("    emailOnSuccess: ").append(toIndentedString(emailOnSuccess)).append("\n");
    sb.append("    emailOnFailure: ").append(toIndentedString(emailOnFailure)).append("\n");
    sb.append("    alertOnStart: ").append(toIndentedString(alertOnStart)).append("\n");
    sb.append("    alertOnSuccess: ").append(toIndentedString(alertOnSuccess)).append("\n");
    sb.append("    alertOnFailure: ").append(toIndentedString(alertOnFailure)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("outputDirectory");
    openapiFields.add("encryptionPassphraseFile");
    openapiFields.add("includeExpensiveData");
    openapiFields.add("includeReplicationStateDump");
    openapiFields.add("includeBinaryFiles");
    openapiFields.add("includeExtensionSource");
    openapiFields.add("useSequentialMode");
    openapiFields.add("securityLevel");
    openapiFields.add("jstackCount");
    openapiFields.add("reportCount");
    openapiFields.add("reportIntervalSeconds");
    openapiFields.add("logDuration");
    openapiFields.add("logFileHeadCollectionSize");
    openapiFields.add("logFileTailCollectionSize");
    openapiFields.add("comment");
    openapiFields.add("retainPreviousSupportDataArchiveCount");
    openapiFields.add("retainPreviousSupportDataArchiveAge");
    openapiFields.add("cancelOnTaskDependencyFailure");
    openapiFields.add("emailOnStart");
    openapiFields.add("emailOnSuccess");
    openapiFields.add("emailOnFailure");
    openapiFields.add("alertOnStart");
    openapiFields.add("alertOnSuccess");
    openapiFields.add("alertOnFailure");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("outputDirectory");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CollectSupportDataRecurringTaskResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CollectSupportDataRecurringTaskResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectSupportDataRecurringTaskResponse is not found in the empty JSON string", CollectSupportDataRecurringTaskResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CollectSupportDataRecurringTaskResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("outputDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputDirectory").toString()));
      }
      if ((jsonObj.get("encryptionPassphraseFile") != null && !jsonObj.get("encryptionPassphraseFile").isJsonNull()) && !jsonObj.get("encryptionPassphraseFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionPassphraseFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionPassphraseFile").toString()));
      }
      if ((jsonObj.get("logDuration") != null && !jsonObj.get("logDuration").isJsonNull()) && !jsonObj.get("logDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logDuration").toString()));
      }
      if ((jsonObj.get("logFileHeadCollectionSize") != null && !jsonObj.get("logFileHeadCollectionSize").isJsonNull()) && !jsonObj.get("logFileHeadCollectionSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFileHeadCollectionSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFileHeadCollectionSize").toString()));
      }
      if ((jsonObj.get("logFileTailCollectionSize") != null && !jsonObj.get("logFileTailCollectionSize").isJsonNull()) && !jsonObj.get("logFileTailCollectionSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFileTailCollectionSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFileTailCollectionSize").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("retainPreviousSupportDataArchiveAge") != null && !jsonObj.get("retainPreviousSupportDataArchiveAge").isJsonNull()) && !jsonObj.get("retainPreviousSupportDataArchiveAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retainPreviousSupportDataArchiveAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retainPreviousSupportDataArchiveAge").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnStart") != null && !jsonObj.get("emailOnStart").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnStart` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnStart").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnSuccess") != null && !jsonObj.get("emailOnSuccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnSuccess` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnSuccess").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnFailure") != null && !jsonObj.get("emailOnFailure").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnFailure` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnFailure").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectSupportDataRecurringTaskResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectSupportDataRecurringTaskResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectSupportDataRecurringTaskResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectSupportDataRecurringTaskResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectSupportDataRecurringTaskResponse>() {
           @Override
           public void write(JsonWriter out, CollectSupportDataRecurringTaskResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectSupportDataRecurringTaskResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CollectSupportDataRecurringTaskResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CollectSupportDataRecurringTaskResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CollectSupportDataRecurringTaskResponse
  * @throws IOException if the JSON string is invalid with respect to CollectSupportDataRecurringTaskResponse
  */
  public static CollectSupportDataRecurringTaskResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectSupportDataRecurringTaskResponse.class);
  }

 /**
  * Convert an instance of CollectSupportDataRecurringTaskResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

