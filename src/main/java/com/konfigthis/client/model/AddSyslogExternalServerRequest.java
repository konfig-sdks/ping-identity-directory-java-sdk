/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumexternalServerTransportMechanismProp;
import com.konfigthis.client.model.EnumsyslogExternalServerSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddSyslogExternalServerRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddSyslogExternalServerRequest {
  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumsyslogExternalServerSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVER_HOST_NAME = "serverHostName";
  @SerializedName(SERIALIZED_NAME_SERVER_HOST_NAME)
  private String serverHostName;

  public static final String SERIALIZED_NAME_SERVER_PORT = "serverPort";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public static final String SERIALIZED_NAME_TRANSPORT_MECHANISM = "transportMechanism";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_MECHANISM)
  private EnumexternalServerTransportMechanismProp transportMechanism;

  public static final String SERIALIZED_NAME_CONNECT_TIMEOUT = "connectTimeout";
  @SerializedName(SERIALIZED_NAME_CONNECT_TIMEOUT)
  private String connectTimeout;

  public static final String SERIALIZED_NAME_MAX_CONNECTION_AGE = "maxConnectionAge";
  @SerializedName(SERIALIZED_NAME_MAX_CONNECTION_AGE)
  private String maxConnectionAge;

  public static final String SERIALIZED_NAME_TRUST_MANAGER_PROVIDER = "trustManagerProvider";
  @SerializedName(SERIALIZED_NAME_TRUST_MANAGER_PROVIDER)
  private String trustManagerProvider;

  public AddSyslogExternalServerRequest() {
  }

  public AddSyslogExternalServerRequest serverName(String serverName) {
    
    
    
    
    this.serverName = serverName;
    return this;
  }

   /**
   * Name of the new External Server
   * @return serverName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new External Server")

  public String getServerName() {
    return serverName;
  }


  public void setServerName(String serverName) {
    
    
    
    this.serverName = serverName;
  }


  public AddSyslogExternalServerRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this External Server
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this External Server")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddSyslogExternalServerRequest schemas(List<EnumsyslogExternalServerSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddSyslogExternalServerRequest addSchemasItem(EnumsyslogExternalServerSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumsyslogExternalServerSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumsyslogExternalServerSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddSyslogExternalServerRequest serverHostName(String serverHostName) {
    
    
    
    
    this.serverHostName = serverHostName;
    return this;
  }

   /**
   * The address of the syslog server.
   * @return serverHostName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The address of the syslog server.")

  public String getServerHostName() {
    return serverHostName;
  }


  public void setServerHostName(String serverHostName) {
    
    
    
    this.serverHostName = serverHostName;
  }


  public AddSyslogExternalServerRequest serverPort(Integer serverPort) {
    
    
    
    
    this.serverPort = serverPort;
    return this;
  }

   /**
   * The port on which the syslog server accepts connections.
   * @return serverPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The port on which the syslog server accepts connections.")

  public Integer getServerPort() {
    return serverPort;
  }


  public void setServerPort(Integer serverPort) {
    
    
    
    this.serverPort = serverPort;
  }


  public AddSyslogExternalServerRequest transportMechanism(EnumexternalServerTransportMechanismProp transportMechanism) {
    
    
    
    
    this.transportMechanism = transportMechanism;
    return this;
  }

   /**
   * Get transportMechanism
   * @return transportMechanism
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumexternalServerTransportMechanismProp getTransportMechanism() {
    return transportMechanism;
  }


  public void setTransportMechanism(EnumexternalServerTransportMechanismProp transportMechanism) {
    
    
    
    this.transportMechanism = transportMechanism;
  }


  public AddSyslogExternalServerRequest connectTimeout(String connectTimeout) {
    
    
    
    
    this.connectTimeout = connectTimeout;
    return this;
  }

   /**
   * Specifies the maximum length of time to wait for a connection to be established before giving up and considering the server unavailable. This will only be used when communicating with the syslog server over TCP (with or without TLS encryption).
   * @return connectTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time to wait for a connection to be established before giving up and considering the server unavailable. This will only be used when communicating with the syslog server over TCP (with or without TLS encryption).")

  public String getConnectTimeout() {
    return connectTimeout;
  }


  public void setConnectTimeout(String connectTimeout) {
    
    
    
    this.connectTimeout = connectTimeout;
  }


  public AddSyslogExternalServerRequest maxConnectionAge(String maxConnectionAge) {
    
    
    
    
    this.maxConnectionAge = maxConnectionAge;
    return this;
  }

   /**
   * The maximum length of time that TCP connections should remain established. This will be ignored for UDP-based connections. A zero duration indicates that no maximum age will be imposed.
   * @return maxConnectionAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum length of time that TCP connections should remain established. This will be ignored for UDP-based connections. A zero duration indicates that no maximum age will be imposed.")

  public String getMaxConnectionAge() {
    return maxConnectionAge;
  }


  public void setMaxConnectionAge(String maxConnectionAge) {
    
    
    
    this.maxConnectionAge = maxConnectionAge;
  }


  public AddSyslogExternalServerRequest trustManagerProvider(String trustManagerProvider) {
    
    
    
    
    this.trustManagerProvider = trustManagerProvider;
    return this;
  }

   /**
   * A trust manager provider that will be used to determine whether to trust the certificate chain presented by the syslog server when communication is encrypted with TLS. This property will be ignored when not using TLS encryption.
   * @return trustManagerProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A trust manager provider that will be used to determine whether to trust the certificate chain presented by the syslog server when communication is encrypted with TLS. This property will be ignored when not using TLS encryption.")

  public String getTrustManagerProvider() {
    return trustManagerProvider;
  }


  public void setTrustManagerProvider(String trustManagerProvider) {
    
    
    
    this.trustManagerProvider = trustManagerProvider;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddSyslogExternalServerRequest instance itself
   */
  public AddSyslogExternalServerRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddSyslogExternalServerRequest addSyslogExternalServerRequest = (AddSyslogExternalServerRequest) o;
    return Objects.equals(this.serverName, addSyslogExternalServerRequest.serverName) &&
        Objects.equals(this.description, addSyslogExternalServerRequest.description) &&
        Objects.equals(this.schemas, addSyslogExternalServerRequest.schemas) &&
        Objects.equals(this.serverHostName, addSyslogExternalServerRequest.serverHostName) &&
        Objects.equals(this.serverPort, addSyslogExternalServerRequest.serverPort) &&
        Objects.equals(this.transportMechanism, addSyslogExternalServerRequest.transportMechanism) &&
        Objects.equals(this.connectTimeout, addSyslogExternalServerRequest.connectTimeout) &&
        Objects.equals(this.maxConnectionAge, addSyslogExternalServerRequest.maxConnectionAge) &&
        Objects.equals(this.trustManagerProvider, addSyslogExternalServerRequest.trustManagerProvider)&&
        Objects.equals(this.additionalProperties, addSyslogExternalServerRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverName, description, schemas, serverHostName, serverPort, transportMechanism, connectTimeout, maxConnectionAge, trustManagerProvider, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddSyslogExternalServerRequest {\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    serverHostName: ").append(toIndentedString(serverHostName)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    transportMechanism: ").append(toIndentedString(transportMechanism)).append("\n");
    sb.append("    connectTimeout: ").append(toIndentedString(connectTimeout)).append("\n");
    sb.append("    maxConnectionAge: ").append(toIndentedString(maxConnectionAge)).append("\n");
    sb.append("    trustManagerProvider: ").append(toIndentedString(trustManagerProvider)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("serverName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("serverHostName");
    openapiFields.add("serverPort");
    openapiFields.add("transportMechanism");
    openapiFields.add("connectTimeout");
    openapiFields.add("maxConnectionAge");
    openapiFields.add("trustManagerProvider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("serverName");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("serverHostName");
    openapiRequiredFields.add("transportMechanism");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddSyslogExternalServerRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddSyslogExternalServerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddSyslogExternalServerRequest is not found in the empty JSON string", AddSyslogExternalServerRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddSyslogExternalServerRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("serverHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverHostName").toString()));
      }
      if ((jsonObj.get("connectTimeout") != null && !jsonObj.get("connectTimeout").isJsonNull()) && !jsonObj.get("connectTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectTimeout").toString()));
      }
      if ((jsonObj.get("maxConnectionAge") != null && !jsonObj.get("maxConnectionAge").isJsonNull()) && !jsonObj.get("maxConnectionAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxConnectionAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxConnectionAge").toString()));
      }
      if ((jsonObj.get("trustManagerProvider") != null && !jsonObj.get("trustManagerProvider").isJsonNull()) && !jsonObj.get("trustManagerProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustManagerProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustManagerProvider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddSyslogExternalServerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddSyslogExternalServerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddSyslogExternalServerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddSyslogExternalServerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddSyslogExternalServerRequest>() {
           @Override
           public void write(JsonWriter out, AddSyslogExternalServerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddSyslogExternalServerRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddSyslogExternalServerRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddSyslogExternalServerRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddSyslogExternalServerRequest
  * @throws IOException if the JSON string is invalid with respect to AddSyslogExternalServerRequest
  */
  public static AddSyslogExternalServerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddSyslogExternalServerRequest.class);
  }

 /**
  * Convert an instance of AddSyslogExternalServerRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

