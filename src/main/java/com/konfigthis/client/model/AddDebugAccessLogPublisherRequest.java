/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumdebugAccessLogPublisherSchemaUrn;
import com.konfigthis.client.model.EnumlogPublisherCompressionMechanismProp;
import com.konfigthis.client.model.EnumlogPublisherLoggingErrorBehaviorProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddDebugAccessLogPublisherRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddDebugAccessLogPublisherRequest {
  public static final String SERIALIZED_NAME_PUBLISHER_NAME = "publisherName";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_NAME)
  private String publisherName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumdebugAccessLogPublisherSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPRESS_REPLICATION_OPERATIONS = "suppressReplicationOperations";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_REPLICATION_OPERATIONS)
  private Boolean suppressReplicationOperations;

  public static final String SERIALIZED_NAME_LOG_SECURITY_NEGOTIATION = "logSecurityNegotiation";
  @SerializedName(SERIALIZED_NAME_LOG_SECURITY_NEGOTIATION)
  private Boolean logSecurityNegotiation;

  public static final String SERIALIZED_NAME_LOG_ASSURANCE_COMPLETED = "logAssuranceCompleted";
  @SerializedName(SERIALIZED_NAME_LOG_ASSURANCE_COMPLETED)
  private Boolean logAssuranceCompleted;

  public static final String SERIALIZED_NAME_LOG_SEARCH_ENTRIES = "logSearchEntries";
  @SerializedName(SERIALIZED_NAME_LOG_SEARCH_ENTRIES)
  private Boolean logSearchEntries;

  public static final String SERIALIZED_NAME_LOG_SEARCH_REFERENCES = "logSearchReferences";
  @SerializedName(SERIALIZED_NAME_LOG_SEARCH_REFERENCES)
  private Boolean logSearchReferences;

  public static final String SERIALIZED_NAME_LOG_FILE = "logFile";
  @SerializedName(SERIALIZED_NAME_LOG_FILE)
  private String logFile;

  public static final String SERIALIZED_NAME_LOG_FILE_PERMISSIONS = "logFilePermissions";
  @SerializedName(SERIALIZED_NAME_LOG_FILE_PERMISSIONS)
  private String logFilePermissions;

  public static final String SERIALIZED_NAME_ROTATION_POLICY = "rotationPolicy";
  @SerializedName(SERIALIZED_NAME_ROTATION_POLICY)
  private List<String> rotationPolicy = null;

  public static final String SERIALIZED_NAME_ROTATION_LISTENER = "rotationListener";
  @SerializedName(SERIALIZED_NAME_ROTATION_LISTENER)
  private List<String> rotationListener = null;

  public static final String SERIALIZED_NAME_RETENTION_POLICY = "retentionPolicy";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY)
  private List<String> retentionPolicy = null;

  public static final String SERIALIZED_NAME_COMPRESSION_MECHANISM = "compressionMechanism";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_MECHANISM)
  private EnumlogPublisherCompressionMechanismProp compressionMechanism;

  public static final String SERIALIZED_NAME_SIGN_LOG = "signLog";
  @SerializedName(SERIALIZED_NAME_SIGN_LOG)
  private Boolean signLog;

  public static final String SERIALIZED_NAME_ENCRYPT_LOG = "encryptLog";
  @SerializedName(SERIALIZED_NAME_ENCRYPT_LOG)
  private Boolean encryptLog;

  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS_DEFINITION_I_D = "encryptionSettingsDefinitionID";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS_DEFINITION_I_D)
  private String encryptionSettingsDefinitionID;

  public static final String SERIALIZED_NAME_APPEND = "append";
  @SerializedName(SERIALIZED_NAME_APPEND)
  private Boolean append;

  public static final String SERIALIZED_NAME_OBSCURE_SENSITIVE_CONTENT = "obscureSensitiveContent";
  @SerializedName(SERIALIZED_NAME_OBSCURE_SENSITIVE_CONTENT)
  private Boolean obscureSensitiveContent;

  public static final String SERIALIZED_NAME_OBSCURE_ATTRIBUTE = "obscureAttribute";
  @SerializedName(SERIALIZED_NAME_OBSCURE_ATTRIBUTE)
  private List<String> obscureAttribute = null;

  public static final String SERIALIZED_NAME_DEBUG_A_C_I_ENABLED = "debugACIEnabled";
  @SerializedName(SERIALIZED_NAME_DEBUG_A_C_I_ENABLED)
  private Boolean debugACIEnabled;

  public static final String SERIALIZED_NAME_ASYNCHRONOUS = "asynchronous";
  @SerializedName(SERIALIZED_NAME_ASYNCHRONOUS)
  private Boolean asynchronous;

  public static final String SERIALIZED_NAME_AUTO_FLUSH = "autoFlush";
  @SerializedName(SERIALIZED_NAME_AUTO_FLUSH)
  private Boolean autoFlush;

  public static final String SERIALIZED_NAME_BUFFER_SIZE = "bufferSize";
  @SerializedName(SERIALIZED_NAME_BUFFER_SIZE)
  private String bufferSize;

  public static final String SERIALIZED_NAME_QUEUE_SIZE = "queueSize";
  @SerializedName(SERIALIZED_NAME_QUEUE_SIZE)
  private Integer queueSize;

  public static final String SERIALIZED_NAME_TIME_INTERVAL = "timeInterval";
  @SerializedName(SERIALIZED_NAME_TIME_INTERVAL)
  private String timeInterval;

  public static final String SERIALIZED_NAME_LOG_CONNECTS = "logConnects";
  @SerializedName(SERIALIZED_NAME_LOG_CONNECTS)
  private Boolean logConnects;

  public static final String SERIALIZED_NAME_LOG_DISCONNECTS = "logDisconnects";
  @SerializedName(SERIALIZED_NAME_LOG_DISCONNECTS)
  private Boolean logDisconnects;

  public static final String SERIALIZED_NAME_LOG_CLIENT_CERTIFICATES = "logClientCertificates";
  @SerializedName(SERIALIZED_NAME_LOG_CLIENT_CERTIFICATES)
  private Boolean logClientCertificates;

  public static final String SERIALIZED_NAME_LOG_REQUESTS = "logRequests";
  @SerializedName(SERIALIZED_NAME_LOG_REQUESTS)
  private Boolean logRequests;

  public static final String SERIALIZED_NAME_LOG_RESULTS = "logResults";
  @SerializedName(SERIALIZED_NAME_LOG_RESULTS)
  private Boolean logResults;

  public static final String SERIALIZED_NAME_LOG_INTERMEDIATE_RESPONSES = "logIntermediateResponses";
  @SerializedName(SERIALIZED_NAME_LOG_INTERMEDIATE_RESPONSES)
  private Boolean logIntermediateResponses;

  public static final String SERIALIZED_NAME_SUPPRESS_INTERNAL_OPERATIONS = "suppressInternalOperations";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_INTERNAL_OPERATIONS)
  private Boolean suppressInternalOperations;

  public static final String SERIALIZED_NAME_CORRELATE_REQUESTS_AND_RESULTS = "correlateRequestsAndResults";
  @SerializedName(SERIALIZED_NAME_CORRELATE_REQUESTS_AND_RESULTS)
  private Boolean correlateRequestsAndResults;

  public static final String SERIALIZED_NAME_CONNECTION_CRITERIA = "connectionCriteria";
  @SerializedName(SERIALIZED_NAME_CONNECTION_CRITERIA)
  private String connectionCriteria;

  public static final String SERIALIZED_NAME_REQUEST_CRITERIA = "requestCriteria";
  @SerializedName(SERIALIZED_NAME_REQUEST_CRITERIA)
  private String requestCriteria;

  public static final String SERIALIZED_NAME_RESULT_CRITERIA = "resultCriteria";
  @SerializedName(SERIALIZED_NAME_RESULT_CRITERIA)
  private String resultCriteria;

  public static final String SERIALIZED_NAME_SEARCH_ENTRY_CRITERIA = "searchEntryCriteria";
  @SerializedName(SERIALIZED_NAME_SEARCH_ENTRY_CRITERIA)
  private String searchEntryCriteria;

  public static final String SERIALIZED_NAME_SEARCH_REFERENCE_CRITERIA = "searchReferenceCriteria";
  @SerializedName(SERIALIZED_NAME_SEARCH_REFERENCE_CRITERIA)
  private String searchReferenceCriteria;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR = "loggingErrorBehavior";
  @SerializedName(SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR)
  private EnumlogPublisherLoggingErrorBehaviorProp loggingErrorBehavior;

  public AddDebugAccessLogPublisherRequest() {
  }

  public AddDebugAccessLogPublisherRequest publisherName(String publisherName) {
    
    
    
    
    this.publisherName = publisherName;
    return this;
  }

   /**
   * Name of the new Log Publisher
   * @return publisherName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Log Publisher")

  public String getPublisherName() {
    return publisherName;
  }


  public void setPublisherName(String publisherName) {
    
    
    
    this.publisherName = publisherName;
  }


  public AddDebugAccessLogPublisherRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Log Publisher
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Log Publisher")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddDebugAccessLogPublisherRequest schemas(List<EnumdebugAccessLogPublisherSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddDebugAccessLogPublisherRequest addSchemasItem(EnumdebugAccessLogPublisherSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumdebugAccessLogPublisherSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumdebugAccessLogPublisherSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddDebugAccessLogPublisherRequest suppressReplicationOperations(Boolean suppressReplicationOperations) {
    
    
    
    
    this.suppressReplicationOperations = suppressReplicationOperations;
    return this;
  }

   /**
   * Indicates whether access messages that are generated by replication operations should be suppressed.
   * @return suppressReplicationOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether access messages that are generated by replication operations should be suppressed.")

  public Boolean getSuppressReplicationOperations() {
    return suppressReplicationOperations;
  }


  public void setSuppressReplicationOperations(Boolean suppressReplicationOperations) {
    
    
    
    this.suppressReplicationOperations = suppressReplicationOperations;
  }


  public AddDebugAccessLogPublisherRequest logSecurityNegotiation(Boolean logSecurityNegotiation) {
    
    
    
    
    this.logSecurityNegotiation = logSecurityNegotiation;
    return this;
  }

   /**
   * Indicates whether to log information about the result of any security negotiation (e.g., SSL handshake) processing that has been performed.
   * @return logSecurityNegotiation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about the result of any security negotiation (e.g., SSL handshake) processing that has been performed.")

  public Boolean getLogSecurityNegotiation() {
    return logSecurityNegotiation;
  }


  public void setLogSecurityNegotiation(Boolean logSecurityNegotiation) {
    
    
    
    this.logSecurityNegotiation = logSecurityNegotiation;
  }


  public AddDebugAccessLogPublisherRequest logAssuranceCompleted(Boolean logAssuranceCompleted) {
    
    
    
    
    this.logAssuranceCompleted = logAssuranceCompleted;
    return this;
  }

   /**
   * Indicates whether to log information about the result of replication assurance processing.
   * @return logAssuranceCompleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about the result of replication assurance processing.")

  public Boolean getLogAssuranceCompleted() {
    return logAssuranceCompleted;
  }


  public void setLogAssuranceCompleted(Boolean logAssuranceCompleted) {
    
    
    
    this.logAssuranceCompleted = logAssuranceCompleted;
  }


  public AddDebugAccessLogPublisherRequest logSearchEntries(Boolean logSearchEntries) {
    
    
    
    
    this.logSearchEntries = logSearchEntries;
    return this;
  }

   /**
   * Indicates whether to log information about search result entries sent to the client.
   * @return logSearchEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about search result entries sent to the client.")

  public Boolean getLogSearchEntries() {
    return logSearchEntries;
  }


  public void setLogSearchEntries(Boolean logSearchEntries) {
    
    
    
    this.logSearchEntries = logSearchEntries;
  }


  public AddDebugAccessLogPublisherRequest logSearchReferences(Boolean logSearchReferences) {
    
    
    
    
    this.logSearchReferences = logSearchReferences;
    return this;
  }

   /**
   * Indicates whether to log information about search result references sent to the client.
   * @return logSearchReferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about search result references sent to the client.")

  public Boolean getLogSearchReferences() {
    return logSearchReferences;
  }


  public void setLogSearchReferences(Boolean logSearchReferences) {
    
    
    
    this.logSearchReferences = logSearchReferences;
  }


  public AddDebugAccessLogPublisherRequest logFile(String logFile) {
    
    
    
    
    this.logFile = logFile;
    return this;
  }

   /**
   * The file name to use for the log files generated by the Debug Access Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.
   * @return logFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The file name to use for the log files generated by the Debug Access Log Publisher. The path to the file can be specified either as relative to the server root or as an absolute path.")

  public String getLogFile() {
    return logFile;
  }


  public void setLogFile(String logFile) {
    
    
    
    this.logFile = logFile;
  }


  public AddDebugAccessLogPublisherRequest logFilePermissions(String logFilePermissions) {
    
    
    
    
    this.logFilePermissions = logFilePermissions;
    return this;
  }

   /**
   * The UNIX permissions of the log files created by this Debug Access Log Publisher.
   * @return logFilePermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The UNIX permissions of the log files created by this Debug Access Log Publisher.")

  public String getLogFilePermissions() {
    return logFilePermissions;
  }


  public void setLogFilePermissions(String logFilePermissions) {
    
    
    
    this.logFilePermissions = logFilePermissions;
  }


  public AddDebugAccessLogPublisherRequest rotationPolicy(List<String> rotationPolicy) {
    
    
    
    
    this.rotationPolicy = rotationPolicy;
    return this;
  }

  public AddDebugAccessLogPublisherRequest addRotationPolicyItem(String rotationPolicyItem) {
    if (this.rotationPolicy == null) {
      this.rotationPolicy = new ArrayList<>();
    }
    this.rotationPolicy.add(rotationPolicyItem);
    return this;
  }

   /**
   * The rotation policy to use for the Debug Access Log Publisher .
   * @return rotationPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The rotation policy to use for the Debug Access Log Publisher .")

  public List<String> getRotationPolicy() {
    return rotationPolicy;
  }


  public void setRotationPolicy(List<String> rotationPolicy) {
    
    
    
    this.rotationPolicy = rotationPolicy;
  }


  public AddDebugAccessLogPublisherRequest rotationListener(List<String> rotationListener) {
    
    
    
    
    this.rotationListener = rotationListener;
    return this;
  }

  public AddDebugAccessLogPublisherRequest addRotationListenerItem(String rotationListenerItem) {
    if (this.rotationListener == null) {
      this.rotationListener = new ArrayList<>();
    }
    this.rotationListener.add(rotationListenerItem);
    return this;
  }

   /**
   * A listener that should be notified whenever a log file is rotated out of service.
   * @return rotationListener
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A listener that should be notified whenever a log file is rotated out of service.")

  public List<String> getRotationListener() {
    return rotationListener;
  }


  public void setRotationListener(List<String> rotationListener) {
    
    
    
    this.rotationListener = rotationListener;
  }


  public AddDebugAccessLogPublisherRequest retentionPolicy(List<String> retentionPolicy) {
    
    
    
    
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  public AddDebugAccessLogPublisherRequest addRetentionPolicyItem(String retentionPolicyItem) {
    if (this.retentionPolicy == null) {
      this.retentionPolicy = new ArrayList<>();
    }
    this.retentionPolicy.add(retentionPolicyItem);
    return this;
  }

   /**
   * The retention policy to use for the Debug Access Log Publisher .
   * @return retentionPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The retention policy to use for the Debug Access Log Publisher .")

  public List<String> getRetentionPolicy() {
    return retentionPolicy;
  }


  public void setRetentionPolicy(List<String> retentionPolicy) {
    
    
    
    this.retentionPolicy = retentionPolicy;
  }


  public AddDebugAccessLogPublisherRequest compressionMechanism(EnumlogPublisherCompressionMechanismProp compressionMechanism) {
    
    
    
    
    this.compressionMechanism = compressionMechanism;
    return this;
  }

   /**
   * Get compressionMechanism
   * @return compressionMechanism
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumlogPublisherCompressionMechanismProp getCompressionMechanism() {
    return compressionMechanism;
  }


  public void setCompressionMechanism(EnumlogPublisherCompressionMechanismProp compressionMechanism) {
    
    
    
    this.compressionMechanism = compressionMechanism;
  }


  public AddDebugAccessLogPublisherRequest signLog(Boolean signLog) {
    
    
    
    
    this.signLog = signLog;
    return this;
  }

   /**
   * Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.
   * @return signLog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the log should be cryptographically signed so that the log content cannot be altered in an undetectable manner.")

  public Boolean getSignLog() {
    return signLog;
  }


  public void setSignLog(Boolean signLog) {
    
    
    
    this.signLog = signLog;
  }


  public AddDebugAccessLogPublisherRequest encryptLog(Boolean encryptLog) {
    
    
    
    
    this.encryptLog = encryptLog;
    return this;
  }

   /**
   * Indicates whether log files should be encrypted so that their content is not available to unauthorized users.
   * @return encryptLog
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether log files should be encrypted so that their content is not available to unauthorized users.")

  public Boolean getEncryptLog() {
    return encryptLog;
  }


  public void setEncryptLog(Boolean encryptLog) {
    
    
    
    this.encryptLog = encryptLog;
  }


  public AddDebugAccessLogPublisherRequest encryptionSettingsDefinitionID(String encryptionSettingsDefinitionID) {
    
    
    
    
    this.encryptionSettingsDefinitionID = encryptionSettingsDefinitionID;
    return this;
  }

   /**
   * Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server&#39;s preferred encryption settings definition will be used. The \&quot;encryption-settings list\&quot; command can be used to obtain a list of the encryption settings definitions available in the server.
   * @return encryptionSettingsDefinitionID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the ID of the encryption settings definition that should be used to encrypt the data. If this is not provided, the server's preferred encryption settings definition will be used. The \"encryption-settings list\" command can be used to obtain a list of the encryption settings definitions available in the server.")

  public String getEncryptionSettingsDefinitionID() {
    return encryptionSettingsDefinitionID;
  }


  public void setEncryptionSettingsDefinitionID(String encryptionSettingsDefinitionID) {
    
    
    
    this.encryptionSettingsDefinitionID = encryptionSettingsDefinitionID;
  }


  public AddDebugAccessLogPublisherRequest append(Boolean append) {
    
    
    
    
    this.append = append;
    return this;
  }

   /**
   * Specifies whether to append to existing log files.
   * @return append
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether to append to existing log files.")

  public Boolean getAppend() {
    return append;
  }


  public void setAppend(Boolean append) {
    
    
    
    this.append = append;
  }


  public AddDebugAccessLogPublisherRequest obscureSensitiveContent(Boolean obscureSensitiveContent) {
    
    
    
    
    this.obscureSensitiveContent = obscureSensitiveContent;
    return this;
  }

   /**
   * Indicates whether the resulting log file should attempt to obscure content that may be considered sensitive. This primarily includes the credentials for bind requests, the values of password modify extended requests and responses, and the values of any attributes specified in the obscure-attribute property. Note that the use of this option does not guarantee no sensitive information will be exposed, so the log output should still be carefully guarded.
   * @return obscureSensitiveContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the resulting log file should attempt to obscure content that may be considered sensitive. This primarily includes the credentials for bind requests, the values of password modify extended requests and responses, and the values of any attributes specified in the obscure-attribute property. Note that the use of this option does not guarantee no sensitive information will be exposed, so the log output should still be carefully guarded.")

  public Boolean getObscureSensitiveContent() {
    return obscureSensitiveContent;
  }


  public void setObscureSensitiveContent(Boolean obscureSensitiveContent) {
    
    
    
    this.obscureSensitiveContent = obscureSensitiveContent;
  }


  public AddDebugAccessLogPublisherRequest obscureAttribute(List<String> obscureAttribute) {
    
    
    
    
    this.obscureAttribute = obscureAttribute;
    return this;
  }

  public AddDebugAccessLogPublisherRequest addObscureAttributeItem(String obscureAttributeItem) {
    if (this.obscureAttribute == null) {
      this.obscureAttribute = new ArrayList<>();
    }
    this.obscureAttribute.add(obscureAttributeItem);
    return this;
  }

   /**
   * Specifies the names of any attribute types that should have their values obscured if the obscure-sensitive-content property has a value of true.
   * @return obscureAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of any attribute types that should have their values obscured if the obscure-sensitive-content property has a value of true.")

  public List<String> getObscureAttribute() {
    return obscureAttribute;
  }


  public void setObscureAttribute(List<String> obscureAttribute) {
    
    
    
    this.obscureAttribute = obscureAttribute;
  }


  public AddDebugAccessLogPublisherRequest debugACIEnabled(Boolean debugACIEnabled) {
    
    
    
    
    this.debugACIEnabled = debugACIEnabled;
    return this;
  }

   /**
   * Indicates whether to include debugging information about ACIs being used by the operations being logged.
   * @return debugACIEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to include debugging information about ACIs being used by the operations being logged.")

  public Boolean getDebugACIEnabled() {
    return debugACIEnabled;
  }


  public void setDebugACIEnabled(Boolean debugACIEnabled) {
    
    
    
    this.debugACIEnabled = debugACIEnabled;
  }


  public AddDebugAccessLogPublisherRequest asynchronous(Boolean asynchronous) {
    
    
    
    
    this.asynchronous = asynchronous;
    return this;
  }

   /**
   * Indicates whether the Debug Access Log Publisher will publish records asynchronously.
   * @return asynchronous
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the Debug Access Log Publisher will publish records asynchronously.")

  public Boolean getAsynchronous() {
    return asynchronous;
  }


  public void setAsynchronous(Boolean asynchronous) {
    
    
    
    this.asynchronous = asynchronous;
  }


  public AddDebugAccessLogPublisherRequest autoFlush(Boolean autoFlush) {
    
    
    
    
    this.autoFlush = autoFlush;
    return this;
  }

   /**
   * Specifies whether to flush the writer after every log record.
   * @return autoFlush
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether to flush the writer after every log record.")

  public Boolean getAutoFlush() {
    return autoFlush;
  }


  public void setAutoFlush(Boolean autoFlush) {
    
    
    
    this.autoFlush = autoFlush;
  }


  public AddDebugAccessLogPublisherRequest bufferSize(String bufferSize) {
    
    
    
    
    this.bufferSize = bufferSize;
    return this;
  }

   /**
   * Specifies the log file buffer size.
   * @return bufferSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the log file buffer size.")

  public String getBufferSize() {
    return bufferSize;
  }


  public void setBufferSize(String bufferSize) {
    
    
    
    this.bufferSize = bufferSize;
  }


  public AddDebugAccessLogPublisherRequest queueSize(Integer queueSize) {
    
    
    
    
    this.queueSize = queueSize;
    return this;
  }

   /**
   * The maximum number of log records that can be stored in the asynchronous queue.
   * @return queueSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of log records that can be stored in the asynchronous queue.")

  public Integer getQueueSize() {
    return queueSize;
  }


  public void setQueueSize(Integer queueSize) {
    
    
    
    this.queueSize = queueSize;
  }


  public AddDebugAccessLogPublisherRequest timeInterval(String timeInterval) {
    
    
    
    
    this.timeInterval = timeInterval;
    return this;
  }

   /**
   * Specifies the interval at which to check whether the log files need to be rotated.
   * @return timeInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the interval at which to check whether the log files need to be rotated.")

  public String getTimeInterval() {
    return timeInterval;
  }


  public void setTimeInterval(String timeInterval) {
    
    
    
    this.timeInterval = timeInterval;
  }


  public AddDebugAccessLogPublisherRequest logConnects(Boolean logConnects) {
    
    
    
    
    this.logConnects = logConnects;
    return this;
  }

   /**
   * Indicates whether to log information about connections established to the server.
   * @return logConnects
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about connections established to the server.")

  public Boolean getLogConnects() {
    return logConnects;
  }


  public void setLogConnects(Boolean logConnects) {
    
    
    
    this.logConnects = logConnects;
  }


  public AddDebugAccessLogPublisherRequest logDisconnects(Boolean logDisconnects) {
    
    
    
    
    this.logDisconnects = logDisconnects;
    return this;
  }

   /**
   * Indicates whether to log information about connections that have been closed by the client or terminated by the server.
   * @return logDisconnects
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about connections that have been closed by the client or terminated by the server.")

  public Boolean getLogDisconnects() {
    return logDisconnects;
  }


  public void setLogDisconnects(Boolean logDisconnects) {
    
    
    
    this.logDisconnects = logDisconnects;
  }


  public AddDebugAccessLogPublisherRequest logClientCertificates(Boolean logClientCertificates) {
    
    
    
    
    this.logClientCertificates = logClientCertificates;
    return this;
  }

   /**
   * Indicates whether to log information about any client certificates presented to the server.
   * @return logClientCertificates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about any client certificates presented to the server.")

  public Boolean getLogClientCertificates() {
    return logClientCertificates;
  }


  public void setLogClientCertificates(Boolean logClientCertificates) {
    
    
    
    this.logClientCertificates = logClientCertificates;
  }


  public AddDebugAccessLogPublisherRequest logRequests(Boolean logRequests) {
    
    
    
    
    this.logRequests = logRequests;
    return this;
  }

   /**
   * Indicates whether to log information about requests received from clients.
   * @return logRequests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about requests received from clients.")

  public Boolean getLogRequests() {
    return logRequests;
  }


  public void setLogRequests(Boolean logRequests) {
    
    
    
    this.logRequests = logRequests;
  }


  public AddDebugAccessLogPublisherRequest logResults(Boolean logResults) {
    
    
    
    
    this.logResults = logResults;
    return this;
  }

   /**
   * Indicates whether to log information about the results of client requests.
   * @return logResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about the results of client requests.")

  public Boolean getLogResults() {
    return logResults;
  }


  public void setLogResults(Boolean logResults) {
    
    
    
    this.logResults = logResults;
  }


  public AddDebugAccessLogPublisherRequest logIntermediateResponses(Boolean logIntermediateResponses) {
    
    
    
    
    this.logIntermediateResponses = logIntermediateResponses;
    return this;
  }

   /**
   * Indicates whether to log information about intermediate responses sent to the client.
   * @return logIntermediateResponses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to log information about intermediate responses sent to the client.")

  public Boolean getLogIntermediateResponses() {
    return logIntermediateResponses;
  }


  public void setLogIntermediateResponses(Boolean logIntermediateResponses) {
    
    
    
    this.logIntermediateResponses = logIntermediateResponses;
  }


  public AddDebugAccessLogPublisherRequest suppressInternalOperations(Boolean suppressInternalOperations) {
    
    
    
    
    this.suppressInternalOperations = suppressInternalOperations;
    return this;
  }

   /**
   * Indicates whether internal operations (for example, operations that are initiated by plugins) should be logged along with the operations that are requested by users.
   * @return suppressInternalOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether internal operations (for example, operations that are initiated by plugins) should be logged along with the operations that are requested by users.")

  public Boolean getSuppressInternalOperations() {
    return suppressInternalOperations;
  }


  public void setSuppressInternalOperations(Boolean suppressInternalOperations) {
    
    
    
    this.suppressInternalOperations = suppressInternalOperations;
  }


  public AddDebugAccessLogPublisherRequest correlateRequestsAndResults(Boolean correlateRequestsAndResults) {
    
    
    
    
    this.correlateRequestsAndResults = correlateRequestsAndResults;
    return this;
  }

   /**
   * Indicates whether to automatically log result messages for any operation in which the corresponding request was logged. In such cases, the result, entry, and reference criteria will be ignored, although the log-responses, log-search-entries, and log-search-references properties will be honored.
   * @return correlateRequestsAndResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to automatically log result messages for any operation in which the corresponding request was logged. In such cases, the result, entry, and reference criteria will be ignored, although the log-responses, log-search-entries, and log-search-references properties will be honored.")

  public Boolean getCorrelateRequestsAndResults() {
    return correlateRequestsAndResults;
  }


  public void setCorrelateRequestsAndResults(Boolean correlateRequestsAndResults) {
    
    
    
    this.correlateRequestsAndResults = correlateRequestsAndResults;
  }


  public AddDebugAccessLogPublisherRequest connectionCriteria(String connectionCriteria) {
    
    
    
    
    this.connectionCriteria = connectionCriteria;
    return this;
  }

   /**
   * Specifies a set of connection criteria that must match the associated client connection in order for a connect, disconnect, request, or result message to be logged.
   * @return connectionCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of connection criteria that must match the associated client connection in order for a connect, disconnect, request, or result message to be logged.")

  public String getConnectionCriteria() {
    return connectionCriteria;
  }


  public void setConnectionCriteria(String connectionCriteria) {
    
    
    
    this.connectionCriteria = connectionCriteria;
  }


  public AddDebugAccessLogPublisherRequest requestCriteria(String requestCriteria) {
    
    
    
    
    this.requestCriteria = requestCriteria;
    return this;
  }

   /**
   * Specifies a set of request criteria that must match the associated operation request in order for a request or result to be logged by this Access Log Publisher.
   * @return requestCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of request criteria that must match the associated operation request in order for a request or result to be logged by this Access Log Publisher.")

  public String getRequestCriteria() {
    return requestCriteria;
  }


  public void setRequestCriteria(String requestCriteria) {
    
    
    
    this.requestCriteria = requestCriteria;
  }


  public AddDebugAccessLogPublisherRequest resultCriteria(String resultCriteria) {
    
    
    
    
    this.resultCriteria = resultCriteria;
    return this;
  }

   /**
   * Specifies a set of result criteria that must match the associated operation result in order for that result to be logged by this Access Log Publisher.
   * @return resultCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of result criteria that must match the associated operation result in order for that result to be logged by this Access Log Publisher.")

  public String getResultCriteria() {
    return resultCriteria;
  }


  public void setResultCriteria(String resultCriteria) {
    
    
    
    this.resultCriteria = resultCriteria;
  }


  public AddDebugAccessLogPublisherRequest searchEntryCriteria(String searchEntryCriteria) {
    
    
    
    
    this.searchEntryCriteria = searchEntryCriteria;
    return this;
  }

   /**
   * Specifies a set of search entry criteria that must match the associated search result entry in order for that it to be logged by this Access Log Publisher.
   * @return searchEntryCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of search entry criteria that must match the associated search result entry in order for that it to be logged by this Access Log Publisher.")

  public String getSearchEntryCriteria() {
    return searchEntryCriteria;
  }


  public void setSearchEntryCriteria(String searchEntryCriteria) {
    
    
    
    this.searchEntryCriteria = searchEntryCriteria;
  }


  public AddDebugAccessLogPublisherRequest searchReferenceCriteria(String searchReferenceCriteria) {
    
    
    
    
    this.searchReferenceCriteria = searchReferenceCriteria;
    return this;
  }

   /**
   * Specifies a set of search reference criteria that must match the associated search result reference in order for that it to be logged by this Access Log Publisher.
   * @return searchReferenceCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of search reference criteria that must match the associated search result reference in order for that it to be logged by this Access Log Publisher.")

  public String getSearchReferenceCriteria() {
    return searchReferenceCriteria;
  }


  public void setSearchReferenceCriteria(String searchReferenceCriteria) {
    
    
    
    this.searchReferenceCriteria = searchReferenceCriteria;
  }


  public AddDebugAccessLogPublisherRequest enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Log Publisher is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Log Publisher is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public AddDebugAccessLogPublisherRequest loggingErrorBehavior(EnumlogPublisherLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
    return this;
  }

   /**
   * Get loggingErrorBehavior
   * @return loggingErrorBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumlogPublisherLoggingErrorBehaviorProp getLoggingErrorBehavior() {
    return loggingErrorBehavior;
  }


  public void setLoggingErrorBehavior(EnumlogPublisherLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddDebugAccessLogPublisherRequest instance itself
   */
  public AddDebugAccessLogPublisherRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddDebugAccessLogPublisherRequest addDebugAccessLogPublisherRequest = (AddDebugAccessLogPublisherRequest) o;
    return Objects.equals(this.publisherName, addDebugAccessLogPublisherRequest.publisherName) &&
        Objects.equals(this.description, addDebugAccessLogPublisherRequest.description) &&
        Objects.equals(this.schemas, addDebugAccessLogPublisherRequest.schemas) &&
        Objects.equals(this.suppressReplicationOperations, addDebugAccessLogPublisherRequest.suppressReplicationOperations) &&
        Objects.equals(this.logSecurityNegotiation, addDebugAccessLogPublisherRequest.logSecurityNegotiation) &&
        Objects.equals(this.logAssuranceCompleted, addDebugAccessLogPublisherRequest.logAssuranceCompleted) &&
        Objects.equals(this.logSearchEntries, addDebugAccessLogPublisherRequest.logSearchEntries) &&
        Objects.equals(this.logSearchReferences, addDebugAccessLogPublisherRequest.logSearchReferences) &&
        Objects.equals(this.logFile, addDebugAccessLogPublisherRequest.logFile) &&
        Objects.equals(this.logFilePermissions, addDebugAccessLogPublisherRequest.logFilePermissions) &&
        Objects.equals(this.rotationPolicy, addDebugAccessLogPublisherRequest.rotationPolicy) &&
        Objects.equals(this.rotationListener, addDebugAccessLogPublisherRequest.rotationListener) &&
        Objects.equals(this.retentionPolicy, addDebugAccessLogPublisherRequest.retentionPolicy) &&
        Objects.equals(this.compressionMechanism, addDebugAccessLogPublisherRequest.compressionMechanism) &&
        Objects.equals(this.signLog, addDebugAccessLogPublisherRequest.signLog) &&
        Objects.equals(this.encryptLog, addDebugAccessLogPublisherRequest.encryptLog) &&
        Objects.equals(this.encryptionSettingsDefinitionID, addDebugAccessLogPublisherRequest.encryptionSettingsDefinitionID) &&
        Objects.equals(this.append, addDebugAccessLogPublisherRequest.append) &&
        Objects.equals(this.obscureSensitiveContent, addDebugAccessLogPublisherRequest.obscureSensitiveContent) &&
        Objects.equals(this.obscureAttribute, addDebugAccessLogPublisherRequest.obscureAttribute) &&
        Objects.equals(this.debugACIEnabled, addDebugAccessLogPublisherRequest.debugACIEnabled) &&
        Objects.equals(this.asynchronous, addDebugAccessLogPublisherRequest.asynchronous) &&
        Objects.equals(this.autoFlush, addDebugAccessLogPublisherRequest.autoFlush) &&
        Objects.equals(this.bufferSize, addDebugAccessLogPublisherRequest.bufferSize) &&
        Objects.equals(this.queueSize, addDebugAccessLogPublisherRequest.queueSize) &&
        Objects.equals(this.timeInterval, addDebugAccessLogPublisherRequest.timeInterval) &&
        Objects.equals(this.logConnects, addDebugAccessLogPublisherRequest.logConnects) &&
        Objects.equals(this.logDisconnects, addDebugAccessLogPublisherRequest.logDisconnects) &&
        Objects.equals(this.logClientCertificates, addDebugAccessLogPublisherRequest.logClientCertificates) &&
        Objects.equals(this.logRequests, addDebugAccessLogPublisherRequest.logRequests) &&
        Objects.equals(this.logResults, addDebugAccessLogPublisherRequest.logResults) &&
        Objects.equals(this.logIntermediateResponses, addDebugAccessLogPublisherRequest.logIntermediateResponses) &&
        Objects.equals(this.suppressInternalOperations, addDebugAccessLogPublisherRequest.suppressInternalOperations) &&
        Objects.equals(this.correlateRequestsAndResults, addDebugAccessLogPublisherRequest.correlateRequestsAndResults) &&
        Objects.equals(this.connectionCriteria, addDebugAccessLogPublisherRequest.connectionCriteria) &&
        Objects.equals(this.requestCriteria, addDebugAccessLogPublisherRequest.requestCriteria) &&
        Objects.equals(this.resultCriteria, addDebugAccessLogPublisherRequest.resultCriteria) &&
        Objects.equals(this.searchEntryCriteria, addDebugAccessLogPublisherRequest.searchEntryCriteria) &&
        Objects.equals(this.searchReferenceCriteria, addDebugAccessLogPublisherRequest.searchReferenceCriteria) &&
        Objects.equals(this.enabled, addDebugAccessLogPublisherRequest.enabled) &&
        Objects.equals(this.loggingErrorBehavior, addDebugAccessLogPublisherRequest.loggingErrorBehavior)&&
        Objects.equals(this.additionalProperties, addDebugAccessLogPublisherRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publisherName, description, schemas, suppressReplicationOperations, logSecurityNegotiation, logAssuranceCompleted, logSearchEntries, logSearchReferences, logFile, logFilePermissions, rotationPolicy, rotationListener, retentionPolicy, compressionMechanism, signLog, encryptLog, encryptionSettingsDefinitionID, append, obscureSensitiveContent, obscureAttribute, debugACIEnabled, asynchronous, autoFlush, bufferSize, queueSize, timeInterval, logConnects, logDisconnects, logClientCertificates, logRequests, logResults, logIntermediateResponses, suppressInternalOperations, correlateRequestsAndResults, connectionCriteria, requestCriteria, resultCriteria, searchEntryCriteria, searchReferenceCriteria, enabled, loggingErrorBehavior, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddDebugAccessLogPublisherRequest {\n");
    sb.append("    publisherName: ").append(toIndentedString(publisherName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    suppressReplicationOperations: ").append(toIndentedString(suppressReplicationOperations)).append("\n");
    sb.append("    logSecurityNegotiation: ").append(toIndentedString(logSecurityNegotiation)).append("\n");
    sb.append("    logAssuranceCompleted: ").append(toIndentedString(logAssuranceCompleted)).append("\n");
    sb.append("    logSearchEntries: ").append(toIndentedString(logSearchEntries)).append("\n");
    sb.append("    logSearchReferences: ").append(toIndentedString(logSearchReferences)).append("\n");
    sb.append("    logFile: ").append(toIndentedString(logFile)).append("\n");
    sb.append("    logFilePermissions: ").append(toIndentedString(logFilePermissions)).append("\n");
    sb.append("    rotationPolicy: ").append(toIndentedString(rotationPolicy)).append("\n");
    sb.append("    rotationListener: ").append(toIndentedString(rotationListener)).append("\n");
    sb.append("    retentionPolicy: ").append(toIndentedString(retentionPolicy)).append("\n");
    sb.append("    compressionMechanism: ").append(toIndentedString(compressionMechanism)).append("\n");
    sb.append("    signLog: ").append(toIndentedString(signLog)).append("\n");
    sb.append("    encryptLog: ").append(toIndentedString(encryptLog)).append("\n");
    sb.append("    encryptionSettingsDefinitionID: ").append(toIndentedString(encryptionSettingsDefinitionID)).append("\n");
    sb.append("    append: ").append(toIndentedString(append)).append("\n");
    sb.append("    obscureSensitiveContent: ").append(toIndentedString(obscureSensitiveContent)).append("\n");
    sb.append("    obscureAttribute: ").append(toIndentedString(obscureAttribute)).append("\n");
    sb.append("    debugACIEnabled: ").append(toIndentedString(debugACIEnabled)).append("\n");
    sb.append("    asynchronous: ").append(toIndentedString(asynchronous)).append("\n");
    sb.append("    autoFlush: ").append(toIndentedString(autoFlush)).append("\n");
    sb.append("    bufferSize: ").append(toIndentedString(bufferSize)).append("\n");
    sb.append("    queueSize: ").append(toIndentedString(queueSize)).append("\n");
    sb.append("    timeInterval: ").append(toIndentedString(timeInterval)).append("\n");
    sb.append("    logConnects: ").append(toIndentedString(logConnects)).append("\n");
    sb.append("    logDisconnects: ").append(toIndentedString(logDisconnects)).append("\n");
    sb.append("    logClientCertificates: ").append(toIndentedString(logClientCertificates)).append("\n");
    sb.append("    logRequests: ").append(toIndentedString(logRequests)).append("\n");
    sb.append("    logResults: ").append(toIndentedString(logResults)).append("\n");
    sb.append("    logIntermediateResponses: ").append(toIndentedString(logIntermediateResponses)).append("\n");
    sb.append("    suppressInternalOperations: ").append(toIndentedString(suppressInternalOperations)).append("\n");
    sb.append("    correlateRequestsAndResults: ").append(toIndentedString(correlateRequestsAndResults)).append("\n");
    sb.append("    connectionCriteria: ").append(toIndentedString(connectionCriteria)).append("\n");
    sb.append("    requestCriteria: ").append(toIndentedString(requestCriteria)).append("\n");
    sb.append("    resultCriteria: ").append(toIndentedString(resultCriteria)).append("\n");
    sb.append("    searchEntryCriteria: ").append(toIndentedString(searchEntryCriteria)).append("\n");
    sb.append("    searchReferenceCriteria: ").append(toIndentedString(searchReferenceCriteria)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    loggingErrorBehavior: ").append(toIndentedString(loggingErrorBehavior)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("publisherName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("suppressReplicationOperations");
    openapiFields.add("logSecurityNegotiation");
    openapiFields.add("logAssuranceCompleted");
    openapiFields.add("logSearchEntries");
    openapiFields.add("logSearchReferences");
    openapiFields.add("logFile");
    openapiFields.add("logFilePermissions");
    openapiFields.add("rotationPolicy");
    openapiFields.add("rotationListener");
    openapiFields.add("retentionPolicy");
    openapiFields.add("compressionMechanism");
    openapiFields.add("signLog");
    openapiFields.add("encryptLog");
    openapiFields.add("encryptionSettingsDefinitionID");
    openapiFields.add("append");
    openapiFields.add("obscureSensitiveContent");
    openapiFields.add("obscureAttribute");
    openapiFields.add("debugACIEnabled");
    openapiFields.add("asynchronous");
    openapiFields.add("autoFlush");
    openapiFields.add("bufferSize");
    openapiFields.add("queueSize");
    openapiFields.add("timeInterval");
    openapiFields.add("logConnects");
    openapiFields.add("logDisconnects");
    openapiFields.add("logClientCertificates");
    openapiFields.add("logRequests");
    openapiFields.add("logResults");
    openapiFields.add("logIntermediateResponses");
    openapiFields.add("suppressInternalOperations");
    openapiFields.add("correlateRequestsAndResults");
    openapiFields.add("connectionCriteria");
    openapiFields.add("requestCriteria");
    openapiFields.add("resultCriteria");
    openapiFields.add("searchEntryCriteria");
    openapiFields.add("searchReferenceCriteria");
    openapiFields.add("enabled");
    openapiFields.add("loggingErrorBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("publisherName");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("logFile");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddDebugAccessLogPublisherRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddDebugAccessLogPublisherRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddDebugAccessLogPublisherRequest is not found in the empty JSON string", AddDebugAccessLogPublisherRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddDebugAccessLogPublisherRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("publisherName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("logFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFile").toString()));
      }
      if ((jsonObj.get("logFilePermissions") != null && !jsonObj.get("logFilePermissions").isJsonNull()) && !jsonObj.get("logFilePermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFilePermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFilePermissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rotationPolicy") != null && !jsonObj.get("rotationPolicy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotationPolicy` to be an array in the JSON string but got `%s`", jsonObj.get("rotationPolicy").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rotationListener") != null && !jsonObj.get("rotationListener").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rotationListener` to be an array in the JSON string but got `%s`", jsonObj.get("rotationListener").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("retentionPolicy") != null && !jsonObj.get("retentionPolicy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionPolicy` to be an array in the JSON string but got `%s`", jsonObj.get("retentionPolicy").toString()));
      }
      if ((jsonObj.get("encryptionSettingsDefinitionID") != null && !jsonObj.get("encryptionSettingsDefinitionID").isJsonNull()) && !jsonObj.get("encryptionSettingsDefinitionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionSettingsDefinitionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionSettingsDefinitionID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("obscureAttribute") != null && !jsonObj.get("obscureAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `obscureAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("obscureAttribute").toString()));
      }
      if ((jsonObj.get("bufferSize") != null && !jsonObj.get("bufferSize").isJsonNull()) && !jsonObj.get("bufferSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bufferSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bufferSize").toString()));
      }
      if ((jsonObj.get("timeInterval") != null && !jsonObj.get("timeInterval").isJsonNull()) && !jsonObj.get("timeInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeInterval").toString()));
      }
      if ((jsonObj.get("connectionCriteria") != null && !jsonObj.get("connectionCriteria").isJsonNull()) && !jsonObj.get("connectionCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionCriteria").toString()));
      }
      if ((jsonObj.get("requestCriteria") != null && !jsonObj.get("requestCriteria").isJsonNull()) && !jsonObj.get("requestCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestCriteria").toString()));
      }
      if ((jsonObj.get("resultCriteria") != null && !jsonObj.get("resultCriteria").isJsonNull()) && !jsonObj.get("resultCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultCriteria").toString()));
      }
      if ((jsonObj.get("searchEntryCriteria") != null && !jsonObj.get("searchEntryCriteria").isJsonNull()) && !jsonObj.get("searchEntryCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchEntryCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchEntryCriteria").toString()));
      }
      if ((jsonObj.get("searchReferenceCriteria") != null && !jsonObj.get("searchReferenceCriteria").isJsonNull()) && !jsonObj.get("searchReferenceCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchReferenceCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchReferenceCriteria").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddDebugAccessLogPublisherRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddDebugAccessLogPublisherRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddDebugAccessLogPublisherRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddDebugAccessLogPublisherRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddDebugAccessLogPublisherRequest>() {
           @Override
           public void write(JsonWriter out, AddDebugAccessLogPublisherRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddDebugAccessLogPublisherRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddDebugAccessLogPublisherRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddDebugAccessLogPublisherRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddDebugAccessLogPublisherRequest
  * @throws IOException if the JSON string is invalid with respect to AddDebugAccessLogPublisherRequest
  */
  public static AddDebugAccessLogPublisherRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddDebugAccessLogPublisherRequest.class);
  }

 /**
  * Convert an instance of AddDebugAccessLogPublisherRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

