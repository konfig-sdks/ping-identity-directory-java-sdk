/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumpassThroughAuthenticationPluginSchemaUrn;
import com.konfigthis.client.model.EnumpluginPluginTypeProp;
import com.konfigthis.client.model.EnumpluginServerAccessModeProp;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PassThroughAuthenticationPluginResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PassThroughAuthenticationPluginResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumpassThroughAuthenticationPluginSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUGIN_TYPE = "pluginType";
  @SerializedName(SERIALIZED_NAME_PLUGIN_TYPE)
  private List<EnumpluginPluginTypeProp> pluginType = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private List<String> server = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRY_LOCAL_BIND = "tryLocalBind";
  @SerializedName(SERIALIZED_NAME_TRY_LOCAL_BIND)
  private Boolean tryLocalBind;

  public static final String SERIALIZED_NAME_OVERRIDE_LOCAL_PASSWORD = "overrideLocalPassword";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_LOCAL_PASSWORD)
  private Boolean overrideLocalPassword;

  public static final String SERIALIZED_NAME_UPDATE_LOCAL_PASSWORD = "updateLocalPassword";
  @SerializedName(SERIALIZED_NAME_UPDATE_LOCAL_PASSWORD)
  private Boolean updateLocalPassword;

  public static final String SERIALIZED_NAME_ALLOW_LAX_PASS_THROUGH_AUTHENTICATION_PASSWORDS = "allowLaxPassThroughAuthenticationPasswords";
  @SerializedName(SERIALIZED_NAME_ALLOW_LAX_PASS_THROUGH_AUTHENTICATION_PASSWORDS)
  private Boolean allowLaxPassThroughAuthenticationPasswords;

  public static final String SERIALIZED_NAME_SERVER_ACCESS_MODE = "serverAccessMode";
  @SerializedName(SERIALIZED_NAME_SERVER_ACCESS_MODE)
  private EnumpluginServerAccessModeProp serverAccessMode;

  public static final String SERIALIZED_NAME_INCLUDED_LOCAL_ENTRY_BASE_D_N = "includedLocalEntryBaseDN";
  @SerializedName(SERIALIZED_NAME_INCLUDED_LOCAL_ENTRY_BASE_D_N)
  private List<String> includedLocalEntryBaseDN = null;

  public static final String SERIALIZED_NAME_CONNECTION_CRITERIA = "connectionCriteria";
  @SerializedName(SERIALIZED_NAME_CONNECTION_CRITERIA)
  private String connectionCriteria;

  public static final String SERIALIZED_NAME_REQUEST_CRITERIA = "requestCriteria";
  @SerializedName(SERIALIZED_NAME_REQUEST_CRITERIA)
  private String requestCriteria;

  public static final String SERIALIZED_NAME_DN_MAP = "dnMap";
  @SerializedName(SERIALIZED_NAME_DN_MAP)
  private List<String> dnMap = null;

  public static final String SERIALIZED_NAME_BIND_D_N_PATTERN = "bindDNPattern";
  @SerializedName(SERIALIZED_NAME_BIND_D_N_PATTERN)
  private String bindDNPattern;

  public static final String SERIALIZED_NAME_SEARCH_BASE_D_N = "searchBaseDN";
  @SerializedName(SERIALIZED_NAME_SEARCH_BASE_D_N)
  private String searchBaseDN;

  public static final String SERIALIZED_NAME_SEARCH_FILTER_PATTERN = "searchFilterPattern";
  @SerializedName(SERIALIZED_NAME_SEARCH_FILTER_PATTERN)
  private String searchFilterPattern;

  public static final String SERIALIZED_NAME_INITIAL_CONNECTIONS = "initialConnections";
  @SerializedName(SERIALIZED_NAME_INITIAL_CONNECTIONS)
  private Integer initialConnections;

  public static final String SERIALIZED_NAME_MAX_CONNECTIONS = "maxConnections";
  @SerializedName(SERIALIZED_NAME_MAX_CONNECTIONS)
  private Integer maxConnections;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS = "invokeForInternalOperations";
  @SerializedName(SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS)
  private Boolean invokeForInternalOperations;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public PassThroughAuthenticationPluginResponse() {
  }

  public PassThroughAuthenticationPluginResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Plugin
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Plugin")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public PassThroughAuthenticationPluginResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PassThroughAuthenticationPluginResponse schemas(List<EnumpassThroughAuthenticationPluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public PassThroughAuthenticationPluginResponse addSchemasItem(EnumpassThroughAuthenticationPluginSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumpassThroughAuthenticationPluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumpassThroughAuthenticationPluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public PassThroughAuthenticationPluginResponse pluginType(List<EnumpluginPluginTypeProp> pluginType) {
    
    
    
    
    this.pluginType = pluginType;
    return this;
  }

  public PassThroughAuthenticationPluginResponse addPluginTypeItem(EnumpluginPluginTypeProp pluginTypeItem) {
    this.pluginType.add(pluginTypeItem);
    return this;
  }

   /**
   * Get pluginType
   * @return pluginType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumpluginPluginTypeProp> getPluginType() {
    return pluginType;
  }


  public void setPluginType(List<EnumpluginPluginTypeProp> pluginType) {
    
    
    
    this.pluginType = pluginType;
  }


  public PassThroughAuthenticationPluginResponse server(List<String> server) {
    
    
    
    
    this.server = server;
    return this;
  }

  public PassThroughAuthenticationPluginResponse addServerItem(String serverItem) {
    this.server.add(serverItem);
    return this;
  }

   /**
   * Specifies the LDAP external server(s) to which authentication attempts should be forwarded.
   * @return server
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the LDAP external server(s) to which authentication attempts should be forwarded.")

  public List<String> getServer() {
    return server;
  }


  public void setServer(List<String> server) {
    
    
    
    this.server = server;
  }


  public PassThroughAuthenticationPluginResponse tryLocalBind(Boolean tryLocalBind) {
    
    
    
    
    this.tryLocalBind = tryLocalBind;
    return this;
  }

   /**
   * Indicates whether the bind attempt should first be attempted against the local server. Depending on the value of the override-local-password property, the bind attempt may then be attempted against a remote server if the local bind fails.
   * @return tryLocalBind
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the bind attempt should first be attempted against the local server. Depending on the value of the override-local-password property, the bind attempt may then be attempted against a remote server if the local bind fails.")

  public Boolean getTryLocalBind() {
    return tryLocalBind;
  }


  public void setTryLocalBind(Boolean tryLocalBind) {
    
    
    
    this.tryLocalBind = tryLocalBind;
  }


  public PassThroughAuthenticationPluginResponse overrideLocalPassword(Boolean overrideLocalPassword) {
    
    
    
    
    this.overrideLocalPassword = overrideLocalPassword;
    return this;
  }

   /**
   * Indicates whether the bind attempt should be attempted against a remote server in the event that the local bind fails but the local password is present.
   * @return overrideLocalPassword
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the bind attempt should be attempted against a remote server in the event that the local bind fails but the local password is present.")

  public Boolean getOverrideLocalPassword() {
    return overrideLocalPassword;
  }


  public void setOverrideLocalPassword(Boolean overrideLocalPassword) {
    
    
    
    this.overrideLocalPassword = overrideLocalPassword;
  }


  public PassThroughAuthenticationPluginResponse updateLocalPassword(Boolean updateLocalPassword) {
    
    
    
    
    this.updateLocalPassword = updateLocalPassword;
    return this;
  }

   /**
   * Indicates whether the local password value should be updated to the value used in the bind request in the event that the local bind fails but the remote bind succeeds.
   * @return updateLocalPassword
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the local password value should be updated to the value used in the bind request in the event that the local bind fails but the remote bind succeeds.")

  public Boolean getUpdateLocalPassword() {
    return updateLocalPassword;
  }


  public void setUpdateLocalPassword(Boolean updateLocalPassword) {
    
    
    
    this.updateLocalPassword = updateLocalPassword;
  }


  public PassThroughAuthenticationPluginResponse allowLaxPassThroughAuthenticationPasswords(Boolean allowLaxPassThroughAuthenticationPasswords) {
    
    
    
    
    this.allowLaxPassThroughAuthenticationPasswords = allowLaxPassThroughAuthenticationPasswords;
    return this;
  }

   /**
   * Indicates whether updates to the local password value should accept passwords that do not meet password policy constraints.
   * @return allowLaxPassThroughAuthenticationPasswords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether updates to the local password value should accept passwords that do not meet password policy constraints.")

  public Boolean getAllowLaxPassThroughAuthenticationPasswords() {
    return allowLaxPassThroughAuthenticationPasswords;
  }


  public void setAllowLaxPassThroughAuthenticationPasswords(Boolean allowLaxPassThroughAuthenticationPasswords) {
    
    
    
    this.allowLaxPassThroughAuthenticationPasswords = allowLaxPassThroughAuthenticationPasswords;
  }


  public PassThroughAuthenticationPluginResponse serverAccessMode(EnumpluginServerAccessModeProp serverAccessMode) {
    
    
    
    
    this.serverAccessMode = serverAccessMode;
    return this;
  }

   /**
   * Get serverAccessMode
   * @return serverAccessMode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumpluginServerAccessModeProp getServerAccessMode() {
    return serverAccessMode;
  }


  public void setServerAccessMode(EnumpluginServerAccessModeProp serverAccessMode) {
    
    
    
    this.serverAccessMode = serverAccessMode;
  }


  public PassThroughAuthenticationPluginResponse includedLocalEntryBaseDN(List<String> includedLocalEntryBaseDN) {
    
    
    
    
    this.includedLocalEntryBaseDN = includedLocalEntryBaseDN;
    return this;
  }

  public PassThroughAuthenticationPluginResponse addIncludedLocalEntryBaseDNItem(String includedLocalEntryBaseDNItem) {
    if (this.includedLocalEntryBaseDN == null) {
      this.includedLocalEntryBaseDN = new ArrayList<>();
    }
    this.includedLocalEntryBaseDN.add(includedLocalEntryBaseDNItem);
    return this;
  }

   /**
   * The base DNs for the local users whose authentication attempts may be passed through to an alternate server.
   * @return includedLocalEntryBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The base DNs for the local users whose authentication attempts may be passed through to an alternate server.")

  public List<String> getIncludedLocalEntryBaseDN() {
    return includedLocalEntryBaseDN;
  }


  public void setIncludedLocalEntryBaseDN(List<String> includedLocalEntryBaseDN) {
    
    
    
    this.includedLocalEntryBaseDN = includedLocalEntryBaseDN;
  }


  public PassThroughAuthenticationPluginResponse connectionCriteria(String connectionCriteria) {
    
    
    
    
    this.connectionCriteria = connectionCriteria;
    return this;
  }

   /**
   * Specifies a set of connection criteria that must match the client associated with the bind request for the bind to be passed through to an alternate server.
   * @return connectionCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of connection criteria that must match the client associated with the bind request for the bind to be passed through to an alternate server.")

  public String getConnectionCriteria() {
    return connectionCriteria;
  }


  public void setConnectionCriteria(String connectionCriteria) {
    
    
    
    this.connectionCriteria = connectionCriteria;
  }


  public PassThroughAuthenticationPluginResponse requestCriteria(String requestCriteria) {
    
    
    
    
    this.requestCriteria = requestCriteria;
    return this;
  }

   /**
   * Specifies a set of request criteria that must match the bind request for the bind to be passed through to an alternate server.
   * @return requestCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a set of request criteria that must match the bind request for the bind to be passed through to an alternate server.")

  public String getRequestCriteria() {
    return requestCriteria;
  }


  public void setRequestCriteria(String requestCriteria) {
    
    
    
    this.requestCriteria = requestCriteria;
  }


  public PassThroughAuthenticationPluginResponse dnMap(List<String> dnMap) {
    
    
    
    
    this.dnMap = dnMap;
    return this;
  }

  public PassThroughAuthenticationPluginResponse addDnMapItem(String dnMapItem) {
    if (this.dnMap == null) {
      this.dnMap = new ArrayList<>();
    }
    this.dnMap.add(dnMapItem);
    return this;
  }

   /**
   * Specifies one or more DN mappings that may be used to transform bind DNs before attempting to bind to the external servers.
   * @return dnMap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies one or more DN mappings that may be used to transform bind DNs before attempting to bind to the external servers.")

  public List<String> getDnMap() {
    return dnMap;
  }


  public void setDnMap(List<String> dnMap) {
    
    
    
    this.dnMap = dnMap;
  }


  public PassThroughAuthenticationPluginResponse bindDNPattern(String bindDNPattern) {
    
    
    
    
    this.bindDNPattern = bindDNPattern;
    return this;
  }

   /**
   * A pattern to use to construct the bind DN for the simple bind request to send to the remote server. This may consist of a combination of static text and attribute values and other directives enclosed in curly braces.  For example, the value \&quot;cn&#x3D;{cn},ou&#x3D;People,dc&#x3D;example,dc&#x3D;com\&quot; indicates that the remote bind DN should be constructed from the text \&quot;cn&#x3D;\&quot; followed by the value of the local entry&#39;s cn attribute followed by the text \&quot;ou&#x3D;People,dc&#x3D;example,dc&#x3D;com\&quot;. If an attribute contains the value to use as the bind DN for pass-through authentication, then the pattern may simply be the name of that attribute in curly braces (e.g., if the seeAlso attribute contains the bind DN for the target user, then a bind DN pattern of \&quot;{seeAlso}\&quot; would be appropriate).  Note that a bind DN pattern can be used to construct a bind DN that is not actually a valid LDAP distinguished name. For example, if authentication is being passed through to a Microsoft Active Directory server, then a bind DN pattern could be used to construct a user principal name (UPN) as an alternative to a distinguished name.
   * @return bindDNPattern
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A pattern to use to construct the bind DN for the simple bind request to send to the remote server. This may consist of a combination of static text and attribute values and other directives enclosed in curly braces.  For example, the value \"cn={cn},ou=People,dc=example,dc=com\" indicates that the remote bind DN should be constructed from the text \"cn=\" followed by the value of the local entry's cn attribute followed by the text \"ou=People,dc=example,dc=com\". If an attribute contains the value to use as the bind DN for pass-through authentication, then the pattern may simply be the name of that attribute in curly braces (e.g., if the seeAlso attribute contains the bind DN for the target user, then a bind DN pattern of \"{seeAlso}\" would be appropriate).  Note that a bind DN pattern can be used to construct a bind DN that is not actually a valid LDAP distinguished name. For example, if authentication is being passed through to a Microsoft Active Directory server, then a bind DN pattern could be used to construct a user principal name (UPN) as an alternative to a distinguished name.")

  public String getBindDNPattern() {
    return bindDNPattern;
  }


  public void setBindDNPattern(String bindDNPattern) {
    
    
    
    this.bindDNPattern = bindDNPattern;
  }


  public PassThroughAuthenticationPluginResponse searchBaseDN(String searchBaseDN) {
    
    
    
    
    this.searchBaseDN = searchBaseDN;
    return this;
  }

   /**
   * The base DN to use when searching for the user entry using a filter constructed from the pattern defined in the search-filter-pattern property. If no base DN is specified, the null DN will be used as the search base DN.
   * @return searchBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The base DN to use when searching for the user entry using a filter constructed from the pattern defined in the search-filter-pattern property. If no base DN is specified, the null DN will be used as the search base DN.")

  public String getSearchBaseDN() {
    return searchBaseDN;
  }


  public void setSearchBaseDN(String searchBaseDN) {
    
    
    
    this.searchBaseDN = searchBaseDN;
  }


  public PassThroughAuthenticationPluginResponse searchFilterPattern(String searchFilterPattern) {
    
    
    
    
    this.searchFilterPattern = searchFilterPattern;
    return this;
  }

   /**
   * A pattern to use to construct a filter to use when searching an external server for the entry of the user as whom to bind. For example, \&quot;(mail&#x3D;{uid:ldapFilterEscape}@example.com)\&quot; would construct a search filter to search for a user whose entry in the local server contains a uid attribute whose value appears before \&quot;@example.com\&quot; in the mail attribute in the external server. Note that the \&quot;ldapFilterEscape\&quot; modifier should almost always be used with attributes specified in the pattern.
   * @return searchFilterPattern
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A pattern to use to construct a filter to use when searching an external server for the entry of the user as whom to bind. For example, \"(mail={uid:ldapFilterEscape}@example.com)\" would construct a search filter to search for a user whose entry in the local server contains a uid attribute whose value appears before \"@example.com\" in the mail attribute in the external server. Note that the \"ldapFilterEscape\" modifier should almost always be used with attributes specified in the pattern.")

  public String getSearchFilterPattern() {
    return searchFilterPattern;
  }


  public void setSearchFilterPattern(String searchFilterPattern) {
    
    
    
    this.searchFilterPattern = searchFilterPattern;
  }


  public PassThroughAuthenticationPluginResponse initialConnections(Integer initialConnections) {
    
    
    
    
    this.initialConnections = initialConnections;
    return this;
  }

   /**
   * Specifies the initial number of connections to establish to each external server against which authentication may be attempted.
   * @return initialConnections
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the initial number of connections to establish to each external server against which authentication may be attempted.")

  public Integer getInitialConnections() {
    return initialConnections;
  }


  public void setInitialConnections(Integer initialConnections) {
    
    
    
    this.initialConnections = initialConnections;
  }


  public PassThroughAuthenticationPluginResponse maxConnections(Integer maxConnections) {
    
    
    
    
    this.maxConnections = maxConnections;
    return this;
  }

   /**
   * Specifies the maximum number of connections to maintain to each external server against which authentication may be attempted. This value must be greater than or equal to the value for the initial-connections property.
   * @return maxConnections
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the maximum number of connections to maintain to each external server against which authentication may be attempted. This value must be greater than or equal to the value for the initial-connections property.")

  public Integer getMaxConnections() {
    return maxConnections;
  }


  public void setMaxConnections(Integer maxConnections) {
    
    
    
    this.maxConnections = maxConnections;
  }


  public PassThroughAuthenticationPluginResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public PassThroughAuthenticationPluginResponse invokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
    return this;
  }

   /**
   * Indicates whether the plug-in should be invoked for internal operations.
   * @return invokeForInternalOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the plug-in should be invoked for internal operations.")

  public Boolean getInvokeForInternalOperations() {
    return invokeForInternalOperations;
  }


  public void setInvokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
  }


  public PassThroughAuthenticationPluginResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public PassThroughAuthenticationPluginResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PassThroughAuthenticationPluginResponse instance itself
   */
  public PassThroughAuthenticationPluginResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PassThroughAuthenticationPluginResponse passThroughAuthenticationPluginResponse = (PassThroughAuthenticationPluginResponse) o;
    return Objects.equals(this.id, passThroughAuthenticationPluginResponse.id) &&
        Objects.equals(this.description, passThroughAuthenticationPluginResponse.description) &&
        Objects.equals(this.schemas, passThroughAuthenticationPluginResponse.schemas) &&
        Objects.equals(this.pluginType, passThroughAuthenticationPluginResponse.pluginType) &&
        Objects.equals(this.server, passThroughAuthenticationPluginResponse.server) &&
        Objects.equals(this.tryLocalBind, passThroughAuthenticationPluginResponse.tryLocalBind) &&
        Objects.equals(this.overrideLocalPassword, passThroughAuthenticationPluginResponse.overrideLocalPassword) &&
        Objects.equals(this.updateLocalPassword, passThroughAuthenticationPluginResponse.updateLocalPassword) &&
        Objects.equals(this.allowLaxPassThroughAuthenticationPasswords, passThroughAuthenticationPluginResponse.allowLaxPassThroughAuthenticationPasswords) &&
        Objects.equals(this.serverAccessMode, passThroughAuthenticationPluginResponse.serverAccessMode) &&
        Objects.equals(this.includedLocalEntryBaseDN, passThroughAuthenticationPluginResponse.includedLocalEntryBaseDN) &&
        Objects.equals(this.connectionCriteria, passThroughAuthenticationPluginResponse.connectionCriteria) &&
        Objects.equals(this.requestCriteria, passThroughAuthenticationPluginResponse.requestCriteria) &&
        Objects.equals(this.dnMap, passThroughAuthenticationPluginResponse.dnMap) &&
        Objects.equals(this.bindDNPattern, passThroughAuthenticationPluginResponse.bindDNPattern) &&
        Objects.equals(this.searchBaseDN, passThroughAuthenticationPluginResponse.searchBaseDN) &&
        Objects.equals(this.searchFilterPattern, passThroughAuthenticationPluginResponse.searchFilterPattern) &&
        Objects.equals(this.initialConnections, passThroughAuthenticationPluginResponse.initialConnections) &&
        Objects.equals(this.maxConnections, passThroughAuthenticationPluginResponse.maxConnections) &&
        Objects.equals(this.enabled, passThroughAuthenticationPluginResponse.enabled) &&
        Objects.equals(this.invokeForInternalOperations, passThroughAuthenticationPluginResponse.invokeForInternalOperations) &&
        Objects.equals(this.meta, passThroughAuthenticationPluginResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, passThroughAuthenticationPluginResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, passThroughAuthenticationPluginResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, pluginType, server, tryLocalBind, overrideLocalPassword, updateLocalPassword, allowLaxPassThroughAuthenticationPasswords, serverAccessMode, includedLocalEntryBaseDN, connectionCriteria, requestCriteria, dnMap, bindDNPattern, searchBaseDN, searchFilterPattern, initialConnections, maxConnections, enabled, invokeForInternalOperations, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PassThroughAuthenticationPluginResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    pluginType: ").append(toIndentedString(pluginType)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    tryLocalBind: ").append(toIndentedString(tryLocalBind)).append("\n");
    sb.append("    overrideLocalPassword: ").append(toIndentedString(overrideLocalPassword)).append("\n");
    sb.append("    updateLocalPassword: ").append(toIndentedString(updateLocalPassword)).append("\n");
    sb.append("    allowLaxPassThroughAuthenticationPasswords: ").append(toIndentedString(allowLaxPassThroughAuthenticationPasswords)).append("\n");
    sb.append("    serverAccessMode: ").append(toIndentedString(serverAccessMode)).append("\n");
    sb.append("    includedLocalEntryBaseDN: ").append(toIndentedString(includedLocalEntryBaseDN)).append("\n");
    sb.append("    connectionCriteria: ").append(toIndentedString(connectionCriteria)).append("\n");
    sb.append("    requestCriteria: ").append(toIndentedString(requestCriteria)).append("\n");
    sb.append("    dnMap: ").append(toIndentedString(dnMap)).append("\n");
    sb.append("    bindDNPattern: ").append(toIndentedString(bindDNPattern)).append("\n");
    sb.append("    searchBaseDN: ").append(toIndentedString(searchBaseDN)).append("\n");
    sb.append("    searchFilterPattern: ").append(toIndentedString(searchFilterPattern)).append("\n");
    sb.append("    initialConnections: ").append(toIndentedString(initialConnections)).append("\n");
    sb.append("    maxConnections: ").append(toIndentedString(maxConnections)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    invokeForInternalOperations: ").append(toIndentedString(invokeForInternalOperations)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("pluginType");
    openapiFields.add("server");
    openapiFields.add("tryLocalBind");
    openapiFields.add("overrideLocalPassword");
    openapiFields.add("updateLocalPassword");
    openapiFields.add("allowLaxPassThroughAuthenticationPasswords");
    openapiFields.add("serverAccessMode");
    openapiFields.add("includedLocalEntryBaseDN");
    openapiFields.add("connectionCriteria");
    openapiFields.add("requestCriteria");
    openapiFields.add("dnMap");
    openapiFields.add("bindDNPattern");
    openapiFields.add("searchBaseDN");
    openapiFields.add("searchFilterPattern");
    openapiFields.add("initialConnections");
    openapiFields.add("maxConnections");
    openapiFields.add("enabled");
    openapiFields.add("invokeForInternalOperations");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("pluginType");
    openapiRequiredFields.add("server");
    openapiRequiredFields.add("tryLocalBind");
    openapiRequiredFields.add("overrideLocalPassword");
    openapiRequiredFields.add("updateLocalPassword");
    openapiRequiredFields.add("serverAccessMode");
    openapiRequiredFields.add("initialConnections");
    openapiRequiredFields.add("maxConnections");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PassThroughAuthenticationPluginResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PassThroughAuthenticationPluginResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PassThroughAuthenticationPluginResponse is not found in the empty JSON string", PassThroughAuthenticationPluginResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PassThroughAuthenticationPluginResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pluginType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pluginType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginType` to be an array in the JSON string but got `%s`", jsonObj.get("pluginType").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("server") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("server").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be an array in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedLocalEntryBaseDN") != null && !jsonObj.get("includedLocalEntryBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedLocalEntryBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("includedLocalEntryBaseDN").toString()));
      }
      if ((jsonObj.get("connectionCriteria") != null && !jsonObj.get("connectionCriteria").isJsonNull()) && !jsonObj.get("connectionCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionCriteria").toString()));
      }
      if ((jsonObj.get("requestCriteria") != null && !jsonObj.get("requestCriteria").isJsonNull()) && !jsonObj.get("requestCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestCriteria").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dnMap") != null && !jsonObj.get("dnMap").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnMap` to be an array in the JSON string but got `%s`", jsonObj.get("dnMap").toString()));
      }
      if ((jsonObj.get("bindDNPattern") != null && !jsonObj.get("bindDNPattern").isJsonNull()) && !jsonObj.get("bindDNPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bindDNPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bindDNPattern").toString()));
      }
      if ((jsonObj.get("searchBaseDN") != null && !jsonObj.get("searchBaseDN").isJsonNull()) && !jsonObj.get("searchBaseDN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchBaseDN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchBaseDN").toString()));
      }
      if ((jsonObj.get("searchFilterPattern") != null && !jsonObj.get("searchFilterPattern").isJsonNull()) && !jsonObj.get("searchFilterPattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchFilterPattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchFilterPattern").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PassThroughAuthenticationPluginResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PassThroughAuthenticationPluginResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PassThroughAuthenticationPluginResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PassThroughAuthenticationPluginResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PassThroughAuthenticationPluginResponse>() {
           @Override
           public void write(JsonWriter out, PassThroughAuthenticationPluginResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PassThroughAuthenticationPluginResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PassThroughAuthenticationPluginResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PassThroughAuthenticationPluginResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PassThroughAuthenticationPluginResponse
  * @throws IOException if the JSON string is invalid with respect to PassThroughAuthenticationPluginResponse
  */
  public static PassThroughAuthenticationPluginResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PassThroughAuthenticationPluginResponse.class);
  }

 /**
  * Convert an instance of PassThroughAuthenticationPluginResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

