/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumvelocityHttpServletExtensionSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * VelocityHttpServletExtensionResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class VelocityHttpServletExtensionResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumvelocityHttpServletExtensionSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BASE_CONTEXT_PATH = "baseContextPath";
  @SerializedName(SERIALIZED_NAME_BASE_CONTEXT_PATH)
  private String baseContextPath;

  public static final String SERIALIZED_NAME_STATIC_CONTEXT_PATH = "staticContextPath";
  @SerializedName(SERIALIZED_NAME_STATIC_CONTEXT_PATH)
  private String staticContextPath;

  public static final String SERIALIZED_NAME_STATIC_CONTENT_DIRECTORY = "staticContentDirectory";
  @SerializedName(SERIALIZED_NAME_STATIC_CONTENT_DIRECTORY)
  private String staticContentDirectory;

  public static final String SERIALIZED_NAME_STATIC_CUSTOM_DIRECTORY = "staticCustomDirectory";
  @SerializedName(SERIALIZED_NAME_STATIC_CUSTOM_DIRECTORY)
  private String staticCustomDirectory;

  public static final String SERIALIZED_NAME_TEMPLATE_DIRECTORY = "templateDirectory";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_DIRECTORY)
  private List<String> templateDirectory = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPOSE_REQUEST_ATTRIBUTES = "exposeRequestAttributes";
  @SerializedName(SERIALIZED_NAME_EXPOSE_REQUEST_ATTRIBUTES)
  private Boolean exposeRequestAttributes;

  public static final String SERIALIZED_NAME_EXPOSE_SESSION_ATTRIBUTES = "exposeSessionAttributes";
  @SerializedName(SERIALIZED_NAME_EXPOSE_SESSION_ATTRIBUTES)
  private Boolean exposeSessionAttributes;

  public static final String SERIALIZED_NAME_EXPOSE_SERVER_CONTEXT = "exposeServerContext";
  @SerializedName(SERIALIZED_NAME_EXPOSE_SERVER_CONTEXT)
  private Boolean exposeServerContext;

  public static final String SERIALIZED_NAME_ALLOW_CONTEXT_OVERRIDE = "allowContextOverride";
  @SerializedName(SERIALIZED_NAME_ALLOW_CONTEXT_OVERRIDE)
  private Boolean allowContextOverride;

  public static final String SERIALIZED_NAME_MIME_TYPES_FILE = "mimeTypesFile";
  @SerializedName(SERIALIZED_NAME_MIME_TYPES_FILE)
  private String mimeTypesFile;

  public static final String SERIALIZED_NAME_DEFAULT_M_I_M_E_TYPE = "defaultMIMEType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_M_I_M_E_TYPE)
  private String defaultMIMEType;

  public static final String SERIALIZED_NAME_CHARACTER_ENCODING = "characterEncoding";
  @SerializedName(SERIALIZED_NAME_CHARACTER_ENCODING)
  private String characterEncoding;

  public static final String SERIALIZED_NAME_RESPONSE_HEADER = "responseHeader";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER)
  private List<String> responseHeader = null;

  public static final String SERIALIZED_NAME_STATIC_RESPONSE_HEADER = "staticResponseHeader";
  @SerializedName(SERIALIZED_NAME_STATIC_RESPONSE_HEADER)
  private List<String> staticResponseHeader = null;

  public static final String SERIALIZED_NAME_REQUIRE_AUTHENTICATION = "requireAuthentication";
  @SerializedName(SERIALIZED_NAME_REQUIRE_AUTHENTICATION)
  private Boolean requireAuthentication;

  public static final String SERIALIZED_NAME_IDENTITY_MAPPER = "identityMapper";
  @SerializedName(SERIALIZED_NAME_IDENTITY_MAPPER)
  private String identityMapper;

  public static final String SERIALIZED_NAME_CROSS_ORIGIN_POLICY = "crossOriginPolicy";
  @SerializedName(SERIALIZED_NAME_CROSS_ORIGIN_POLICY)
  private String crossOriginPolicy;

  public static final String SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER = "correlationIDResponseHeader";
  @SerializedName(SERIALIZED_NAME_CORRELATION_I_D_RESPONSE_HEADER)
  private String correlationIDResponseHeader;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public VelocityHttpServletExtensionResponse() {
  }

  public VelocityHttpServletExtensionResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this HTTP Servlet Extension
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this HTTP Servlet Extension")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public VelocityHttpServletExtensionResponse schemas(List<EnumvelocityHttpServletExtensionSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public VelocityHttpServletExtensionResponse addSchemasItem(EnumvelocityHttpServletExtensionSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumvelocityHttpServletExtensionSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumvelocityHttpServletExtensionSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public VelocityHttpServletExtensionResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the HTTP Servlet Extension
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the HTTP Servlet Extension")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public VelocityHttpServletExtensionResponse baseContextPath(String baseContextPath) {
    
    
    
    
    this.baseContextPath = baseContextPath;
    return this;
  }

   /**
   * The context path to use to access all template-based and static content. The value must start with a forward slash and must represent a valid HTTP context path.
   * @return baseContextPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The context path to use to access all template-based and static content. The value must start with a forward slash and must represent a valid HTTP context path.")

  public String getBaseContextPath() {
    return baseContextPath;
  }


  public void setBaseContextPath(String baseContextPath) {
    
    
    
    this.baseContextPath = baseContextPath;
  }


  public VelocityHttpServletExtensionResponse staticContextPath(String staticContextPath) {
    
    
    
    
    this.staticContextPath = staticContextPath;
    return this;
  }

   /**
   * The path below the base context path by which static, non-template content such as images, CSS, and Javascript files are accessible.
   * @return staticContextPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path below the base context path by which static, non-template content such as images, CSS, and Javascript files are accessible.")

  public String getStaticContextPath() {
    return staticContextPath;
  }


  public void setStaticContextPath(String staticContextPath) {
    
    
    
    this.staticContextPath = staticContextPath;
  }


  public VelocityHttpServletExtensionResponse staticContentDirectory(String staticContentDirectory) {
    
    
    
    
    this.staticContentDirectory = staticContentDirectory;
    return this;
  }

   /**
   * Specifies the base directory in which static, non-template content such as images, CSS, and Javascript files are stored on the filesystem.
   * @return staticContentDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the base directory in which static, non-template content such as images, CSS, and Javascript files are stored on the filesystem.")

  public String getStaticContentDirectory() {
    return staticContentDirectory;
  }


  public void setStaticContentDirectory(String staticContentDirectory) {
    
    
    
    this.staticContentDirectory = staticContentDirectory;
  }


  public VelocityHttpServletExtensionResponse staticCustomDirectory(String staticCustomDirectory) {
    
    
    
    
    this.staticCustomDirectory = staticCustomDirectory;
    return this;
  }

   /**
   * Specifies the base directory in which custom static, non-template content such as images, CSS, and Javascript files are stored on the filesystem. Files in this directory will override those with the same name in the directory specified by the static-content-directory property.
   * @return staticCustomDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the base directory in which custom static, non-template content such as images, CSS, and Javascript files are stored on the filesystem. Files in this directory will override those with the same name in the directory specified by the static-content-directory property.")

  public String getStaticCustomDirectory() {
    return staticCustomDirectory;
  }


  public void setStaticCustomDirectory(String staticCustomDirectory) {
    
    
    
    this.staticCustomDirectory = staticCustomDirectory;
  }


  public VelocityHttpServletExtensionResponse templateDirectory(List<String> templateDirectory) {
    
    
    
    
    this.templateDirectory = templateDirectory;
    return this;
  }

  public VelocityHttpServletExtensionResponse addTemplateDirectoryItem(String templateDirectoryItem) {
    this.templateDirectory.add(templateDirectoryItem);
    return this;
  }

   /**
   * Specifies an ordered list of directories in which to search for the template files.
   * @return templateDirectory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies an ordered list of directories in which to search for the template files.")

  public List<String> getTemplateDirectory() {
    return templateDirectory;
  }


  public void setTemplateDirectory(List<String> templateDirectory) {
    
    
    
    this.templateDirectory = templateDirectory;
  }


  public VelocityHttpServletExtensionResponse exposeRequestAttributes(Boolean exposeRequestAttributes) {
    
    
    
    
    this.exposeRequestAttributes = exposeRequestAttributes;
    return this;
  }

   /**
   * Specifies whether the HTTP request will be exposed to templates.
   * @return exposeRequestAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the HTTP request will be exposed to templates.")

  public Boolean getExposeRequestAttributes() {
    return exposeRequestAttributes;
  }


  public void setExposeRequestAttributes(Boolean exposeRequestAttributes) {
    
    
    
    this.exposeRequestAttributes = exposeRequestAttributes;
  }


  public VelocityHttpServletExtensionResponse exposeSessionAttributes(Boolean exposeSessionAttributes) {
    
    
    
    
    this.exposeSessionAttributes = exposeSessionAttributes;
    return this;
  }

   /**
   * Specifies whether the HTTP session will be exposed to templates.
   * @return exposeSessionAttributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the HTTP session will be exposed to templates.")

  public Boolean getExposeSessionAttributes() {
    return exposeSessionAttributes;
  }


  public void setExposeSessionAttributes(Boolean exposeSessionAttributes) {
    
    
    
    this.exposeSessionAttributes = exposeSessionAttributes;
  }


  public VelocityHttpServletExtensionResponse exposeServerContext(Boolean exposeServerContext) {
    
    
    
    
    this.exposeServerContext = exposeServerContext;
    return this;
  }

   /**
   * Specifies whether a server context will be exposed under context key &#39;ubid_server&#39; for all template contexts.
   * @return exposeServerContext
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether a server context will be exposed under context key 'ubid_server' for all template contexts.")

  public Boolean getExposeServerContext() {
    return exposeServerContext;
  }


  public void setExposeServerContext(Boolean exposeServerContext) {
    
    
    
    this.exposeServerContext = exposeServerContext;
  }


  public VelocityHttpServletExtensionResponse allowContextOverride(Boolean allowContextOverride) {
    
    
    
    
    this.allowContextOverride = allowContextOverride;
    return this;
  }

   /**
   * Indicates whether context providers may override existing context objects with new values.
   * @return allowContextOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether context providers may override existing context objects with new values.")

  public Boolean getAllowContextOverride() {
    return allowContextOverride;
  }


  public void setAllowContextOverride(Boolean allowContextOverride) {
    
    
    
    this.allowContextOverride = allowContextOverride;
  }


  public VelocityHttpServletExtensionResponse mimeTypesFile(String mimeTypesFile) {
    
    
    
    
    this.mimeTypesFile = mimeTypesFile;
    return this;
  }

   /**
   * Specifies the path to a file that contains MIME type mappings that will be used to determine the appropriate value to return for the Content-Type header based on the extension of the requested static content file.
   * @return mimeTypesFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the path to a file that contains MIME type mappings that will be used to determine the appropriate value to return for the Content-Type header based on the extension of the requested static content file.")

  public String getMimeTypesFile() {
    return mimeTypesFile;
  }


  public void setMimeTypesFile(String mimeTypesFile) {
    
    
    
    this.mimeTypesFile = mimeTypesFile;
  }


  public VelocityHttpServletExtensionResponse defaultMIMEType(String defaultMIMEType) {
    
    
    
    
    this.defaultMIMEType = defaultMIMEType;
    return this;
  }

   /**
   * Specifies the default value that will be used in the response&#39;s Content-Type header that indicates the type of content to return.
   * @return defaultMIMEType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the default value that will be used in the response's Content-Type header that indicates the type of content to return.")

  public String getDefaultMIMEType() {
    return defaultMIMEType;
  }


  public void setDefaultMIMEType(String defaultMIMEType) {
    
    
    
    this.defaultMIMEType = defaultMIMEType;
  }


  public VelocityHttpServletExtensionResponse characterEncoding(String characterEncoding) {
    
    
    
    
    this.characterEncoding = characterEncoding;
    return this;
  }

   /**
   * Specifies the value that will be used for all responses&#39; Content-Type headers&#39; charset parameter that indicates the character encoding of the document.
   * @return characterEncoding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the value that will be used for all responses' Content-Type headers' charset parameter that indicates the character encoding of the document.")

  public String getCharacterEncoding() {
    return characterEncoding;
  }


  public void setCharacterEncoding(String characterEncoding) {
    
    
    
    this.characterEncoding = characterEncoding;
  }


  public VelocityHttpServletExtensionResponse responseHeader(List<String> responseHeader) {
    
    
    
    
    this.responseHeader = responseHeader;
    return this;
  }

  public VelocityHttpServletExtensionResponse addResponseHeaderItem(String responseHeaderItem) {
    if (this.responseHeader == null) {
      this.responseHeader = new ArrayList<>();
    }
    this.responseHeader.add(responseHeaderItem);
    return this;
  }

   /**
   * Specifies HTTP header fields and values added to response headers for all template page requests.
   * @return responseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies HTTP header fields and values added to response headers for all template page requests.")

  public List<String> getResponseHeader() {
    return responseHeader;
  }


  public void setResponseHeader(List<String> responseHeader) {
    
    
    
    this.responseHeader = responseHeader;
  }


  public VelocityHttpServletExtensionResponse staticResponseHeader(List<String> staticResponseHeader) {
    
    
    
    
    this.staticResponseHeader = staticResponseHeader;
    return this;
  }

  public VelocityHttpServletExtensionResponse addStaticResponseHeaderItem(String staticResponseHeaderItem) {
    if (this.staticResponseHeader == null) {
      this.staticResponseHeader = new ArrayList<>();
    }
    this.staticResponseHeader.add(staticResponseHeaderItem);
    return this;
  }

   /**
   * Specifies HTTP header fields and values added to response headers for static content requests such as images and scripts.
   * @return staticResponseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies HTTP header fields and values added to response headers for static content requests such as images and scripts.")

  public List<String> getStaticResponseHeader() {
    return staticResponseHeader;
  }


  public void setStaticResponseHeader(List<String> staticResponseHeader) {
    
    
    
    this.staticResponseHeader = staticResponseHeader;
  }


  public VelocityHttpServletExtensionResponse requireAuthentication(Boolean requireAuthentication) {
    
    
    
    
    this.requireAuthentication = requireAuthentication;
    return this;
  }

   /**
   * Require authentication when accessing Velocity templates.
   * @return requireAuthentication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Require authentication when accessing Velocity templates.")

  public Boolean getRequireAuthentication() {
    return requireAuthentication;
  }


  public void setRequireAuthentication(Boolean requireAuthentication) {
    
    
    
    this.requireAuthentication = requireAuthentication;
  }


  public VelocityHttpServletExtensionResponse identityMapper(String identityMapper) {
    
    
    
    
    this.identityMapper = identityMapper;
    return this;
  }

   /**
   * Specifies the name of the identity mapper that is to be used for associating basic authentication credentials with user entries.
   * @return identityMapper
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the identity mapper that is to be used for associating basic authentication credentials with user entries.")

  public String getIdentityMapper() {
    return identityMapper;
  }


  public void setIdentityMapper(String identityMapper) {
    
    
    
    this.identityMapper = identityMapper;
  }


  public VelocityHttpServletExtensionResponse crossOriginPolicy(String crossOriginPolicy) {
    
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
    return this;
  }

   /**
   * The cross-origin request policy to use for the HTTP Servlet Extension.
   * @return crossOriginPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cross-origin request policy to use for the HTTP Servlet Extension.")

  public String getCrossOriginPolicy() {
    return crossOriginPolicy;
  }


  public void setCrossOriginPolicy(String crossOriginPolicy) {
    
    
    
    this.crossOriginPolicy = crossOriginPolicy;
  }


  public VelocityHttpServletExtensionResponse correlationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
    return this;
  }

   /**
   * Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \&quot;Correlation-Id\&quot;, \&quot;X-Amzn-Trace-Id\&quot;, and \&quot;X-Request-Id\&quot;.
   * @return correlationIDResponseHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the HTTP response header that will contain a correlation ID value. Example values are \"Correlation-Id\", \"X-Amzn-Trace-Id\", and \"X-Request-Id\".")

  public String getCorrelationIDResponseHeader() {
    return correlationIDResponseHeader;
  }


  public void setCorrelationIDResponseHeader(String correlationIDResponseHeader) {
    
    
    
    this.correlationIDResponseHeader = correlationIDResponseHeader;
  }


  public VelocityHttpServletExtensionResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public VelocityHttpServletExtensionResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the VelocityHttpServletExtensionResponse instance itself
   */
  public VelocityHttpServletExtensionResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VelocityHttpServletExtensionResponse velocityHttpServletExtensionResponse = (VelocityHttpServletExtensionResponse) o;
    return Objects.equals(this.description, velocityHttpServletExtensionResponse.description) &&
        Objects.equals(this.schemas, velocityHttpServletExtensionResponse.schemas) &&
        Objects.equals(this.id, velocityHttpServletExtensionResponse.id) &&
        Objects.equals(this.baseContextPath, velocityHttpServletExtensionResponse.baseContextPath) &&
        Objects.equals(this.staticContextPath, velocityHttpServletExtensionResponse.staticContextPath) &&
        Objects.equals(this.staticContentDirectory, velocityHttpServletExtensionResponse.staticContentDirectory) &&
        Objects.equals(this.staticCustomDirectory, velocityHttpServletExtensionResponse.staticCustomDirectory) &&
        Objects.equals(this.templateDirectory, velocityHttpServletExtensionResponse.templateDirectory) &&
        Objects.equals(this.exposeRequestAttributes, velocityHttpServletExtensionResponse.exposeRequestAttributes) &&
        Objects.equals(this.exposeSessionAttributes, velocityHttpServletExtensionResponse.exposeSessionAttributes) &&
        Objects.equals(this.exposeServerContext, velocityHttpServletExtensionResponse.exposeServerContext) &&
        Objects.equals(this.allowContextOverride, velocityHttpServletExtensionResponse.allowContextOverride) &&
        Objects.equals(this.mimeTypesFile, velocityHttpServletExtensionResponse.mimeTypesFile) &&
        Objects.equals(this.defaultMIMEType, velocityHttpServletExtensionResponse.defaultMIMEType) &&
        Objects.equals(this.characterEncoding, velocityHttpServletExtensionResponse.characterEncoding) &&
        Objects.equals(this.responseHeader, velocityHttpServletExtensionResponse.responseHeader) &&
        Objects.equals(this.staticResponseHeader, velocityHttpServletExtensionResponse.staticResponseHeader) &&
        Objects.equals(this.requireAuthentication, velocityHttpServletExtensionResponse.requireAuthentication) &&
        Objects.equals(this.identityMapper, velocityHttpServletExtensionResponse.identityMapper) &&
        Objects.equals(this.crossOriginPolicy, velocityHttpServletExtensionResponse.crossOriginPolicy) &&
        Objects.equals(this.correlationIDResponseHeader, velocityHttpServletExtensionResponse.correlationIDResponseHeader) &&
        Objects.equals(this.meta, velocityHttpServletExtensionResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, velocityHttpServletExtensionResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, velocityHttpServletExtensionResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, baseContextPath, staticContextPath, staticContentDirectory, staticCustomDirectory, templateDirectory, exposeRequestAttributes, exposeSessionAttributes, exposeServerContext, allowContextOverride, mimeTypesFile, defaultMIMEType, characterEncoding, responseHeader, staticResponseHeader, requireAuthentication, identityMapper, crossOriginPolicy, correlationIDResponseHeader, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VelocityHttpServletExtensionResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    baseContextPath: ").append(toIndentedString(baseContextPath)).append("\n");
    sb.append("    staticContextPath: ").append(toIndentedString(staticContextPath)).append("\n");
    sb.append("    staticContentDirectory: ").append(toIndentedString(staticContentDirectory)).append("\n");
    sb.append("    staticCustomDirectory: ").append(toIndentedString(staticCustomDirectory)).append("\n");
    sb.append("    templateDirectory: ").append(toIndentedString(templateDirectory)).append("\n");
    sb.append("    exposeRequestAttributes: ").append(toIndentedString(exposeRequestAttributes)).append("\n");
    sb.append("    exposeSessionAttributes: ").append(toIndentedString(exposeSessionAttributes)).append("\n");
    sb.append("    exposeServerContext: ").append(toIndentedString(exposeServerContext)).append("\n");
    sb.append("    allowContextOverride: ").append(toIndentedString(allowContextOverride)).append("\n");
    sb.append("    mimeTypesFile: ").append(toIndentedString(mimeTypesFile)).append("\n");
    sb.append("    defaultMIMEType: ").append(toIndentedString(defaultMIMEType)).append("\n");
    sb.append("    characterEncoding: ").append(toIndentedString(characterEncoding)).append("\n");
    sb.append("    responseHeader: ").append(toIndentedString(responseHeader)).append("\n");
    sb.append("    staticResponseHeader: ").append(toIndentedString(staticResponseHeader)).append("\n");
    sb.append("    requireAuthentication: ").append(toIndentedString(requireAuthentication)).append("\n");
    sb.append("    identityMapper: ").append(toIndentedString(identityMapper)).append("\n");
    sb.append("    crossOriginPolicy: ").append(toIndentedString(crossOriginPolicy)).append("\n");
    sb.append("    correlationIDResponseHeader: ").append(toIndentedString(correlationIDResponseHeader)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("baseContextPath");
    openapiFields.add("staticContextPath");
    openapiFields.add("staticContentDirectory");
    openapiFields.add("staticCustomDirectory");
    openapiFields.add("templateDirectory");
    openapiFields.add("exposeRequestAttributes");
    openapiFields.add("exposeSessionAttributes");
    openapiFields.add("exposeServerContext");
    openapiFields.add("allowContextOverride");
    openapiFields.add("mimeTypesFile");
    openapiFields.add("defaultMIMEType");
    openapiFields.add("characterEncoding");
    openapiFields.add("responseHeader");
    openapiFields.add("staticResponseHeader");
    openapiFields.add("requireAuthentication");
    openapiFields.add("identityMapper");
    openapiFields.add("crossOriginPolicy");
    openapiFields.add("correlationIDResponseHeader");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("baseContextPath");
    openapiRequiredFields.add("templateDirectory");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VelocityHttpServletExtensionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VelocityHttpServletExtensionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VelocityHttpServletExtensionResponse is not found in the empty JSON string", VelocityHttpServletExtensionResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VelocityHttpServletExtensionResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("baseContextPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseContextPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseContextPath").toString()));
      }
      if ((jsonObj.get("staticContextPath") != null && !jsonObj.get("staticContextPath").isJsonNull()) && !jsonObj.get("staticContextPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticContextPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticContextPath").toString()));
      }
      if ((jsonObj.get("staticContentDirectory") != null && !jsonObj.get("staticContentDirectory").isJsonNull()) && !jsonObj.get("staticContentDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticContentDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticContentDirectory").toString()));
      }
      if ((jsonObj.get("staticCustomDirectory") != null && !jsonObj.get("staticCustomDirectory").isJsonNull()) && !jsonObj.get("staticCustomDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticCustomDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticCustomDirectory").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("templateDirectory") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("templateDirectory").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateDirectory` to be an array in the JSON string but got `%s`", jsonObj.get("templateDirectory").toString()));
      }
      if ((jsonObj.get("mimeTypesFile") != null && !jsonObj.get("mimeTypesFile").isJsonNull()) && !jsonObj.get("mimeTypesFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeTypesFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeTypesFile").toString()));
      }
      if ((jsonObj.get("defaultMIMEType") != null && !jsonObj.get("defaultMIMEType").isJsonNull()) && !jsonObj.get("defaultMIMEType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultMIMEType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultMIMEType").toString()));
      }
      if ((jsonObj.get("characterEncoding") != null && !jsonObj.get("characterEncoding").isJsonNull()) && !jsonObj.get("characterEncoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `characterEncoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("characterEncoding").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("responseHeader") != null && !jsonObj.get("responseHeader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseHeader` to be an array in the JSON string but got `%s`", jsonObj.get("responseHeader").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("staticResponseHeader") != null && !jsonObj.get("staticResponseHeader").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticResponseHeader` to be an array in the JSON string but got `%s`", jsonObj.get("staticResponseHeader").toString()));
      }
      if ((jsonObj.get("identityMapper") != null && !jsonObj.get("identityMapper").isJsonNull()) && !jsonObj.get("identityMapper").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityMapper` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityMapper").toString()));
      }
      if ((jsonObj.get("crossOriginPolicy") != null && !jsonObj.get("crossOriginPolicy").isJsonNull()) && !jsonObj.get("crossOriginPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crossOriginPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crossOriginPolicy").toString()));
      }
      if ((jsonObj.get("correlationIDResponseHeader") != null && !jsonObj.get("correlationIDResponseHeader").isJsonNull()) && !jsonObj.get("correlationIDResponseHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationIDResponseHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationIDResponseHeader").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VelocityHttpServletExtensionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VelocityHttpServletExtensionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VelocityHttpServletExtensionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VelocityHttpServletExtensionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<VelocityHttpServletExtensionResponse>() {
           @Override
           public void write(JsonWriter out, VelocityHttpServletExtensionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public VelocityHttpServletExtensionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             VelocityHttpServletExtensionResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VelocityHttpServletExtensionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VelocityHttpServletExtensionResponse
  * @throws IOException if the JSON string is invalid with respect to VelocityHttpServletExtensionResponse
  */
  public static VelocityHttpServletExtensionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VelocityHttpServletExtensionResponse.class);
  }

 /**
  * Convert an instance of VelocityHttpServletExtensionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

