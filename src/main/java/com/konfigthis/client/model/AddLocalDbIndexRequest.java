/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumlocalDbIndexCacheModeProp;
import com.konfigthis.client.model.EnumlocalDbIndexIndexTypeProp;
import com.konfigthis.client.model.EnumlocalDbIndexSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddLocalDbIndexRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddLocalDbIndexRequest {
  public static final String SERIALIZED_NAME_INDEX_NAME = "indexName";
  @SerializedName(SERIALIZED_NAME_INDEX_NAME)
  private String indexName;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumlocalDbIndexSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ATTRIBUTE = "attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private String attribute;

  public static final String SERIALIZED_NAME_INDEX_ENTRY_LIMIT = "indexEntryLimit";
  @SerializedName(SERIALIZED_NAME_INDEX_ENTRY_LIMIT)
  private Integer indexEntryLimit;

  public static final String SERIALIZED_NAME_SUBSTRING_INDEX_ENTRY_LIMIT = "substringIndexEntryLimit";
  @SerializedName(SERIALIZED_NAME_SUBSTRING_INDEX_ENTRY_LIMIT)
  private Integer substringIndexEntryLimit;

  public static final String SERIALIZED_NAME_MAINTAIN_MATCH_COUNT_FOR_KEYS_EXCEEDING_ENTRY_LIMIT = "maintainMatchCountForKeysExceedingEntryLimit";
  @SerializedName(SERIALIZED_NAME_MAINTAIN_MATCH_COUNT_FOR_KEYS_EXCEEDING_ENTRY_LIMIT)
  private Boolean maintainMatchCountForKeysExceedingEntryLimit;

  public static final String SERIALIZED_NAME_INDEX_TYPE = "indexType";
  @SerializedName(SERIALIZED_NAME_INDEX_TYPE)
  private List<EnumlocalDbIndexIndexTypeProp> indexType = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSTRING_LENGTH = "substringLength";
  @SerializedName(SERIALIZED_NAME_SUBSTRING_LENGTH)
  private Integer substringLength;

  public static final String SERIALIZED_NAME_PRIME_INDEX = "primeIndex";
  @SerializedName(SERIALIZED_NAME_PRIME_INDEX)
  private Boolean primeIndex;

  public static final String SERIALIZED_NAME_PRIME_INTERNAL_NODES_ONLY = "primeInternalNodesOnly";
  @SerializedName(SERIALIZED_NAME_PRIME_INTERNAL_NODES_ONLY)
  private Boolean primeInternalNodesOnly;

  public static final String SERIALIZED_NAME_EQUALITY_INDEX_FILTER = "equalityIndexFilter";
  @SerializedName(SERIALIZED_NAME_EQUALITY_INDEX_FILTER)
  private List<String> equalityIndexFilter = null;

  public static final String SERIALIZED_NAME_MAINTAIN_EQUALITY_INDEX_WITHOUT_FILTER = "maintainEqualityIndexWithoutFilter";
  @SerializedName(SERIALIZED_NAME_MAINTAIN_EQUALITY_INDEX_WITHOUT_FILTER)
  private Boolean maintainEqualityIndexWithoutFilter;

  public static final String SERIALIZED_NAME_CACHE_MODE = "cacheMode";
  @SerializedName(SERIALIZED_NAME_CACHE_MODE)
  private EnumlocalDbIndexCacheModeProp cacheMode;

  public AddLocalDbIndexRequest() {
  }

  public AddLocalDbIndexRequest indexName(String indexName) {
    
    
    
    
    this.indexName = indexName;
    return this;
  }

   /**
   * Name of the new Local DB Index
   * @return indexName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Local DB Index")

  public String getIndexName() {
    return indexName;
  }


  public void setIndexName(String indexName) {
    
    
    
    this.indexName = indexName;
  }


  public AddLocalDbIndexRequest schemas(List<EnumlocalDbIndexSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddLocalDbIndexRequest addSchemasItem(EnumlocalDbIndexSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumlocalDbIndexSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumlocalDbIndexSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddLocalDbIndexRequest attribute(String attribute) {
    
    
    
    
    this.attribute = attribute;
    return this;
  }

   /**
   * Specifies the name of the attribute for which the index is to be maintained.
   * @return attribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the name of the attribute for which the index is to be maintained.")

  public String getAttribute() {
    return attribute;
  }


  public void setAttribute(String attribute) {
    
    
    
    this.attribute = attribute;
  }


  public AddLocalDbIndexRequest indexEntryLimit(Integer indexEntryLimit) {
    
    
    
    
    this.indexEntryLimit = indexEntryLimit;
    return this;
  }

   /**
   * Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.
   * @return indexEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained.")

  public Integer getIndexEntryLimit() {
    return indexEntryLimit;
  }


  public void setIndexEntryLimit(Integer indexEntryLimit) {
    
    
    
    this.indexEntryLimit = indexEntryLimit;
  }


  public AddLocalDbIndexRequest substringIndexEntryLimit(Integer substringIndexEntryLimit) {
    
    
    
    
    this.substringIndexEntryLimit = substringIndexEntryLimit;
    return this;
  }

   /**
   * Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is required, creating a dedicated composite index with an index-filter-pattern of (attr&#x3D;*?*) will give the best balance between search and update performance.
   * @return substringIndexEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is required, creating a dedicated composite index with an index-filter-pattern of (attr=*?*) will give the best balance between search and update performance.")

  public Integer getSubstringIndexEntryLimit() {
    return substringIndexEntryLimit;
  }


  public void setSubstringIndexEntryLimit(Integer substringIndexEntryLimit) {
    
    
    
    this.substringIndexEntryLimit = substringIndexEntryLimit;
  }


  public AddLocalDbIndexRequest maintainMatchCountForKeysExceedingEntryLimit(Boolean maintainMatchCountForKeysExceedingEntryLimit) {
    
    
    
    
    this.maintainMatchCountForKeysExceedingEntryLimit = maintainMatchCountForKeysExceedingEntryLimit;
    return this;
  }

   /**
   * Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that count exceeds the index entry limit.
   * @return maintainMatchCountForKeysExceedingEntryLimit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that count exceeds the index entry limit.")

  public Boolean getMaintainMatchCountForKeysExceedingEntryLimit() {
    return maintainMatchCountForKeysExceedingEntryLimit;
  }


  public void setMaintainMatchCountForKeysExceedingEntryLimit(Boolean maintainMatchCountForKeysExceedingEntryLimit) {
    
    
    
    this.maintainMatchCountForKeysExceedingEntryLimit = maintainMatchCountForKeysExceedingEntryLimit;
  }


  public AddLocalDbIndexRequest indexType(List<EnumlocalDbIndexIndexTypeProp> indexType) {
    
    
    
    
    this.indexType = indexType;
    return this;
  }

  public AddLocalDbIndexRequest addIndexTypeItem(EnumlocalDbIndexIndexTypeProp indexTypeItem) {
    this.indexType.add(indexTypeItem);
    return this;
  }

   /**
   * Get indexType
   * @return indexType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumlocalDbIndexIndexTypeProp> getIndexType() {
    return indexType;
  }


  public void setIndexType(List<EnumlocalDbIndexIndexTypeProp> indexType) {
    
    
    
    this.indexType = indexType;
  }


  public AddLocalDbIndexRequest substringLength(Integer substringLength) {
    
    
    
    
    this.substringLength = substringLength;
    return this;
  }

   /**
   * The length of substrings in a substring index.
   * @return substringLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The length of substrings in a substring index.")

  public Integer getSubstringLength() {
    return substringLength;
  }


  public void setSubstringLength(Integer substringLength) {
    
    
    
    this.substringLength = substringLength;
  }


  public AddLocalDbIndexRequest primeIndex(Boolean primeIndex) {
    
    
    
    
    this.primeIndex = primeIndex;
    return this;
  }

   /**
   * If this option is enabled and this index&#39;s backend is configured to prime indexes, then this index will be loaded at startup.
   * @return primeIndex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this option is enabled and this index's backend is configured to prime indexes, then this index will be loaded at startup.")

  public Boolean getPrimeIndex() {
    return primeIndex;
  }


  public void setPrimeIndex(Boolean primeIndex) {
    
    
    
    this.primeIndex = primeIndex;
  }


  public AddLocalDbIndexRequest primeInternalNodesOnly(Boolean primeInternalNodesOnly) {
    
    
    
    
    this.primeInternalNodesOnly = primeInternalNodesOnly;
    return this;
  }

   /**
   * If this option is enabled and this index&#39;s backend is configured to prime indexes using the preload method, then only the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized.
   * @return primeInternalNodesOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this option is enabled and this index's backend is configured to prime indexes using the preload method, then only the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized.")

  public Boolean getPrimeInternalNodesOnly() {
    return primeInternalNodesOnly;
  }


  public void setPrimeInternalNodesOnly(Boolean primeInternalNodesOnly) {
    
    
    
    this.primeInternalNodesOnly = primeInternalNodesOnly;
  }


  public AddLocalDbIndexRequest equalityIndexFilter(List<String> equalityIndexFilter) {
    
    
    
    
    this.equalityIndexFilter = equalityIndexFilter;
    return this;
  }

  public AddLocalDbIndexRequest addEqualityIndexFilterItem(String equalityIndexFilterItem) {
    if (this.equalityIndexFilter == null) {
      this.equalityIndexFilter = new ArrayList<>();
    }
    this.equalityIndexFilter.add(equalityIndexFilterItem);
    return this;
  }

   /**
   * A search filter that may be used in conjunction with an equality component for the associated attribute type. If an equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but only for entries which match the provided filter. Further, the index will be used only for searches containing an equality component with the associated attribute type ANDed with this filter.
   * @return equalityIndexFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A search filter that may be used in conjunction with an equality component for the associated attribute type. If an equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but only for entries which match the provided filter. Further, the index will be used only for searches containing an equality component with the associated attribute type ANDed with this filter.")

  public List<String> getEqualityIndexFilter() {
    return equalityIndexFilter;
  }


  public void setEqualityIndexFilter(List<String> equalityIndexFilter) {
    
    
    
    this.equalityIndexFilter = equalityIndexFilter;
  }


  public AddLocalDbIndexRequest maintainEqualityIndexWithoutFilter(Boolean maintainEqualityIndexWithoutFilter) {
    
    
    
    
    this.maintainEqualityIndexWithoutFilter = maintainEqualityIndexWithoutFilter;
    return this;
  }

   /**
   * Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be indexed for equality by itself but only in conjunction with the defined equality index filters.
   * @return maintainEqualityIndexWithoutFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be indexed for equality by itself but only in conjunction with the defined equality index filters.")

  public Boolean getMaintainEqualityIndexWithoutFilter() {
    return maintainEqualityIndexWithoutFilter;
  }


  public void setMaintainEqualityIndexWithoutFilter(Boolean maintainEqualityIndexWithoutFilter) {
    
    
    
    this.maintainEqualityIndexWithoutFilter = maintainEqualityIndexWithoutFilter;
  }


  public AddLocalDbIndexRequest cacheMode(EnumlocalDbIndexCacheModeProp cacheMode) {
    
    
    
    
    this.cacheMode = cacheMode;
    return this;
  }

   /**
   * Get cacheMode
   * @return cacheMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumlocalDbIndexCacheModeProp getCacheMode() {
    return cacheMode;
  }


  public void setCacheMode(EnumlocalDbIndexCacheModeProp cacheMode) {
    
    
    
    this.cacheMode = cacheMode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddLocalDbIndexRequest instance itself
   */
  public AddLocalDbIndexRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddLocalDbIndexRequest addLocalDbIndexRequest = (AddLocalDbIndexRequest) o;
    return Objects.equals(this.indexName, addLocalDbIndexRequest.indexName) &&
        Objects.equals(this.schemas, addLocalDbIndexRequest.schemas) &&
        Objects.equals(this.attribute, addLocalDbIndexRequest.attribute) &&
        Objects.equals(this.indexEntryLimit, addLocalDbIndexRequest.indexEntryLimit) &&
        Objects.equals(this.substringIndexEntryLimit, addLocalDbIndexRequest.substringIndexEntryLimit) &&
        Objects.equals(this.maintainMatchCountForKeysExceedingEntryLimit, addLocalDbIndexRequest.maintainMatchCountForKeysExceedingEntryLimit) &&
        Objects.equals(this.indexType, addLocalDbIndexRequest.indexType) &&
        Objects.equals(this.substringLength, addLocalDbIndexRequest.substringLength) &&
        Objects.equals(this.primeIndex, addLocalDbIndexRequest.primeIndex) &&
        Objects.equals(this.primeInternalNodesOnly, addLocalDbIndexRequest.primeInternalNodesOnly) &&
        Objects.equals(this.equalityIndexFilter, addLocalDbIndexRequest.equalityIndexFilter) &&
        Objects.equals(this.maintainEqualityIndexWithoutFilter, addLocalDbIndexRequest.maintainEqualityIndexWithoutFilter) &&
        Objects.equals(this.cacheMode, addLocalDbIndexRequest.cacheMode)&&
        Objects.equals(this.additionalProperties, addLocalDbIndexRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexName, schemas, attribute, indexEntryLimit, substringIndexEntryLimit, maintainMatchCountForKeysExceedingEntryLimit, indexType, substringLength, primeIndex, primeInternalNodesOnly, equalityIndexFilter, maintainEqualityIndexWithoutFilter, cacheMode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddLocalDbIndexRequest {\n");
    sb.append("    indexName: ").append(toIndentedString(indexName)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    indexEntryLimit: ").append(toIndentedString(indexEntryLimit)).append("\n");
    sb.append("    substringIndexEntryLimit: ").append(toIndentedString(substringIndexEntryLimit)).append("\n");
    sb.append("    maintainMatchCountForKeysExceedingEntryLimit: ").append(toIndentedString(maintainMatchCountForKeysExceedingEntryLimit)).append("\n");
    sb.append("    indexType: ").append(toIndentedString(indexType)).append("\n");
    sb.append("    substringLength: ").append(toIndentedString(substringLength)).append("\n");
    sb.append("    primeIndex: ").append(toIndentedString(primeIndex)).append("\n");
    sb.append("    primeInternalNodesOnly: ").append(toIndentedString(primeInternalNodesOnly)).append("\n");
    sb.append("    equalityIndexFilter: ").append(toIndentedString(equalityIndexFilter)).append("\n");
    sb.append("    maintainEqualityIndexWithoutFilter: ").append(toIndentedString(maintainEqualityIndexWithoutFilter)).append("\n");
    sb.append("    cacheMode: ").append(toIndentedString(cacheMode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("indexName");
    openapiFields.add("schemas");
    openapiFields.add("attribute");
    openapiFields.add("indexEntryLimit");
    openapiFields.add("substringIndexEntryLimit");
    openapiFields.add("maintainMatchCountForKeysExceedingEntryLimit");
    openapiFields.add("indexType");
    openapiFields.add("substringLength");
    openapiFields.add("primeIndex");
    openapiFields.add("primeInternalNodesOnly");
    openapiFields.add("equalityIndexFilter");
    openapiFields.add("maintainEqualityIndexWithoutFilter");
    openapiFields.add("cacheMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("indexName");
    openapiRequiredFields.add("attribute");
    openapiRequiredFields.add("indexType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddLocalDbIndexRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddLocalDbIndexRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddLocalDbIndexRequest is not found in the empty JSON string", AddLocalDbIndexRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddLocalDbIndexRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("indexName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("attribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("indexType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("indexType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexType` to be an array in the JSON string but got `%s`", jsonObj.get("indexType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("equalityIndexFilter") != null && !jsonObj.get("equalityIndexFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `equalityIndexFilter` to be an array in the JSON string but got `%s`", jsonObj.get("equalityIndexFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddLocalDbIndexRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddLocalDbIndexRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddLocalDbIndexRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddLocalDbIndexRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddLocalDbIndexRequest>() {
           @Override
           public void write(JsonWriter out, AddLocalDbIndexRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddLocalDbIndexRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddLocalDbIndexRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddLocalDbIndexRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddLocalDbIndexRequest
  * @throws IOException if the JSON string is invalid with respect to AddLocalDbIndexRequest
  */
  public static AddLocalDbIndexRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddLocalDbIndexRequest.class);
  }

 /**
  * Convert an instance of AddLocalDbIndexRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

