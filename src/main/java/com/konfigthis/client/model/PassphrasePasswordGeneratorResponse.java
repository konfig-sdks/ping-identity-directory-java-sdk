/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumpassphrasePasswordGeneratorSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PassphrasePasswordGeneratorResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PassphrasePasswordGeneratorResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumpassphrasePasswordGeneratorSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_DICTIONARY_FILE = "dictionaryFile";
  @SerializedName(SERIALIZED_NAME_DICTIONARY_FILE)
  private String dictionaryFile;

  public static final String SERIALIZED_NAME_MINIMUM_PASSWORD_CHARACTERS = "minimumPasswordCharacters";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PASSWORD_CHARACTERS)
  private Integer minimumPasswordCharacters;

  public static final String SERIALIZED_NAME_MINIMUM_PASSWORD_WORDS = "minimumPasswordWords";
  @SerializedName(SERIALIZED_NAME_MINIMUM_PASSWORD_WORDS)
  private Integer minimumPasswordWords;

  public static final String SERIALIZED_NAME_CAPITALIZE_WORDS = "capitalizeWords";
  @SerializedName(SERIALIZED_NAME_CAPITALIZE_WORDS)
  private Boolean capitalizeWords;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public PassphrasePasswordGeneratorResponse() {
  }

  public PassphrasePasswordGeneratorResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Password Generator
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Password Generator")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public PassphrasePasswordGeneratorResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Password Generator
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Password Generator")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PassphrasePasswordGeneratorResponse schemas(List<EnumpassphrasePasswordGeneratorSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public PassphrasePasswordGeneratorResponse addSchemasItem(EnumpassphrasePasswordGeneratorSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumpassphrasePasswordGeneratorSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumpassphrasePasswordGeneratorSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public PassphrasePasswordGeneratorResponse dictionaryFile(String dictionaryFile) {
    
    
    
    
    this.dictionaryFile = dictionaryFile;
    return this;
  }

   /**
   * The path to the dictionary file that will be used to obtain the words for use in generated passwords.
   * @return dictionaryFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The path to the dictionary file that will be used to obtain the words for use in generated passwords.")

  public String getDictionaryFile() {
    return dictionaryFile;
  }


  public void setDictionaryFile(String dictionaryFile) {
    
    
    
    this.dictionaryFile = dictionaryFile;
  }


  public PassphrasePasswordGeneratorResponse minimumPasswordCharacters(Integer minimumPasswordCharacters) {
    
    
    
    
    this.minimumPasswordCharacters = minimumPasswordCharacters;
    return this;
  }

   /**
   * The minimum number of characters that generated passwords will be required to have.
   * @return minimumPasswordCharacters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum number of characters that generated passwords will be required to have.")

  public Integer getMinimumPasswordCharacters() {
    return minimumPasswordCharacters;
  }


  public void setMinimumPasswordCharacters(Integer minimumPasswordCharacters) {
    
    
    
    this.minimumPasswordCharacters = minimumPasswordCharacters;
  }


  public PassphrasePasswordGeneratorResponse minimumPasswordWords(Integer minimumPasswordWords) {
    
    
    
    
    this.minimumPasswordWords = minimumPasswordWords;
    return this;
  }

   /**
   * The minimum number of words that must be concatenated in the course of generating a password.
   * @return minimumPasswordWords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum number of words that must be concatenated in the course of generating a password.")

  public Integer getMinimumPasswordWords() {
    return minimumPasswordWords;
  }


  public void setMinimumPasswordWords(Integer minimumPasswordWords) {
    
    
    
    this.minimumPasswordWords = minimumPasswordWords;
  }


  public PassphrasePasswordGeneratorResponse capitalizeWords(Boolean capitalizeWords) {
    
    
    
    
    this.capitalizeWords = capitalizeWords;
    return this;
  }

   /**
   * Indicates whether to capitalize each word used in the generated password.
   * @return capitalizeWords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to capitalize each word used in the generated password.")

  public Boolean getCapitalizeWords() {
    return capitalizeWords;
  }


  public void setCapitalizeWords(Boolean capitalizeWords) {
    
    
    
    this.capitalizeWords = capitalizeWords;
  }


  public PassphrasePasswordGeneratorResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Password Generator is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Password Generator is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public PassphrasePasswordGeneratorResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public PassphrasePasswordGeneratorResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PassphrasePasswordGeneratorResponse instance itself
   */
  public PassphrasePasswordGeneratorResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PassphrasePasswordGeneratorResponse passphrasePasswordGeneratorResponse = (PassphrasePasswordGeneratorResponse) o;
    return Objects.equals(this.id, passphrasePasswordGeneratorResponse.id) &&
        Objects.equals(this.description, passphrasePasswordGeneratorResponse.description) &&
        Objects.equals(this.schemas, passphrasePasswordGeneratorResponse.schemas) &&
        Objects.equals(this.dictionaryFile, passphrasePasswordGeneratorResponse.dictionaryFile) &&
        Objects.equals(this.minimumPasswordCharacters, passphrasePasswordGeneratorResponse.minimumPasswordCharacters) &&
        Objects.equals(this.minimumPasswordWords, passphrasePasswordGeneratorResponse.minimumPasswordWords) &&
        Objects.equals(this.capitalizeWords, passphrasePasswordGeneratorResponse.capitalizeWords) &&
        Objects.equals(this.enabled, passphrasePasswordGeneratorResponse.enabled) &&
        Objects.equals(this.meta, passphrasePasswordGeneratorResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, passphrasePasswordGeneratorResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, passphrasePasswordGeneratorResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, schemas, dictionaryFile, minimumPasswordCharacters, minimumPasswordWords, capitalizeWords, enabled, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PassphrasePasswordGeneratorResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    dictionaryFile: ").append(toIndentedString(dictionaryFile)).append("\n");
    sb.append("    minimumPasswordCharacters: ").append(toIndentedString(minimumPasswordCharacters)).append("\n");
    sb.append("    minimumPasswordWords: ").append(toIndentedString(minimumPasswordWords)).append("\n");
    sb.append("    capitalizeWords: ").append(toIndentedString(capitalizeWords)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("dictionaryFile");
    openapiFields.add("minimumPasswordCharacters");
    openapiFields.add("minimumPasswordWords");
    openapiFields.add("capitalizeWords");
    openapiFields.add("enabled");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("dictionaryFile");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PassphrasePasswordGeneratorResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PassphrasePasswordGeneratorResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PassphrasePasswordGeneratorResponse is not found in the empty JSON string", PassphrasePasswordGeneratorResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PassphrasePasswordGeneratorResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("dictionaryFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dictionaryFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dictionaryFile").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PassphrasePasswordGeneratorResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PassphrasePasswordGeneratorResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PassphrasePasswordGeneratorResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PassphrasePasswordGeneratorResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PassphrasePasswordGeneratorResponse>() {
           @Override
           public void write(JsonWriter out, PassphrasePasswordGeneratorResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PassphrasePasswordGeneratorResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PassphrasePasswordGeneratorResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PassphrasePasswordGeneratorResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PassphrasePasswordGeneratorResponse
  * @throws IOException if the JSON string is invalid with respect to PassphrasePasswordGeneratorResponse
  */
  public static PassphrasePasswordGeneratorResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PassphrasePasswordGeneratorResponse.class);
  }

 /**
  * Convert an instance of PassphrasePasswordGeneratorResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

