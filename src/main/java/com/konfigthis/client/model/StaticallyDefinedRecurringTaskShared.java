/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumstaticallyDefinedRecurringTaskSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * StaticallyDefinedRecurringTaskShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class StaticallyDefinedRecurringTaskShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumstaticallyDefinedRecurringTaskSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK_JAVA_CLASS = "taskJavaClass";
  @SerializedName(SERIALIZED_NAME_TASK_JAVA_CLASS)
  private String taskJavaClass;

  public static final String SERIALIZED_NAME_TASK_OBJECT_CLASS = "taskObjectClass";
  @SerializedName(SERIALIZED_NAME_TASK_OBJECT_CLASS)
  private List<String> taskObjectClass = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASK_ATTRIBUTE_VALUE = "taskAttributeValue";
  @SerializedName(SERIALIZED_NAME_TASK_ATTRIBUTE_VALUE)
  private List<String> taskAttributeValue = null;

  public static final String SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE = "cancelOnTaskDependencyFailure";
  @SerializedName(SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE)
  private Boolean cancelOnTaskDependencyFailure;

  public static final String SERIALIZED_NAME_EMAIL_ON_START = "emailOnStart";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_START)
  private List<String> emailOnStart = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_SUCCESS = "emailOnSuccess";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_SUCCESS)
  private List<String> emailOnSuccess = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_FAILURE = "emailOnFailure";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_FAILURE)
  private List<String> emailOnFailure = null;

  public static final String SERIALIZED_NAME_ALERT_ON_START = "alertOnStart";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_START)
  private Boolean alertOnStart;

  public static final String SERIALIZED_NAME_ALERT_ON_SUCCESS = "alertOnSuccess";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_SUCCESS)
  private Boolean alertOnSuccess;

  public static final String SERIALIZED_NAME_ALERT_ON_FAILURE = "alertOnFailure";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_FAILURE)
  private Boolean alertOnFailure;

  public StaticallyDefinedRecurringTaskShared() {
  }

  public StaticallyDefinedRecurringTaskShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Recurring Task
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Recurring Task")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public StaticallyDefinedRecurringTaskShared schemas(List<EnumstaticallyDefinedRecurringTaskSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public StaticallyDefinedRecurringTaskShared addSchemasItem(EnumstaticallyDefinedRecurringTaskSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumstaticallyDefinedRecurringTaskSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumstaticallyDefinedRecurringTaskSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public StaticallyDefinedRecurringTaskShared taskJavaClass(String taskJavaClass) {
    
    
    
    
    this.taskJavaClass = taskJavaClass;
    return this;
  }

   /**
   * The fully-qualified name of the Java class that provides the logic for the task to be invoked.
   * @return taskJavaClass
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The fully-qualified name of the Java class that provides the logic for the task to be invoked.")

  public String getTaskJavaClass() {
    return taskJavaClass;
  }


  public void setTaskJavaClass(String taskJavaClass) {
    
    
    
    this.taskJavaClass = taskJavaClass;
  }


  public StaticallyDefinedRecurringTaskShared taskObjectClass(List<String> taskObjectClass) {
    
    
    
    
    this.taskObjectClass = taskObjectClass;
    return this;
  }

  public StaticallyDefinedRecurringTaskShared addTaskObjectClassItem(String taskObjectClassItem) {
    this.taskObjectClass.add(taskObjectClassItem);
    return this;
  }

   /**
   * The names or OIDs of the object classes to include in the tasks that are scheduled from this Statically Defined Recurring Task. All object classes must be defined in the server schema, and the combination of object classes must be valid for a task entry.
   * @return taskObjectClass
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The names or OIDs of the object classes to include in the tasks that are scheduled from this Statically Defined Recurring Task. All object classes must be defined in the server schema, and the combination of object classes must be valid for a task entry.")

  public List<String> getTaskObjectClass() {
    return taskObjectClass;
  }


  public void setTaskObjectClass(List<String> taskObjectClass) {
    
    
    
    this.taskObjectClass = taskObjectClass;
  }


  public StaticallyDefinedRecurringTaskShared taskAttributeValue(List<String> taskAttributeValue) {
    
    
    
    
    this.taskAttributeValue = taskAttributeValue;
    return this;
  }

  public StaticallyDefinedRecurringTaskShared addTaskAttributeValueItem(String taskAttributeValueItem) {
    if (this.taskAttributeValue == null) {
      this.taskAttributeValue = new ArrayList<>();
    }
    this.taskAttributeValue.add(taskAttributeValueItem);
    return this;
  }

   /**
   * The set of attribute values that should be included in the tasks that are scheduled from this Statically Defined Recurring Task. Each value must be in the form {attribute-type}&#x3D;{value}, where {attribute-type} is the name or OID of an attribute type that is defined in the schema and permitted with the configured set of object classes, and {value} is a value to assign to an attribute with that type. A multivalued attribute can be created by providing multiple name-value pairs with the same name and different values.
   * @return taskAttributeValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of attribute values that should be included in the tasks that are scheduled from this Statically Defined Recurring Task. Each value must be in the form {attribute-type}={value}, where {attribute-type} is the name or OID of an attribute type that is defined in the schema and permitted with the configured set of object classes, and {value} is a value to assign to an attribute with that type. A multivalued attribute can be created by providing multiple name-value pairs with the same name and different values.")

  public List<String> getTaskAttributeValue() {
    return taskAttributeValue;
  }


  public void setTaskAttributeValue(List<String> taskAttributeValue) {
    
    
    
    this.taskAttributeValue = taskAttributeValue;
  }


  public StaticallyDefinedRecurringTaskShared cancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
    return this;
  }

   /**
   * Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
   * @return cancelOnTaskDependencyFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).")

  public Boolean getCancelOnTaskDependencyFailure() {
    return cancelOnTaskDependencyFailure;
  }


  public void setCancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
  }


  public StaticallyDefinedRecurringTaskShared emailOnStart(List<String> emailOnStart) {
    
    
    
    
    this.emailOnStart = emailOnStart;
    return this;
  }

  public StaticallyDefinedRecurringTaskShared addEmailOnStartItem(String emailOnStartItem) {
    if (this.emailOnStart == null) {
      this.emailOnStart = new ArrayList<>();
    }
    this.emailOnStart.add(emailOnStartItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnStart() {
    return emailOnStart;
  }


  public void setEmailOnStart(List<String> emailOnStart) {
    
    
    
    this.emailOnStart = emailOnStart;
  }


  public StaticallyDefinedRecurringTaskShared emailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    
    this.emailOnSuccess = emailOnSuccess;
    return this;
  }

  public StaticallyDefinedRecurringTaskShared addEmailOnSuccessItem(String emailOnSuccessItem) {
    if (this.emailOnSuccess == null) {
      this.emailOnSuccess = new ArrayList<>();
    }
    this.emailOnSuccess.add(emailOnSuccessItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnSuccess() {
    return emailOnSuccess;
  }


  public void setEmailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    this.emailOnSuccess = emailOnSuccess;
  }


  public StaticallyDefinedRecurringTaskShared emailOnFailure(List<String> emailOnFailure) {
    
    
    
    
    this.emailOnFailure = emailOnFailure;
    return this;
  }

  public StaticallyDefinedRecurringTaskShared addEmailOnFailureItem(String emailOnFailureItem) {
    if (this.emailOnFailure == null) {
      this.emailOnFailure = new ArrayList<>();
    }
    this.emailOnFailure.add(emailOnFailureItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnFailure() {
    return emailOnFailure;
  }


  public void setEmailOnFailure(List<String> emailOnFailure) {
    
    
    
    this.emailOnFailure = emailOnFailure;
  }


  public StaticallyDefinedRecurringTaskShared alertOnStart(Boolean alertOnStart) {
    
    
    
    
    this.alertOnStart = alertOnStart;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
   * @return alertOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.")

  public Boolean getAlertOnStart() {
    return alertOnStart;
  }


  public void setAlertOnStart(Boolean alertOnStart) {
    
    
    
    this.alertOnStart = alertOnStart;
  }


  public StaticallyDefinedRecurringTaskShared alertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    
    this.alertOnSuccess = alertOnSuccess;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
   * @return alertOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.")

  public Boolean getAlertOnSuccess() {
    return alertOnSuccess;
  }


  public void setAlertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    this.alertOnSuccess = alertOnSuccess;
  }


  public StaticallyDefinedRecurringTaskShared alertOnFailure(Boolean alertOnFailure) {
    
    
    
    
    this.alertOnFailure = alertOnFailure;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
   * @return alertOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.")

  public Boolean getAlertOnFailure() {
    return alertOnFailure;
  }


  public void setAlertOnFailure(Boolean alertOnFailure) {
    
    
    
    this.alertOnFailure = alertOnFailure;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StaticallyDefinedRecurringTaskShared instance itself
   */
  public StaticallyDefinedRecurringTaskShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StaticallyDefinedRecurringTaskShared staticallyDefinedRecurringTaskShared = (StaticallyDefinedRecurringTaskShared) o;
    return Objects.equals(this.description, staticallyDefinedRecurringTaskShared.description) &&
        Objects.equals(this.schemas, staticallyDefinedRecurringTaskShared.schemas) &&
        Objects.equals(this.taskJavaClass, staticallyDefinedRecurringTaskShared.taskJavaClass) &&
        Objects.equals(this.taskObjectClass, staticallyDefinedRecurringTaskShared.taskObjectClass) &&
        Objects.equals(this.taskAttributeValue, staticallyDefinedRecurringTaskShared.taskAttributeValue) &&
        Objects.equals(this.cancelOnTaskDependencyFailure, staticallyDefinedRecurringTaskShared.cancelOnTaskDependencyFailure) &&
        Objects.equals(this.emailOnStart, staticallyDefinedRecurringTaskShared.emailOnStart) &&
        Objects.equals(this.emailOnSuccess, staticallyDefinedRecurringTaskShared.emailOnSuccess) &&
        Objects.equals(this.emailOnFailure, staticallyDefinedRecurringTaskShared.emailOnFailure) &&
        Objects.equals(this.alertOnStart, staticallyDefinedRecurringTaskShared.alertOnStart) &&
        Objects.equals(this.alertOnSuccess, staticallyDefinedRecurringTaskShared.alertOnSuccess) &&
        Objects.equals(this.alertOnFailure, staticallyDefinedRecurringTaskShared.alertOnFailure)&&
        Objects.equals(this.additionalProperties, staticallyDefinedRecurringTaskShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, taskJavaClass, taskObjectClass, taskAttributeValue, cancelOnTaskDependencyFailure, emailOnStart, emailOnSuccess, emailOnFailure, alertOnStart, alertOnSuccess, alertOnFailure, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StaticallyDefinedRecurringTaskShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    taskJavaClass: ").append(toIndentedString(taskJavaClass)).append("\n");
    sb.append("    taskObjectClass: ").append(toIndentedString(taskObjectClass)).append("\n");
    sb.append("    taskAttributeValue: ").append(toIndentedString(taskAttributeValue)).append("\n");
    sb.append("    cancelOnTaskDependencyFailure: ").append(toIndentedString(cancelOnTaskDependencyFailure)).append("\n");
    sb.append("    emailOnStart: ").append(toIndentedString(emailOnStart)).append("\n");
    sb.append("    emailOnSuccess: ").append(toIndentedString(emailOnSuccess)).append("\n");
    sb.append("    emailOnFailure: ").append(toIndentedString(emailOnFailure)).append("\n");
    sb.append("    alertOnStart: ").append(toIndentedString(alertOnStart)).append("\n");
    sb.append("    alertOnSuccess: ").append(toIndentedString(alertOnSuccess)).append("\n");
    sb.append("    alertOnFailure: ").append(toIndentedString(alertOnFailure)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("taskJavaClass");
    openapiFields.add("taskObjectClass");
    openapiFields.add("taskAttributeValue");
    openapiFields.add("cancelOnTaskDependencyFailure");
    openapiFields.add("emailOnStart");
    openapiFields.add("emailOnSuccess");
    openapiFields.add("emailOnFailure");
    openapiFields.add("alertOnStart");
    openapiFields.add("alertOnSuccess");
    openapiFields.add("alertOnFailure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("taskJavaClass");
    openapiRequiredFields.add("taskObjectClass");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StaticallyDefinedRecurringTaskShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StaticallyDefinedRecurringTaskShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StaticallyDefinedRecurringTaskShared is not found in the empty JSON string", StaticallyDefinedRecurringTaskShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StaticallyDefinedRecurringTaskShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("taskJavaClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskJavaClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskJavaClass").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("taskObjectClass") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("taskObjectClass").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskObjectClass` to be an array in the JSON string but got `%s`", jsonObj.get("taskObjectClass").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("taskAttributeValue") != null && !jsonObj.get("taskAttributeValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskAttributeValue` to be an array in the JSON string but got `%s`", jsonObj.get("taskAttributeValue").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnStart") != null && !jsonObj.get("emailOnStart").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnStart` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnStart").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnSuccess") != null && !jsonObj.get("emailOnSuccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnSuccess` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnSuccess").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnFailure") != null && !jsonObj.get("emailOnFailure").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnFailure` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnFailure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StaticallyDefinedRecurringTaskShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StaticallyDefinedRecurringTaskShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StaticallyDefinedRecurringTaskShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StaticallyDefinedRecurringTaskShared.class));

       return (TypeAdapter<T>) new TypeAdapter<StaticallyDefinedRecurringTaskShared>() {
           @Override
           public void write(JsonWriter out, StaticallyDefinedRecurringTaskShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StaticallyDefinedRecurringTaskShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StaticallyDefinedRecurringTaskShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StaticallyDefinedRecurringTaskShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StaticallyDefinedRecurringTaskShared
  * @throws IOException if the JSON string is invalid with respect to StaticallyDefinedRecurringTaskShared
  */
  public static StaticallyDefinedRecurringTaskShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StaticallyDefinedRecurringTaskShared.class);
  }

 /**
  * Convert an instance of StaticallyDefinedRecurringTaskShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

