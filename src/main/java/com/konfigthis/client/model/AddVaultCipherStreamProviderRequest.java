/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumvaultCipherStreamProviderSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddVaultCipherStreamProviderRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddVaultCipherStreamProviderRequest {
  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumvaultCipherStreamProviderSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_VAULT_EXTERNAL_SERVER = "vaultExternalServer";
  @SerializedName(SERIALIZED_NAME_VAULT_EXTERNAL_SERVER)
  private String vaultExternalServer;

  public static final String SERIALIZED_NAME_VAULT_SERVER_BASE_U_R_I = "vaultServerBaseURI";
  @SerializedName(SERIALIZED_NAME_VAULT_SERVER_BASE_U_R_I)
  private List<String> vaultServerBaseURI = null;

  public static final String SERIALIZED_NAME_VAULT_AUTHENTICATION_METHOD = "vaultAuthenticationMethod";
  @SerializedName(SERIALIZED_NAME_VAULT_AUTHENTICATION_METHOD)
  private String vaultAuthenticationMethod;

  public static final String SERIALIZED_NAME_VAULT_SECRET_PATH = "vaultSecretPath";
  @SerializedName(SERIALIZED_NAME_VAULT_SECRET_PATH)
  private String vaultSecretPath;

  public static final String SERIALIZED_NAME_VAULT_SECRET_FIELD_NAME = "vaultSecretFieldName";
  @SerializedName(SERIALIZED_NAME_VAULT_SECRET_FIELD_NAME)
  private String vaultSecretFieldName;

  public static final String SERIALIZED_NAME_VAULT_ENCRYPTION_METADATA_FILE = "vaultEncryptionMetadataFile";
  @SerializedName(SERIALIZED_NAME_VAULT_ENCRYPTION_METADATA_FILE)
  private String vaultEncryptionMetadataFile;

  public static final String SERIALIZED_NAME_TRUST_STORE_FILE = "trustStoreFile";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_FILE)
  private String trustStoreFile;

  public static final String SERIALIZED_NAME_TRUST_STORE_PIN = "trustStorePin";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_PIN)
  private String trustStorePin;

  public static final String SERIALIZED_NAME_TRUST_STORE_TYPE = "trustStoreType";
  @SerializedName(SERIALIZED_NAME_TRUST_STORE_TYPE)
  private String trustStoreType;

  public static final String SERIALIZED_NAME_ITERATION_COUNT = "iterationCount";
  @SerializedName(SERIALIZED_NAME_ITERATION_COUNT)
  private Integer iterationCount;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public AddVaultCipherStreamProviderRequest() {
  }

  public AddVaultCipherStreamProviderRequest providerName(String providerName) {
    
    
    
    
    this.providerName = providerName;
    return this;
  }

   /**
   * Name of the new Cipher Stream Provider
   * @return providerName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Cipher Stream Provider")

  public String getProviderName() {
    return providerName;
  }


  public void setProviderName(String providerName) {
    
    
    
    this.providerName = providerName;
  }


  public AddVaultCipherStreamProviderRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Cipher Stream Provider
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Cipher Stream Provider")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddVaultCipherStreamProviderRequest schemas(List<EnumvaultCipherStreamProviderSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddVaultCipherStreamProviderRequest addSchemasItem(EnumvaultCipherStreamProviderSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumvaultCipherStreamProviderSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumvaultCipherStreamProviderSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddVaultCipherStreamProviderRequest vaultExternalServer(String vaultExternalServer) {
    
    
    
    
    this.vaultExternalServer = vaultExternalServer;
    return this;
  }

   /**
   * An external server definition with information needed to connect and authenticate to the Vault server.
   * @return vaultExternalServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An external server definition with information needed to connect and authenticate to the Vault server.")

  public String getVaultExternalServer() {
    return vaultExternalServer;
  }


  public void setVaultExternalServer(String vaultExternalServer) {
    
    
    
    this.vaultExternalServer = vaultExternalServer;
  }


  public AddVaultCipherStreamProviderRequest vaultServerBaseURI(List<String> vaultServerBaseURI) {
    
    
    
    
    this.vaultServerBaseURI = vaultServerBaseURI;
    return this;
  }

  public AddVaultCipherStreamProviderRequest addVaultServerBaseURIItem(String vaultServerBaseURIItem) {
    if (this.vaultServerBaseURI == null) {
      this.vaultServerBaseURI = new ArrayList<>();
    }
    this.vaultServerBaseURI.add(vaultServerBaseURIItem);
    return this;
  }

   /**
   * The base URL needed to access the Vault server. The base URL should consist of the protocol (\&quot;http\&quot; or \&quot;https\&quot;), the server address (resolvable name or IP address), and the port number. For example, \&quot;https://vault.example.com:8200/\&quot;.
   * @return vaultServerBaseURI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The base URL needed to access the Vault server. The base URL should consist of the protocol (\"http\" or \"https\"), the server address (resolvable name or IP address), and the port number. For example, \"https://vault.example.com:8200/\".")

  public List<String> getVaultServerBaseURI() {
    return vaultServerBaseURI;
  }


  public void setVaultServerBaseURI(List<String> vaultServerBaseURI) {
    
    
    
    this.vaultServerBaseURI = vaultServerBaseURI;
  }


  public AddVaultCipherStreamProviderRequest vaultAuthenticationMethod(String vaultAuthenticationMethod) {
    
    
    
    
    this.vaultAuthenticationMethod = vaultAuthenticationMethod;
    return this;
  }

   /**
   * The mechanism used to authenticate to the Vault server.
   * @return vaultAuthenticationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The mechanism used to authenticate to the Vault server.")

  public String getVaultAuthenticationMethod() {
    return vaultAuthenticationMethod;
  }


  public void setVaultAuthenticationMethod(String vaultAuthenticationMethod) {
    
    
    
    this.vaultAuthenticationMethod = vaultAuthenticationMethod;
  }


  public AddVaultCipherStreamProviderRequest vaultSecretPath(String vaultSecretPath) {
    
    
    
    
    this.vaultSecretPath = vaultSecretPath;
    return this;
  }

   /**
   * The path to the desired secret in the Vault service. This will be appended to the value of the base-url property for the associated Vault external server.
   * @return vaultSecretPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The path to the desired secret in the Vault service. This will be appended to the value of the base-url property for the associated Vault external server.")

  public String getVaultSecretPath() {
    return vaultSecretPath;
  }


  public void setVaultSecretPath(String vaultSecretPath) {
    
    
    
    this.vaultSecretPath = vaultSecretPath;
  }


  public AddVaultCipherStreamProviderRequest vaultSecretFieldName(String vaultSecretFieldName) {
    
    
    
    
    this.vaultSecretFieldName = vaultSecretFieldName;
    return this;
  }

   /**
   * The name of the field in the Vault secret record that contains the passphrase to use to generate the encryption key.
   * @return vaultSecretFieldName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the field in the Vault secret record that contains the passphrase to use to generate the encryption key.")

  public String getVaultSecretFieldName() {
    return vaultSecretFieldName;
  }


  public void setVaultSecretFieldName(String vaultSecretFieldName) {
    
    
    
    this.vaultSecretFieldName = vaultSecretFieldName;
  }


  public AddVaultCipherStreamProviderRequest vaultEncryptionMetadataFile(String vaultEncryptionMetadataFile) {
    
    
    
    
    this.vaultEncryptionMetadataFile = vaultEncryptionMetadataFile;
    return this;
  }

   /**
   * The path to a file that will hold metadata about the encryption performed by this Vault Cipher Stream Provider.
   * @return vaultEncryptionMetadataFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to a file that will hold metadata about the encryption performed by this Vault Cipher Stream Provider.")

  public String getVaultEncryptionMetadataFile() {
    return vaultEncryptionMetadataFile;
  }


  public void setVaultEncryptionMetadataFile(String vaultEncryptionMetadataFile) {
    
    
    
    this.vaultEncryptionMetadataFile = vaultEncryptionMetadataFile;
  }


  public AddVaultCipherStreamProviderRequest trustStoreFile(String trustStoreFile) {
    
    
    
    
    this.trustStoreFile = trustStoreFile;
    return this;
  }

   /**
   * The path to a file containing the information needed to trust the certificate presented by the Vault servers.
   * @return trustStoreFile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The path to a file containing the information needed to trust the certificate presented by the Vault servers.")

  public String getTrustStoreFile() {
    return trustStoreFile;
  }


  public void setTrustStoreFile(String trustStoreFile) {
    
    
    
    this.trustStoreFile = trustStoreFile;
  }


  public AddVaultCipherStreamProviderRequest trustStorePin(String trustStorePin) {
    
    
    
    
    this.trustStorePin = trustStorePin;
    return this;
  }

   /**
   * The passphrase needed to access the contents of the trust store. This is only required if a trust store file is required, and if that trust store requires a PIN to access its contents.
   * @return trustStorePin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The passphrase needed to access the contents of the trust store. This is only required if a trust store file is required, and if that trust store requires a PIN to access its contents.")

  public String getTrustStorePin() {
    return trustStorePin;
  }


  public void setTrustStorePin(String trustStorePin) {
    
    
    
    this.trustStorePin = trustStorePin;
  }


  public AddVaultCipherStreamProviderRequest trustStoreType(String trustStoreType) {
    
    
    
    
    this.trustStoreType = trustStoreType;
    return this;
  }

   /**
   * The store type for the specified trust store file. The value should likely be one of \&quot;JKS\&quot; or \&quot;PKCS12\&quot;.
   * @return trustStoreType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The store type for the specified trust store file. The value should likely be one of \"JKS\" or \"PKCS12\".")

  public String getTrustStoreType() {
    return trustStoreType;
  }


  public void setTrustStoreType(String trustStoreType) {
    
    
    
    this.trustStoreType = trustStoreType;
  }


  public AddVaultCipherStreamProviderRequest iterationCount(Integer iterationCount) {
    
    
    
    
    this.iterationCount = iterationCount;
    return this;
  }

   /**
   * The PBKDF2 iteration count that will be used when deriving the encryption key used to protect the encryption settings database.
   * @return iterationCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The PBKDF2 iteration count that will be used when deriving the encryption key used to protect the encryption settings database.")

  public Integer getIterationCount() {
    return iterationCount;
  }


  public void setIterationCount(Integer iterationCount) {
    
    
    
    this.iterationCount = iterationCount;
  }


  public AddVaultCipherStreamProviderRequest enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether this Cipher Stream Provider is enabled for use in the Directory Server.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether this Cipher Stream Provider is enabled for use in the Directory Server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddVaultCipherStreamProviderRequest instance itself
   */
  public AddVaultCipherStreamProviderRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddVaultCipherStreamProviderRequest addVaultCipherStreamProviderRequest = (AddVaultCipherStreamProviderRequest) o;
    return Objects.equals(this.providerName, addVaultCipherStreamProviderRequest.providerName) &&
        Objects.equals(this.description, addVaultCipherStreamProviderRequest.description) &&
        Objects.equals(this.schemas, addVaultCipherStreamProviderRequest.schemas) &&
        Objects.equals(this.vaultExternalServer, addVaultCipherStreamProviderRequest.vaultExternalServer) &&
        Objects.equals(this.vaultServerBaseURI, addVaultCipherStreamProviderRequest.vaultServerBaseURI) &&
        Objects.equals(this.vaultAuthenticationMethod, addVaultCipherStreamProviderRequest.vaultAuthenticationMethod) &&
        Objects.equals(this.vaultSecretPath, addVaultCipherStreamProviderRequest.vaultSecretPath) &&
        Objects.equals(this.vaultSecretFieldName, addVaultCipherStreamProviderRequest.vaultSecretFieldName) &&
        Objects.equals(this.vaultEncryptionMetadataFile, addVaultCipherStreamProviderRequest.vaultEncryptionMetadataFile) &&
        Objects.equals(this.trustStoreFile, addVaultCipherStreamProviderRequest.trustStoreFile) &&
        Objects.equals(this.trustStorePin, addVaultCipherStreamProviderRequest.trustStorePin) &&
        Objects.equals(this.trustStoreType, addVaultCipherStreamProviderRequest.trustStoreType) &&
        Objects.equals(this.iterationCount, addVaultCipherStreamProviderRequest.iterationCount) &&
        Objects.equals(this.enabled, addVaultCipherStreamProviderRequest.enabled)&&
        Objects.equals(this.additionalProperties, addVaultCipherStreamProviderRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerName, description, schemas, vaultExternalServer, vaultServerBaseURI, vaultAuthenticationMethod, vaultSecretPath, vaultSecretFieldName, vaultEncryptionMetadataFile, trustStoreFile, trustStorePin, trustStoreType, iterationCount, enabled, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddVaultCipherStreamProviderRequest {\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    vaultExternalServer: ").append(toIndentedString(vaultExternalServer)).append("\n");
    sb.append("    vaultServerBaseURI: ").append(toIndentedString(vaultServerBaseURI)).append("\n");
    sb.append("    vaultAuthenticationMethod: ").append(toIndentedString(vaultAuthenticationMethod)).append("\n");
    sb.append("    vaultSecretPath: ").append(toIndentedString(vaultSecretPath)).append("\n");
    sb.append("    vaultSecretFieldName: ").append(toIndentedString(vaultSecretFieldName)).append("\n");
    sb.append("    vaultEncryptionMetadataFile: ").append(toIndentedString(vaultEncryptionMetadataFile)).append("\n");
    sb.append("    trustStoreFile: ").append(toIndentedString(trustStoreFile)).append("\n");
    sb.append("    trustStorePin: ").append(toIndentedString(trustStorePin)).append("\n");
    sb.append("    trustStoreType: ").append(toIndentedString(trustStoreType)).append("\n");
    sb.append("    iterationCount: ").append(toIndentedString(iterationCount)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("providerName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("vaultExternalServer");
    openapiFields.add("vaultServerBaseURI");
    openapiFields.add("vaultAuthenticationMethod");
    openapiFields.add("vaultSecretPath");
    openapiFields.add("vaultSecretFieldName");
    openapiFields.add("vaultEncryptionMetadataFile");
    openapiFields.add("trustStoreFile");
    openapiFields.add("trustStorePin");
    openapiFields.add("trustStoreType");
    openapiFields.add("iterationCount");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("providerName");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("vaultSecretPath");
    openapiRequiredFields.add("vaultSecretFieldName");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddVaultCipherStreamProviderRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddVaultCipherStreamProviderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddVaultCipherStreamProviderRequest is not found in the empty JSON string", AddVaultCipherStreamProviderRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddVaultCipherStreamProviderRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("vaultExternalServer") != null && !jsonObj.get("vaultExternalServer").isJsonNull()) && !jsonObj.get("vaultExternalServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultExternalServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultExternalServer").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vaultServerBaseURI") != null && !jsonObj.get("vaultServerBaseURI").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultServerBaseURI` to be an array in the JSON string but got `%s`", jsonObj.get("vaultServerBaseURI").toString()));
      }
      if ((jsonObj.get("vaultAuthenticationMethod") != null && !jsonObj.get("vaultAuthenticationMethod").isJsonNull()) && !jsonObj.get("vaultAuthenticationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultAuthenticationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultAuthenticationMethod").toString()));
      }
      if (!jsonObj.get("vaultSecretPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultSecretPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultSecretPath").toString()));
      }
      if (!jsonObj.get("vaultSecretFieldName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultSecretFieldName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultSecretFieldName").toString()));
      }
      if ((jsonObj.get("vaultEncryptionMetadataFile") != null && !jsonObj.get("vaultEncryptionMetadataFile").isJsonNull()) && !jsonObj.get("vaultEncryptionMetadataFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vaultEncryptionMetadataFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vaultEncryptionMetadataFile").toString()));
      }
      if ((jsonObj.get("trustStoreFile") != null && !jsonObj.get("trustStoreFile").isJsonNull()) && !jsonObj.get("trustStoreFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStoreFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStoreFile").toString()));
      }
      if ((jsonObj.get("trustStorePin") != null && !jsonObj.get("trustStorePin").isJsonNull()) && !jsonObj.get("trustStorePin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStorePin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStorePin").toString()));
      }
      if ((jsonObj.get("trustStoreType") != null && !jsonObj.get("trustStoreType").isJsonNull()) && !jsonObj.get("trustStoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustStoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustStoreType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddVaultCipherStreamProviderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddVaultCipherStreamProviderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddVaultCipherStreamProviderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddVaultCipherStreamProviderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddVaultCipherStreamProviderRequest>() {
           @Override
           public void write(JsonWriter out, AddVaultCipherStreamProviderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddVaultCipherStreamProviderRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddVaultCipherStreamProviderRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddVaultCipherStreamProviderRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddVaultCipherStreamProviderRequest
  * @throws IOException if the JSON string is invalid with respect to AddVaultCipherStreamProviderRequest
  */
  public static AddVaultCipherStreamProviderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddVaultCipherStreamProviderRequest.class);
  }

 /**
  * Convert an instance of AddVaultCipherStreamProviderRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

