/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumsmtpAccountStatusNotificationHandlerSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AddSmtpAccountStatusNotificationHandlerRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AddSmtpAccountStatusNotificationHandlerRequest {
  public static final String SERIALIZED_NAME_HANDLER_NAME = "handlerName";
  @SerializedName(SERIALIZED_NAME_HANDLER_NAME)
  private String handlerName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumsmtpAccountStatusNotificationHandlerSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS_ATTRIBUTE_TYPE = "emailAddressAttributeType";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS_ATTRIBUTE_TYPE)
  private List<String> emailAddressAttributeType = null;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS_J_S_O_N_FIELD = "emailAddressJSONField";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS_J_S_O_N_FIELD)
  private String emailAddressJSONField;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS_J_S_O_N_OBJECT_FILTER = "emailAddressJSONObjectFilter";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS_J_S_O_N_OBJECT_FILTER)
  private String emailAddressJSONObjectFilter;

  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS = "recipientAddress";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS)
  private List<String> recipientAddress = null;

  public static final String SERIALIZED_NAME_SEND_MESSAGE_WITHOUT_END_USER_ADDRESS = "sendMessageWithoutEndUserAddress";
  @SerializedName(SERIALIZED_NAME_SEND_MESSAGE_WITHOUT_END_USER_ADDRESS)
  private Boolean sendMessageWithoutEndUserAddress;

  public static final String SERIALIZED_NAME_SENDER_ADDRESS = "senderAddress";
  @SerializedName(SERIALIZED_NAME_SENDER_ADDRESS)
  private String senderAddress;

  public static final String SERIALIZED_NAME_MESSAGE_SUBJECT = "messageSubject";
  @SerializedName(SERIALIZED_NAME_MESSAGE_SUBJECT)
  private List<String> messageSubject = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_TEMPLATE_FILE = "messageTemplateFile";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TEMPLATE_FILE)
  private List<String> messageTemplateFile = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ASYNCHRONOUS = "asynchronous";
  @SerializedName(SERIALIZED_NAME_ASYNCHRONOUS)
  private Boolean asynchronous;

  public static final String SERIALIZED_NAME_ACCOUNT_AUTHENTICATION_NOTIFICATION_RESULT_CRITERIA = "accountAuthenticationNotificationResultCriteria";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_AUTHENTICATION_NOTIFICATION_RESULT_CRITERIA)
  private String accountAuthenticationNotificationResultCriteria;

  public static final String SERIALIZED_NAME_ACCOUNT_CREATION_NOTIFICATION_REQUEST_CRITERIA = "accountCreationNotificationRequestCriteria";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CREATION_NOTIFICATION_REQUEST_CRITERIA)
  private String accountCreationNotificationRequestCriteria;

  public static final String SERIALIZED_NAME_ACCOUNT_DELETION_NOTIFICATION_REQUEST_CRITERIA = "accountDeletionNotificationRequestCriteria";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_DELETION_NOTIFICATION_REQUEST_CRITERIA)
  private String accountDeletionNotificationRequestCriteria;

  public static final String SERIALIZED_NAME_ACCOUNT_UPDATE_NOTIFICATION_REQUEST_CRITERIA = "accountUpdateNotificationRequestCriteria";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_UPDATE_NOTIFICATION_REQUEST_CRITERIA)
  private String accountUpdateNotificationRequestCriteria;

  public AddSmtpAccountStatusNotificationHandlerRequest() {
  }

  public AddSmtpAccountStatusNotificationHandlerRequest handlerName(String handlerName) {
    
    
    
    
    this.handlerName = handlerName;
    return this;
  }

   /**
   * Name of the new Account Status Notification Handler
   * @return handlerName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the new Account Status Notification Handler")

  public String getHandlerName() {
    return handlerName;
  }


  public void setHandlerName(String handlerName) {
    
    
    
    this.handlerName = handlerName;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Account Status Notification Handler
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Account Status Notification Handler")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest schemas(List<EnumsmtpAccountStatusNotificationHandlerSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AddSmtpAccountStatusNotificationHandlerRequest addSchemasItem(EnumsmtpAccountStatusNotificationHandlerSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumsmtpAccountStatusNotificationHandlerSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumsmtpAccountStatusNotificationHandlerSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest emailAddressAttributeType(List<String> emailAddressAttributeType) {
    
    
    
    
    this.emailAddressAttributeType = emailAddressAttributeType;
    return this;
  }

  public AddSmtpAccountStatusNotificationHandlerRequest addEmailAddressAttributeTypeItem(String emailAddressAttributeTypeItem) {
    if (this.emailAddressAttributeType == null) {
      this.emailAddressAttributeType = new ArrayList<>();
    }
    this.emailAddressAttributeType.add(emailAddressAttributeTypeItem);
    return this;
  }

   /**
   * Specifies which attribute in the user&#39;s entries may be used to obtain the email address when notifying the end user.
   * @return emailAddressAttributeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies which attribute in the user's entries may be used to obtain the email address when notifying the end user.")

  public List<String> getEmailAddressAttributeType() {
    return emailAddressAttributeType;
  }


  public void setEmailAddressAttributeType(List<String> emailAddressAttributeType) {
    
    
    
    this.emailAddressAttributeType = emailAddressAttributeType;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest emailAddressJSONField(String emailAddressJSONField) {
    
    
    
    
    this.emailAddressJSONField = emailAddressJSONField;
    return this;
  }

   /**
   * The name of the JSON field whose value is the email address to which the message should be sent. The email address must be contained in a top-level field whose value is a single string.
   * @return emailAddressJSONField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the JSON field whose value is the email address to which the message should be sent. The email address must be contained in a top-level field whose value is a single string.")

  public String getEmailAddressJSONField() {
    return emailAddressJSONField;
  }


  public void setEmailAddressJSONField(String emailAddressJSONField) {
    
    
    
    this.emailAddressJSONField = emailAddressJSONField;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest emailAddressJSONObjectFilter(String emailAddressJSONObjectFilter) {
    
    
    
    
    this.emailAddressJSONObjectFilter = emailAddressJSONObjectFilter;
    return this;
  }

   /**
   * A JSON object filter that may be used to identify which email address value to use when sending the message.
   * @return emailAddressJSONObjectFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON object filter that may be used to identify which email address value to use when sending the message.")

  public String getEmailAddressJSONObjectFilter() {
    return emailAddressJSONObjectFilter;
  }


  public void setEmailAddressJSONObjectFilter(String emailAddressJSONObjectFilter) {
    
    
    
    this.emailAddressJSONObjectFilter = emailAddressJSONObjectFilter;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest recipientAddress(List<String> recipientAddress) {
    
    
    
    
    this.recipientAddress = recipientAddress;
    return this;
  }

  public AddSmtpAccountStatusNotificationHandlerRequest addRecipientAddressItem(String recipientAddressItem) {
    if (this.recipientAddress == null) {
      this.recipientAddress = new ArrayList<>();
    }
    this.recipientAddress.add(recipientAddressItem);
    return this;
  }

   /**
   * Specifies an email address to which notification messages are sent, either instead of or in addition to the end user for whom the notification has been generated.
   * @return recipientAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies an email address to which notification messages are sent, either instead of or in addition to the end user for whom the notification has been generated.")

  public List<String> getRecipientAddress() {
    return recipientAddress;
  }


  public void setRecipientAddress(List<String> recipientAddress) {
    
    
    
    this.recipientAddress = recipientAddress;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest sendMessageWithoutEndUserAddress(Boolean sendMessageWithoutEndUserAddress) {
    
    
    
    
    this.sendMessageWithoutEndUserAddress = sendMessageWithoutEndUserAddress;
    return this;
  }

   /**
   * Indicates whether an email notification message should be generated and sent to the set of notification recipients even if the user entry does not contain any values for any of the email address attributes (that is, in cases when it is not possible to notify the end user).
   * @return sendMessageWithoutEndUserAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether an email notification message should be generated and sent to the set of notification recipients even if the user entry does not contain any values for any of the email address attributes (that is, in cases when it is not possible to notify the end user).")

  public Boolean getSendMessageWithoutEndUserAddress() {
    return sendMessageWithoutEndUserAddress;
  }


  public void setSendMessageWithoutEndUserAddress(Boolean sendMessageWithoutEndUserAddress) {
    
    
    
    this.sendMessageWithoutEndUserAddress = sendMessageWithoutEndUserAddress;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest senderAddress(String senderAddress) {
    
    
    
    
    this.senderAddress = senderAddress;
    return this;
  }

   /**
   * Specifies the email address from which the message is sent. Note that this does not necessarily have to be a legitimate email address.
   * @return senderAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the email address from which the message is sent. Note that this does not necessarily have to be a legitimate email address.")

  public String getSenderAddress() {
    return senderAddress;
  }


  public void setSenderAddress(String senderAddress) {
    
    
    
    this.senderAddress = senderAddress;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest messageSubject(List<String> messageSubject) {
    
    
    
    
    this.messageSubject = messageSubject;
    return this;
  }

  public AddSmtpAccountStatusNotificationHandlerRequest addMessageSubjectItem(String messageSubjectItem) {
    this.messageSubject.add(messageSubjectItem);
    return this;
  }

   /**
   * Specifies the subject that should be used for email messages generated by this account status notification handler.
   * @return messageSubject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the subject that should be used for email messages generated by this account status notification handler.")

  public List<String> getMessageSubject() {
    return messageSubject;
  }


  public void setMessageSubject(List<String> messageSubject) {
    
    
    
    this.messageSubject = messageSubject;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest messageTemplateFile(List<String> messageTemplateFile) {
    
    
    
    
    this.messageTemplateFile = messageTemplateFile;
    return this;
  }

  public AddSmtpAccountStatusNotificationHandlerRequest addMessageTemplateFileItem(String messageTemplateFileItem) {
    this.messageTemplateFile.add(messageTemplateFileItem);
    return this;
  }

   /**
   * Specifies the path to the file containing the message template to generate the email notification messages.
   * @return messageTemplateFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the path to the file containing the message template to generate the email notification messages.")

  public List<String> getMessageTemplateFile() {
    return messageTemplateFile;
  }


  public void setMessageTemplateFile(List<String> messageTemplateFile) {
    
    
    
    this.messageTemplateFile = messageTemplateFile;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Account Status Notification Handler is enabled. Only enabled handlers are invoked whenever a related event occurs in the server.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Account Status Notification Handler is enabled. Only enabled handlers are invoked whenever a related event occurs in the server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest asynchronous(Boolean asynchronous) {
    
    
    
    
    this.asynchronous = asynchronous;
    return this;
  }

   /**
   * Indicates whether the server should attempt to invoke this Account Status Notification Handler in a background thread so that any potentially-expensive processing (e.g., performing network communication to deliver a message) will not delay processing for the operation that triggered the notification.
   * @return asynchronous
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should attempt to invoke this Account Status Notification Handler in a background thread so that any potentially-expensive processing (e.g., performing network communication to deliver a message) will not delay processing for the operation that triggered the notification.")

  public Boolean getAsynchronous() {
    return asynchronous;
  }


  public void setAsynchronous(Boolean asynchronous) {
    
    
    
    this.asynchronous = asynchronous;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest accountAuthenticationNotificationResultCriteria(String accountAuthenticationNotificationResultCriteria) {
    
    
    
    
    this.accountAuthenticationNotificationResultCriteria = accountAuthenticationNotificationResultCriteria;
    return this;
  }

   /**
   * A result criteria object that identifies which successful bind operations should result in account authentication notifications for this handler.
   * @return accountAuthenticationNotificationResultCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A result criteria object that identifies which successful bind operations should result in account authentication notifications for this handler.")

  public String getAccountAuthenticationNotificationResultCriteria() {
    return accountAuthenticationNotificationResultCriteria;
  }


  public void setAccountAuthenticationNotificationResultCriteria(String accountAuthenticationNotificationResultCriteria) {
    
    
    
    this.accountAuthenticationNotificationResultCriteria = accountAuthenticationNotificationResultCriteria;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest accountCreationNotificationRequestCriteria(String accountCreationNotificationRequestCriteria) {
    
    
    
    
    this.accountCreationNotificationRequestCriteria = accountCreationNotificationRequestCriteria;
    return this;
  }

   /**
   * A request criteria object that identifies which add requests should result in account creation notifications for this handler.
   * @return accountCreationNotificationRequestCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A request criteria object that identifies which add requests should result in account creation notifications for this handler.")

  public String getAccountCreationNotificationRequestCriteria() {
    return accountCreationNotificationRequestCriteria;
  }


  public void setAccountCreationNotificationRequestCriteria(String accountCreationNotificationRequestCriteria) {
    
    
    
    this.accountCreationNotificationRequestCriteria = accountCreationNotificationRequestCriteria;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest accountDeletionNotificationRequestCriteria(String accountDeletionNotificationRequestCriteria) {
    
    
    
    
    this.accountDeletionNotificationRequestCriteria = accountDeletionNotificationRequestCriteria;
    return this;
  }

   /**
   * A request criteria object that identifies which delete requests should result in account deletion notifications for this handler.
   * @return accountDeletionNotificationRequestCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A request criteria object that identifies which delete requests should result in account deletion notifications for this handler.")

  public String getAccountDeletionNotificationRequestCriteria() {
    return accountDeletionNotificationRequestCriteria;
  }


  public void setAccountDeletionNotificationRequestCriteria(String accountDeletionNotificationRequestCriteria) {
    
    
    
    this.accountDeletionNotificationRequestCriteria = accountDeletionNotificationRequestCriteria;
  }


  public AddSmtpAccountStatusNotificationHandlerRequest accountUpdateNotificationRequestCriteria(String accountUpdateNotificationRequestCriteria) {
    
    
    
    
    this.accountUpdateNotificationRequestCriteria = accountUpdateNotificationRequestCriteria;
    return this;
  }

   /**
   * A request criteria object that identifies which modify and modify DN requests should result in account update notifications for this handler.
   * @return accountUpdateNotificationRequestCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A request criteria object that identifies which modify and modify DN requests should result in account update notifications for this handler.")

  public String getAccountUpdateNotificationRequestCriteria() {
    return accountUpdateNotificationRequestCriteria;
  }


  public void setAccountUpdateNotificationRequestCriteria(String accountUpdateNotificationRequestCriteria) {
    
    
    
    this.accountUpdateNotificationRequestCriteria = accountUpdateNotificationRequestCriteria;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AddSmtpAccountStatusNotificationHandlerRequest instance itself
   */
  public AddSmtpAccountStatusNotificationHandlerRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddSmtpAccountStatusNotificationHandlerRequest addSmtpAccountStatusNotificationHandlerRequest = (AddSmtpAccountStatusNotificationHandlerRequest) o;
    return Objects.equals(this.handlerName, addSmtpAccountStatusNotificationHandlerRequest.handlerName) &&
        Objects.equals(this.description, addSmtpAccountStatusNotificationHandlerRequest.description) &&
        Objects.equals(this.schemas, addSmtpAccountStatusNotificationHandlerRequest.schemas) &&
        Objects.equals(this.emailAddressAttributeType, addSmtpAccountStatusNotificationHandlerRequest.emailAddressAttributeType) &&
        Objects.equals(this.emailAddressJSONField, addSmtpAccountStatusNotificationHandlerRequest.emailAddressJSONField) &&
        Objects.equals(this.emailAddressJSONObjectFilter, addSmtpAccountStatusNotificationHandlerRequest.emailAddressJSONObjectFilter) &&
        Objects.equals(this.recipientAddress, addSmtpAccountStatusNotificationHandlerRequest.recipientAddress) &&
        Objects.equals(this.sendMessageWithoutEndUserAddress, addSmtpAccountStatusNotificationHandlerRequest.sendMessageWithoutEndUserAddress) &&
        Objects.equals(this.senderAddress, addSmtpAccountStatusNotificationHandlerRequest.senderAddress) &&
        Objects.equals(this.messageSubject, addSmtpAccountStatusNotificationHandlerRequest.messageSubject) &&
        Objects.equals(this.messageTemplateFile, addSmtpAccountStatusNotificationHandlerRequest.messageTemplateFile) &&
        Objects.equals(this.enabled, addSmtpAccountStatusNotificationHandlerRequest.enabled) &&
        Objects.equals(this.asynchronous, addSmtpAccountStatusNotificationHandlerRequest.asynchronous) &&
        Objects.equals(this.accountAuthenticationNotificationResultCriteria, addSmtpAccountStatusNotificationHandlerRequest.accountAuthenticationNotificationResultCriteria) &&
        Objects.equals(this.accountCreationNotificationRequestCriteria, addSmtpAccountStatusNotificationHandlerRequest.accountCreationNotificationRequestCriteria) &&
        Objects.equals(this.accountDeletionNotificationRequestCriteria, addSmtpAccountStatusNotificationHandlerRequest.accountDeletionNotificationRequestCriteria) &&
        Objects.equals(this.accountUpdateNotificationRequestCriteria, addSmtpAccountStatusNotificationHandlerRequest.accountUpdateNotificationRequestCriteria)&&
        Objects.equals(this.additionalProperties, addSmtpAccountStatusNotificationHandlerRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(handlerName, description, schemas, emailAddressAttributeType, emailAddressJSONField, emailAddressJSONObjectFilter, recipientAddress, sendMessageWithoutEndUserAddress, senderAddress, messageSubject, messageTemplateFile, enabled, asynchronous, accountAuthenticationNotificationResultCriteria, accountCreationNotificationRequestCriteria, accountDeletionNotificationRequestCriteria, accountUpdateNotificationRequestCriteria, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddSmtpAccountStatusNotificationHandlerRequest {\n");
    sb.append("    handlerName: ").append(toIndentedString(handlerName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    emailAddressAttributeType: ").append(toIndentedString(emailAddressAttributeType)).append("\n");
    sb.append("    emailAddressJSONField: ").append(toIndentedString(emailAddressJSONField)).append("\n");
    sb.append("    emailAddressJSONObjectFilter: ").append(toIndentedString(emailAddressJSONObjectFilter)).append("\n");
    sb.append("    recipientAddress: ").append(toIndentedString(recipientAddress)).append("\n");
    sb.append("    sendMessageWithoutEndUserAddress: ").append(toIndentedString(sendMessageWithoutEndUserAddress)).append("\n");
    sb.append("    senderAddress: ").append(toIndentedString(senderAddress)).append("\n");
    sb.append("    messageSubject: ").append(toIndentedString(messageSubject)).append("\n");
    sb.append("    messageTemplateFile: ").append(toIndentedString(messageTemplateFile)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    asynchronous: ").append(toIndentedString(asynchronous)).append("\n");
    sb.append("    accountAuthenticationNotificationResultCriteria: ").append(toIndentedString(accountAuthenticationNotificationResultCriteria)).append("\n");
    sb.append("    accountCreationNotificationRequestCriteria: ").append(toIndentedString(accountCreationNotificationRequestCriteria)).append("\n");
    sb.append("    accountDeletionNotificationRequestCriteria: ").append(toIndentedString(accountDeletionNotificationRequestCriteria)).append("\n");
    sb.append("    accountUpdateNotificationRequestCriteria: ").append(toIndentedString(accountUpdateNotificationRequestCriteria)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("handlerName");
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("emailAddressAttributeType");
    openapiFields.add("emailAddressJSONField");
    openapiFields.add("emailAddressJSONObjectFilter");
    openapiFields.add("recipientAddress");
    openapiFields.add("sendMessageWithoutEndUserAddress");
    openapiFields.add("senderAddress");
    openapiFields.add("messageSubject");
    openapiFields.add("messageTemplateFile");
    openapiFields.add("enabled");
    openapiFields.add("asynchronous");
    openapiFields.add("accountAuthenticationNotificationResultCriteria");
    openapiFields.add("accountCreationNotificationRequestCriteria");
    openapiFields.add("accountDeletionNotificationRequestCriteria");
    openapiFields.add("accountUpdateNotificationRequestCriteria");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("handlerName");
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("senderAddress");
    openapiRequiredFields.add("messageSubject");
    openapiRequiredFields.add("messageTemplateFile");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AddSmtpAccountStatusNotificationHandlerRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AddSmtpAccountStatusNotificationHandlerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddSmtpAccountStatusNotificationHandlerRequest is not found in the empty JSON string", AddSmtpAccountStatusNotificationHandlerRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddSmtpAccountStatusNotificationHandlerRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("handlerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handlerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handlerName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailAddressAttributeType") != null && !jsonObj.get("emailAddressAttributeType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddressAttributeType` to be an array in the JSON string but got `%s`", jsonObj.get("emailAddressAttributeType").toString()));
      }
      if ((jsonObj.get("emailAddressJSONField") != null && !jsonObj.get("emailAddressJSONField").isJsonNull()) && !jsonObj.get("emailAddressJSONField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddressJSONField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddressJSONField").toString()));
      }
      if ((jsonObj.get("emailAddressJSONObjectFilter") != null && !jsonObj.get("emailAddressJSONObjectFilter").isJsonNull()) && !jsonObj.get("emailAddressJSONObjectFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddressJSONObjectFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddressJSONObjectFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recipientAddress") != null && !jsonObj.get("recipientAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientAddress` to be an array in the JSON string but got `%s`", jsonObj.get("recipientAddress").toString()));
      }
      if (!jsonObj.get("senderAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderAddress").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("messageSubject") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("messageSubject").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageSubject` to be an array in the JSON string but got `%s`", jsonObj.get("messageSubject").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("messageTemplateFile") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("messageTemplateFile").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageTemplateFile` to be an array in the JSON string but got `%s`", jsonObj.get("messageTemplateFile").toString()));
      }
      if ((jsonObj.get("accountAuthenticationNotificationResultCriteria") != null && !jsonObj.get("accountAuthenticationNotificationResultCriteria").isJsonNull()) && !jsonObj.get("accountAuthenticationNotificationResultCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountAuthenticationNotificationResultCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountAuthenticationNotificationResultCriteria").toString()));
      }
      if ((jsonObj.get("accountCreationNotificationRequestCriteria") != null && !jsonObj.get("accountCreationNotificationRequestCriteria").isJsonNull()) && !jsonObj.get("accountCreationNotificationRequestCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCreationNotificationRequestCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCreationNotificationRequestCriteria").toString()));
      }
      if ((jsonObj.get("accountDeletionNotificationRequestCriteria") != null && !jsonObj.get("accountDeletionNotificationRequestCriteria").isJsonNull()) && !jsonObj.get("accountDeletionNotificationRequestCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountDeletionNotificationRequestCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountDeletionNotificationRequestCriteria").toString()));
      }
      if ((jsonObj.get("accountUpdateNotificationRequestCriteria") != null && !jsonObj.get("accountUpdateNotificationRequestCriteria").isJsonNull()) && !jsonObj.get("accountUpdateNotificationRequestCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountUpdateNotificationRequestCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountUpdateNotificationRequestCriteria").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddSmtpAccountStatusNotificationHandlerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddSmtpAccountStatusNotificationHandlerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddSmtpAccountStatusNotificationHandlerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddSmtpAccountStatusNotificationHandlerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddSmtpAccountStatusNotificationHandlerRequest>() {
           @Override
           public void write(JsonWriter out, AddSmtpAccountStatusNotificationHandlerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AddSmtpAccountStatusNotificationHandlerRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AddSmtpAccountStatusNotificationHandlerRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AddSmtpAccountStatusNotificationHandlerRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AddSmtpAccountStatusNotificationHandlerRequest
  * @throws IOException if the JSON string is invalid with respect to AddSmtpAccountStatusNotificationHandlerRequest
  */
  public static AddSmtpAccountStatusNotificationHandlerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddSmtpAccountStatusNotificationHandlerRequest.class);
  }

 /**
  * Convert an instance of AddSmtpAccountStatusNotificationHandlerRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

