/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumconnectionCriteriaAllIncludedUserPrivilegeProp;
import com.konfigthis.client.model.EnumconnectionCriteriaAnyIncludedUserPrivilegeProp;
import com.konfigthis.client.model.EnumconnectionCriteriaAuthenticationSecurityLevelProp;
import com.konfigthis.client.model.EnumconnectionCriteriaCommunicationSecurityLevelProp;
import com.konfigthis.client.model.EnumconnectionCriteriaNoneIncludedUserPrivilegeProp;
import com.konfigthis.client.model.EnumconnectionCriteriaNotAllIncludedUserPrivilegeProp;
import com.konfigthis.client.model.EnumconnectionCriteriaUserAuthTypeProp;
import com.konfigthis.client.model.EnumsimpleConnectionCriteriaSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SimpleConnectionCriteriaShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SimpleConnectionCriteriaShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumsimpleConnectionCriteriaSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_CLIENT_ADDRESS = "includedClientAddress";
  @SerializedName(SERIALIZED_NAME_INCLUDED_CLIENT_ADDRESS)
  private List<String> includedClientAddress = null;

  public static final String SERIALIZED_NAME_EXCLUDED_CLIENT_ADDRESS = "excludedClientAddress";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_CLIENT_ADDRESS)
  private List<String> excludedClientAddress = null;

  public static final String SERIALIZED_NAME_INCLUDED_CONNECTION_HANDLER = "includedConnectionHandler";
  @SerializedName(SERIALIZED_NAME_INCLUDED_CONNECTION_HANDLER)
  private List<String> includedConnectionHandler = null;

  public static final String SERIALIZED_NAME_EXCLUDED_CONNECTION_HANDLER = "excludedConnectionHandler";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_CONNECTION_HANDLER)
  private List<String> excludedConnectionHandler = null;

  public static final String SERIALIZED_NAME_INCLUDED_PROTOCOL = "includedProtocol";
  @SerializedName(SERIALIZED_NAME_INCLUDED_PROTOCOL)
  private List<String> includedProtocol = null;

  public static final String SERIALIZED_NAME_EXCLUDED_PROTOCOL = "excludedProtocol";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_PROTOCOL)
  private List<String> excludedProtocol = null;

  public static final String SERIALIZED_NAME_COMMUNICATION_SECURITY_LEVEL = "communicationSecurityLevel";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_SECURITY_LEVEL)
  private EnumconnectionCriteriaCommunicationSecurityLevelProp communicationSecurityLevel;

  public static final String SERIALIZED_NAME_USER_AUTH_TYPE = "userAuthType";
  @SerializedName(SERIALIZED_NAME_USER_AUTH_TYPE)
  private List<EnumconnectionCriteriaUserAuthTypeProp> userAuthType = null;

  public static final String SERIALIZED_NAME_AUTHENTICATION_SECURITY_LEVEL = "authenticationSecurityLevel";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_SECURITY_LEVEL)
  private EnumconnectionCriteriaAuthenticationSecurityLevelProp authenticationSecurityLevel;

  public static final String SERIALIZED_NAME_INCLUDED_USER_S_A_S_L_MECHANISM = "includedUserSASLMechanism";
  @SerializedName(SERIALIZED_NAME_INCLUDED_USER_S_A_S_L_MECHANISM)
  private List<String> includedUserSASLMechanism = null;

  public static final String SERIALIZED_NAME_EXCLUDED_USER_S_A_S_L_MECHANISM = "excludedUserSASLMechanism";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_USER_S_A_S_L_MECHANISM)
  private List<String> excludedUserSASLMechanism = null;

  public static final String SERIALIZED_NAME_INCLUDED_USER_BASE_D_N = "includedUserBaseDN";
  @SerializedName(SERIALIZED_NAME_INCLUDED_USER_BASE_D_N)
  private List<String> includedUserBaseDN = null;

  public static final String SERIALIZED_NAME_EXCLUDED_USER_BASE_D_N = "excludedUserBaseDN";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_USER_BASE_D_N)
  private List<String> excludedUserBaseDN = null;

  public static final String SERIALIZED_NAME_ALL_INCLUDED_USER_GROUP_D_N = "allIncludedUserGroupDN";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_USER_GROUP_D_N)
  private List<String> allIncludedUserGroupDN = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_USER_GROUP_D_N = "anyIncludedUserGroupDN";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_USER_GROUP_D_N)
  private List<String> anyIncludedUserGroupDN = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_USER_GROUP_D_N = "notAllIncludedUserGroupDN";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_USER_GROUP_D_N)
  private List<String> notAllIncludedUserGroupDN = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_USER_GROUP_D_N = "noneIncludedUserGroupDN";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_USER_GROUP_D_N)
  private List<String> noneIncludedUserGroupDN = null;

  public static final String SERIALIZED_NAME_ALL_INCLUDED_USER_FILTER = "allIncludedUserFilter";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_USER_FILTER)
  private List<String> allIncludedUserFilter = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_USER_FILTER = "anyIncludedUserFilter";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_USER_FILTER)
  private List<String> anyIncludedUserFilter = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_USER_FILTER = "notAllIncludedUserFilter";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_USER_FILTER)
  private List<String> notAllIncludedUserFilter = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_USER_FILTER = "noneIncludedUserFilter";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_USER_FILTER)
  private List<String> noneIncludedUserFilter = null;

  public static final String SERIALIZED_NAME_ALL_INCLUDED_USER_PRIVILEGE = "allIncludedUserPrivilege";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_USER_PRIVILEGE)
  private List<EnumconnectionCriteriaAllIncludedUserPrivilegeProp> allIncludedUserPrivilege = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_USER_PRIVILEGE = "anyIncludedUserPrivilege";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_USER_PRIVILEGE)
  private List<EnumconnectionCriteriaAnyIncludedUserPrivilegeProp> anyIncludedUserPrivilege = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_USER_PRIVILEGE = "notAllIncludedUserPrivilege";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_USER_PRIVILEGE)
  private List<EnumconnectionCriteriaNotAllIncludedUserPrivilegeProp> notAllIncludedUserPrivilege = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_USER_PRIVILEGE = "noneIncludedUserPrivilege";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_USER_PRIVILEGE)
  private List<EnumconnectionCriteriaNoneIncludedUserPrivilegeProp> noneIncludedUserPrivilege = null;

  public SimpleConnectionCriteriaShared() {
  }

  public SimpleConnectionCriteriaShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Connection Criteria
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Connection Criteria")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public SimpleConnectionCriteriaShared schemas(List<EnumsimpleConnectionCriteriaSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public SimpleConnectionCriteriaShared addSchemasItem(EnumsimpleConnectionCriteriaSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumsimpleConnectionCriteriaSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumsimpleConnectionCriteriaSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public SimpleConnectionCriteriaShared includedClientAddress(List<String> includedClientAddress) {
    
    
    
    
    this.includedClientAddress = includedClientAddress;
    return this;
  }

  public SimpleConnectionCriteriaShared addIncludedClientAddressItem(String includedClientAddressItem) {
    if (this.includedClientAddress == null) {
      this.includedClientAddress = new ArrayList<>();
    }
    this.includedClientAddress.add(includedClientAddressItem);
    return this;
  }

   /**
   * Specifies an address mask that may be used to specify a set of clients that should be included in this Simple Connection Criteria.
   * @return includedClientAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies an address mask that may be used to specify a set of clients that should be included in this Simple Connection Criteria.")

  public List<String> getIncludedClientAddress() {
    return includedClientAddress;
  }


  public void setIncludedClientAddress(List<String> includedClientAddress) {
    
    
    
    this.includedClientAddress = includedClientAddress;
  }


  public SimpleConnectionCriteriaShared excludedClientAddress(List<String> excludedClientAddress) {
    
    
    
    
    this.excludedClientAddress = excludedClientAddress;
    return this;
  }

  public SimpleConnectionCriteriaShared addExcludedClientAddressItem(String excludedClientAddressItem) {
    if (this.excludedClientAddress == null) {
      this.excludedClientAddress = new ArrayList<>();
    }
    this.excludedClientAddress.add(excludedClientAddressItem);
    return this;
  }

   /**
   * Specifies an address mask that may be used to specify a set of clients that should be excluded from this Simple Connection Criteria.
   * @return excludedClientAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies an address mask that may be used to specify a set of clients that should be excluded from this Simple Connection Criteria.")

  public List<String> getExcludedClientAddress() {
    return excludedClientAddress;
  }


  public void setExcludedClientAddress(List<String> excludedClientAddress) {
    
    
    
    this.excludedClientAddress = excludedClientAddress;
  }


  public SimpleConnectionCriteriaShared includedConnectionHandler(List<String> includedConnectionHandler) {
    
    
    
    
    this.includedConnectionHandler = includedConnectionHandler;
    return this;
  }

  public SimpleConnectionCriteriaShared addIncludedConnectionHandlerItem(String includedConnectionHandlerItem) {
    if (this.includedConnectionHandler == null) {
      this.includedConnectionHandler = new ArrayList<>();
    }
    this.includedConnectionHandler.add(includedConnectionHandlerItem);
    return this;
  }

   /**
   * Specifies a connection handler for clients that should be included in this Simple Connection Criteria.
   * @return includedConnectionHandler
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a connection handler for clients that should be included in this Simple Connection Criteria.")

  public List<String> getIncludedConnectionHandler() {
    return includedConnectionHandler;
  }


  public void setIncludedConnectionHandler(List<String> includedConnectionHandler) {
    
    
    
    this.includedConnectionHandler = includedConnectionHandler;
  }


  public SimpleConnectionCriteriaShared excludedConnectionHandler(List<String> excludedConnectionHandler) {
    
    
    
    
    this.excludedConnectionHandler = excludedConnectionHandler;
    return this;
  }

  public SimpleConnectionCriteriaShared addExcludedConnectionHandlerItem(String excludedConnectionHandlerItem) {
    if (this.excludedConnectionHandler == null) {
      this.excludedConnectionHandler = new ArrayList<>();
    }
    this.excludedConnectionHandler.add(excludedConnectionHandlerItem);
    return this;
  }

   /**
   * Specifies a connection handler for clients that should be excluded from this Simple Connection Criteria.
   * @return excludedConnectionHandler
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a connection handler for clients that should be excluded from this Simple Connection Criteria.")

  public List<String> getExcludedConnectionHandler() {
    return excludedConnectionHandler;
  }


  public void setExcludedConnectionHandler(List<String> excludedConnectionHandler) {
    
    
    
    this.excludedConnectionHandler = excludedConnectionHandler;
  }


  public SimpleConnectionCriteriaShared includedProtocol(List<String> includedProtocol) {
    
    
    
    
    this.includedProtocol = includedProtocol;
    return this;
  }

  public SimpleConnectionCriteriaShared addIncludedProtocolItem(String includedProtocolItem) {
    if (this.includedProtocol == null) {
      this.includedProtocol = new ArrayList<>();
    }
    this.includedProtocol.add(includedProtocolItem);
    return this;
  }

   /**
   * Specifies the name of a communication protocol that should be used by clients included in this Simple Connection Criteria.
   * @return includedProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of a communication protocol that should be used by clients included in this Simple Connection Criteria.")

  public List<String> getIncludedProtocol() {
    return includedProtocol;
  }


  public void setIncludedProtocol(List<String> includedProtocol) {
    
    
    
    this.includedProtocol = includedProtocol;
  }


  public SimpleConnectionCriteriaShared excludedProtocol(List<String> excludedProtocol) {
    
    
    
    
    this.excludedProtocol = excludedProtocol;
    return this;
  }

  public SimpleConnectionCriteriaShared addExcludedProtocolItem(String excludedProtocolItem) {
    if (this.excludedProtocol == null) {
      this.excludedProtocol = new ArrayList<>();
    }
    this.excludedProtocol.add(excludedProtocolItem);
    return this;
  }

   /**
   * Specifies the name of a communication protocol that should be used by clients excluded from this Simple Connection Criteria.
   * @return excludedProtocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of a communication protocol that should be used by clients excluded from this Simple Connection Criteria.")

  public List<String> getExcludedProtocol() {
    return excludedProtocol;
  }


  public void setExcludedProtocol(List<String> excludedProtocol) {
    
    
    
    this.excludedProtocol = excludedProtocol;
  }


  public SimpleConnectionCriteriaShared communicationSecurityLevel(EnumconnectionCriteriaCommunicationSecurityLevelProp communicationSecurityLevel) {
    
    
    
    
    this.communicationSecurityLevel = communicationSecurityLevel;
    return this;
  }

   /**
   * Get communicationSecurityLevel
   * @return communicationSecurityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumconnectionCriteriaCommunicationSecurityLevelProp getCommunicationSecurityLevel() {
    return communicationSecurityLevel;
  }


  public void setCommunicationSecurityLevel(EnumconnectionCriteriaCommunicationSecurityLevelProp communicationSecurityLevel) {
    
    
    
    this.communicationSecurityLevel = communicationSecurityLevel;
  }


  public SimpleConnectionCriteriaShared userAuthType(List<EnumconnectionCriteriaUserAuthTypeProp> userAuthType) {
    
    
    
    
    this.userAuthType = userAuthType;
    return this;
  }

  public SimpleConnectionCriteriaShared addUserAuthTypeItem(EnumconnectionCriteriaUserAuthTypeProp userAuthTypeItem) {
    if (this.userAuthType == null) {
      this.userAuthType = new ArrayList<>();
    }
    this.userAuthType.add(userAuthTypeItem);
    return this;
  }

   /**
   * Get userAuthType
   * @return userAuthType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumconnectionCriteriaUserAuthTypeProp> getUserAuthType() {
    return userAuthType;
  }


  public void setUserAuthType(List<EnumconnectionCriteriaUserAuthTypeProp> userAuthType) {
    
    
    
    this.userAuthType = userAuthType;
  }


  public SimpleConnectionCriteriaShared authenticationSecurityLevel(EnumconnectionCriteriaAuthenticationSecurityLevelProp authenticationSecurityLevel) {
    
    
    
    
    this.authenticationSecurityLevel = authenticationSecurityLevel;
    return this;
  }

   /**
   * Get authenticationSecurityLevel
   * @return authenticationSecurityLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumconnectionCriteriaAuthenticationSecurityLevelProp getAuthenticationSecurityLevel() {
    return authenticationSecurityLevel;
  }


  public void setAuthenticationSecurityLevel(EnumconnectionCriteriaAuthenticationSecurityLevelProp authenticationSecurityLevel) {
    
    
    
    this.authenticationSecurityLevel = authenticationSecurityLevel;
  }


  public SimpleConnectionCriteriaShared includedUserSASLMechanism(List<String> includedUserSASLMechanism) {
    
    
    
    
    this.includedUserSASLMechanism = includedUserSASLMechanism;
    return this;
  }

  public SimpleConnectionCriteriaShared addIncludedUserSASLMechanismItem(String includedUserSASLMechanismItem) {
    if (this.includedUserSASLMechanism == null) {
      this.includedUserSASLMechanism = new ArrayList<>();
    }
    this.includedUserSASLMechanism.add(includedUserSASLMechanismItem);
    return this;
  }

   /**
   * Specifies the name of a SASL mechanism that should be used by clients included in this Simple Connection Criteria. This will only be taken into account for client connections that have authenticated to the server using a SASL mechanism and will be ignored for unauthenticated client connections and for client connections that authenticated using some other method (e.g., those performing simple or internal authentication).
   * @return includedUserSASLMechanism
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of a SASL mechanism that should be used by clients included in this Simple Connection Criteria. This will only be taken into account for client connections that have authenticated to the server using a SASL mechanism and will be ignored for unauthenticated client connections and for client connections that authenticated using some other method (e.g., those performing simple or internal authentication).")

  public List<String> getIncludedUserSASLMechanism() {
    return includedUserSASLMechanism;
  }


  public void setIncludedUserSASLMechanism(List<String> includedUserSASLMechanism) {
    
    
    
    this.includedUserSASLMechanism = includedUserSASLMechanism;
  }


  public SimpleConnectionCriteriaShared excludedUserSASLMechanism(List<String> excludedUserSASLMechanism) {
    
    
    
    
    this.excludedUserSASLMechanism = excludedUserSASLMechanism;
    return this;
  }

  public SimpleConnectionCriteriaShared addExcludedUserSASLMechanismItem(String excludedUserSASLMechanismItem) {
    if (this.excludedUserSASLMechanism == null) {
      this.excludedUserSASLMechanism = new ArrayList<>();
    }
    this.excludedUserSASLMechanism.add(excludedUserSASLMechanismItem);
    return this;
  }

   /**
   * Specifies the name of a SASL mechanism that should be used by clients excluded from this Simple Connection Criteria. This will only be taken into account for client connections that have authenticated to the server using a SASL mechanism and will be ignored for unauthenticated client connections and for client connections that authenticated using some other method (e.g., those performing simple or internal authentication).
   * @return excludedUserSASLMechanism
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of a SASL mechanism that should be used by clients excluded from this Simple Connection Criteria. This will only be taken into account for client connections that have authenticated to the server using a SASL mechanism and will be ignored for unauthenticated client connections and for client connections that authenticated using some other method (e.g., those performing simple or internal authentication).")

  public List<String> getExcludedUserSASLMechanism() {
    return excludedUserSASLMechanism;
  }


  public void setExcludedUserSASLMechanism(List<String> excludedUserSASLMechanism) {
    
    
    
    this.excludedUserSASLMechanism = excludedUserSASLMechanism;
  }


  public SimpleConnectionCriteriaShared includedUserBaseDN(List<String> includedUserBaseDN) {
    
    
    
    
    this.includedUserBaseDN = includedUserBaseDN;
    return this;
  }

  public SimpleConnectionCriteriaShared addIncludedUserBaseDNItem(String includedUserBaseDNItem) {
    if (this.includedUserBaseDN == null) {
      this.includedUserBaseDN = new ArrayList<>();
    }
    this.includedUserBaseDN.add(includedUserBaseDNItem);
    return this;
  }

   /**
   * Specifies a base DN below which authenticated user entries may exist for clients included in this Simple Connection Criteria. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).
   * @return includedUserBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a base DN below which authenticated user entries may exist for clients included in this Simple Connection Criteria. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).")

  public List<String> getIncludedUserBaseDN() {
    return includedUserBaseDN;
  }


  public void setIncludedUserBaseDN(List<String> includedUserBaseDN) {
    
    
    
    this.includedUserBaseDN = includedUserBaseDN;
  }


  public SimpleConnectionCriteriaShared excludedUserBaseDN(List<String> excludedUserBaseDN) {
    
    
    
    
    this.excludedUserBaseDN = excludedUserBaseDN;
    return this;
  }

  public SimpleConnectionCriteriaShared addExcludedUserBaseDNItem(String excludedUserBaseDNItem) {
    if (this.excludedUserBaseDN == null) {
      this.excludedUserBaseDN = new ArrayList<>();
    }
    this.excludedUserBaseDN.add(excludedUserBaseDNItem);
    return this;
  }

   /**
   * Specifies a base DN below which authenticated user entries may exist for clients excluded from this Simple Connection Criteria. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).
   * @return excludedUserBaseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a base DN below which authenticated user entries may exist for clients excluded from this Simple Connection Criteria. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).")

  public List<String> getExcludedUserBaseDN() {
    return excludedUserBaseDN;
  }


  public void setExcludedUserBaseDN(List<String> excludedUserBaseDN) {
    
    
    
    this.excludedUserBaseDN = excludedUserBaseDN;
  }


  public SimpleConnectionCriteriaShared allIncludedUserGroupDN(List<String> allIncludedUserGroupDN) {
    
    
    
    
    this.allIncludedUserGroupDN = allIncludedUserGroupDN;
    return this;
  }

  public SimpleConnectionCriteriaShared addAllIncludedUserGroupDNItem(String allIncludedUserGroupDNItem) {
    if (this.allIncludedUserGroupDN == null) {
      this.allIncludedUserGroupDN = new ArrayList<>();
    }
    this.allIncludedUserGroupDN.add(allIncludedUserGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which authenticated users must exist for clients included in this Simple Connection Criteria. If any group DNs are provided, then the authenticated user must be a member of all of those groups. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).
   * @return allIncludedUserGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which authenticated users must exist for clients included in this Simple Connection Criteria. If any group DNs are provided, then the authenticated user must be a member of all of those groups. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).")

  public List<String> getAllIncludedUserGroupDN() {
    return allIncludedUserGroupDN;
  }


  public void setAllIncludedUserGroupDN(List<String> allIncludedUserGroupDN) {
    
    
    
    this.allIncludedUserGroupDN = allIncludedUserGroupDN;
  }


  public SimpleConnectionCriteriaShared anyIncludedUserGroupDN(List<String> anyIncludedUserGroupDN) {
    
    
    
    
    this.anyIncludedUserGroupDN = anyIncludedUserGroupDN;
    return this;
  }

  public SimpleConnectionCriteriaShared addAnyIncludedUserGroupDNItem(String anyIncludedUserGroupDNItem) {
    if (this.anyIncludedUserGroupDN == null) {
      this.anyIncludedUserGroupDN = new ArrayList<>();
    }
    this.anyIncludedUserGroupDN.add(anyIncludedUserGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which authenticated users may exist for clients included in this Simple Connection Criteria. If any group DNs are provided, then the authenticated user must be a member of at least one of those groups. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).
   * @return anyIncludedUserGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which authenticated users may exist for clients included in this Simple Connection Criteria. If any group DNs are provided, then the authenticated user must be a member of at least one of those groups. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).")

  public List<String> getAnyIncludedUserGroupDN() {
    return anyIncludedUserGroupDN;
  }


  public void setAnyIncludedUserGroupDN(List<String> anyIncludedUserGroupDN) {
    
    
    
    this.anyIncludedUserGroupDN = anyIncludedUserGroupDN;
  }


  public SimpleConnectionCriteriaShared notAllIncludedUserGroupDN(List<String> notAllIncludedUserGroupDN) {
    
    
    
    
    this.notAllIncludedUserGroupDN = notAllIncludedUserGroupDN;
    return this;
  }

  public SimpleConnectionCriteriaShared addNotAllIncludedUserGroupDNItem(String notAllIncludedUserGroupDNItem) {
    if (this.notAllIncludedUserGroupDN == null) {
      this.notAllIncludedUserGroupDN = new ArrayList<>();
    }
    this.notAllIncludedUserGroupDN.add(notAllIncludedUserGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which authenticated users should not exist for clients included in this Simple Connection Criteria. If any group DNs are provided, then the authenticated user must not be a member of at least one of those groups (that is, the user may be a member of zero or more of those groups, but not of all of them). This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).
   * @return notAllIncludedUserGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which authenticated users should not exist for clients included in this Simple Connection Criteria. If any group DNs are provided, then the authenticated user must not be a member of at least one of those groups (that is, the user may be a member of zero or more of those groups, but not of all of them). This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).")

  public List<String> getNotAllIncludedUserGroupDN() {
    return notAllIncludedUserGroupDN;
  }


  public void setNotAllIncludedUserGroupDN(List<String> notAllIncludedUserGroupDN) {
    
    
    
    this.notAllIncludedUserGroupDN = notAllIncludedUserGroupDN;
  }


  public SimpleConnectionCriteriaShared noneIncludedUserGroupDN(List<String> noneIncludedUserGroupDN) {
    
    
    
    
    this.noneIncludedUserGroupDN = noneIncludedUserGroupDN;
    return this;
  }

  public SimpleConnectionCriteriaShared addNoneIncludedUserGroupDNItem(String noneIncludedUserGroupDNItem) {
    if (this.noneIncludedUserGroupDN == null) {
      this.noneIncludedUserGroupDN = new ArrayList<>();
    }
    this.noneIncludedUserGroupDN.add(noneIncludedUserGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which authenticated users must not exist for clients included in this Simple Connection Criteria. If any group DNs are provided, then the authenticated user must not be a member any of those groups. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).
   * @return noneIncludedUserGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which authenticated users must not exist for clients included in this Simple Connection Criteria. If any group DNs are provided, then the authenticated user must not be a member any of those groups. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections. Refer to the authz version of this property in Simple Result Criteria if operations are being proxied (performed using proxied authorization), and you need to match the originating user of the operation rather than the proxy user (the user the proxy authenticated as).")

  public List<String> getNoneIncludedUserGroupDN() {
    return noneIncludedUserGroupDN;
  }


  public void setNoneIncludedUserGroupDN(List<String> noneIncludedUserGroupDN) {
    
    
    
    this.noneIncludedUserGroupDN = noneIncludedUserGroupDN;
  }


  public SimpleConnectionCriteriaShared allIncludedUserFilter(List<String> allIncludedUserFilter) {
    
    
    
    
    this.allIncludedUserFilter = allIncludedUserFilter;
    return this;
  }

  public SimpleConnectionCriteriaShared addAllIncludedUserFilterItem(String allIncludedUserFilterItem) {
    if (this.allIncludedUserFilter == null) {
      this.allIncludedUserFilter = new ArrayList<>();
    }
    this.allIncludedUserFilter.add(allIncludedUserFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that must match the entry of the authenticated user for clients included in this Simple Connection Criteria. If any filters are provided, then all of those filters must match the authenticated user entry. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections.
   * @return allIncludedUserFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that must match the entry of the authenticated user for clients included in this Simple Connection Criteria. If any filters are provided, then all of those filters must match the authenticated user entry. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections.")

  public List<String> getAllIncludedUserFilter() {
    return allIncludedUserFilter;
  }


  public void setAllIncludedUserFilter(List<String> allIncludedUserFilter) {
    
    
    
    this.allIncludedUserFilter = allIncludedUserFilter;
  }


  public SimpleConnectionCriteriaShared anyIncludedUserFilter(List<String> anyIncludedUserFilter) {
    
    
    
    
    this.anyIncludedUserFilter = anyIncludedUserFilter;
    return this;
  }

  public SimpleConnectionCriteriaShared addAnyIncludedUserFilterItem(String anyIncludedUserFilterItem) {
    if (this.anyIncludedUserFilter == null) {
      this.anyIncludedUserFilter = new ArrayList<>();
    }
    this.anyIncludedUserFilter.add(anyIncludedUserFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that may match the entry of the authenticated user for clients included in this Simple Connection Criteria. If any filters are provided, then at least one of those filters must match the authenticated user entry. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections.
   * @return anyIncludedUserFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that may match the entry of the authenticated user for clients included in this Simple Connection Criteria. If any filters are provided, then at least one of those filters must match the authenticated user entry. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections.")

  public List<String> getAnyIncludedUserFilter() {
    return anyIncludedUserFilter;
  }


  public void setAnyIncludedUserFilter(List<String> anyIncludedUserFilter) {
    
    
    
    this.anyIncludedUserFilter = anyIncludedUserFilter;
  }


  public SimpleConnectionCriteriaShared notAllIncludedUserFilter(List<String> notAllIncludedUserFilter) {
    
    
    
    
    this.notAllIncludedUserFilter = notAllIncludedUserFilter;
    return this;
  }

  public SimpleConnectionCriteriaShared addNotAllIncludedUserFilterItem(String notAllIncludedUserFilterItem) {
    if (this.notAllIncludedUserFilter == null) {
      this.notAllIncludedUserFilter = new ArrayList<>();
    }
    this.notAllIncludedUserFilter.add(notAllIncludedUserFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that should not match the entry of the authenticated user for clients included in this Simple Connection Criteria. If any filters are provided, then at least one of those filters must not match the authenticated user entry (that is, the user entry may match zero or more of those filters, but not all of them). This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections.
   * @return notAllIncludedUserFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that should not match the entry of the authenticated user for clients included in this Simple Connection Criteria. If any filters are provided, then at least one of those filters must not match the authenticated user entry (that is, the user entry may match zero or more of those filters, but not all of them). This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections.")

  public List<String> getNotAllIncludedUserFilter() {
    return notAllIncludedUserFilter;
  }


  public void setNotAllIncludedUserFilter(List<String> notAllIncludedUserFilter) {
    
    
    
    this.notAllIncludedUserFilter = notAllIncludedUserFilter;
  }


  public SimpleConnectionCriteriaShared noneIncludedUserFilter(List<String> noneIncludedUserFilter) {
    
    
    
    
    this.noneIncludedUserFilter = noneIncludedUserFilter;
    return this;
  }

  public SimpleConnectionCriteriaShared addNoneIncludedUserFilterItem(String noneIncludedUserFilterItem) {
    if (this.noneIncludedUserFilter == null) {
      this.noneIncludedUserFilter = new ArrayList<>();
    }
    this.noneIncludedUserFilter.add(noneIncludedUserFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that must not match the entry of the authenticated user for clients included in this Simple Connection Criteria. If any filters are provided, then none of those filters may match the authenticated user entry. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections.
   * @return noneIncludedUserFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that must not match the entry of the authenticated user for clients included in this Simple Connection Criteria. If any filters are provided, then none of those filters may match the authenticated user entry. This will only be taken into account for client connections that have authenticated to the server and will be ignored for unauthenticated client connections.")

  public List<String> getNoneIncludedUserFilter() {
    return noneIncludedUserFilter;
  }


  public void setNoneIncludedUserFilter(List<String> noneIncludedUserFilter) {
    
    
    
    this.noneIncludedUserFilter = noneIncludedUserFilter;
  }


  public SimpleConnectionCriteriaShared allIncludedUserPrivilege(List<EnumconnectionCriteriaAllIncludedUserPrivilegeProp> allIncludedUserPrivilege) {
    
    
    
    
    this.allIncludedUserPrivilege = allIncludedUserPrivilege;
    return this;
  }

  public SimpleConnectionCriteriaShared addAllIncludedUserPrivilegeItem(EnumconnectionCriteriaAllIncludedUserPrivilegeProp allIncludedUserPrivilegeItem) {
    if (this.allIncludedUserPrivilege == null) {
      this.allIncludedUserPrivilege = new ArrayList<>();
    }
    this.allIncludedUserPrivilege.add(allIncludedUserPrivilegeItem);
    return this;
  }

   /**
   * Get allIncludedUserPrivilege
   * @return allIncludedUserPrivilege
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumconnectionCriteriaAllIncludedUserPrivilegeProp> getAllIncludedUserPrivilege() {
    return allIncludedUserPrivilege;
  }


  public void setAllIncludedUserPrivilege(List<EnumconnectionCriteriaAllIncludedUserPrivilegeProp> allIncludedUserPrivilege) {
    
    
    
    this.allIncludedUserPrivilege = allIncludedUserPrivilege;
  }


  public SimpleConnectionCriteriaShared anyIncludedUserPrivilege(List<EnumconnectionCriteriaAnyIncludedUserPrivilegeProp> anyIncludedUserPrivilege) {
    
    
    
    
    this.anyIncludedUserPrivilege = anyIncludedUserPrivilege;
    return this;
  }

  public SimpleConnectionCriteriaShared addAnyIncludedUserPrivilegeItem(EnumconnectionCriteriaAnyIncludedUserPrivilegeProp anyIncludedUserPrivilegeItem) {
    if (this.anyIncludedUserPrivilege == null) {
      this.anyIncludedUserPrivilege = new ArrayList<>();
    }
    this.anyIncludedUserPrivilege.add(anyIncludedUserPrivilegeItem);
    return this;
  }

   /**
   * Get anyIncludedUserPrivilege
   * @return anyIncludedUserPrivilege
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumconnectionCriteriaAnyIncludedUserPrivilegeProp> getAnyIncludedUserPrivilege() {
    return anyIncludedUserPrivilege;
  }


  public void setAnyIncludedUserPrivilege(List<EnumconnectionCriteriaAnyIncludedUserPrivilegeProp> anyIncludedUserPrivilege) {
    
    
    
    this.anyIncludedUserPrivilege = anyIncludedUserPrivilege;
  }


  public SimpleConnectionCriteriaShared notAllIncludedUserPrivilege(List<EnumconnectionCriteriaNotAllIncludedUserPrivilegeProp> notAllIncludedUserPrivilege) {
    
    
    
    
    this.notAllIncludedUserPrivilege = notAllIncludedUserPrivilege;
    return this;
  }

  public SimpleConnectionCriteriaShared addNotAllIncludedUserPrivilegeItem(EnumconnectionCriteriaNotAllIncludedUserPrivilegeProp notAllIncludedUserPrivilegeItem) {
    if (this.notAllIncludedUserPrivilege == null) {
      this.notAllIncludedUserPrivilege = new ArrayList<>();
    }
    this.notAllIncludedUserPrivilege.add(notAllIncludedUserPrivilegeItem);
    return this;
  }

   /**
   * Get notAllIncludedUserPrivilege
   * @return notAllIncludedUserPrivilege
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumconnectionCriteriaNotAllIncludedUserPrivilegeProp> getNotAllIncludedUserPrivilege() {
    return notAllIncludedUserPrivilege;
  }


  public void setNotAllIncludedUserPrivilege(List<EnumconnectionCriteriaNotAllIncludedUserPrivilegeProp> notAllIncludedUserPrivilege) {
    
    
    
    this.notAllIncludedUserPrivilege = notAllIncludedUserPrivilege;
  }


  public SimpleConnectionCriteriaShared noneIncludedUserPrivilege(List<EnumconnectionCriteriaNoneIncludedUserPrivilegeProp> noneIncludedUserPrivilege) {
    
    
    
    
    this.noneIncludedUserPrivilege = noneIncludedUserPrivilege;
    return this;
  }

  public SimpleConnectionCriteriaShared addNoneIncludedUserPrivilegeItem(EnumconnectionCriteriaNoneIncludedUserPrivilegeProp noneIncludedUserPrivilegeItem) {
    if (this.noneIncludedUserPrivilege == null) {
      this.noneIncludedUserPrivilege = new ArrayList<>();
    }
    this.noneIncludedUserPrivilege.add(noneIncludedUserPrivilegeItem);
    return this;
  }

   /**
   * Get noneIncludedUserPrivilege
   * @return noneIncludedUserPrivilege
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumconnectionCriteriaNoneIncludedUserPrivilegeProp> getNoneIncludedUserPrivilege() {
    return noneIncludedUserPrivilege;
  }


  public void setNoneIncludedUserPrivilege(List<EnumconnectionCriteriaNoneIncludedUserPrivilegeProp> noneIncludedUserPrivilege) {
    
    
    
    this.noneIncludedUserPrivilege = noneIncludedUserPrivilege;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SimpleConnectionCriteriaShared instance itself
   */
  public SimpleConnectionCriteriaShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleConnectionCriteriaShared simpleConnectionCriteriaShared = (SimpleConnectionCriteriaShared) o;
    return Objects.equals(this.description, simpleConnectionCriteriaShared.description) &&
        Objects.equals(this.schemas, simpleConnectionCriteriaShared.schemas) &&
        Objects.equals(this.includedClientAddress, simpleConnectionCriteriaShared.includedClientAddress) &&
        Objects.equals(this.excludedClientAddress, simpleConnectionCriteriaShared.excludedClientAddress) &&
        Objects.equals(this.includedConnectionHandler, simpleConnectionCriteriaShared.includedConnectionHandler) &&
        Objects.equals(this.excludedConnectionHandler, simpleConnectionCriteriaShared.excludedConnectionHandler) &&
        Objects.equals(this.includedProtocol, simpleConnectionCriteriaShared.includedProtocol) &&
        Objects.equals(this.excludedProtocol, simpleConnectionCriteriaShared.excludedProtocol) &&
        Objects.equals(this.communicationSecurityLevel, simpleConnectionCriteriaShared.communicationSecurityLevel) &&
        Objects.equals(this.userAuthType, simpleConnectionCriteriaShared.userAuthType) &&
        Objects.equals(this.authenticationSecurityLevel, simpleConnectionCriteriaShared.authenticationSecurityLevel) &&
        Objects.equals(this.includedUserSASLMechanism, simpleConnectionCriteriaShared.includedUserSASLMechanism) &&
        Objects.equals(this.excludedUserSASLMechanism, simpleConnectionCriteriaShared.excludedUserSASLMechanism) &&
        Objects.equals(this.includedUserBaseDN, simpleConnectionCriteriaShared.includedUserBaseDN) &&
        Objects.equals(this.excludedUserBaseDN, simpleConnectionCriteriaShared.excludedUserBaseDN) &&
        Objects.equals(this.allIncludedUserGroupDN, simpleConnectionCriteriaShared.allIncludedUserGroupDN) &&
        Objects.equals(this.anyIncludedUserGroupDN, simpleConnectionCriteriaShared.anyIncludedUserGroupDN) &&
        Objects.equals(this.notAllIncludedUserGroupDN, simpleConnectionCriteriaShared.notAllIncludedUserGroupDN) &&
        Objects.equals(this.noneIncludedUserGroupDN, simpleConnectionCriteriaShared.noneIncludedUserGroupDN) &&
        Objects.equals(this.allIncludedUserFilter, simpleConnectionCriteriaShared.allIncludedUserFilter) &&
        Objects.equals(this.anyIncludedUserFilter, simpleConnectionCriteriaShared.anyIncludedUserFilter) &&
        Objects.equals(this.notAllIncludedUserFilter, simpleConnectionCriteriaShared.notAllIncludedUserFilter) &&
        Objects.equals(this.noneIncludedUserFilter, simpleConnectionCriteriaShared.noneIncludedUserFilter) &&
        Objects.equals(this.allIncludedUserPrivilege, simpleConnectionCriteriaShared.allIncludedUserPrivilege) &&
        Objects.equals(this.anyIncludedUserPrivilege, simpleConnectionCriteriaShared.anyIncludedUserPrivilege) &&
        Objects.equals(this.notAllIncludedUserPrivilege, simpleConnectionCriteriaShared.notAllIncludedUserPrivilege) &&
        Objects.equals(this.noneIncludedUserPrivilege, simpleConnectionCriteriaShared.noneIncludedUserPrivilege)&&
        Objects.equals(this.additionalProperties, simpleConnectionCriteriaShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, includedClientAddress, excludedClientAddress, includedConnectionHandler, excludedConnectionHandler, includedProtocol, excludedProtocol, communicationSecurityLevel, userAuthType, authenticationSecurityLevel, includedUserSASLMechanism, excludedUserSASLMechanism, includedUserBaseDN, excludedUserBaseDN, allIncludedUserGroupDN, anyIncludedUserGroupDN, notAllIncludedUserGroupDN, noneIncludedUserGroupDN, allIncludedUserFilter, anyIncludedUserFilter, notAllIncludedUserFilter, noneIncludedUserFilter, allIncludedUserPrivilege, anyIncludedUserPrivilege, notAllIncludedUserPrivilege, noneIncludedUserPrivilege, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleConnectionCriteriaShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    includedClientAddress: ").append(toIndentedString(includedClientAddress)).append("\n");
    sb.append("    excludedClientAddress: ").append(toIndentedString(excludedClientAddress)).append("\n");
    sb.append("    includedConnectionHandler: ").append(toIndentedString(includedConnectionHandler)).append("\n");
    sb.append("    excludedConnectionHandler: ").append(toIndentedString(excludedConnectionHandler)).append("\n");
    sb.append("    includedProtocol: ").append(toIndentedString(includedProtocol)).append("\n");
    sb.append("    excludedProtocol: ").append(toIndentedString(excludedProtocol)).append("\n");
    sb.append("    communicationSecurityLevel: ").append(toIndentedString(communicationSecurityLevel)).append("\n");
    sb.append("    userAuthType: ").append(toIndentedString(userAuthType)).append("\n");
    sb.append("    authenticationSecurityLevel: ").append(toIndentedString(authenticationSecurityLevel)).append("\n");
    sb.append("    includedUserSASLMechanism: ").append(toIndentedString(includedUserSASLMechanism)).append("\n");
    sb.append("    excludedUserSASLMechanism: ").append(toIndentedString(excludedUserSASLMechanism)).append("\n");
    sb.append("    includedUserBaseDN: ").append(toIndentedString(includedUserBaseDN)).append("\n");
    sb.append("    excludedUserBaseDN: ").append(toIndentedString(excludedUserBaseDN)).append("\n");
    sb.append("    allIncludedUserGroupDN: ").append(toIndentedString(allIncludedUserGroupDN)).append("\n");
    sb.append("    anyIncludedUserGroupDN: ").append(toIndentedString(anyIncludedUserGroupDN)).append("\n");
    sb.append("    notAllIncludedUserGroupDN: ").append(toIndentedString(notAllIncludedUserGroupDN)).append("\n");
    sb.append("    noneIncludedUserGroupDN: ").append(toIndentedString(noneIncludedUserGroupDN)).append("\n");
    sb.append("    allIncludedUserFilter: ").append(toIndentedString(allIncludedUserFilter)).append("\n");
    sb.append("    anyIncludedUserFilter: ").append(toIndentedString(anyIncludedUserFilter)).append("\n");
    sb.append("    notAllIncludedUserFilter: ").append(toIndentedString(notAllIncludedUserFilter)).append("\n");
    sb.append("    noneIncludedUserFilter: ").append(toIndentedString(noneIncludedUserFilter)).append("\n");
    sb.append("    allIncludedUserPrivilege: ").append(toIndentedString(allIncludedUserPrivilege)).append("\n");
    sb.append("    anyIncludedUserPrivilege: ").append(toIndentedString(anyIncludedUserPrivilege)).append("\n");
    sb.append("    notAllIncludedUserPrivilege: ").append(toIndentedString(notAllIncludedUserPrivilege)).append("\n");
    sb.append("    noneIncludedUserPrivilege: ").append(toIndentedString(noneIncludedUserPrivilege)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("includedClientAddress");
    openapiFields.add("excludedClientAddress");
    openapiFields.add("includedConnectionHandler");
    openapiFields.add("excludedConnectionHandler");
    openapiFields.add("includedProtocol");
    openapiFields.add("excludedProtocol");
    openapiFields.add("communicationSecurityLevel");
    openapiFields.add("userAuthType");
    openapiFields.add("authenticationSecurityLevel");
    openapiFields.add("includedUserSASLMechanism");
    openapiFields.add("excludedUserSASLMechanism");
    openapiFields.add("includedUserBaseDN");
    openapiFields.add("excludedUserBaseDN");
    openapiFields.add("allIncludedUserGroupDN");
    openapiFields.add("anyIncludedUserGroupDN");
    openapiFields.add("notAllIncludedUserGroupDN");
    openapiFields.add("noneIncludedUserGroupDN");
    openapiFields.add("allIncludedUserFilter");
    openapiFields.add("anyIncludedUserFilter");
    openapiFields.add("notAllIncludedUserFilter");
    openapiFields.add("noneIncludedUserFilter");
    openapiFields.add("allIncludedUserPrivilege");
    openapiFields.add("anyIncludedUserPrivilege");
    openapiFields.add("notAllIncludedUserPrivilege");
    openapiFields.add("noneIncludedUserPrivilege");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SimpleConnectionCriteriaShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SimpleConnectionCriteriaShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleConnectionCriteriaShared is not found in the empty JSON string", SimpleConnectionCriteriaShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimpleConnectionCriteriaShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedClientAddress") != null && !jsonObj.get("includedClientAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedClientAddress` to be an array in the JSON string but got `%s`", jsonObj.get("includedClientAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedClientAddress") != null && !jsonObj.get("excludedClientAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedClientAddress` to be an array in the JSON string but got `%s`", jsonObj.get("excludedClientAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedConnectionHandler") != null && !jsonObj.get("includedConnectionHandler").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedConnectionHandler` to be an array in the JSON string but got `%s`", jsonObj.get("includedConnectionHandler").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedConnectionHandler") != null && !jsonObj.get("excludedConnectionHandler").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedConnectionHandler` to be an array in the JSON string but got `%s`", jsonObj.get("excludedConnectionHandler").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedProtocol") != null && !jsonObj.get("includedProtocol").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedProtocol` to be an array in the JSON string but got `%s`", jsonObj.get("includedProtocol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedProtocol") != null && !jsonObj.get("excludedProtocol").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedProtocol` to be an array in the JSON string but got `%s`", jsonObj.get("excludedProtocol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("userAuthType") != null && !jsonObj.get("userAuthType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAuthType` to be an array in the JSON string but got `%s`", jsonObj.get("userAuthType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedUserSASLMechanism") != null && !jsonObj.get("includedUserSASLMechanism").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedUserSASLMechanism` to be an array in the JSON string but got `%s`", jsonObj.get("includedUserSASLMechanism").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedUserSASLMechanism") != null && !jsonObj.get("excludedUserSASLMechanism").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedUserSASLMechanism` to be an array in the JSON string but got `%s`", jsonObj.get("excludedUserSASLMechanism").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedUserBaseDN") != null && !jsonObj.get("includedUserBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedUserBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("includedUserBaseDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedUserBaseDN") != null && !jsonObj.get("excludedUserBaseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedUserBaseDN` to be an array in the JSON string but got `%s`", jsonObj.get("excludedUserBaseDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedUserGroupDN") != null && !jsonObj.get("allIncludedUserGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedUserGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedUserGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedUserGroupDN") != null && !jsonObj.get("anyIncludedUserGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedUserGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedUserGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedUserGroupDN") != null && !jsonObj.get("notAllIncludedUserGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedUserGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedUserGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedUserGroupDN") != null && !jsonObj.get("noneIncludedUserGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedUserGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedUserGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedUserFilter") != null && !jsonObj.get("allIncludedUserFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedUserFilter` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedUserFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedUserFilter") != null && !jsonObj.get("anyIncludedUserFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedUserFilter` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedUserFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedUserFilter") != null && !jsonObj.get("notAllIncludedUserFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedUserFilter` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedUserFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedUserFilter") != null && !jsonObj.get("noneIncludedUserFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedUserFilter` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedUserFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedUserPrivilege") != null && !jsonObj.get("allIncludedUserPrivilege").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedUserPrivilege` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedUserPrivilege").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedUserPrivilege") != null && !jsonObj.get("anyIncludedUserPrivilege").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedUserPrivilege` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedUserPrivilege").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedUserPrivilege") != null && !jsonObj.get("notAllIncludedUserPrivilege").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedUserPrivilege` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedUserPrivilege").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedUserPrivilege") != null && !jsonObj.get("noneIncludedUserPrivilege").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedUserPrivilege` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedUserPrivilege").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleConnectionCriteriaShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleConnectionCriteriaShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleConnectionCriteriaShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleConnectionCriteriaShared.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleConnectionCriteriaShared>() {
           @Override
           public void write(JsonWriter out, SimpleConnectionCriteriaShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleConnectionCriteriaShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SimpleConnectionCriteriaShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimpleConnectionCriteriaShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimpleConnectionCriteriaShared
  * @throws IOException if the JSON string is invalid with respect to SimpleConnectionCriteriaShared
  */
  public static SimpleConnectionCriteriaShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleConnectionCriteriaShared.class);
  }

 /**
  * Convert an instance of SimpleConnectionCriteriaShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

