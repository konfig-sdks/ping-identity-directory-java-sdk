/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumrequestCriteriaIncludedSearchScopeProp;
import com.konfigthis.client.model.EnumrequestCriteriaOperationOriginProp;
import com.konfigthis.client.model.EnumrequestCriteriaSimpleOperationTypeProp;
import com.konfigthis.client.model.EnumrequestCriteriaTargetBindTypeProp;
import com.konfigthis.client.model.EnumrequestCriteriaUsingAdministrativeSessionWorkerThreadProp;
import com.konfigthis.client.model.EnumsimpleRequestCriteriaSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SimpleRequestCriteriaShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SimpleRequestCriteriaShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumsimpleRequestCriteriaSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private List<EnumrequestCriteriaSimpleOperationTypeProp> operationType = null;

  public static final String SERIALIZED_NAME_OPERATION_ORIGIN = "operationOrigin";
  @SerializedName(SERIALIZED_NAME_OPERATION_ORIGIN)
  private List<EnumrequestCriteriaOperationOriginProp> operationOrigin = null;

  public static final String SERIALIZED_NAME_CONNECTION_CRITERIA = "connectionCriteria";
  @SerializedName(SERIALIZED_NAME_CONNECTION_CRITERIA)
  private String connectionCriteria;

  public static final String SERIALIZED_NAME_ALL_INCLUDED_REQUEST_CONTROL = "allIncludedRequestControl";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_REQUEST_CONTROL)
  private List<String> allIncludedRequestControl = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_REQUEST_CONTROL = "anyIncludedRequestControl";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_REQUEST_CONTROL)
  private List<String> anyIncludedRequestControl = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_REQUEST_CONTROL = "notAllIncludedRequestControl";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_REQUEST_CONTROL)
  private List<String> notAllIncludedRequestControl = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_REQUEST_CONTROL = "noneIncludedRequestControl";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_REQUEST_CONTROL)
  private List<String> noneIncludedRequestControl = null;

  public static final String SERIALIZED_NAME_INCLUDED_TARGET_ENTRY_D_N = "includedTargetEntryDN";
  @SerializedName(SERIALIZED_NAME_INCLUDED_TARGET_ENTRY_D_N)
  private List<String> includedTargetEntryDN = null;

  public static final String SERIALIZED_NAME_EXCLUDED_TARGET_ENTRY_D_N = "excludedTargetEntryDN";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_TARGET_ENTRY_D_N)
  private List<String> excludedTargetEntryDN = null;

  public static final String SERIALIZED_NAME_ALL_INCLUDED_TARGET_ENTRY_FILTER = "allIncludedTargetEntryFilter";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_TARGET_ENTRY_FILTER)
  private List<String> allIncludedTargetEntryFilter = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_TARGET_ENTRY_FILTER = "anyIncludedTargetEntryFilter";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_TARGET_ENTRY_FILTER)
  private List<String> anyIncludedTargetEntryFilter = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_TARGET_ENTRY_FILTER = "notAllIncludedTargetEntryFilter";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_TARGET_ENTRY_FILTER)
  private List<String> notAllIncludedTargetEntryFilter = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_TARGET_ENTRY_FILTER = "noneIncludedTargetEntryFilter";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_TARGET_ENTRY_FILTER)
  private List<String> noneIncludedTargetEntryFilter = null;

  public static final String SERIALIZED_NAME_ALL_INCLUDED_TARGET_ENTRY_GROUP_D_N = "allIncludedTargetEntryGroupDN";
  @SerializedName(SERIALIZED_NAME_ALL_INCLUDED_TARGET_ENTRY_GROUP_D_N)
  private List<String> allIncludedTargetEntryGroupDN = null;

  public static final String SERIALIZED_NAME_ANY_INCLUDED_TARGET_ENTRY_GROUP_D_N = "anyIncludedTargetEntryGroupDN";
  @SerializedName(SERIALIZED_NAME_ANY_INCLUDED_TARGET_ENTRY_GROUP_D_N)
  private List<String> anyIncludedTargetEntryGroupDN = null;

  public static final String SERIALIZED_NAME_NOT_ALL_INCLUDED_TARGET_ENTRY_GROUP_D_N = "notAllIncludedTargetEntryGroupDN";
  @SerializedName(SERIALIZED_NAME_NOT_ALL_INCLUDED_TARGET_ENTRY_GROUP_D_N)
  private List<String> notAllIncludedTargetEntryGroupDN = null;

  public static final String SERIALIZED_NAME_NONE_INCLUDED_TARGET_ENTRY_GROUP_D_N = "noneIncludedTargetEntryGroupDN";
  @SerializedName(SERIALIZED_NAME_NONE_INCLUDED_TARGET_ENTRY_GROUP_D_N)
  private List<String> noneIncludedTargetEntryGroupDN = null;

  public static final String SERIALIZED_NAME_TARGET_BIND_TYPE = "targetBindType";
  @SerializedName(SERIALIZED_NAME_TARGET_BIND_TYPE)
  private List<EnumrequestCriteriaTargetBindTypeProp> targetBindType = null;

  public static final String SERIALIZED_NAME_INCLUDED_TARGET_S_A_S_L_MECHANISM = "includedTargetSASLMechanism";
  @SerializedName(SERIALIZED_NAME_INCLUDED_TARGET_S_A_S_L_MECHANISM)
  private List<String> includedTargetSASLMechanism = null;

  public static final String SERIALIZED_NAME_EXCLUDED_TARGET_S_A_S_L_MECHANISM = "excludedTargetSASLMechanism";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_TARGET_S_A_S_L_MECHANISM)
  private List<String> excludedTargetSASLMechanism = null;

  public static final String SERIALIZED_NAME_INCLUDED_TARGET_ATTRIBUTE = "includedTargetAttribute";
  @SerializedName(SERIALIZED_NAME_INCLUDED_TARGET_ATTRIBUTE)
  private List<String> includedTargetAttribute = null;

  public static final String SERIALIZED_NAME_EXCLUDED_TARGET_ATTRIBUTE = "excludedTargetAttribute";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_TARGET_ATTRIBUTE)
  private List<String> excludedTargetAttribute = null;

  public static final String SERIALIZED_NAME_INCLUDED_EXTENDED_OPERATION_O_I_D = "includedExtendedOperationOID";
  @SerializedName(SERIALIZED_NAME_INCLUDED_EXTENDED_OPERATION_O_I_D)
  private List<String> includedExtendedOperationOID = null;

  public static final String SERIALIZED_NAME_EXCLUDED_EXTENDED_OPERATION_O_I_D = "excludedExtendedOperationOID";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_EXTENDED_OPERATION_O_I_D)
  private List<String> excludedExtendedOperationOID = null;

  public static final String SERIALIZED_NAME_INCLUDED_SEARCH_SCOPE = "includedSearchScope";
  @SerializedName(SERIALIZED_NAME_INCLUDED_SEARCH_SCOPE)
  private List<EnumrequestCriteriaIncludedSearchScopeProp> includedSearchScope = null;

  public static final String SERIALIZED_NAME_USING_ADMINISTRATIVE_SESSION_WORKER_THREAD = "usingAdministrativeSessionWorkerThread";
  @SerializedName(SERIALIZED_NAME_USING_ADMINISTRATIVE_SESSION_WORKER_THREAD)
  private EnumrequestCriteriaUsingAdministrativeSessionWorkerThreadProp usingAdministrativeSessionWorkerThread;

  public static final String SERIALIZED_NAME_INCLUDED_APPLICATION_NAME = "includedApplicationName";
  @SerializedName(SERIALIZED_NAME_INCLUDED_APPLICATION_NAME)
  private List<String> includedApplicationName = null;

  public static final String SERIALIZED_NAME_EXCLUDED_APPLICATION_NAME = "excludedApplicationName";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_APPLICATION_NAME)
  private List<String> excludedApplicationName = null;

  public SimpleRequestCriteriaShared() {
  }

  public SimpleRequestCriteriaShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Request Criteria
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Request Criteria")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public SimpleRequestCriteriaShared schemas(List<EnumsimpleRequestCriteriaSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public SimpleRequestCriteriaShared addSchemasItem(EnumsimpleRequestCriteriaSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumsimpleRequestCriteriaSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumsimpleRequestCriteriaSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public SimpleRequestCriteriaShared operationType(List<EnumrequestCriteriaSimpleOperationTypeProp> operationType) {
    
    
    
    
    this.operationType = operationType;
    return this;
  }

  public SimpleRequestCriteriaShared addOperationTypeItem(EnumrequestCriteriaSimpleOperationTypeProp operationTypeItem) {
    if (this.operationType == null) {
      this.operationType = new ArrayList<>();
    }
    this.operationType.add(operationTypeItem);
    return this;
  }

   /**
   * Get operationType
   * @return operationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumrequestCriteriaSimpleOperationTypeProp> getOperationType() {
    return operationType;
  }


  public void setOperationType(List<EnumrequestCriteriaSimpleOperationTypeProp> operationType) {
    
    
    
    this.operationType = operationType;
  }


  public SimpleRequestCriteriaShared operationOrigin(List<EnumrequestCriteriaOperationOriginProp> operationOrigin) {
    
    
    
    
    this.operationOrigin = operationOrigin;
    return this;
  }

  public SimpleRequestCriteriaShared addOperationOriginItem(EnumrequestCriteriaOperationOriginProp operationOriginItem) {
    if (this.operationOrigin == null) {
      this.operationOrigin = new ArrayList<>();
    }
    this.operationOrigin.add(operationOriginItem);
    return this;
  }

   /**
   * Get operationOrigin
   * @return operationOrigin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumrequestCriteriaOperationOriginProp> getOperationOrigin() {
    return operationOrigin;
  }


  public void setOperationOrigin(List<EnumrequestCriteriaOperationOriginProp> operationOrigin) {
    
    
    
    this.operationOrigin = operationOrigin;
  }


  public SimpleRequestCriteriaShared connectionCriteria(String connectionCriteria) {
    
    
    
    
    this.connectionCriteria = connectionCriteria;
    return this;
  }

   /**
   * Specifies a connection criteria object that must match the associated client connection for operations included in this Simple Request Criteria.
   * @return connectionCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a connection criteria object that must match the associated client connection for operations included in this Simple Request Criteria.")

  public String getConnectionCriteria() {
    return connectionCriteria;
  }


  public void setConnectionCriteria(String connectionCriteria) {
    
    
    
    this.connectionCriteria = connectionCriteria;
  }


  public SimpleRequestCriteriaShared allIncludedRequestControl(List<String> allIncludedRequestControl) {
    
    
    
    
    this.allIncludedRequestControl = allIncludedRequestControl;
    return this;
  }

  public SimpleRequestCriteriaShared addAllIncludedRequestControlItem(String allIncludedRequestControlItem) {
    if (this.allIncludedRequestControl == null) {
      this.allIncludedRequestControl = new ArrayList<>();
    }
    this.allIncludedRequestControl.add(allIncludedRequestControlItem);
    return this;
  }

   /**
   * Specifies the OID of a control that must be present in the request from the client for operations included in this Simple Request Criteria. If any control OIDs are provided, then the request must contain all of those controls.
   * @return allIncludedRequestControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OID of a control that must be present in the request from the client for operations included in this Simple Request Criteria. If any control OIDs are provided, then the request must contain all of those controls.")

  public List<String> getAllIncludedRequestControl() {
    return allIncludedRequestControl;
  }


  public void setAllIncludedRequestControl(List<String> allIncludedRequestControl) {
    
    
    
    this.allIncludedRequestControl = allIncludedRequestControl;
  }


  public SimpleRequestCriteriaShared anyIncludedRequestControl(List<String> anyIncludedRequestControl) {
    
    
    
    
    this.anyIncludedRequestControl = anyIncludedRequestControl;
    return this;
  }

  public SimpleRequestCriteriaShared addAnyIncludedRequestControlItem(String anyIncludedRequestControlItem) {
    if (this.anyIncludedRequestControl == null) {
      this.anyIncludedRequestControl = new ArrayList<>();
    }
    this.anyIncludedRequestControl.add(anyIncludedRequestControlItem);
    return this;
  }

   /**
   * Specifies the OID of a control that may be present in the request from the client for operations included in this Simple Request Criteria. If any control OIDs are provided, then the request must contain at least one of those controls.
   * @return anyIncludedRequestControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OID of a control that may be present in the request from the client for operations included in this Simple Request Criteria. If any control OIDs are provided, then the request must contain at least one of those controls.")

  public List<String> getAnyIncludedRequestControl() {
    return anyIncludedRequestControl;
  }


  public void setAnyIncludedRequestControl(List<String> anyIncludedRequestControl) {
    
    
    
    this.anyIncludedRequestControl = anyIncludedRequestControl;
  }


  public SimpleRequestCriteriaShared notAllIncludedRequestControl(List<String> notAllIncludedRequestControl) {
    
    
    
    
    this.notAllIncludedRequestControl = notAllIncludedRequestControl;
    return this;
  }

  public SimpleRequestCriteriaShared addNotAllIncludedRequestControlItem(String notAllIncludedRequestControlItem) {
    if (this.notAllIncludedRequestControl == null) {
      this.notAllIncludedRequestControl = new ArrayList<>();
    }
    this.notAllIncludedRequestControl.add(notAllIncludedRequestControlItem);
    return this;
  }

   /**
   * Specifies the OID of a control that should not be present in the request from the client for operations included in this Simple Request Criteria. If any control OIDs are provided, then the request must not contain at least one of those controls (that is, the request may contain zero or more of those controls, but not all of them).
   * @return notAllIncludedRequestControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OID of a control that should not be present in the request from the client for operations included in this Simple Request Criteria. If any control OIDs are provided, then the request must not contain at least one of those controls (that is, the request may contain zero or more of those controls, but not all of them).")

  public List<String> getNotAllIncludedRequestControl() {
    return notAllIncludedRequestControl;
  }


  public void setNotAllIncludedRequestControl(List<String> notAllIncludedRequestControl) {
    
    
    
    this.notAllIncludedRequestControl = notAllIncludedRequestControl;
  }


  public SimpleRequestCriteriaShared noneIncludedRequestControl(List<String> noneIncludedRequestControl) {
    
    
    
    
    this.noneIncludedRequestControl = noneIncludedRequestControl;
    return this;
  }

  public SimpleRequestCriteriaShared addNoneIncludedRequestControlItem(String noneIncludedRequestControlItem) {
    if (this.noneIncludedRequestControl == null) {
      this.noneIncludedRequestControl = new ArrayList<>();
    }
    this.noneIncludedRequestControl.add(noneIncludedRequestControlItem);
    return this;
  }

   /**
   * Specifies the OID of a control that must not be present in the request from the client for operations included in this Simple Request Criteria. If any control OIDs are provided, then the request must not contain any of those controls.
   * @return noneIncludedRequestControl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the OID of a control that must not be present in the request from the client for operations included in this Simple Request Criteria. If any control OIDs are provided, then the request must not contain any of those controls.")

  public List<String> getNoneIncludedRequestControl() {
    return noneIncludedRequestControl;
  }


  public void setNoneIncludedRequestControl(List<String> noneIncludedRequestControl) {
    
    
    
    this.noneIncludedRequestControl = noneIncludedRequestControl;
  }


  public SimpleRequestCriteriaShared includedTargetEntryDN(List<String> includedTargetEntryDN) {
    
    
    
    
    this.includedTargetEntryDN = includedTargetEntryDN;
    return this;
  }

  public SimpleRequestCriteriaShared addIncludedTargetEntryDNItem(String includedTargetEntryDNItem) {
    if (this.includedTargetEntryDN == null) {
      this.includedTargetEntryDN = new ArrayList<>();
    }
    this.includedTargetEntryDN.add(includedTargetEntryDNItem);
    return this;
  }

   /**
   * Specifies a base DN below which targeted entries may exist for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations.
   * @return includedTargetEntryDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a base DN below which targeted entries may exist for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations.")

  public List<String> getIncludedTargetEntryDN() {
    return includedTargetEntryDN;
  }


  public void setIncludedTargetEntryDN(List<String> includedTargetEntryDN) {
    
    
    
    this.includedTargetEntryDN = includedTargetEntryDN;
  }


  public SimpleRequestCriteriaShared excludedTargetEntryDN(List<String> excludedTargetEntryDN) {
    
    
    
    
    this.excludedTargetEntryDN = excludedTargetEntryDN;
    return this;
  }

  public SimpleRequestCriteriaShared addExcludedTargetEntryDNItem(String excludedTargetEntryDNItem) {
    if (this.excludedTargetEntryDN == null) {
      this.excludedTargetEntryDN = new ArrayList<>();
    }
    this.excludedTargetEntryDN.add(excludedTargetEntryDNItem);
    return this;
  }

   /**
   * Specifies a base DN below which targeted entries may not exist for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations.
   * @return excludedTargetEntryDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a base DN below which targeted entries may not exist for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations.")

  public List<String> getExcludedTargetEntryDN() {
    return excludedTargetEntryDN;
  }


  public void setExcludedTargetEntryDN(List<String> excludedTargetEntryDN) {
    
    
    
    this.excludedTargetEntryDN = excludedTargetEntryDN;
  }


  public SimpleRequestCriteriaShared allIncludedTargetEntryFilter(List<String> allIncludedTargetEntryFilter) {
    
    
    
    
    this.allIncludedTargetEntryFilter = allIncludedTargetEntryFilter;
    return this;
  }

  public SimpleRequestCriteriaShared addAllIncludedTargetEntryFilterItem(String allIncludedTargetEntryFilterItem) {
    if (this.allIncludedTargetEntryFilter == null) {
      this.allIncludedTargetEntryFilter = new ArrayList<>();
    }
    this.allIncludedTargetEntryFilter.add(allIncludedTargetEntryFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that must match the target entry for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any filters are provided, then the target entry must match all of those filters.
   * @return allIncludedTargetEntryFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that must match the target entry for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any filters are provided, then the target entry must match all of those filters.")

  public List<String> getAllIncludedTargetEntryFilter() {
    return allIncludedTargetEntryFilter;
  }


  public void setAllIncludedTargetEntryFilter(List<String> allIncludedTargetEntryFilter) {
    
    
    
    this.allIncludedTargetEntryFilter = allIncludedTargetEntryFilter;
  }


  public SimpleRequestCriteriaShared anyIncludedTargetEntryFilter(List<String> anyIncludedTargetEntryFilter) {
    
    
    
    
    this.anyIncludedTargetEntryFilter = anyIncludedTargetEntryFilter;
    return this;
  }

  public SimpleRequestCriteriaShared addAnyIncludedTargetEntryFilterItem(String anyIncludedTargetEntryFilterItem) {
    if (this.anyIncludedTargetEntryFilter == null) {
      this.anyIncludedTargetEntryFilter = new ArrayList<>();
    }
    this.anyIncludedTargetEntryFilter.add(anyIncludedTargetEntryFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that may match the target entry for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any filters are provided, then the target entry must match at least one of those filters.
   * @return anyIncludedTargetEntryFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that may match the target entry for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any filters are provided, then the target entry must match at least one of those filters.")

  public List<String> getAnyIncludedTargetEntryFilter() {
    return anyIncludedTargetEntryFilter;
  }


  public void setAnyIncludedTargetEntryFilter(List<String> anyIncludedTargetEntryFilter) {
    
    
    
    this.anyIncludedTargetEntryFilter = anyIncludedTargetEntryFilter;
  }


  public SimpleRequestCriteriaShared notAllIncludedTargetEntryFilter(List<String> notAllIncludedTargetEntryFilter) {
    
    
    
    
    this.notAllIncludedTargetEntryFilter = notAllIncludedTargetEntryFilter;
    return this;
  }

  public SimpleRequestCriteriaShared addNotAllIncludedTargetEntryFilterItem(String notAllIncludedTargetEntryFilterItem) {
    if (this.notAllIncludedTargetEntryFilter == null) {
      this.notAllIncludedTargetEntryFilter = new ArrayList<>();
    }
    this.notAllIncludedTargetEntryFilter.add(notAllIncludedTargetEntryFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that should not match the target entry for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any filters are provided, then the target entry must not match at least one of those filters (that is, the request may match zero or more of those filters, but not of all of them).
   * @return notAllIncludedTargetEntryFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that should not match the target entry for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any filters are provided, then the target entry must not match at least one of those filters (that is, the request may match zero or more of those filters, but not of all of them).")

  public List<String> getNotAllIncludedTargetEntryFilter() {
    return notAllIncludedTargetEntryFilter;
  }


  public void setNotAllIncludedTargetEntryFilter(List<String> notAllIncludedTargetEntryFilter) {
    
    
    
    this.notAllIncludedTargetEntryFilter = notAllIncludedTargetEntryFilter;
  }


  public SimpleRequestCriteriaShared noneIncludedTargetEntryFilter(List<String> noneIncludedTargetEntryFilter) {
    
    
    
    
    this.noneIncludedTargetEntryFilter = noneIncludedTargetEntryFilter;
    return this;
  }

  public SimpleRequestCriteriaShared addNoneIncludedTargetEntryFilterItem(String noneIncludedTargetEntryFilterItem) {
    if (this.noneIncludedTargetEntryFilter == null) {
      this.noneIncludedTargetEntryFilter = new ArrayList<>();
    }
    this.noneIncludedTargetEntryFilter.add(noneIncludedTargetEntryFilterItem);
    return this;
  }

   /**
   * Specifies a search filter that must not match the target entry for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any filters are provided, then the target entry must not match any of those filters.
   * @return noneIncludedTargetEntryFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a search filter that must not match the target entry for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any filters are provided, then the target entry must not match any of those filters.")

  public List<String> getNoneIncludedTargetEntryFilter() {
    return noneIncludedTargetEntryFilter;
  }


  public void setNoneIncludedTargetEntryFilter(List<String> noneIncludedTargetEntryFilter) {
    
    
    
    this.noneIncludedTargetEntryFilter = noneIncludedTargetEntryFilter;
  }


  public SimpleRequestCriteriaShared allIncludedTargetEntryGroupDN(List<String> allIncludedTargetEntryGroupDN) {
    
    
    
    
    this.allIncludedTargetEntryGroupDN = allIncludedTargetEntryGroupDN;
    return this;
  }

  public SimpleRequestCriteriaShared addAllIncludedTargetEntryGroupDNItem(String allIncludedTargetEntryGroupDNItem) {
    if (this.allIncludedTargetEntryGroupDN == null) {
      this.allIncludedTargetEntryGroupDN = new ArrayList<>();
    }
    this.allIncludedTargetEntryGroupDN.add(allIncludedTargetEntryGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which the user associated with the target entry must be a member for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any group DNs are provided, then the target entry must be a member of all of those groups.
   * @return allIncludedTargetEntryGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which the user associated with the target entry must be a member for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any group DNs are provided, then the target entry must be a member of all of those groups.")

  public List<String> getAllIncludedTargetEntryGroupDN() {
    return allIncludedTargetEntryGroupDN;
  }


  public void setAllIncludedTargetEntryGroupDN(List<String> allIncludedTargetEntryGroupDN) {
    
    
    
    this.allIncludedTargetEntryGroupDN = allIncludedTargetEntryGroupDN;
  }


  public SimpleRequestCriteriaShared anyIncludedTargetEntryGroupDN(List<String> anyIncludedTargetEntryGroupDN) {
    
    
    
    
    this.anyIncludedTargetEntryGroupDN = anyIncludedTargetEntryGroupDN;
    return this;
  }

  public SimpleRequestCriteriaShared addAnyIncludedTargetEntryGroupDNItem(String anyIncludedTargetEntryGroupDNItem) {
    if (this.anyIncludedTargetEntryGroupDN == null) {
      this.anyIncludedTargetEntryGroupDN = new ArrayList<>();
    }
    this.anyIncludedTargetEntryGroupDN.add(anyIncludedTargetEntryGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which the user associated with the target entry may be a member for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any group DNs are provided, then the target entry must be a member of at least one of those groups.
   * @return anyIncludedTargetEntryGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which the user associated with the target entry may be a member for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any group DNs are provided, then the target entry must be a member of at least one of those groups.")

  public List<String> getAnyIncludedTargetEntryGroupDN() {
    return anyIncludedTargetEntryGroupDN;
  }


  public void setAnyIncludedTargetEntryGroupDN(List<String> anyIncludedTargetEntryGroupDN) {
    
    
    
    this.anyIncludedTargetEntryGroupDN = anyIncludedTargetEntryGroupDN;
  }


  public SimpleRequestCriteriaShared notAllIncludedTargetEntryGroupDN(List<String> notAllIncludedTargetEntryGroupDN) {
    
    
    
    
    this.notAllIncludedTargetEntryGroupDN = notAllIncludedTargetEntryGroupDN;
    return this;
  }

  public SimpleRequestCriteriaShared addNotAllIncludedTargetEntryGroupDNItem(String notAllIncludedTargetEntryGroupDNItem) {
    if (this.notAllIncludedTargetEntryGroupDN == null) {
      this.notAllIncludedTargetEntryGroupDN = new ArrayList<>();
    }
    this.notAllIncludedTargetEntryGroupDN.add(notAllIncludedTargetEntryGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which the user associated with the target entry should not be a member for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any group DNs are provided, then the target entry must not be a member of at least one of those groups (that is, the target entry may be a member of zero or more of those groups, but not all of them).
   * @return notAllIncludedTargetEntryGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which the user associated with the target entry should not be a member for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any group DNs are provided, then the target entry must not be a member of at least one of those groups (that is, the target entry may be a member of zero or more of those groups, but not all of them).")

  public List<String> getNotAllIncludedTargetEntryGroupDN() {
    return notAllIncludedTargetEntryGroupDN;
  }


  public void setNotAllIncludedTargetEntryGroupDN(List<String> notAllIncludedTargetEntryGroupDN) {
    
    
    
    this.notAllIncludedTargetEntryGroupDN = notAllIncludedTargetEntryGroupDN;
  }


  public SimpleRequestCriteriaShared noneIncludedTargetEntryGroupDN(List<String> noneIncludedTargetEntryGroupDN) {
    
    
    
    
    this.noneIncludedTargetEntryGroupDN = noneIncludedTargetEntryGroupDN;
    return this;
  }

  public SimpleRequestCriteriaShared addNoneIncludedTargetEntryGroupDNItem(String noneIncludedTargetEntryGroupDNItem) {
    if (this.noneIncludedTargetEntryGroupDN == null) {
      this.noneIncludedTargetEntryGroupDN = new ArrayList<>();
    }
    this.noneIncludedTargetEntryGroupDN.add(noneIncludedTargetEntryGroupDNItem);
    return this;
  }

   /**
   * Specifies the DN of a group in which the user associated with the target entry must not be a member for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any group DNs are provided, then the target entry must not be a member of any of those groups.
   * @return noneIncludedTargetEntryGroupDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the DN of a group in which the user associated with the target entry must not be a member for requests included in this Simple Request Criteria. This will only be taken into account for add, simple bind, compare, delete, modify, modify DN, and search operations. It will be ignored for abandon, SASL bind, extended, and unbind operations. If any group DNs are provided, then the target entry must not be a member of any of those groups.")

  public List<String> getNoneIncludedTargetEntryGroupDN() {
    return noneIncludedTargetEntryGroupDN;
  }


  public void setNoneIncludedTargetEntryGroupDN(List<String> noneIncludedTargetEntryGroupDN) {
    
    
    
    this.noneIncludedTargetEntryGroupDN = noneIncludedTargetEntryGroupDN;
  }


  public SimpleRequestCriteriaShared targetBindType(List<EnumrequestCriteriaTargetBindTypeProp> targetBindType) {
    
    
    
    
    this.targetBindType = targetBindType;
    return this;
  }

  public SimpleRequestCriteriaShared addTargetBindTypeItem(EnumrequestCriteriaTargetBindTypeProp targetBindTypeItem) {
    if (this.targetBindType == null) {
      this.targetBindType = new ArrayList<>();
    }
    this.targetBindType.add(targetBindTypeItem);
    return this;
  }

   /**
   * Get targetBindType
   * @return targetBindType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumrequestCriteriaTargetBindTypeProp> getTargetBindType() {
    return targetBindType;
  }


  public void setTargetBindType(List<EnumrequestCriteriaTargetBindTypeProp> targetBindType) {
    
    
    
    this.targetBindType = targetBindType;
  }


  public SimpleRequestCriteriaShared includedTargetSASLMechanism(List<String> includedTargetSASLMechanism) {
    
    
    
    
    this.includedTargetSASLMechanism = includedTargetSASLMechanism;
    return this;
  }

  public SimpleRequestCriteriaShared addIncludedTargetSASLMechanismItem(String includedTargetSASLMechanismItem) {
    if (this.includedTargetSASLMechanism == null) {
      this.includedTargetSASLMechanism = new ArrayList<>();
    }
    this.includedTargetSASLMechanism.add(includedTargetSASLMechanismItem);
    return this;
  }

   /**
   * Specifies the name of a SASL mechanism for bind requests included in this Simple Request Criteria. This will only be taken into account for SASL bind operations and will be ignored for other types of operations and for bind operations that do not use SASL authentication.
   * @return includedTargetSASLMechanism
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of a SASL mechanism for bind requests included in this Simple Request Criteria. This will only be taken into account for SASL bind operations and will be ignored for other types of operations and for bind operations that do not use SASL authentication.")

  public List<String> getIncludedTargetSASLMechanism() {
    return includedTargetSASLMechanism;
  }


  public void setIncludedTargetSASLMechanism(List<String> includedTargetSASLMechanism) {
    
    
    
    this.includedTargetSASLMechanism = includedTargetSASLMechanism;
  }


  public SimpleRequestCriteriaShared excludedTargetSASLMechanism(List<String> excludedTargetSASLMechanism) {
    
    
    
    
    this.excludedTargetSASLMechanism = excludedTargetSASLMechanism;
    return this;
  }

  public SimpleRequestCriteriaShared addExcludedTargetSASLMechanismItem(String excludedTargetSASLMechanismItem) {
    if (this.excludedTargetSASLMechanism == null) {
      this.excludedTargetSASLMechanism = new ArrayList<>();
    }
    this.excludedTargetSASLMechanism.add(excludedTargetSASLMechanismItem);
    return this;
  }

   /**
   * Specifies the name of a SASL mechanism for bind requests excluded from this Simple Request Criteria. This will only be taken into account for SASL bind operations and will be ignored for other types of operations and for bind operations that do not use SASL authentication.
   * @return excludedTargetSASLMechanism
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of a SASL mechanism for bind requests excluded from this Simple Request Criteria. This will only be taken into account for SASL bind operations and will be ignored for other types of operations and for bind operations that do not use SASL authentication.")

  public List<String> getExcludedTargetSASLMechanism() {
    return excludedTargetSASLMechanism;
  }


  public void setExcludedTargetSASLMechanism(List<String> excludedTargetSASLMechanism) {
    
    
    
    this.excludedTargetSASLMechanism = excludedTargetSASLMechanism;
  }


  public SimpleRequestCriteriaShared includedTargetAttribute(List<String> includedTargetAttribute) {
    
    
    
    
    this.includedTargetAttribute = includedTargetAttribute;
    return this;
  }

  public SimpleRequestCriteriaShared addIncludedTargetAttributeItem(String includedTargetAttributeItem) {
    if (this.includedTargetAttribute == null) {
      this.includedTargetAttribute = new ArrayList<>();
    }
    this.includedTargetAttribute.add(includedTargetAttributeItem);
    return this;
  }

   /**
   * Specifies the name or OID of an attribute type which must be targeted by requests included in this Simple Request Criteria. This will only be taken into account for add, compare, modify, modify DN, and search operations. It will be ignored for abandon, bind, delete, extended, and unbind operations.
   * @return includedTargetAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name or OID of an attribute type which must be targeted by requests included in this Simple Request Criteria. This will only be taken into account for add, compare, modify, modify DN, and search operations. It will be ignored for abandon, bind, delete, extended, and unbind operations.")

  public List<String> getIncludedTargetAttribute() {
    return includedTargetAttribute;
  }


  public void setIncludedTargetAttribute(List<String> includedTargetAttribute) {
    
    
    
    this.includedTargetAttribute = includedTargetAttribute;
  }


  public SimpleRequestCriteriaShared excludedTargetAttribute(List<String> excludedTargetAttribute) {
    
    
    
    
    this.excludedTargetAttribute = excludedTargetAttribute;
    return this;
  }

  public SimpleRequestCriteriaShared addExcludedTargetAttributeItem(String excludedTargetAttributeItem) {
    if (this.excludedTargetAttribute == null) {
      this.excludedTargetAttribute = new ArrayList<>();
    }
    this.excludedTargetAttribute.add(excludedTargetAttributeItem);
    return this;
  }

   /**
   * Specifies the name or OID of an attribute type which must not be targeted by requests included in this Simple Request Criteria. This will only be taken into account for add, compare, modify, modify DN, and search operations. It will be ignored for abandon, bind, delete, extended, and unbind operations.
   * @return excludedTargetAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name or OID of an attribute type which must not be targeted by requests included in this Simple Request Criteria. This will only be taken into account for add, compare, modify, modify DN, and search operations. It will be ignored for abandon, bind, delete, extended, and unbind operations.")

  public List<String> getExcludedTargetAttribute() {
    return excludedTargetAttribute;
  }


  public void setExcludedTargetAttribute(List<String> excludedTargetAttribute) {
    
    
    
    this.excludedTargetAttribute = excludedTargetAttribute;
  }


  public SimpleRequestCriteriaShared includedExtendedOperationOID(List<String> includedExtendedOperationOID) {
    
    
    
    
    this.includedExtendedOperationOID = includedExtendedOperationOID;
    return this;
  }

  public SimpleRequestCriteriaShared addIncludedExtendedOperationOIDItem(String includedExtendedOperationOIDItem) {
    if (this.includedExtendedOperationOID == null) {
      this.includedExtendedOperationOID = new ArrayList<>();
    }
    this.includedExtendedOperationOID.add(includedExtendedOperationOIDItem);
    return this;
  }

   /**
   * Specifies the request OID for extended requests included in this Simple Request Criteria. This will only be taken into account for extended requests and will be ignored for all other types of requests.
   * @return includedExtendedOperationOID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the request OID for extended requests included in this Simple Request Criteria. This will only be taken into account for extended requests and will be ignored for all other types of requests.")

  public List<String> getIncludedExtendedOperationOID() {
    return includedExtendedOperationOID;
  }


  public void setIncludedExtendedOperationOID(List<String> includedExtendedOperationOID) {
    
    
    
    this.includedExtendedOperationOID = includedExtendedOperationOID;
  }


  public SimpleRequestCriteriaShared excludedExtendedOperationOID(List<String> excludedExtendedOperationOID) {
    
    
    
    
    this.excludedExtendedOperationOID = excludedExtendedOperationOID;
    return this;
  }

  public SimpleRequestCriteriaShared addExcludedExtendedOperationOIDItem(String excludedExtendedOperationOIDItem) {
    if (this.excludedExtendedOperationOID == null) {
      this.excludedExtendedOperationOID = new ArrayList<>();
    }
    this.excludedExtendedOperationOID.add(excludedExtendedOperationOIDItem);
    return this;
  }

   /**
   * Specifies the request OID for extended requests excluded from this Simple Request Criteria. This will only be taken into account for extended requests and will be ignored for all other types of requests.
   * @return excludedExtendedOperationOID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the request OID for extended requests excluded from this Simple Request Criteria. This will only be taken into account for extended requests and will be ignored for all other types of requests.")

  public List<String> getExcludedExtendedOperationOID() {
    return excludedExtendedOperationOID;
  }


  public void setExcludedExtendedOperationOID(List<String> excludedExtendedOperationOID) {
    
    
    
    this.excludedExtendedOperationOID = excludedExtendedOperationOID;
  }


  public SimpleRequestCriteriaShared includedSearchScope(List<EnumrequestCriteriaIncludedSearchScopeProp> includedSearchScope) {
    
    
    
    
    this.includedSearchScope = includedSearchScope;
    return this;
  }

  public SimpleRequestCriteriaShared addIncludedSearchScopeItem(EnumrequestCriteriaIncludedSearchScopeProp includedSearchScopeItem) {
    if (this.includedSearchScope == null) {
      this.includedSearchScope = new ArrayList<>();
    }
    this.includedSearchScope.add(includedSearchScopeItem);
    return this;
  }

   /**
   * Get includedSearchScope
   * @return includedSearchScope
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumrequestCriteriaIncludedSearchScopeProp> getIncludedSearchScope() {
    return includedSearchScope;
  }


  public void setIncludedSearchScope(List<EnumrequestCriteriaIncludedSearchScopeProp> includedSearchScope) {
    
    
    
    this.includedSearchScope = includedSearchScope;
  }


  public SimpleRequestCriteriaShared usingAdministrativeSessionWorkerThread(EnumrequestCriteriaUsingAdministrativeSessionWorkerThreadProp usingAdministrativeSessionWorkerThread) {
    
    
    
    
    this.usingAdministrativeSessionWorkerThread = usingAdministrativeSessionWorkerThread;
    return this;
  }

   /**
   * Get usingAdministrativeSessionWorkerThread
   * @return usingAdministrativeSessionWorkerThread
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumrequestCriteriaUsingAdministrativeSessionWorkerThreadProp getUsingAdministrativeSessionWorkerThread() {
    return usingAdministrativeSessionWorkerThread;
  }


  public void setUsingAdministrativeSessionWorkerThread(EnumrequestCriteriaUsingAdministrativeSessionWorkerThreadProp usingAdministrativeSessionWorkerThread) {
    
    
    
    this.usingAdministrativeSessionWorkerThread = usingAdministrativeSessionWorkerThread;
  }


  public SimpleRequestCriteriaShared includedApplicationName(List<String> includedApplicationName) {
    
    
    
    
    this.includedApplicationName = includedApplicationName;
    return this;
  }

  public SimpleRequestCriteriaShared addIncludedApplicationNameItem(String includedApplicationNameItem) {
    if (this.includedApplicationName == null) {
      this.includedApplicationName = new ArrayList<>();
    }
    this.includedApplicationName.add(includedApplicationNameItem);
    return this;
  }

   /**
   * Specifies an application name for requests included in this Simple Request Criteria.
   * @return includedApplicationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies an application name for requests included in this Simple Request Criteria.")

  public List<String> getIncludedApplicationName() {
    return includedApplicationName;
  }


  public void setIncludedApplicationName(List<String> includedApplicationName) {
    
    
    
    this.includedApplicationName = includedApplicationName;
  }


  public SimpleRequestCriteriaShared excludedApplicationName(List<String> excludedApplicationName) {
    
    
    
    
    this.excludedApplicationName = excludedApplicationName;
    return this;
  }

  public SimpleRequestCriteriaShared addExcludedApplicationNameItem(String excludedApplicationNameItem) {
    if (this.excludedApplicationName == null) {
      this.excludedApplicationName = new ArrayList<>();
    }
    this.excludedApplicationName.add(excludedApplicationNameItem);
    return this;
  }

   /**
   * Specifies an application name for requests excluded from this Simple Request Criteria.
   * @return excludedApplicationName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies an application name for requests excluded from this Simple Request Criteria.")

  public List<String> getExcludedApplicationName() {
    return excludedApplicationName;
  }


  public void setExcludedApplicationName(List<String> excludedApplicationName) {
    
    
    
    this.excludedApplicationName = excludedApplicationName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SimpleRequestCriteriaShared instance itself
   */
  public SimpleRequestCriteriaShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleRequestCriteriaShared simpleRequestCriteriaShared = (SimpleRequestCriteriaShared) o;
    return Objects.equals(this.description, simpleRequestCriteriaShared.description) &&
        Objects.equals(this.schemas, simpleRequestCriteriaShared.schemas) &&
        Objects.equals(this.operationType, simpleRequestCriteriaShared.operationType) &&
        Objects.equals(this.operationOrigin, simpleRequestCriteriaShared.operationOrigin) &&
        Objects.equals(this.connectionCriteria, simpleRequestCriteriaShared.connectionCriteria) &&
        Objects.equals(this.allIncludedRequestControl, simpleRequestCriteriaShared.allIncludedRequestControl) &&
        Objects.equals(this.anyIncludedRequestControl, simpleRequestCriteriaShared.anyIncludedRequestControl) &&
        Objects.equals(this.notAllIncludedRequestControl, simpleRequestCriteriaShared.notAllIncludedRequestControl) &&
        Objects.equals(this.noneIncludedRequestControl, simpleRequestCriteriaShared.noneIncludedRequestControl) &&
        Objects.equals(this.includedTargetEntryDN, simpleRequestCriteriaShared.includedTargetEntryDN) &&
        Objects.equals(this.excludedTargetEntryDN, simpleRequestCriteriaShared.excludedTargetEntryDN) &&
        Objects.equals(this.allIncludedTargetEntryFilter, simpleRequestCriteriaShared.allIncludedTargetEntryFilter) &&
        Objects.equals(this.anyIncludedTargetEntryFilter, simpleRequestCriteriaShared.anyIncludedTargetEntryFilter) &&
        Objects.equals(this.notAllIncludedTargetEntryFilter, simpleRequestCriteriaShared.notAllIncludedTargetEntryFilter) &&
        Objects.equals(this.noneIncludedTargetEntryFilter, simpleRequestCriteriaShared.noneIncludedTargetEntryFilter) &&
        Objects.equals(this.allIncludedTargetEntryGroupDN, simpleRequestCriteriaShared.allIncludedTargetEntryGroupDN) &&
        Objects.equals(this.anyIncludedTargetEntryGroupDN, simpleRequestCriteriaShared.anyIncludedTargetEntryGroupDN) &&
        Objects.equals(this.notAllIncludedTargetEntryGroupDN, simpleRequestCriteriaShared.notAllIncludedTargetEntryGroupDN) &&
        Objects.equals(this.noneIncludedTargetEntryGroupDN, simpleRequestCriteriaShared.noneIncludedTargetEntryGroupDN) &&
        Objects.equals(this.targetBindType, simpleRequestCriteriaShared.targetBindType) &&
        Objects.equals(this.includedTargetSASLMechanism, simpleRequestCriteriaShared.includedTargetSASLMechanism) &&
        Objects.equals(this.excludedTargetSASLMechanism, simpleRequestCriteriaShared.excludedTargetSASLMechanism) &&
        Objects.equals(this.includedTargetAttribute, simpleRequestCriteriaShared.includedTargetAttribute) &&
        Objects.equals(this.excludedTargetAttribute, simpleRequestCriteriaShared.excludedTargetAttribute) &&
        Objects.equals(this.includedExtendedOperationOID, simpleRequestCriteriaShared.includedExtendedOperationOID) &&
        Objects.equals(this.excludedExtendedOperationOID, simpleRequestCriteriaShared.excludedExtendedOperationOID) &&
        Objects.equals(this.includedSearchScope, simpleRequestCriteriaShared.includedSearchScope) &&
        Objects.equals(this.usingAdministrativeSessionWorkerThread, simpleRequestCriteriaShared.usingAdministrativeSessionWorkerThread) &&
        Objects.equals(this.includedApplicationName, simpleRequestCriteriaShared.includedApplicationName) &&
        Objects.equals(this.excludedApplicationName, simpleRequestCriteriaShared.excludedApplicationName)&&
        Objects.equals(this.additionalProperties, simpleRequestCriteriaShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, operationType, operationOrigin, connectionCriteria, allIncludedRequestControl, anyIncludedRequestControl, notAllIncludedRequestControl, noneIncludedRequestControl, includedTargetEntryDN, excludedTargetEntryDN, allIncludedTargetEntryFilter, anyIncludedTargetEntryFilter, notAllIncludedTargetEntryFilter, noneIncludedTargetEntryFilter, allIncludedTargetEntryGroupDN, anyIncludedTargetEntryGroupDN, notAllIncludedTargetEntryGroupDN, noneIncludedTargetEntryGroupDN, targetBindType, includedTargetSASLMechanism, excludedTargetSASLMechanism, includedTargetAttribute, excludedTargetAttribute, includedExtendedOperationOID, excludedExtendedOperationOID, includedSearchScope, usingAdministrativeSessionWorkerThread, includedApplicationName, excludedApplicationName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleRequestCriteriaShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    operationOrigin: ").append(toIndentedString(operationOrigin)).append("\n");
    sb.append("    connectionCriteria: ").append(toIndentedString(connectionCriteria)).append("\n");
    sb.append("    allIncludedRequestControl: ").append(toIndentedString(allIncludedRequestControl)).append("\n");
    sb.append("    anyIncludedRequestControl: ").append(toIndentedString(anyIncludedRequestControl)).append("\n");
    sb.append("    notAllIncludedRequestControl: ").append(toIndentedString(notAllIncludedRequestControl)).append("\n");
    sb.append("    noneIncludedRequestControl: ").append(toIndentedString(noneIncludedRequestControl)).append("\n");
    sb.append("    includedTargetEntryDN: ").append(toIndentedString(includedTargetEntryDN)).append("\n");
    sb.append("    excludedTargetEntryDN: ").append(toIndentedString(excludedTargetEntryDN)).append("\n");
    sb.append("    allIncludedTargetEntryFilter: ").append(toIndentedString(allIncludedTargetEntryFilter)).append("\n");
    sb.append("    anyIncludedTargetEntryFilter: ").append(toIndentedString(anyIncludedTargetEntryFilter)).append("\n");
    sb.append("    notAllIncludedTargetEntryFilter: ").append(toIndentedString(notAllIncludedTargetEntryFilter)).append("\n");
    sb.append("    noneIncludedTargetEntryFilter: ").append(toIndentedString(noneIncludedTargetEntryFilter)).append("\n");
    sb.append("    allIncludedTargetEntryGroupDN: ").append(toIndentedString(allIncludedTargetEntryGroupDN)).append("\n");
    sb.append("    anyIncludedTargetEntryGroupDN: ").append(toIndentedString(anyIncludedTargetEntryGroupDN)).append("\n");
    sb.append("    notAllIncludedTargetEntryGroupDN: ").append(toIndentedString(notAllIncludedTargetEntryGroupDN)).append("\n");
    sb.append("    noneIncludedTargetEntryGroupDN: ").append(toIndentedString(noneIncludedTargetEntryGroupDN)).append("\n");
    sb.append("    targetBindType: ").append(toIndentedString(targetBindType)).append("\n");
    sb.append("    includedTargetSASLMechanism: ").append(toIndentedString(includedTargetSASLMechanism)).append("\n");
    sb.append("    excludedTargetSASLMechanism: ").append(toIndentedString(excludedTargetSASLMechanism)).append("\n");
    sb.append("    includedTargetAttribute: ").append(toIndentedString(includedTargetAttribute)).append("\n");
    sb.append("    excludedTargetAttribute: ").append(toIndentedString(excludedTargetAttribute)).append("\n");
    sb.append("    includedExtendedOperationOID: ").append(toIndentedString(includedExtendedOperationOID)).append("\n");
    sb.append("    excludedExtendedOperationOID: ").append(toIndentedString(excludedExtendedOperationOID)).append("\n");
    sb.append("    includedSearchScope: ").append(toIndentedString(includedSearchScope)).append("\n");
    sb.append("    usingAdministrativeSessionWorkerThread: ").append(toIndentedString(usingAdministrativeSessionWorkerThread)).append("\n");
    sb.append("    includedApplicationName: ").append(toIndentedString(includedApplicationName)).append("\n");
    sb.append("    excludedApplicationName: ").append(toIndentedString(excludedApplicationName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("operationType");
    openapiFields.add("operationOrigin");
    openapiFields.add("connectionCriteria");
    openapiFields.add("allIncludedRequestControl");
    openapiFields.add("anyIncludedRequestControl");
    openapiFields.add("notAllIncludedRequestControl");
    openapiFields.add("noneIncludedRequestControl");
    openapiFields.add("includedTargetEntryDN");
    openapiFields.add("excludedTargetEntryDN");
    openapiFields.add("allIncludedTargetEntryFilter");
    openapiFields.add("anyIncludedTargetEntryFilter");
    openapiFields.add("notAllIncludedTargetEntryFilter");
    openapiFields.add("noneIncludedTargetEntryFilter");
    openapiFields.add("allIncludedTargetEntryGroupDN");
    openapiFields.add("anyIncludedTargetEntryGroupDN");
    openapiFields.add("notAllIncludedTargetEntryGroupDN");
    openapiFields.add("noneIncludedTargetEntryGroupDN");
    openapiFields.add("targetBindType");
    openapiFields.add("includedTargetSASLMechanism");
    openapiFields.add("excludedTargetSASLMechanism");
    openapiFields.add("includedTargetAttribute");
    openapiFields.add("excludedTargetAttribute");
    openapiFields.add("includedExtendedOperationOID");
    openapiFields.add("excludedExtendedOperationOID");
    openapiFields.add("includedSearchScope");
    openapiFields.add("usingAdministrativeSessionWorkerThread");
    openapiFields.add("includedApplicationName");
    openapiFields.add("excludedApplicationName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SimpleRequestCriteriaShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SimpleRequestCriteriaShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleRequestCriteriaShared is not found in the empty JSON string", SimpleRequestCriteriaShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimpleRequestCriteriaShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be an array in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("operationOrigin") != null && !jsonObj.get("operationOrigin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationOrigin` to be an array in the JSON string but got `%s`", jsonObj.get("operationOrigin").toString()));
      }
      if ((jsonObj.get("connectionCriteria") != null && !jsonObj.get("connectionCriteria").isJsonNull()) && !jsonObj.get("connectionCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionCriteria").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedRequestControl") != null && !jsonObj.get("allIncludedRequestControl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedRequestControl` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedRequestControl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedRequestControl") != null && !jsonObj.get("anyIncludedRequestControl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedRequestControl` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedRequestControl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedRequestControl") != null && !jsonObj.get("notAllIncludedRequestControl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedRequestControl` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedRequestControl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedRequestControl") != null && !jsonObj.get("noneIncludedRequestControl").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedRequestControl` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedRequestControl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedTargetEntryDN") != null && !jsonObj.get("includedTargetEntryDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedTargetEntryDN` to be an array in the JSON string but got `%s`", jsonObj.get("includedTargetEntryDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedTargetEntryDN") != null && !jsonObj.get("excludedTargetEntryDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedTargetEntryDN` to be an array in the JSON string but got `%s`", jsonObj.get("excludedTargetEntryDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedTargetEntryFilter") != null && !jsonObj.get("allIncludedTargetEntryFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedTargetEntryFilter` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedTargetEntryFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedTargetEntryFilter") != null && !jsonObj.get("anyIncludedTargetEntryFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedTargetEntryFilter` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedTargetEntryFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedTargetEntryFilter") != null && !jsonObj.get("notAllIncludedTargetEntryFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedTargetEntryFilter` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedTargetEntryFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedTargetEntryFilter") != null && !jsonObj.get("noneIncludedTargetEntryFilter").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedTargetEntryFilter` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedTargetEntryFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allIncludedTargetEntryGroupDN") != null && !jsonObj.get("allIncludedTargetEntryGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allIncludedTargetEntryGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("allIncludedTargetEntryGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("anyIncludedTargetEntryGroupDN") != null && !jsonObj.get("anyIncludedTargetEntryGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `anyIncludedTargetEntryGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("anyIncludedTargetEntryGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notAllIncludedTargetEntryGroupDN") != null && !jsonObj.get("notAllIncludedTargetEntryGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notAllIncludedTargetEntryGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("notAllIncludedTargetEntryGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("noneIncludedTargetEntryGroupDN") != null && !jsonObj.get("noneIncludedTargetEntryGroupDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `noneIncludedTargetEntryGroupDN` to be an array in the JSON string but got `%s`", jsonObj.get("noneIncludedTargetEntryGroupDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetBindType") != null && !jsonObj.get("targetBindType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetBindType` to be an array in the JSON string but got `%s`", jsonObj.get("targetBindType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedTargetSASLMechanism") != null && !jsonObj.get("includedTargetSASLMechanism").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedTargetSASLMechanism` to be an array in the JSON string but got `%s`", jsonObj.get("includedTargetSASLMechanism").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedTargetSASLMechanism") != null && !jsonObj.get("excludedTargetSASLMechanism").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedTargetSASLMechanism` to be an array in the JSON string but got `%s`", jsonObj.get("excludedTargetSASLMechanism").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedTargetAttribute") != null && !jsonObj.get("includedTargetAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedTargetAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("includedTargetAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedTargetAttribute") != null && !jsonObj.get("excludedTargetAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedTargetAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("excludedTargetAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedExtendedOperationOID") != null && !jsonObj.get("includedExtendedOperationOID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedExtendedOperationOID` to be an array in the JSON string but got `%s`", jsonObj.get("includedExtendedOperationOID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedExtendedOperationOID") != null && !jsonObj.get("excludedExtendedOperationOID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedExtendedOperationOID` to be an array in the JSON string but got `%s`", jsonObj.get("excludedExtendedOperationOID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedSearchScope") != null && !jsonObj.get("includedSearchScope").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedSearchScope` to be an array in the JSON string but got `%s`", jsonObj.get("includedSearchScope").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedApplicationName") != null && !jsonObj.get("includedApplicationName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedApplicationName` to be an array in the JSON string but got `%s`", jsonObj.get("includedApplicationName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedApplicationName") != null && !jsonObj.get("excludedApplicationName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedApplicationName` to be an array in the JSON string but got `%s`", jsonObj.get("excludedApplicationName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleRequestCriteriaShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleRequestCriteriaShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleRequestCriteriaShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleRequestCriteriaShared.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleRequestCriteriaShared>() {
           @Override
           public void write(JsonWriter out, SimpleRequestCriteriaShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleRequestCriteriaShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SimpleRequestCriteriaShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimpleRequestCriteriaShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimpleRequestCriteriaShared
  * @throws IOException if the JSON string is invalid with respect to SimpleRequestCriteriaShared
  */
  public static SimpleRequestCriteriaShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleRequestCriteriaShared.class);
  }

 /**
  * Convert an instance of SimpleRequestCriteriaShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

