/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumdiskSpaceUsageMonitorProviderSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DiskSpaceUsageMonitorProviderResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DiskSpaceUsageMonitorProviderResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumdiskSpaceUsageMonitorProviderSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOW_SPACE_WARNING_SIZE_THRESHOLD = "lowSpaceWarningSizeThreshold";
  @SerializedName(SERIALIZED_NAME_LOW_SPACE_WARNING_SIZE_THRESHOLD)
  private String lowSpaceWarningSizeThreshold;

  public static final String SERIALIZED_NAME_LOW_SPACE_WARNING_PERCENT_THRESHOLD = "lowSpaceWarningPercentThreshold";
  @SerializedName(SERIALIZED_NAME_LOW_SPACE_WARNING_PERCENT_THRESHOLD)
  private Integer lowSpaceWarningPercentThreshold;

  public static final String SERIALIZED_NAME_LOW_SPACE_ERROR_SIZE_THRESHOLD = "lowSpaceErrorSizeThreshold";
  @SerializedName(SERIALIZED_NAME_LOW_SPACE_ERROR_SIZE_THRESHOLD)
  private String lowSpaceErrorSizeThreshold;

  public static final String SERIALIZED_NAME_LOW_SPACE_ERROR_PERCENT_THRESHOLD = "lowSpaceErrorPercentThreshold";
  @SerializedName(SERIALIZED_NAME_LOW_SPACE_ERROR_PERCENT_THRESHOLD)
  private Integer lowSpaceErrorPercentThreshold;

  public static final String SERIALIZED_NAME_OUT_OF_SPACE_ERROR_SIZE_THRESHOLD = "outOfSpaceErrorSizeThreshold";
  @SerializedName(SERIALIZED_NAME_OUT_OF_SPACE_ERROR_SIZE_THRESHOLD)
  private String outOfSpaceErrorSizeThreshold;

  public static final String SERIALIZED_NAME_OUT_OF_SPACE_ERROR_PERCENT_THRESHOLD = "outOfSpaceErrorPercentThreshold";
  @SerializedName(SERIALIZED_NAME_OUT_OF_SPACE_ERROR_PERCENT_THRESHOLD)
  private Integer outOfSpaceErrorPercentThreshold;

  public static final String SERIALIZED_NAME_ALERT_FREQUENCY = "alertFrequency";
  @SerializedName(SERIALIZED_NAME_ALERT_FREQUENCY)
  private String alertFrequency;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public DiskSpaceUsageMonitorProviderResponse() {
  }

  public DiskSpaceUsageMonitorProviderResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Monitor Provider
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Monitor Provider")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public DiskSpaceUsageMonitorProviderResponse schemas(List<EnumdiskSpaceUsageMonitorProviderSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public DiskSpaceUsageMonitorProviderResponse addSchemasItem(EnumdiskSpaceUsageMonitorProviderSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumdiskSpaceUsageMonitorProviderSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumdiskSpaceUsageMonitorProviderSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public DiskSpaceUsageMonitorProviderResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Monitor Provider
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Monitor Provider")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public DiskSpaceUsageMonitorProviderResponse lowSpaceWarningSizeThreshold(String lowSpaceWarningSizeThreshold) {
    
    
    
    
    this.lowSpaceWarningSizeThreshold = lowSpaceWarningSizeThreshold;
    return this;
  }

   /**
   * Specifies the low space warning threshold value as an absolute amount of space. If the amount of usable disk space drops below this amount, then the Directory Server will begin generating warning alert notifications.
   * @return lowSpaceWarningSizeThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the low space warning threshold value as an absolute amount of space. If the amount of usable disk space drops below this amount, then the Directory Server will begin generating warning alert notifications.")

  public String getLowSpaceWarningSizeThreshold() {
    return lowSpaceWarningSizeThreshold;
  }


  public void setLowSpaceWarningSizeThreshold(String lowSpaceWarningSizeThreshold) {
    
    
    
    this.lowSpaceWarningSizeThreshold = lowSpaceWarningSizeThreshold;
  }


  public DiskSpaceUsageMonitorProviderResponse lowSpaceWarningPercentThreshold(Integer lowSpaceWarningPercentThreshold) {
    
    
    
    
    this.lowSpaceWarningPercentThreshold = lowSpaceWarningPercentThreshold;
    return this;
  }

   /**
   * Specifies the low space warning threshold value as a percentage of total space. If the amount of usable disk space drops below this amount, then the Directory Server will begin generating warning alert notifications.
   * @return lowSpaceWarningPercentThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the low space warning threshold value as a percentage of total space. If the amount of usable disk space drops below this amount, then the Directory Server will begin generating warning alert notifications.")

  public Integer getLowSpaceWarningPercentThreshold() {
    return lowSpaceWarningPercentThreshold;
  }


  public void setLowSpaceWarningPercentThreshold(Integer lowSpaceWarningPercentThreshold) {
    
    
    
    this.lowSpaceWarningPercentThreshold = lowSpaceWarningPercentThreshold;
  }


  public DiskSpaceUsageMonitorProviderResponse lowSpaceErrorSizeThreshold(String lowSpaceErrorSizeThreshold) {
    
    
    
    
    this.lowSpaceErrorSizeThreshold = lowSpaceErrorSizeThreshold;
    return this;
  }

   /**
   * Specifies the low space error threshold value as an absolute amount of space. If the amount of usable disk space drops below this amount, then the Directory Server will start rejecting operations requested by non-root users.
   * @return lowSpaceErrorSizeThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the low space error threshold value as an absolute amount of space. If the amount of usable disk space drops below this amount, then the Directory Server will start rejecting operations requested by non-root users.")

  public String getLowSpaceErrorSizeThreshold() {
    return lowSpaceErrorSizeThreshold;
  }


  public void setLowSpaceErrorSizeThreshold(String lowSpaceErrorSizeThreshold) {
    
    
    
    this.lowSpaceErrorSizeThreshold = lowSpaceErrorSizeThreshold;
  }


  public DiskSpaceUsageMonitorProviderResponse lowSpaceErrorPercentThreshold(Integer lowSpaceErrorPercentThreshold) {
    
    
    
    
    this.lowSpaceErrorPercentThreshold = lowSpaceErrorPercentThreshold;
    return this;
  }

   /**
   * Specifies the low space error threshold value as a percentage of total space. If the amount of usable disk space drops below this amount, then the Directory Server will start rejecting operations requested by non-root users.
   * @return lowSpaceErrorPercentThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the low space error threshold value as a percentage of total space. If the amount of usable disk space drops below this amount, then the Directory Server will start rejecting operations requested by non-root users.")

  public Integer getLowSpaceErrorPercentThreshold() {
    return lowSpaceErrorPercentThreshold;
  }


  public void setLowSpaceErrorPercentThreshold(Integer lowSpaceErrorPercentThreshold) {
    
    
    
    this.lowSpaceErrorPercentThreshold = lowSpaceErrorPercentThreshold;
  }


  public DiskSpaceUsageMonitorProviderResponse outOfSpaceErrorSizeThreshold(String outOfSpaceErrorSizeThreshold) {
    
    
    
    
    this.outOfSpaceErrorSizeThreshold = outOfSpaceErrorSizeThreshold;
    return this;
  }

   /**
   * Specifies the out of space error threshold value as an absolute amount of space. If the amount of usable disk space drops below this amount, then the Directory Server will shut itself down to avoid problems that may occur from complete exhaustion of usable space.
   * @return outOfSpaceErrorSizeThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the out of space error threshold value as an absolute amount of space. If the amount of usable disk space drops below this amount, then the Directory Server will shut itself down to avoid problems that may occur from complete exhaustion of usable space.")

  public String getOutOfSpaceErrorSizeThreshold() {
    return outOfSpaceErrorSizeThreshold;
  }


  public void setOutOfSpaceErrorSizeThreshold(String outOfSpaceErrorSizeThreshold) {
    
    
    
    this.outOfSpaceErrorSizeThreshold = outOfSpaceErrorSizeThreshold;
  }


  public DiskSpaceUsageMonitorProviderResponse outOfSpaceErrorPercentThreshold(Integer outOfSpaceErrorPercentThreshold) {
    
    
    
    
    this.outOfSpaceErrorPercentThreshold = outOfSpaceErrorPercentThreshold;
    return this;
  }

   /**
   * Specifies the out of space error threshold value as a percentage of total space. If the amount of usable disk space drops below this amount, then the Directory Server will shut itself down to avoid problems that may occur from complete exhaustion of usable space.
   * @return outOfSpaceErrorPercentThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the out of space error threshold value as a percentage of total space. If the amount of usable disk space drops below this amount, then the Directory Server will shut itself down to avoid problems that may occur from complete exhaustion of usable space.")

  public Integer getOutOfSpaceErrorPercentThreshold() {
    return outOfSpaceErrorPercentThreshold;
  }


  public void setOutOfSpaceErrorPercentThreshold(Integer outOfSpaceErrorPercentThreshold) {
    
    
    
    this.outOfSpaceErrorPercentThreshold = outOfSpaceErrorPercentThreshold;
  }


  public DiskSpaceUsageMonitorProviderResponse alertFrequency(String alertFrequency) {
    
    
    
    
    this.alertFrequency = alertFrequency;
    return this;
  }

   /**
   * Specifies the length of time between administrative alerts generated in response to lack of usable disk space. Administrative alerts will be generated whenever the amount of usable space drops below any threshold, and they will also be generated at regular intervals as long as the amount of usable space remains below the threshold value. A value of zero indicates that alerts should only be generated when the amount of usable space drops below a configured threshold.
   * @return alertFrequency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the length of time between administrative alerts generated in response to lack of usable disk space. Administrative alerts will be generated whenever the amount of usable space drops below any threshold, and they will also be generated at regular intervals as long as the amount of usable space remains below the threshold value. A value of zero indicates that alerts should only be generated when the amount of usable space drops below a configured threshold.")

  public String getAlertFrequency() {
    return alertFrequency;
  }


  public void setAlertFrequency(String alertFrequency) {
    
    
    
    this.alertFrequency = alertFrequency;
  }


  public DiskSpaceUsageMonitorProviderResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Monitor Provider is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the Monitor Provider is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public DiskSpaceUsageMonitorProviderResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public DiskSpaceUsageMonitorProviderResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DiskSpaceUsageMonitorProviderResponse instance itself
   */
  public DiskSpaceUsageMonitorProviderResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskSpaceUsageMonitorProviderResponse diskSpaceUsageMonitorProviderResponse = (DiskSpaceUsageMonitorProviderResponse) o;
    return Objects.equals(this.description, diskSpaceUsageMonitorProviderResponse.description) &&
        Objects.equals(this.schemas, diskSpaceUsageMonitorProviderResponse.schemas) &&
        Objects.equals(this.id, diskSpaceUsageMonitorProviderResponse.id) &&
        Objects.equals(this.lowSpaceWarningSizeThreshold, diskSpaceUsageMonitorProviderResponse.lowSpaceWarningSizeThreshold) &&
        Objects.equals(this.lowSpaceWarningPercentThreshold, diskSpaceUsageMonitorProviderResponse.lowSpaceWarningPercentThreshold) &&
        Objects.equals(this.lowSpaceErrorSizeThreshold, diskSpaceUsageMonitorProviderResponse.lowSpaceErrorSizeThreshold) &&
        Objects.equals(this.lowSpaceErrorPercentThreshold, diskSpaceUsageMonitorProviderResponse.lowSpaceErrorPercentThreshold) &&
        Objects.equals(this.outOfSpaceErrorSizeThreshold, diskSpaceUsageMonitorProviderResponse.outOfSpaceErrorSizeThreshold) &&
        Objects.equals(this.outOfSpaceErrorPercentThreshold, diskSpaceUsageMonitorProviderResponse.outOfSpaceErrorPercentThreshold) &&
        Objects.equals(this.alertFrequency, diskSpaceUsageMonitorProviderResponse.alertFrequency) &&
        Objects.equals(this.enabled, diskSpaceUsageMonitorProviderResponse.enabled) &&
        Objects.equals(this.meta, diskSpaceUsageMonitorProviderResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, diskSpaceUsageMonitorProviderResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, diskSpaceUsageMonitorProviderResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, lowSpaceWarningSizeThreshold, lowSpaceWarningPercentThreshold, lowSpaceErrorSizeThreshold, lowSpaceErrorPercentThreshold, outOfSpaceErrorSizeThreshold, outOfSpaceErrorPercentThreshold, alertFrequency, enabled, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskSpaceUsageMonitorProviderResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lowSpaceWarningSizeThreshold: ").append(toIndentedString(lowSpaceWarningSizeThreshold)).append("\n");
    sb.append("    lowSpaceWarningPercentThreshold: ").append(toIndentedString(lowSpaceWarningPercentThreshold)).append("\n");
    sb.append("    lowSpaceErrorSizeThreshold: ").append(toIndentedString(lowSpaceErrorSizeThreshold)).append("\n");
    sb.append("    lowSpaceErrorPercentThreshold: ").append(toIndentedString(lowSpaceErrorPercentThreshold)).append("\n");
    sb.append("    outOfSpaceErrorSizeThreshold: ").append(toIndentedString(outOfSpaceErrorSizeThreshold)).append("\n");
    sb.append("    outOfSpaceErrorPercentThreshold: ").append(toIndentedString(outOfSpaceErrorPercentThreshold)).append("\n");
    sb.append("    alertFrequency: ").append(toIndentedString(alertFrequency)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("lowSpaceWarningSizeThreshold");
    openapiFields.add("lowSpaceWarningPercentThreshold");
    openapiFields.add("lowSpaceErrorSizeThreshold");
    openapiFields.add("lowSpaceErrorPercentThreshold");
    openapiFields.add("outOfSpaceErrorSizeThreshold");
    openapiFields.add("outOfSpaceErrorPercentThreshold");
    openapiFields.add("alertFrequency");
    openapiFields.add("enabled");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("alertFrequency");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DiskSpaceUsageMonitorProviderResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DiskSpaceUsageMonitorProviderResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskSpaceUsageMonitorProviderResponse is not found in the empty JSON string", DiskSpaceUsageMonitorProviderResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiskSpaceUsageMonitorProviderResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lowSpaceWarningSizeThreshold") != null && !jsonObj.get("lowSpaceWarningSizeThreshold").isJsonNull()) && !jsonObj.get("lowSpaceWarningSizeThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lowSpaceWarningSizeThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lowSpaceWarningSizeThreshold").toString()));
      }
      if ((jsonObj.get("lowSpaceErrorSizeThreshold") != null && !jsonObj.get("lowSpaceErrorSizeThreshold").isJsonNull()) && !jsonObj.get("lowSpaceErrorSizeThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lowSpaceErrorSizeThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lowSpaceErrorSizeThreshold").toString()));
      }
      if ((jsonObj.get("outOfSpaceErrorSizeThreshold") != null && !jsonObj.get("outOfSpaceErrorSizeThreshold").isJsonNull()) && !jsonObj.get("outOfSpaceErrorSizeThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outOfSpaceErrorSizeThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outOfSpaceErrorSizeThreshold").toString()));
      }
      if (!jsonObj.get("alertFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertFrequency").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskSpaceUsageMonitorProviderResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskSpaceUsageMonitorProviderResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskSpaceUsageMonitorProviderResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskSpaceUsageMonitorProviderResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskSpaceUsageMonitorProviderResponse>() {
           @Override
           public void write(JsonWriter out, DiskSpaceUsageMonitorProviderResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskSpaceUsageMonitorProviderResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DiskSpaceUsageMonitorProviderResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DiskSpaceUsageMonitorProviderResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DiskSpaceUsageMonitorProviderResponse
  * @throws IOException if the JSON string is invalid with respect to DiskSpaceUsageMonitorProviderResponse
  */
  public static DiskSpaceUsageMonitorProviderResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskSpaceUsageMonitorProviderResponse.class);
  }

 /**
  * Convert an instance of DiskSpaceUsageMonitorProviderResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

