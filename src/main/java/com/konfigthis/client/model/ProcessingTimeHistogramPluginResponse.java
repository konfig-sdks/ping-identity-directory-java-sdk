/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumpluginPluginTypeProp;
import com.konfigthis.client.model.EnumprocessingTimeHistogramPluginSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProcessingTimeHistogramPluginResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProcessingTimeHistogramPluginResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumprocessingTimeHistogramPluginSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PLUGIN_TYPE = "pluginType";
  @SerializedName(SERIALIZED_NAME_PLUGIN_TYPE)
  private List<EnumpluginPluginTypeProp> pluginType = new ArrayList<>();

  public static final String SERIALIZED_NAME_HISTOGRAM_CATEGORY_BOUNDARY = "histogramCategoryBoundary";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_CATEGORY_BOUNDARY)
  private List<String> histogramCategoryBoundary = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDE_QUEUE_TIME = "includeQueueTime";
  @SerializedName(SERIALIZED_NAME_INCLUDE_QUEUE_TIME)
  private Boolean includeQueueTime;

  public static final String SERIALIZED_NAME_SEPARATE_MONITOR_ENTRY_PER_TRACKED_APPLICATION = "separateMonitorEntryPerTrackedApplication";
  @SerializedName(SERIALIZED_NAME_SEPARATE_MONITOR_ENTRY_PER_TRACKED_APPLICATION)
  private Boolean separateMonitorEntryPerTrackedApplication;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS = "invokeForInternalOperations";
  @SerializedName(SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS)
  private Boolean invokeForInternalOperations;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public ProcessingTimeHistogramPluginResponse() {
  }

  public ProcessingTimeHistogramPluginResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ProcessingTimeHistogramPluginResponse schemas(List<EnumprocessingTimeHistogramPluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public ProcessingTimeHistogramPluginResponse addSchemasItem(EnumprocessingTimeHistogramPluginSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumprocessingTimeHistogramPluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumprocessingTimeHistogramPluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public ProcessingTimeHistogramPluginResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Plugin
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Plugin")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ProcessingTimeHistogramPluginResponse pluginType(List<EnumpluginPluginTypeProp> pluginType) {
    
    
    
    
    this.pluginType = pluginType;
    return this;
  }

  public ProcessingTimeHistogramPluginResponse addPluginTypeItem(EnumpluginPluginTypeProp pluginTypeItem) {
    this.pluginType.add(pluginTypeItem);
    return this;
  }

   /**
   * Get pluginType
   * @return pluginType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumpluginPluginTypeProp> getPluginType() {
    return pluginType;
  }


  public void setPluginType(List<EnumpluginPluginTypeProp> pluginType) {
    
    
    
    this.pluginType = pluginType;
  }


  public ProcessingTimeHistogramPluginResponse histogramCategoryBoundary(List<String> histogramCategoryBoundary) {
    
    
    
    
    this.histogramCategoryBoundary = histogramCategoryBoundary;
    return this;
  }

  public ProcessingTimeHistogramPluginResponse addHistogramCategoryBoundaryItem(String histogramCategoryBoundaryItem) {
    this.histogramCategoryBoundary.add(histogramCategoryBoundaryItem);
    return this;
  }

   /**
   * Specifies the boundary values that will be used to separate the processing times into categories. Values should be specified as durations, and all values must be greater than zero.
   * @return histogramCategoryBoundary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the boundary values that will be used to separate the processing times into categories. Values should be specified as durations, and all values must be greater than zero.")

  public List<String> getHistogramCategoryBoundary() {
    return histogramCategoryBoundary;
  }


  public void setHistogramCategoryBoundary(List<String> histogramCategoryBoundary) {
    
    
    
    this.histogramCategoryBoundary = histogramCategoryBoundary;
  }


  public ProcessingTimeHistogramPluginResponse includeQueueTime(Boolean includeQueueTime) {
    
    
    
    
    this.includeQueueTime = includeQueueTime;
    return this;
  }

   /**
   * Indicates whether operation processing times should include the time spent waiting on the work queue. This will only be available if the work queue is configured to monitor the queue time.
   * @return includeQueueTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether operation processing times should include the time spent waiting on the work queue. This will only be available if the work queue is configured to monitor the queue time.")

  public Boolean getIncludeQueueTime() {
    return includeQueueTime;
  }


  public void setIncludeQueueTime(Boolean includeQueueTime) {
    
    
    
    this.includeQueueTime = includeQueueTime;
  }


  public ProcessingTimeHistogramPluginResponse separateMonitorEntryPerTrackedApplication(Boolean separateMonitorEntryPerTrackedApplication) {
    
    
    
    
    this.separateMonitorEntryPerTrackedApplication = separateMonitorEntryPerTrackedApplication;
    return this;
  }

   /**
   * When enabled, separate monitor entries will be included for each application defined in the Global Configuration&#39;s tracked-application property.
   * @return separateMonitorEntryPerTrackedApplication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When enabled, separate monitor entries will be included for each application defined in the Global Configuration's tracked-application property.")

  public Boolean getSeparateMonitorEntryPerTrackedApplication() {
    return separateMonitorEntryPerTrackedApplication;
  }


  public void setSeparateMonitorEntryPerTrackedApplication(Boolean separateMonitorEntryPerTrackedApplication) {
    
    
    
    this.separateMonitorEntryPerTrackedApplication = separateMonitorEntryPerTrackedApplication;
  }


  public ProcessingTimeHistogramPluginResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public ProcessingTimeHistogramPluginResponse invokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
    return this;
  }

   /**
   * Indicates whether the plug-in should be invoked for internal operations.
   * @return invokeForInternalOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the plug-in should be invoked for internal operations.")

  public Boolean getInvokeForInternalOperations() {
    return invokeForInternalOperations;
  }


  public void setInvokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
  }


  public ProcessingTimeHistogramPluginResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public ProcessingTimeHistogramPluginResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProcessingTimeHistogramPluginResponse instance itself
   */
  public ProcessingTimeHistogramPluginResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProcessingTimeHistogramPluginResponse processingTimeHistogramPluginResponse = (ProcessingTimeHistogramPluginResponse) o;
    return Objects.equals(this.description, processingTimeHistogramPluginResponse.description) &&
        Objects.equals(this.schemas, processingTimeHistogramPluginResponse.schemas) &&
        Objects.equals(this.id, processingTimeHistogramPluginResponse.id) &&
        Objects.equals(this.pluginType, processingTimeHistogramPluginResponse.pluginType) &&
        Objects.equals(this.histogramCategoryBoundary, processingTimeHistogramPluginResponse.histogramCategoryBoundary) &&
        Objects.equals(this.includeQueueTime, processingTimeHistogramPluginResponse.includeQueueTime) &&
        Objects.equals(this.separateMonitorEntryPerTrackedApplication, processingTimeHistogramPluginResponse.separateMonitorEntryPerTrackedApplication) &&
        Objects.equals(this.enabled, processingTimeHistogramPluginResponse.enabled) &&
        Objects.equals(this.invokeForInternalOperations, processingTimeHistogramPluginResponse.invokeForInternalOperations) &&
        Objects.equals(this.meta, processingTimeHistogramPluginResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, processingTimeHistogramPluginResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, processingTimeHistogramPluginResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, pluginType, histogramCategoryBoundary, includeQueueTime, separateMonitorEntryPerTrackedApplication, enabled, invokeForInternalOperations, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProcessingTimeHistogramPluginResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pluginType: ").append(toIndentedString(pluginType)).append("\n");
    sb.append("    histogramCategoryBoundary: ").append(toIndentedString(histogramCategoryBoundary)).append("\n");
    sb.append("    includeQueueTime: ").append(toIndentedString(includeQueueTime)).append("\n");
    sb.append("    separateMonitorEntryPerTrackedApplication: ").append(toIndentedString(separateMonitorEntryPerTrackedApplication)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    invokeForInternalOperations: ").append(toIndentedString(invokeForInternalOperations)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("pluginType");
    openapiFields.add("histogramCategoryBoundary");
    openapiFields.add("includeQueueTime");
    openapiFields.add("separateMonitorEntryPerTrackedApplication");
    openapiFields.add("enabled");
    openapiFields.add("invokeForInternalOperations");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("pluginType");
    openapiRequiredFields.add("histogramCategoryBoundary");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProcessingTimeHistogramPluginResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProcessingTimeHistogramPluginResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProcessingTimeHistogramPluginResponse is not found in the empty JSON string", ProcessingTimeHistogramPluginResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProcessingTimeHistogramPluginResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("pluginType") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pluginType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginType` to be an array in the JSON string but got `%s`", jsonObj.get("pluginType").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("histogramCategoryBoundary") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("histogramCategoryBoundary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `histogramCategoryBoundary` to be an array in the JSON string but got `%s`", jsonObj.get("histogramCategoryBoundary").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProcessingTimeHistogramPluginResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProcessingTimeHistogramPluginResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProcessingTimeHistogramPluginResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProcessingTimeHistogramPluginResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ProcessingTimeHistogramPluginResponse>() {
           @Override
           public void write(JsonWriter out, ProcessingTimeHistogramPluginResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProcessingTimeHistogramPluginResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProcessingTimeHistogramPluginResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProcessingTimeHistogramPluginResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProcessingTimeHistogramPluginResponse
  * @throws IOException if the JSON string is invalid with respect to ProcessingTimeHistogramPluginResponse
  */
  public static ProcessingTimeHistogramPluginResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProcessingTimeHistogramPluginResponse.class);
  }

 /**
  * Convert an instance of ProcessingTimeHistogramPluginResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

