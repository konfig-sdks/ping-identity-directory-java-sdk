/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumpasswordPolicyAllowPreEncodedPasswordsProp;
import com.konfigthis.client.model.EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp;
import com.konfigthis.client.model.EnumpasswordPolicyBindPasswordValidationFailureActionProp;
import com.konfigthis.client.model.EnumpasswordPolicyPasswordRetirementBehaviorProp;
import com.konfigthis.client.model.EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp;
import com.konfigthis.client.model.EnumpasswordPolicyReturnPasswordExpirationControlsProp;
import com.konfigthis.client.model.EnumpasswordPolicySchemaUrn;
import com.konfigthis.client.model.EnumpasswordPolicyStateUpdateFailurePolicyProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PasswordPolicyShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PasswordPolicyShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumpasswordPolicySchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_REQUIRE_SECURE_AUTHENTICATION = "requireSecureAuthentication";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SECURE_AUTHENTICATION)
  private Boolean requireSecureAuthentication;

  public static final String SERIALIZED_NAME_REQUIRE_SECURE_PASSWORD_CHANGES = "requireSecurePasswordChanges";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SECURE_PASSWORD_CHANGES)
  private Boolean requireSecurePasswordChanges;

  public static final String SERIALIZED_NAME_ACCOUNT_STATUS_NOTIFICATION_HANDLER = "accountStatusNotificationHandler";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_STATUS_NOTIFICATION_HANDLER)
  private List<String> accountStatusNotificationHandler = null;

  public static final String SERIALIZED_NAME_STATE_UPDATE_FAILURE_POLICY = "stateUpdateFailurePolicy";
  @SerializedName(SERIALIZED_NAME_STATE_UPDATE_FAILURE_POLICY)
  private EnumpasswordPolicyStateUpdateFailurePolicyProp stateUpdateFailurePolicy;

  public static final String SERIALIZED_NAME_ENABLE_DEBUG = "enableDebug";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEBUG)
  private Boolean enableDebug;

  public static final String SERIALIZED_NAME_PASSWORD_ATTRIBUTE = "passwordAttribute";
  @SerializedName(SERIALIZED_NAME_PASSWORD_ATTRIBUTE)
  private String passwordAttribute;

  public static final String SERIALIZED_NAME_DEFAULT_PASSWORD_STORAGE_SCHEME = "defaultPasswordStorageScheme";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PASSWORD_STORAGE_SCHEME)
  private List<String> defaultPasswordStorageScheme = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEPRECATED_PASSWORD_STORAGE_SCHEME = "deprecatedPasswordStorageScheme";
  @SerializedName(SERIALIZED_NAME_DEPRECATED_PASSWORD_STORAGE_SCHEME)
  private List<String> deprecatedPasswordStorageScheme = null;

  public static final String SERIALIZED_NAME_RE_ENCODE_PASSWORDS_ON_SCHEME_CONFIG_CHANGE = "reEncodePasswordsOnSchemeConfigChange";
  @SerializedName(SERIALIZED_NAME_RE_ENCODE_PASSWORDS_ON_SCHEME_CONFIG_CHANGE)
  private Boolean reEncodePasswordsOnSchemeConfigChange;

  public static final String SERIALIZED_NAME_ALLOW_MULTIPLE_PASSWORD_VALUES = "allowMultiplePasswordValues";
  @SerializedName(SERIALIZED_NAME_ALLOW_MULTIPLE_PASSWORD_VALUES)
  private Boolean allowMultiplePasswordValues;

  public static final String SERIALIZED_NAME_ALLOW_PRE_ENCODED_PASSWORDS = "allowPreEncodedPasswords";
  @SerializedName(SERIALIZED_NAME_ALLOW_PRE_ENCODED_PASSWORDS)
  private EnumpasswordPolicyAllowPreEncodedPasswordsProp allowPreEncodedPasswords;

  public static final String SERIALIZED_NAME_PASSWORD_VALIDATOR = "passwordValidator";
  @SerializedName(SERIALIZED_NAME_PASSWORD_VALIDATOR)
  private List<String> passwordValidator = null;

  public static final String SERIALIZED_NAME_BIND_PASSWORD_VALIDATOR = "bindPasswordValidator";
  @SerializedName(SERIALIZED_NAME_BIND_PASSWORD_VALIDATOR)
  private List<String> bindPasswordValidator = null;

  public static final String SERIALIZED_NAME_MINIMUM_BIND_PASSWORD_VALIDATION_FREQUENCY = "minimumBindPasswordValidationFrequency";
  @SerializedName(SERIALIZED_NAME_MINIMUM_BIND_PASSWORD_VALIDATION_FREQUENCY)
  private String minimumBindPasswordValidationFrequency;

  public static final String SERIALIZED_NAME_BIND_PASSWORD_VALIDATION_FAILURE_ACTION = "bindPasswordValidationFailureAction";
  @SerializedName(SERIALIZED_NAME_BIND_PASSWORD_VALIDATION_FAILURE_ACTION)
  private EnumpasswordPolicyBindPasswordValidationFailureActionProp bindPasswordValidationFailureAction;

  public static final String SERIALIZED_NAME_PASSWORD_GENERATOR = "passwordGenerator";
  @SerializedName(SERIALIZED_NAME_PASSWORD_GENERATOR)
  private String passwordGenerator;

  public static final String SERIALIZED_NAME_PASSWORD_HISTORY_COUNT = "passwordHistoryCount";
  @SerializedName(SERIALIZED_NAME_PASSWORD_HISTORY_COUNT)
  private Integer passwordHistoryCount;

  public static final String SERIALIZED_NAME_PASSWORD_HISTORY_DURATION = "passwordHistoryDuration";
  @SerializedName(SERIALIZED_NAME_PASSWORD_HISTORY_DURATION)
  private String passwordHistoryDuration;

  public static final String SERIALIZED_NAME_MIN_PASSWORD_AGE = "minPasswordAge";
  @SerializedName(SERIALIZED_NAME_MIN_PASSWORD_AGE)
  private String minPasswordAge;

  public static final String SERIALIZED_NAME_MAX_PASSWORD_AGE = "maxPasswordAge";
  @SerializedName(SERIALIZED_NAME_MAX_PASSWORD_AGE)
  private String maxPasswordAge;

  public static final String SERIALIZED_NAME_PASSWORD_EXPIRATION_WARNING_INTERVAL = "passwordExpirationWarningInterval";
  @SerializedName(SERIALIZED_NAME_PASSWORD_EXPIRATION_WARNING_INTERVAL)
  private String passwordExpirationWarningInterval;

  public static final String SERIALIZED_NAME_EXPIRE_PASSWORDS_WITHOUT_WARNING = "expirePasswordsWithoutWarning";
  @SerializedName(SERIALIZED_NAME_EXPIRE_PASSWORDS_WITHOUT_WARNING)
  private Boolean expirePasswordsWithoutWarning;

  public static final String SERIALIZED_NAME_RETURN_PASSWORD_EXPIRATION_CONTROLS = "returnPasswordExpirationControls";
  @SerializedName(SERIALIZED_NAME_RETURN_PASSWORD_EXPIRATION_CONTROLS)
  private EnumpasswordPolicyReturnPasswordExpirationControlsProp returnPasswordExpirationControls;

  public static final String SERIALIZED_NAME_ALLOW_EXPIRED_PASSWORD_CHANGES = "allowExpiredPasswordChanges";
  @SerializedName(SERIALIZED_NAME_ALLOW_EXPIRED_PASSWORD_CHANGES)
  private Boolean allowExpiredPasswordChanges;

  public static final String SERIALIZED_NAME_GRACE_LOGIN_COUNT = "graceLoginCount";
  @SerializedName(SERIALIZED_NAME_GRACE_LOGIN_COUNT)
  private Integer graceLoginCount;

  public static final String SERIALIZED_NAME_REQUIRE_CHANGE_BY_TIME = "requireChangeByTime";
  @SerializedName(SERIALIZED_NAME_REQUIRE_CHANGE_BY_TIME)
  private String requireChangeByTime;

  public static final String SERIALIZED_NAME_LOCKOUT_FAILURE_COUNT = "lockoutFailureCount";
  @SerializedName(SERIALIZED_NAME_LOCKOUT_FAILURE_COUNT)
  private Integer lockoutFailureCount;

  public static final String SERIALIZED_NAME_LOCKOUT_DURATION = "lockoutDuration";
  @SerializedName(SERIALIZED_NAME_LOCKOUT_DURATION)
  private String lockoutDuration;

  public static final String SERIALIZED_NAME_LOCKOUT_FAILURE_EXPIRATION_INTERVAL = "lockoutFailureExpirationInterval";
  @SerializedName(SERIALIZED_NAME_LOCKOUT_FAILURE_EXPIRATION_INTERVAL)
  private String lockoutFailureExpirationInterval;

  public static final String SERIALIZED_NAME_IGNORE_DUPLICATE_PASSWORD_FAILURES = "ignoreDuplicatePasswordFailures";
  @SerializedName(SERIALIZED_NAME_IGNORE_DUPLICATE_PASSWORD_FAILURES)
  private Boolean ignoreDuplicatePasswordFailures;

  public static final String SERIALIZED_NAME_FAILURE_LOCKOUT_ACTION = "failureLockoutAction";
  @SerializedName(SERIALIZED_NAME_FAILURE_LOCKOUT_ACTION)
  private String failureLockoutAction;

  public static final String SERIALIZED_NAME_IDLE_LOCKOUT_INTERVAL = "idleLockoutInterval";
  @SerializedName(SERIALIZED_NAME_IDLE_LOCKOUT_INTERVAL)
  private String idleLockoutInterval;

  public static final String SERIALIZED_NAME_ALLOW_USER_PASSWORD_CHANGES = "allowUserPasswordChanges";
  @SerializedName(SERIALIZED_NAME_ALLOW_USER_PASSWORD_CHANGES)
  private Boolean allowUserPasswordChanges;

  public static final String SERIALIZED_NAME_PASSWORD_CHANGE_REQUIRES_CURRENT_PASSWORD = "passwordChangeRequiresCurrentPassword";
  @SerializedName(SERIALIZED_NAME_PASSWORD_CHANGE_REQUIRES_CURRENT_PASSWORD)
  private Boolean passwordChangeRequiresCurrentPassword;

  public static final String SERIALIZED_NAME_PASSWORD_RETIREMENT_BEHAVIOR = "passwordRetirementBehavior";
  @SerializedName(SERIALIZED_NAME_PASSWORD_RETIREMENT_BEHAVIOR)
  private List<EnumpasswordPolicyPasswordRetirementBehaviorProp> passwordRetirementBehavior = null;

  public static final String SERIALIZED_NAME_MAX_RETIRED_PASSWORD_AGE = "maxRetiredPasswordAge";
  @SerializedName(SERIALIZED_NAME_MAX_RETIRED_PASSWORD_AGE)
  private String maxRetiredPasswordAge;

  public static final String SERIALIZED_NAME_ALLOWED_PASSWORD_RESET_TOKEN_USE_CONDITION = "allowedPasswordResetTokenUseCondition";
  @SerializedName(SERIALIZED_NAME_ALLOWED_PASSWORD_RESET_TOKEN_USE_CONDITION)
  private List<EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp> allowedPasswordResetTokenUseCondition = null;

  public static final String SERIALIZED_NAME_FORCE_CHANGE_ON_ADD = "forceChangeOnAdd";
  @SerializedName(SERIALIZED_NAME_FORCE_CHANGE_ON_ADD)
  private Boolean forceChangeOnAdd;

  public static final String SERIALIZED_NAME_FORCE_CHANGE_ON_RESET = "forceChangeOnReset";
  @SerializedName(SERIALIZED_NAME_FORCE_CHANGE_ON_RESET)
  private Boolean forceChangeOnReset;

  public static final String SERIALIZED_NAME_MAX_PASSWORD_RESET_AGE = "maxPasswordResetAge";
  @SerializedName(SERIALIZED_NAME_MAX_PASSWORD_RESET_AGE)
  private String maxPasswordResetAge;

  public static final String SERIALIZED_NAME_SKIP_VALIDATION_FOR_ADMINISTRATORS = "skipValidationForAdministrators";
  @SerializedName(SERIALIZED_NAME_SKIP_VALIDATION_FOR_ADMINISTRATORS)
  private Boolean skipValidationForAdministrators;

  public static final String SERIALIZED_NAME_MAXIMUM_RECENT_LOGIN_HISTORY_SUCCESSFUL_AUTHENTICATION_COUNT = "maximumRecentLoginHistorySuccessfulAuthenticationCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RECENT_LOGIN_HISTORY_SUCCESSFUL_AUTHENTICATION_COUNT)
  private Integer maximumRecentLoginHistorySuccessfulAuthenticationCount;

  public static final String SERIALIZED_NAME_MAXIMUM_RECENT_LOGIN_HISTORY_SUCCESSFUL_AUTHENTICATION_DURATION = "maximumRecentLoginHistorySuccessfulAuthenticationDuration";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RECENT_LOGIN_HISTORY_SUCCESSFUL_AUTHENTICATION_DURATION)
  private String maximumRecentLoginHistorySuccessfulAuthenticationDuration;

  public static final String SERIALIZED_NAME_MAXIMUM_RECENT_LOGIN_HISTORY_FAILED_AUTHENTICATION_COUNT = "maximumRecentLoginHistoryFailedAuthenticationCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RECENT_LOGIN_HISTORY_FAILED_AUTHENTICATION_COUNT)
  private Integer maximumRecentLoginHistoryFailedAuthenticationCount;

  public static final String SERIALIZED_NAME_MAXIMUM_RECENT_LOGIN_HISTORY_FAILED_AUTHENTICATION_DURATION = "maximumRecentLoginHistoryFailedAuthenticationDuration";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RECENT_LOGIN_HISTORY_FAILED_AUTHENTICATION_DURATION)
  private String maximumRecentLoginHistoryFailedAuthenticationDuration;

  public static final String SERIALIZED_NAME_RECENT_LOGIN_HISTORY_SIMILAR_ATTEMPT_BEHAVIOR = "recentLoginHistorySimilarAttemptBehavior";
  @SerializedName(SERIALIZED_NAME_RECENT_LOGIN_HISTORY_SIMILAR_ATTEMPT_BEHAVIOR)
  private EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp recentLoginHistorySimilarAttemptBehavior;

  public static final String SERIALIZED_NAME_LAST_LOGIN_I_P_ADDRESS_ATTRIBUTE = "lastLoginIPAddressAttribute";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_I_P_ADDRESS_ATTRIBUTE)
  private String lastLoginIPAddressAttribute;

  public static final String SERIALIZED_NAME_LAST_LOGIN_TIME_ATTRIBUTE = "lastLoginTimeAttribute";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_TIME_ATTRIBUTE)
  private String lastLoginTimeAttribute;

  public static final String SERIALIZED_NAME_LAST_LOGIN_TIME_FORMAT = "lastLoginTimeFormat";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_TIME_FORMAT)
  private String lastLoginTimeFormat;

  public static final String SERIALIZED_NAME_PREVIOUS_LAST_LOGIN_TIME_FORMAT = "previousLastLoginTimeFormat";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_LAST_LOGIN_TIME_FORMAT)
  private List<String> previousLastLoginTimeFormat = null;

  public PasswordPolicyShared() {
  }

  public PasswordPolicyShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Password Policy
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Password Policy")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PasswordPolicyShared schemas(List<EnumpasswordPolicySchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public PasswordPolicyShared addSchemasItem(EnumpasswordPolicySchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpasswordPolicySchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumpasswordPolicySchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public PasswordPolicyShared requireSecureAuthentication(Boolean requireSecureAuthentication) {
    
    
    
    
    this.requireSecureAuthentication = requireSecureAuthentication;
    return this;
  }

   /**
   * Indicates whether users with the associated password policy are required to authenticate in a secure manner.
   * @return requireSecureAuthentication
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether users with the associated password policy are required to authenticate in a secure manner.")

  public Boolean getRequireSecureAuthentication() {
    return requireSecureAuthentication;
  }


  public void setRequireSecureAuthentication(Boolean requireSecureAuthentication) {
    
    
    
    this.requireSecureAuthentication = requireSecureAuthentication;
  }


  public PasswordPolicyShared requireSecurePasswordChanges(Boolean requireSecurePasswordChanges) {
    
    
    
    
    this.requireSecurePasswordChanges = requireSecurePasswordChanges;
    return this;
  }

   /**
   * Indicates whether users with the associated password policy are required to change their password in a secure manner that does not expose the credentials.
   * @return requireSecurePasswordChanges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether users with the associated password policy are required to change their password in a secure manner that does not expose the credentials.")

  public Boolean getRequireSecurePasswordChanges() {
    return requireSecurePasswordChanges;
  }


  public void setRequireSecurePasswordChanges(Boolean requireSecurePasswordChanges) {
    
    
    
    this.requireSecurePasswordChanges = requireSecurePasswordChanges;
  }


  public PasswordPolicyShared accountStatusNotificationHandler(List<String> accountStatusNotificationHandler) {
    
    
    
    
    this.accountStatusNotificationHandler = accountStatusNotificationHandler;
    return this;
  }

  public PasswordPolicyShared addAccountStatusNotificationHandlerItem(String accountStatusNotificationHandlerItem) {
    if (this.accountStatusNotificationHandler == null) {
      this.accountStatusNotificationHandler = new ArrayList<>();
    }
    this.accountStatusNotificationHandler.add(accountStatusNotificationHandlerItem);
    return this;
  }

   /**
   * Specifies the names of the account status notification handlers that are used with the associated password storage scheme.
   * @return accountStatusNotificationHandler
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the account status notification handlers that are used with the associated password storage scheme.")

  public List<String> getAccountStatusNotificationHandler() {
    return accountStatusNotificationHandler;
  }


  public void setAccountStatusNotificationHandler(List<String> accountStatusNotificationHandler) {
    
    
    
    this.accountStatusNotificationHandler = accountStatusNotificationHandler;
  }


  public PasswordPolicyShared stateUpdateFailurePolicy(EnumpasswordPolicyStateUpdateFailurePolicyProp stateUpdateFailurePolicy) {
    
    
    
    
    this.stateUpdateFailurePolicy = stateUpdateFailurePolicy;
    return this;
  }

   /**
   * Get stateUpdateFailurePolicy
   * @return stateUpdateFailurePolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpasswordPolicyStateUpdateFailurePolicyProp getStateUpdateFailurePolicy() {
    return stateUpdateFailurePolicy;
  }


  public void setStateUpdateFailurePolicy(EnumpasswordPolicyStateUpdateFailurePolicyProp stateUpdateFailurePolicy) {
    
    
    
    this.stateUpdateFailurePolicy = stateUpdateFailurePolicy;
  }


  public PasswordPolicyShared enableDebug(Boolean enableDebug) {
    
    
    
    
    this.enableDebug = enableDebug;
    return this;
  }

   /**
   * Indicates whether to enable debugging for the password policy state.
   * @return enableDebug
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to enable debugging for the password policy state.")

  public Boolean getEnableDebug() {
    return enableDebug;
  }


  public void setEnableDebug(Boolean enableDebug) {
    
    
    
    this.enableDebug = enableDebug;
  }


  public PasswordPolicyShared passwordAttribute(String passwordAttribute) {
    
    
    
    
    this.passwordAttribute = passwordAttribute;
    return this;
  }

   /**
   * Specifies the attribute type used to hold user passwords.
   * @return passwordAttribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the attribute type used to hold user passwords.")

  public String getPasswordAttribute() {
    return passwordAttribute;
  }


  public void setPasswordAttribute(String passwordAttribute) {
    
    
    
    this.passwordAttribute = passwordAttribute;
  }


  public PasswordPolicyShared defaultPasswordStorageScheme(List<String> defaultPasswordStorageScheme) {
    
    
    
    
    this.defaultPasswordStorageScheme = defaultPasswordStorageScheme;
    return this;
  }

  public PasswordPolicyShared addDefaultPasswordStorageSchemeItem(String defaultPasswordStorageSchemeItem) {
    this.defaultPasswordStorageScheme.add(defaultPasswordStorageSchemeItem);
    return this;
  }

   /**
   * Specifies the names of the password storage schemes that are used to encode clear-text passwords for this password policy.
   * @return defaultPasswordStorageScheme
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the names of the password storage schemes that are used to encode clear-text passwords for this password policy.")

  public List<String> getDefaultPasswordStorageScheme() {
    return defaultPasswordStorageScheme;
  }


  public void setDefaultPasswordStorageScheme(List<String> defaultPasswordStorageScheme) {
    
    
    
    this.defaultPasswordStorageScheme = defaultPasswordStorageScheme;
  }


  public PasswordPolicyShared deprecatedPasswordStorageScheme(List<String> deprecatedPasswordStorageScheme) {
    
    
    
    
    this.deprecatedPasswordStorageScheme = deprecatedPasswordStorageScheme;
    return this;
  }

  public PasswordPolicyShared addDeprecatedPasswordStorageSchemeItem(String deprecatedPasswordStorageSchemeItem) {
    if (this.deprecatedPasswordStorageScheme == null) {
      this.deprecatedPasswordStorageScheme = new ArrayList<>();
    }
    this.deprecatedPasswordStorageScheme.add(deprecatedPasswordStorageSchemeItem);
    return this;
  }

   /**
   * Specifies the names of the password storage schemes that are considered deprecated for this password policy.
   * @return deprecatedPasswordStorageScheme
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the password storage schemes that are considered deprecated for this password policy.")

  public List<String> getDeprecatedPasswordStorageScheme() {
    return deprecatedPasswordStorageScheme;
  }


  public void setDeprecatedPasswordStorageScheme(List<String> deprecatedPasswordStorageScheme) {
    
    
    
    this.deprecatedPasswordStorageScheme = deprecatedPasswordStorageScheme;
  }


  public PasswordPolicyShared reEncodePasswordsOnSchemeConfigChange(Boolean reEncodePasswordsOnSchemeConfigChange) {
    
    
    
    
    this.reEncodePasswordsOnSchemeConfigChange = reEncodePasswordsOnSchemeConfigChange;
    return this;
  }

   /**
   * Indicates whether to re-encode passwords on authentication if the configuration for the underlying password storage scheme has changed.
   * @return reEncodePasswordsOnSchemeConfigChange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to re-encode passwords on authentication if the configuration for the underlying password storage scheme has changed.")

  public Boolean getReEncodePasswordsOnSchemeConfigChange() {
    return reEncodePasswordsOnSchemeConfigChange;
  }


  public void setReEncodePasswordsOnSchemeConfigChange(Boolean reEncodePasswordsOnSchemeConfigChange) {
    
    
    
    this.reEncodePasswordsOnSchemeConfigChange = reEncodePasswordsOnSchemeConfigChange;
  }


  public PasswordPolicyShared allowMultiplePasswordValues(Boolean allowMultiplePasswordValues) {
    
    
    
    
    this.allowMultiplePasswordValues = allowMultiplePasswordValues;
    return this;
  }

   /**
   * Indicates whether user entries can have multiple distinct values for the password attribute.
   * @return allowMultiplePasswordValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether user entries can have multiple distinct values for the password attribute.")

  public Boolean getAllowMultiplePasswordValues() {
    return allowMultiplePasswordValues;
  }


  public void setAllowMultiplePasswordValues(Boolean allowMultiplePasswordValues) {
    
    
    
    this.allowMultiplePasswordValues = allowMultiplePasswordValues;
  }


  public PasswordPolicyShared allowPreEncodedPasswords(EnumpasswordPolicyAllowPreEncodedPasswordsProp allowPreEncodedPasswords) {
    
    
    
    
    this.allowPreEncodedPasswords = allowPreEncodedPasswords;
    return this;
  }

   /**
   * Get allowPreEncodedPasswords
   * @return allowPreEncodedPasswords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpasswordPolicyAllowPreEncodedPasswordsProp getAllowPreEncodedPasswords() {
    return allowPreEncodedPasswords;
  }


  public void setAllowPreEncodedPasswords(EnumpasswordPolicyAllowPreEncodedPasswordsProp allowPreEncodedPasswords) {
    
    
    
    this.allowPreEncodedPasswords = allowPreEncodedPasswords;
  }


  public PasswordPolicyShared passwordValidator(List<String> passwordValidator) {
    
    
    
    
    this.passwordValidator = passwordValidator;
    return this;
  }

  public PasswordPolicyShared addPasswordValidatorItem(String passwordValidatorItem) {
    if (this.passwordValidator == null) {
      this.passwordValidator = new ArrayList<>();
    }
    this.passwordValidator.add(passwordValidatorItem);
    return this;
  }

   /**
   * Specifies the names of the password validators that are used with the associated password storage scheme.
   * @return passwordValidator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the password validators that are used with the associated password storage scheme.")

  public List<String> getPasswordValidator() {
    return passwordValidator;
  }


  public void setPasswordValidator(List<String> passwordValidator) {
    
    
    
    this.passwordValidator = passwordValidator;
  }


  public PasswordPolicyShared bindPasswordValidator(List<String> bindPasswordValidator) {
    
    
    
    
    this.bindPasswordValidator = bindPasswordValidator;
    return this;
  }

  public PasswordPolicyShared addBindPasswordValidatorItem(String bindPasswordValidatorItem) {
    if (this.bindPasswordValidator == null) {
      this.bindPasswordValidator = new ArrayList<>();
    }
    this.bindPasswordValidator.add(bindPasswordValidatorItem);
    return this;
  }

   /**
   * Specifies the names of the password validators that should be invoked for bind operations.
   * @return bindPasswordValidator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the names of the password validators that should be invoked for bind operations.")

  public List<String> getBindPasswordValidator() {
    return bindPasswordValidator;
  }


  public void setBindPasswordValidator(List<String> bindPasswordValidator) {
    
    
    
    this.bindPasswordValidator = bindPasswordValidator;
  }


  public PasswordPolicyShared minimumBindPasswordValidationFrequency(String minimumBindPasswordValidationFrequency) {
    
    
    
    
    this.minimumBindPasswordValidationFrequency = minimumBindPasswordValidationFrequency;
    return this;
  }

   /**
   * Indicates how frequently password validation should be performed during bind operations for each user to whom this password policy is assigned.
   * @return minimumBindPasswordValidationFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates how frequently password validation should be performed during bind operations for each user to whom this password policy is assigned.")

  public String getMinimumBindPasswordValidationFrequency() {
    return minimumBindPasswordValidationFrequency;
  }


  public void setMinimumBindPasswordValidationFrequency(String minimumBindPasswordValidationFrequency) {
    
    
    
    this.minimumBindPasswordValidationFrequency = minimumBindPasswordValidationFrequency;
  }


  public PasswordPolicyShared bindPasswordValidationFailureAction(EnumpasswordPolicyBindPasswordValidationFailureActionProp bindPasswordValidationFailureAction) {
    
    
    
    
    this.bindPasswordValidationFailureAction = bindPasswordValidationFailureAction;
    return this;
  }

   /**
   * Get bindPasswordValidationFailureAction
   * @return bindPasswordValidationFailureAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpasswordPolicyBindPasswordValidationFailureActionProp getBindPasswordValidationFailureAction() {
    return bindPasswordValidationFailureAction;
  }


  public void setBindPasswordValidationFailureAction(EnumpasswordPolicyBindPasswordValidationFailureActionProp bindPasswordValidationFailureAction) {
    
    
    
    this.bindPasswordValidationFailureAction = bindPasswordValidationFailureAction;
  }


  public PasswordPolicyShared passwordGenerator(String passwordGenerator) {
    
    
    
    
    this.passwordGenerator = passwordGenerator;
    return this;
  }

   /**
   * Specifies the name of the password generator that is used with the associated password policy.
   * @return passwordGenerator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the password generator that is used with the associated password policy.")

  public String getPasswordGenerator() {
    return passwordGenerator;
  }


  public void setPasswordGenerator(String passwordGenerator) {
    
    
    
    this.passwordGenerator = passwordGenerator;
  }


  public PasswordPolicyShared passwordHistoryCount(Integer passwordHistoryCount) {
    
    
    
    
    this.passwordHistoryCount = passwordHistoryCount;
    return this;
  }

   /**
   * Specifies the maximum number of former passwords to maintain in the password history.
   * @return passwordHistoryCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of former passwords to maintain in the password history.")

  public Integer getPasswordHistoryCount() {
    return passwordHistoryCount;
  }


  public void setPasswordHistoryCount(Integer passwordHistoryCount) {
    
    
    
    this.passwordHistoryCount = passwordHistoryCount;
  }


  public PasswordPolicyShared passwordHistoryDuration(String passwordHistoryDuration) {
    
    
    
    
    this.passwordHistoryDuration = passwordHistoryDuration;
    return this;
  }

   /**
   * Specifies the maximum length of time that passwords remain in the password history.
   * @return passwordHistoryDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that passwords remain in the password history.")

  public String getPasswordHistoryDuration() {
    return passwordHistoryDuration;
  }


  public void setPasswordHistoryDuration(String passwordHistoryDuration) {
    
    
    
    this.passwordHistoryDuration = passwordHistoryDuration;
  }


  public PasswordPolicyShared minPasswordAge(String minPasswordAge) {
    
    
    
    
    this.minPasswordAge = minPasswordAge;
    return this;
  }

   /**
   * Specifies the minimum length of time after a password change before the user is allowed to change the password again.
   * @return minPasswordAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the minimum length of time after a password change before the user is allowed to change the password again.")

  public String getMinPasswordAge() {
    return minPasswordAge;
  }


  public void setMinPasswordAge(String minPasswordAge) {
    
    
    
    this.minPasswordAge = minPasswordAge;
  }


  public PasswordPolicyShared maxPasswordAge(String maxPasswordAge) {
    
    
    
    
    this.maxPasswordAge = maxPasswordAge;
    return this;
  }

   /**
   * Specifies the maximum length of time that a user can continue using the same password before it must be changed (that is, the password expiration interval).
   * @return maxPasswordAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that a user can continue using the same password before it must be changed (that is, the password expiration interval).")

  public String getMaxPasswordAge() {
    return maxPasswordAge;
  }


  public void setMaxPasswordAge(String maxPasswordAge) {
    
    
    
    this.maxPasswordAge = maxPasswordAge;
  }


  public PasswordPolicyShared passwordExpirationWarningInterval(String passwordExpirationWarningInterval) {
    
    
    
    
    this.passwordExpirationWarningInterval = passwordExpirationWarningInterval;
    return this;
  }

   /**
   * Specifies the maximum length of time before a user&#39;s password actually expires that the server begins to include warning notifications in bind responses for that user.
   * @return passwordExpirationWarningInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time before a user's password actually expires that the server begins to include warning notifications in bind responses for that user.")

  public String getPasswordExpirationWarningInterval() {
    return passwordExpirationWarningInterval;
  }


  public void setPasswordExpirationWarningInterval(String passwordExpirationWarningInterval) {
    
    
    
    this.passwordExpirationWarningInterval = passwordExpirationWarningInterval;
  }


  public PasswordPolicyShared expirePasswordsWithoutWarning(Boolean expirePasswordsWithoutWarning) {
    
    
    
    
    this.expirePasswordsWithoutWarning = expirePasswordsWithoutWarning;
    return this;
  }

   /**
   * Indicates whether the Directory Server allows a user&#39;s password to expire even if that user has never seen an expiration warning notification.
   * @return expirePasswordsWithoutWarning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the Directory Server allows a user's password to expire even if that user has never seen an expiration warning notification.")

  public Boolean getExpirePasswordsWithoutWarning() {
    return expirePasswordsWithoutWarning;
  }


  public void setExpirePasswordsWithoutWarning(Boolean expirePasswordsWithoutWarning) {
    
    
    
    this.expirePasswordsWithoutWarning = expirePasswordsWithoutWarning;
  }


  public PasswordPolicyShared returnPasswordExpirationControls(EnumpasswordPolicyReturnPasswordExpirationControlsProp returnPasswordExpirationControls) {
    
    
    
    
    this.returnPasswordExpirationControls = returnPasswordExpirationControls;
    return this;
  }

   /**
   * Get returnPasswordExpirationControls
   * @return returnPasswordExpirationControls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpasswordPolicyReturnPasswordExpirationControlsProp getReturnPasswordExpirationControls() {
    return returnPasswordExpirationControls;
  }


  public void setReturnPasswordExpirationControls(EnumpasswordPolicyReturnPasswordExpirationControlsProp returnPasswordExpirationControls) {
    
    
    
    this.returnPasswordExpirationControls = returnPasswordExpirationControls;
  }


  public PasswordPolicyShared allowExpiredPasswordChanges(Boolean allowExpiredPasswordChanges) {
    
    
    
    
    this.allowExpiredPasswordChanges = allowExpiredPasswordChanges;
    return this;
  }

   /**
   * Indicates whether a user whose password is expired is still allowed to change that password using the password modify extended operation.
   * @return allowExpiredPasswordChanges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether a user whose password is expired is still allowed to change that password using the password modify extended operation.")

  public Boolean getAllowExpiredPasswordChanges() {
    return allowExpiredPasswordChanges;
  }


  public void setAllowExpiredPasswordChanges(Boolean allowExpiredPasswordChanges) {
    
    
    
    this.allowExpiredPasswordChanges = allowExpiredPasswordChanges;
  }


  public PasswordPolicyShared graceLoginCount(Integer graceLoginCount) {
    
    
    
    
    this.graceLoginCount = graceLoginCount;
    return this;
  }

   /**
   * Specifies the number of grace logins that a user is allowed after the account has expired to allow that user to choose a new password.
   * @return graceLoginCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of grace logins that a user is allowed after the account has expired to allow that user to choose a new password.")

  public Integer getGraceLoginCount() {
    return graceLoginCount;
  }


  public void setGraceLoginCount(Integer graceLoginCount) {
    
    
    
    this.graceLoginCount = graceLoginCount;
  }


  public PasswordPolicyShared requireChangeByTime(String requireChangeByTime) {
    
    
    
    
    this.requireChangeByTime = requireChangeByTime;
    return this;
  }

   /**
   * Specifies the time by which all users with the associated password policy must change their passwords.
   * @return requireChangeByTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the time by which all users with the associated password policy must change their passwords.")

  public String getRequireChangeByTime() {
    return requireChangeByTime;
  }


  public void setRequireChangeByTime(String requireChangeByTime) {
    
    
    
    this.requireChangeByTime = requireChangeByTime;
  }


  public PasswordPolicyShared lockoutFailureCount(Integer lockoutFailureCount) {
    
    
    
    
    this.lockoutFailureCount = lockoutFailureCount;
    return this;
  }

   /**
   * Specifies the maximum number of authentication failures that a user is allowed before the account is locked out.
   * @return lockoutFailureCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of authentication failures that a user is allowed before the account is locked out.")

  public Integer getLockoutFailureCount() {
    return lockoutFailureCount;
  }


  public void setLockoutFailureCount(Integer lockoutFailureCount) {
    
    
    
    this.lockoutFailureCount = lockoutFailureCount;
  }


  public PasswordPolicyShared lockoutDuration(String lockoutDuration) {
    
    
    
    
    this.lockoutDuration = lockoutDuration;
    return this;
  }

   /**
   * Specifies the length of time that an account is locked after too many authentication failures.
   * @return lockoutDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the length of time that an account is locked after too many authentication failures.")

  public String getLockoutDuration() {
    return lockoutDuration;
  }


  public void setLockoutDuration(String lockoutDuration) {
    
    
    
    this.lockoutDuration = lockoutDuration;
  }


  public PasswordPolicyShared lockoutFailureExpirationInterval(String lockoutFailureExpirationInterval) {
    
    
    
    
    this.lockoutFailureExpirationInterval = lockoutFailureExpirationInterval;
    return this;
  }

   /**
   * Specifies the length of time before an authentication failure is no longer counted against a user for the purposes of account lockout.
   * @return lockoutFailureExpirationInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the length of time before an authentication failure is no longer counted against a user for the purposes of account lockout.")

  public String getLockoutFailureExpirationInterval() {
    return lockoutFailureExpirationInterval;
  }


  public void setLockoutFailureExpirationInterval(String lockoutFailureExpirationInterval) {
    
    
    
    this.lockoutFailureExpirationInterval = lockoutFailureExpirationInterval;
  }


  public PasswordPolicyShared ignoreDuplicatePasswordFailures(Boolean ignoreDuplicatePasswordFailures) {
    
    
    
    
    this.ignoreDuplicatePasswordFailures = ignoreDuplicatePasswordFailures;
    return this;
  }

   /**
   * Indicates whether to ignore subsequent authentication failures using the same password as an earlier failed authentication attempt (within the time frame defined by the lockout failure expiration interval). If this option is \&quot;true\&quot;, then multiple failed attempts using the same password will be considered only a single failure. If this option is \&quot;false\&quot;, then any failure will be tracked regardless of whether it used the same password as an earlier attempt.
   * @return ignoreDuplicatePasswordFailures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to ignore subsequent authentication failures using the same password as an earlier failed authentication attempt (within the time frame defined by the lockout failure expiration interval). If this option is \"true\", then multiple failed attempts using the same password will be considered only a single failure. If this option is \"false\", then any failure will be tracked regardless of whether it used the same password as an earlier attempt.")

  public Boolean getIgnoreDuplicatePasswordFailures() {
    return ignoreDuplicatePasswordFailures;
  }


  public void setIgnoreDuplicatePasswordFailures(Boolean ignoreDuplicatePasswordFailures) {
    
    
    
    this.ignoreDuplicatePasswordFailures = ignoreDuplicatePasswordFailures;
  }


  public PasswordPolicyShared failureLockoutAction(String failureLockoutAction) {
    
    
    
    
    this.failureLockoutAction = failureLockoutAction;
    return this;
  }

   /**
   * The action that the server should take for authentication attempts that target a user with more than the configured number of outstanding authentication failures.
   * @return failureLockoutAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The action that the server should take for authentication attempts that target a user with more than the configured number of outstanding authentication failures.")

  public String getFailureLockoutAction() {
    return failureLockoutAction;
  }


  public void setFailureLockoutAction(String failureLockoutAction) {
    
    
    
    this.failureLockoutAction = failureLockoutAction;
  }


  public PasswordPolicyShared idleLockoutInterval(String idleLockoutInterval) {
    
    
    
    
    this.idleLockoutInterval = idleLockoutInterval;
    return this;
  }

   /**
   * Specifies the maximum length of time that an account may remain idle (that is, the associated user does not authenticate to the server) before that user is locked out.
   * @return idleLockoutInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that an account may remain idle (that is, the associated user does not authenticate to the server) before that user is locked out.")

  public String getIdleLockoutInterval() {
    return idleLockoutInterval;
  }


  public void setIdleLockoutInterval(String idleLockoutInterval) {
    
    
    
    this.idleLockoutInterval = idleLockoutInterval;
  }


  public PasswordPolicyShared allowUserPasswordChanges(Boolean allowUserPasswordChanges) {
    
    
    
    
    this.allowUserPasswordChanges = allowUserPasswordChanges;
    return this;
  }

   /**
   * Indicates whether users can change their own passwords.
   * @return allowUserPasswordChanges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether users can change their own passwords.")

  public Boolean getAllowUserPasswordChanges() {
    return allowUserPasswordChanges;
  }


  public void setAllowUserPasswordChanges(Boolean allowUserPasswordChanges) {
    
    
    
    this.allowUserPasswordChanges = allowUserPasswordChanges;
  }


  public PasswordPolicyShared passwordChangeRequiresCurrentPassword(Boolean passwordChangeRequiresCurrentPassword) {
    
    
    
    
    this.passwordChangeRequiresCurrentPassword = passwordChangeRequiresCurrentPassword;
    return this;
  }

   /**
   * Indicates whether user password changes must use the password modify extended operation and must include the user&#39;s current password before the change is allowed.
   * @return passwordChangeRequiresCurrentPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether user password changes must use the password modify extended operation and must include the user's current password before the change is allowed.")

  public Boolean getPasswordChangeRequiresCurrentPassword() {
    return passwordChangeRequiresCurrentPassword;
  }


  public void setPasswordChangeRequiresCurrentPassword(Boolean passwordChangeRequiresCurrentPassword) {
    
    
    
    this.passwordChangeRequiresCurrentPassword = passwordChangeRequiresCurrentPassword;
  }


  public PasswordPolicyShared passwordRetirementBehavior(List<EnumpasswordPolicyPasswordRetirementBehaviorProp> passwordRetirementBehavior) {
    
    
    
    
    this.passwordRetirementBehavior = passwordRetirementBehavior;
    return this;
  }

  public PasswordPolicyShared addPasswordRetirementBehaviorItem(EnumpasswordPolicyPasswordRetirementBehaviorProp passwordRetirementBehaviorItem) {
    if (this.passwordRetirementBehavior == null) {
      this.passwordRetirementBehavior = new ArrayList<>();
    }
    this.passwordRetirementBehavior.add(passwordRetirementBehaviorItem);
    return this;
  }

   /**
   * Get passwordRetirementBehavior
   * @return passwordRetirementBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpasswordPolicyPasswordRetirementBehaviorProp> getPasswordRetirementBehavior() {
    return passwordRetirementBehavior;
  }


  public void setPasswordRetirementBehavior(List<EnumpasswordPolicyPasswordRetirementBehaviorProp> passwordRetirementBehavior) {
    
    
    
    this.passwordRetirementBehavior = passwordRetirementBehavior;
  }


  public PasswordPolicyShared maxRetiredPasswordAge(String maxRetiredPasswordAge) {
    
    
    
    
    this.maxRetiredPasswordAge = maxRetiredPasswordAge;
    return this;
  }

   /**
   * Specifies the maximum length of time that a retired password should be considered valid and may be used to authenticate to the server.
   * @return maxRetiredPasswordAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that a retired password should be considered valid and may be used to authenticate to the server.")

  public String getMaxRetiredPasswordAge() {
    return maxRetiredPasswordAge;
  }


  public void setMaxRetiredPasswordAge(String maxRetiredPasswordAge) {
    
    
    
    this.maxRetiredPasswordAge = maxRetiredPasswordAge;
  }


  public PasswordPolicyShared allowedPasswordResetTokenUseCondition(List<EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp> allowedPasswordResetTokenUseCondition) {
    
    
    
    
    this.allowedPasswordResetTokenUseCondition = allowedPasswordResetTokenUseCondition;
    return this;
  }

  public PasswordPolicyShared addAllowedPasswordResetTokenUseConditionItem(EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp allowedPasswordResetTokenUseConditionItem) {
    if (this.allowedPasswordResetTokenUseCondition == null) {
      this.allowedPasswordResetTokenUseCondition = new ArrayList<>();
    }
    this.allowedPasswordResetTokenUseCondition.add(allowedPasswordResetTokenUseConditionItem);
    return this;
  }

   /**
   * Get allowedPasswordResetTokenUseCondition
   * @return allowedPasswordResetTokenUseCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp> getAllowedPasswordResetTokenUseCondition() {
    return allowedPasswordResetTokenUseCondition;
  }


  public void setAllowedPasswordResetTokenUseCondition(List<EnumpasswordPolicyAllowedPasswordResetTokenUseConditionProp> allowedPasswordResetTokenUseCondition) {
    
    
    
    this.allowedPasswordResetTokenUseCondition = allowedPasswordResetTokenUseCondition;
  }


  public PasswordPolicyShared forceChangeOnAdd(Boolean forceChangeOnAdd) {
    
    
    
    
    this.forceChangeOnAdd = forceChangeOnAdd;
    return this;
  }

   /**
   * Indicates whether users are forced to change their passwords upon first authenticating to the Directory Server after their account has been created.
   * @return forceChangeOnAdd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether users are forced to change their passwords upon first authenticating to the Directory Server after their account has been created.")

  public Boolean getForceChangeOnAdd() {
    return forceChangeOnAdd;
  }


  public void setForceChangeOnAdd(Boolean forceChangeOnAdd) {
    
    
    
    this.forceChangeOnAdd = forceChangeOnAdd;
  }


  public PasswordPolicyShared forceChangeOnReset(Boolean forceChangeOnReset) {
    
    
    
    
    this.forceChangeOnReset = forceChangeOnReset;
    return this;
  }

   /**
   * Indicates whether users are forced to change their passwords if they are reset by an administrator. If a user&#39;s password is changed by any other user, that is considered an administrative password reset.
   * @return forceChangeOnReset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether users are forced to change their passwords if they are reset by an administrator. If a user's password is changed by any other user, that is considered an administrative password reset.")

  public Boolean getForceChangeOnReset() {
    return forceChangeOnReset;
  }


  public void setForceChangeOnReset(Boolean forceChangeOnReset) {
    
    
    
    this.forceChangeOnReset = forceChangeOnReset;
  }


  public PasswordPolicyShared maxPasswordResetAge(String maxPasswordResetAge) {
    
    
    
    
    this.maxPasswordResetAge = maxPasswordResetAge;
    return this;
  }

   /**
   * Specifies the maximum length of time that users have to change passwords after they have been reset by an administrator before they become locked.
   * @return maxPasswordResetAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time that users have to change passwords after they have been reset by an administrator before they become locked.")

  public String getMaxPasswordResetAge() {
    return maxPasswordResetAge;
  }


  public void setMaxPasswordResetAge(String maxPasswordResetAge) {
    
    
    
    this.maxPasswordResetAge = maxPasswordResetAge;
  }


  public PasswordPolicyShared skipValidationForAdministrators(Boolean skipValidationForAdministrators) {
    
    
    
    
    this.skipValidationForAdministrators = skipValidationForAdministrators;
    return this;
  }

   /**
   * Indicates whether passwords set by administrators are allowed to bypass the password validation process that is required for user password changes.
   * @return skipValidationForAdministrators
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether passwords set by administrators are allowed to bypass the password validation process that is required for user password changes.")

  public Boolean getSkipValidationForAdministrators() {
    return skipValidationForAdministrators;
  }


  public void setSkipValidationForAdministrators(Boolean skipValidationForAdministrators) {
    
    
    
    this.skipValidationForAdministrators = skipValidationForAdministrators;
  }


  public PasswordPolicyShared maximumRecentLoginHistorySuccessfulAuthenticationCount(Integer maximumRecentLoginHistorySuccessfulAuthenticationCount) {
    
    
    
    
    this.maximumRecentLoginHistorySuccessfulAuthenticationCount = maximumRecentLoginHistorySuccessfulAuthenticationCount;
    return this;
  }

   /**
   * The maximum number of successful authentication attempts to include in the recent login history for each account.
   * @return maximumRecentLoginHistorySuccessfulAuthenticationCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of successful authentication attempts to include in the recent login history for each account.")

  public Integer getMaximumRecentLoginHistorySuccessfulAuthenticationCount() {
    return maximumRecentLoginHistorySuccessfulAuthenticationCount;
  }


  public void setMaximumRecentLoginHistorySuccessfulAuthenticationCount(Integer maximumRecentLoginHistorySuccessfulAuthenticationCount) {
    
    
    
    this.maximumRecentLoginHistorySuccessfulAuthenticationCount = maximumRecentLoginHistorySuccessfulAuthenticationCount;
  }


  public PasswordPolicyShared maximumRecentLoginHistorySuccessfulAuthenticationDuration(String maximumRecentLoginHistorySuccessfulAuthenticationDuration) {
    
    
    
    
    this.maximumRecentLoginHistorySuccessfulAuthenticationDuration = maximumRecentLoginHistorySuccessfulAuthenticationDuration;
    return this;
  }

   /**
   * The maximum age of successful authentication attempts to include in the recent login history for each account.
   * @return maximumRecentLoginHistorySuccessfulAuthenticationDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum age of successful authentication attempts to include in the recent login history for each account.")

  public String getMaximumRecentLoginHistorySuccessfulAuthenticationDuration() {
    return maximumRecentLoginHistorySuccessfulAuthenticationDuration;
  }


  public void setMaximumRecentLoginHistorySuccessfulAuthenticationDuration(String maximumRecentLoginHistorySuccessfulAuthenticationDuration) {
    
    
    
    this.maximumRecentLoginHistorySuccessfulAuthenticationDuration = maximumRecentLoginHistorySuccessfulAuthenticationDuration;
  }


  public PasswordPolicyShared maximumRecentLoginHistoryFailedAuthenticationCount(Integer maximumRecentLoginHistoryFailedAuthenticationCount) {
    
    
    
    
    this.maximumRecentLoginHistoryFailedAuthenticationCount = maximumRecentLoginHistoryFailedAuthenticationCount;
    return this;
  }

   /**
   * The maximum number of failed authentication attempts to include in the recent login history for each account.
   * @return maximumRecentLoginHistoryFailedAuthenticationCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum number of failed authentication attempts to include in the recent login history for each account.")

  public Integer getMaximumRecentLoginHistoryFailedAuthenticationCount() {
    return maximumRecentLoginHistoryFailedAuthenticationCount;
  }


  public void setMaximumRecentLoginHistoryFailedAuthenticationCount(Integer maximumRecentLoginHistoryFailedAuthenticationCount) {
    
    
    
    this.maximumRecentLoginHistoryFailedAuthenticationCount = maximumRecentLoginHistoryFailedAuthenticationCount;
  }


  public PasswordPolicyShared maximumRecentLoginHistoryFailedAuthenticationDuration(String maximumRecentLoginHistoryFailedAuthenticationDuration) {
    
    
    
    
    this.maximumRecentLoginHistoryFailedAuthenticationDuration = maximumRecentLoginHistoryFailedAuthenticationDuration;
    return this;
  }

   /**
   * The maximum age of failed authentication attempts to include in the recent login history for each account.
   * @return maximumRecentLoginHistoryFailedAuthenticationDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum age of failed authentication attempts to include in the recent login history for each account.")

  public String getMaximumRecentLoginHistoryFailedAuthenticationDuration() {
    return maximumRecentLoginHistoryFailedAuthenticationDuration;
  }


  public void setMaximumRecentLoginHistoryFailedAuthenticationDuration(String maximumRecentLoginHistoryFailedAuthenticationDuration) {
    
    
    
    this.maximumRecentLoginHistoryFailedAuthenticationDuration = maximumRecentLoginHistoryFailedAuthenticationDuration;
  }


  public PasswordPolicyShared recentLoginHistorySimilarAttemptBehavior(EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp recentLoginHistorySimilarAttemptBehavior) {
    
    
    
    
    this.recentLoginHistorySimilarAttemptBehavior = recentLoginHistorySimilarAttemptBehavior;
    return this;
  }

   /**
   * Get recentLoginHistorySimilarAttemptBehavior
   * @return recentLoginHistorySimilarAttemptBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp getRecentLoginHistorySimilarAttemptBehavior() {
    return recentLoginHistorySimilarAttemptBehavior;
  }


  public void setRecentLoginHistorySimilarAttemptBehavior(EnumpasswordPolicyRecentLoginHistorySimilarAttemptBehaviorProp recentLoginHistorySimilarAttemptBehavior) {
    
    
    
    this.recentLoginHistorySimilarAttemptBehavior = recentLoginHistorySimilarAttemptBehavior;
  }


  public PasswordPolicyShared lastLoginIPAddressAttribute(String lastLoginIPAddressAttribute) {
    
    
    
    
    this.lastLoginIPAddressAttribute = lastLoginIPAddressAttribute;
    return this;
  }

   /**
   * Specifies the name or OID of the attribute type that is used to hold the IP address of the client from which the user last authenticated.
   * @return lastLoginIPAddressAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name or OID of the attribute type that is used to hold the IP address of the client from which the user last authenticated.")

  public String getLastLoginIPAddressAttribute() {
    return lastLoginIPAddressAttribute;
  }


  public void setLastLoginIPAddressAttribute(String lastLoginIPAddressAttribute) {
    
    
    
    this.lastLoginIPAddressAttribute = lastLoginIPAddressAttribute;
  }


  public PasswordPolicyShared lastLoginTimeAttribute(String lastLoginTimeAttribute) {
    
    
    
    
    this.lastLoginTimeAttribute = lastLoginTimeAttribute;
    return this;
  }

   /**
   * Specifies the name or OID of the attribute type that is used to hold the last login time for users with the associated password policy.
   * @return lastLoginTimeAttribute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name or OID of the attribute type that is used to hold the last login time for users with the associated password policy.")

  public String getLastLoginTimeAttribute() {
    return lastLoginTimeAttribute;
  }


  public void setLastLoginTimeAttribute(String lastLoginTimeAttribute) {
    
    
    
    this.lastLoginTimeAttribute = lastLoginTimeAttribute;
  }


  public PasswordPolicyShared lastLoginTimeFormat(String lastLoginTimeFormat) {
    
    
    
    
    this.lastLoginTimeFormat = lastLoginTimeFormat;
    return this;
  }

   /**
   * Specifies the format string that is used to generate the last login time value for users with the associated password policy. Last login time values will be written using the UTC (also known as GMT, or Greenwich Mean Time) time zone.
   * @return lastLoginTimeFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the format string that is used to generate the last login time value for users with the associated password policy. Last login time values will be written using the UTC (also known as GMT, or Greenwich Mean Time) time zone.")

  public String getLastLoginTimeFormat() {
    return lastLoginTimeFormat;
  }


  public void setLastLoginTimeFormat(String lastLoginTimeFormat) {
    
    
    
    this.lastLoginTimeFormat = lastLoginTimeFormat;
  }


  public PasswordPolicyShared previousLastLoginTimeFormat(List<String> previousLastLoginTimeFormat) {
    
    
    
    
    this.previousLastLoginTimeFormat = previousLastLoginTimeFormat;
    return this;
  }

  public PasswordPolicyShared addPreviousLastLoginTimeFormatItem(String previousLastLoginTimeFormatItem) {
    if (this.previousLastLoginTimeFormat == null) {
      this.previousLastLoginTimeFormat = new ArrayList<>();
    }
    this.previousLastLoginTimeFormat.add(previousLastLoginTimeFormatItem);
    return this;
  }

   /**
   * Specifies the format string(s) that might have been used with the last login time at any point in the past for users associated with the password policy.
   * @return previousLastLoginTimeFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the format string(s) that might have been used with the last login time at any point in the past for users associated with the password policy.")

  public List<String> getPreviousLastLoginTimeFormat() {
    return previousLastLoginTimeFormat;
  }


  public void setPreviousLastLoginTimeFormat(List<String> previousLastLoginTimeFormat) {
    
    
    
    this.previousLastLoginTimeFormat = previousLastLoginTimeFormat;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PasswordPolicyShared instance itself
   */
  public PasswordPolicyShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordPolicyShared passwordPolicyShared = (PasswordPolicyShared) o;
    return Objects.equals(this.description, passwordPolicyShared.description) &&
        Objects.equals(this.schemas, passwordPolicyShared.schemas) &&
        Objects.equals(this.requireSecureAuthentication, passwordPolicyShared.requireSecureAuthentication) &&
        Objects.equals(this.requireSecurePasswordChanges, passwordPolicyShared.requireSecurePasswordChanges) &&
        Objects.equals(this.accountStatusNotificationHandler, passwordPolicyShared.accountStatusNotificationHandler) &&
        Objects.equals(this.stateUpdateFailurePolicy, passwordPolicyShared.stateUpdateFailurePolicy) &&
        Objects.equals(this.enableDebug, passwordPolicyShared.enableDebug) &&
        Objects.equals(this.passwordAttribute, passwordPolicyShared.passwordAttribute) &&
        Objects.equals(this.defaultPasswordStorageScheme, passwordPolicyShared.defaultPasswordStorageScheme) &&
        Objects.equals(this.deprecatedPasswordStorageScheme, passwordPolicyShared.deprecatedPasswordStorageScheme) &&
        Objects.equals(this.reEncodePasswordsOnSchemeConfigChange, passwordPolicyShared.reEncodePasswordsOnSchemeConfigChange) &&
        Objects.equals(this.allowMultiplePasswordValues, passwordPolicyShared.allowMultiplePasswordValues) &&
        Objects.equals(this.allowPreEncodedPasswords, passwordPolicyShared.allowPreEncodedPasswords) &&
        Objects.equals(this.passwordValidator, passwordPolicyShared.passwordValidator) &&
        Objects.equals(this.bindPasswordValidator, passwordPolicyShared.bindPasswordValidator) &&
        Objects.equals(this.minimumBindPasswordValidationFrequency, passwordPolicyShared.minimumBindPasswordValidationFrequency) &&
        Objects.equals(this.bindPasswordValidationFailureAction, passwordPolicyShared.bindPasswordValidationFailureAction) &&
        Objects.equals(this.passwordGenerator, passwordPolicyShared.passwordGenerator) &&
        Objects.equals(this.passwordHistoryCount, passwordPolicyShared.passwordHistoryCount) &&
        Objects.equals(this.passwordHistoryDuration, passwordPolicyShared.passwordHistoryDuration) &&
        Objects.equals(this.minPasswordAge, passwordPolicyShared.minPasswordAge) &&
        Objects.equals(this.maxPasswordAge, passwordPolicyShared.maxPasswordAge) &&
        Objects.equals(this.passwordExpirationWarningInterval, passwordPolicyShared.passwordExpirationWarningInterval) &&
        Objects.equals(this.expirePasswordsWithoutWarning, passwordPolicyShared.expirePasswordsWithoutWarning) &&
        Objects.equals(this.returnPasswordExpirationControls, passwordPolicyShared.returnPasswordExpirationControls) &&
        Objects.equals(this.allowExpiredPasswordChanges, passwordPolicyShared.allowExpiredPasswordChanges) &&
        Objects.equals(this.graceLoginCount, passwordPolicyShared.graceLoginCount) &&
        Objects.equals(this.requireChangeByTime, passwordPolicyShared.requireChangeByTime) &&
        Objects.equals(this.lockoutFailureCount, passwordPolicyShared.lockoutFailureCount) &&
        Objects.equals(this.lockoutDuration, passwordPolicyShared.lockoutDuration) &&
        Objects.equals(this.lockoutFailureExpirationInterval, passwordPolicyShared.lockoutFailureExpirationInterval) &&
        Objects.equals(this.ignoreDuplicatePasswordFailures, passwordPolicyShared.ignoreDuplicatePasswordFailures) &&
        Objects.equals(this.failureLockoutAction, passwordPolicyShared.failureLockoutAction) &&
        Objects.equals(this.idleLockoutInterval, passwordPolicyShared.idleLockoutInterval) &&
        Objects.equals(this.allowUserPasswordChanges, passwordPolicyShared.allowUserPasswordChanges) &&
        Objects.equals(this.passwordChangeRequiresCurrentPassword, passwordPolicyShared.passwordChangeRequiresCurrentPassword) &&
        Objects.equals(this.passwordRetirementBehavior, passwordPolicyShared.passwordRetirementBehavior) &&
        Objects.equals(this.maxRetiredPasswordAge, passwordPolicyShared.maxRetiredPasswordAge) &&
        Objects.equals(this.allowedPasswordResetTokenUseCondition, passwordPolicyShared.allowedPasswordResetTokenUseCondition) &&
        Objects.equals(this.forceChangeOnAdd, passwordPolicyShared.forceChangeOnAdd) &&
        Objects.equals(this.forceChangeOnReset, passwordPolicyShared.forceChangeOnReset) &&
        Objects.equals(this.maxPasswordResetAge, passwordPolicyShared.maxPasswordResetAge) &&
        Objects.equals(this.skipValidationForAdministrators, passwordPolicyShared.skipValidationForAdministrators) &&
        Objects.equals(this.maximumRecentLoginHistorySuccessfulAuthenticationCount, passwordPolicyShared.maximumRecentLoginHistorySuccessfulAuthenticationCount) &&
        Objects.equals(this.maximumRecentLoginHistorySuccessfulAuthenticationDuration, passwordPolicyShared.maximumRecentLoginHistorySuccessfulAuthenticationDuration) &&
        Objects.equals(this.maximumRecentLoginHistoryFailedAuthenticationCount, passwordPolicyShared.maximumRecentLoginHistoryFailedAuthenticationCount) &&
        Objects.equals(this.maximumRecentLoginHistoryFailedAuthenticationDuration, passwordPolicyShared.maximumRecentLoginHistoryFailedAuthenticationDuration) &&
        Objects.equals(this.recentLoginHistorySimilarAttemptBehavior, passwordPolicyShared.recentLoginHistorySimilarAttemptBehavior) &&
        Objects.equals(this.lastLoginIPAddressAttribute, passwordPolicyShared.lastLoginIPAddressAttribute) &&
        Objects.equals(this.lastLoginTimeAttribute, passwordPolicyShared.lastLoginTimeAttribute) &&
        Objects.equals(this.lastLoginTimeFormat, passwordPolicyShared.lastLoginTimeFormat) &&
        Objects.equals(this.previousLastLoginTimeFormat, passwordPolicyShared.previousLastLoginTimeFormat)&&
        Objects.equals(this.additionalProperties, passwordPolicyShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, requireSecureAuthentication, requireSecurePasswordChanges, accountStatusNotificationHandler, stateUpdateFailurePolicy, enableDebug, passwordAttribute, defaultPasswordStorageScheme, deprecatedPasswordStorageScheme, reEncodePasswordsOnSchemeConfigChange, allowMultiplePasswordValues, allowPreEncodedPasswords, passwordValidator, bindPasswordValidator, minimumBindPasswordValidationFrequency, bindPasswordValidationFailureAction, passwordGenerator, passwordHistoryCount, passwordHistoryDuration, minPasswordAge, maxPasswordAge, passwordExpirationWarningInterval, expirePasswordsWithoutWarning, returnPasswordExpirationControls, allowExpiredPasswordChanges, graceLoginCount, requireChangeByTime, lockoutFailureCount, lockoutDuration, lockoutFailureExpirationInterval, ignoreDuplicatePasswordFailures, failureLockoutAction, idleLockoutInterval, allowUserPasswordChanges, passwordChangeRequiresCurrentPassword, passwordRetirementBehavior, maxRetiredPasswordAge, allowedPasswordResetTokenUseCondition, forceChangeOnAdd, forceChangeOnReset, maxPasswordResetAge, skipValidationForAdministrators, maximumRecentLoginHistorySuccessfulAuthenticationCount, maximumRecentLoginHistorySuccessfulAuthenticationDuration, maximumRecentLoginHistoryFailedAuthenticationCount, maximumRecentLoginHistoryFailedAuthenticationDuration, recentLoginHistorySimilarAttemptBehavior, lastLoginIPAddressAttribute, lastLoginTimeAttribute, lastLoginTimeFormat, previousLastLoginTimeFormat, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordPolicyShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    requireSecureAuthentication: ").append(toIndentedString(requireSecureAuthentication)).append("\n");
    sb.append("    requireSecurePasswordChanges: ").append(toIndentedString(requireSecurePasswordChanges)).append("\n");
    sb.append("    accountStatusNotificationHandler: ").append(toIndentedString(accountStatusNotificationHandler)).append("\n");
    sb.append("    stateUpdateFailurePolicy: ").append(toIndentedString(stateUpdateFailurePolicy)).append("\n");
    sb.append("    enableDebug: ").append(toIndentedString(enableDebug)).append("\n");
    sb.append("    passwordAttribute: ").append(toIndentedString(passwordAttribute)).append("\n");
    sb.append("    defaultPasswordStorageScheme: ").append(toIndentedString(defaultPasswordStorageScheme)).append("\n");
    sb.append("    deprecatedPasswordStorageScheme: ").append(toIndentedString(deprecatedPasswordStorageScheme)).append("\n");
    sb.append("    reEncodePasswordsOnSchemeConfigChange: ").append(toIndentedString(reEncodePasswordsOnSchemeConfigChange)).append("\n");
    sb.append("    allowMultiplePasswordValues: ").append(toIndentedString(allowMultiplePasswordValues)).append("\n");
    sb.append("    allowPreEncodedPasswords: ").append(toIndentedString(allowPreEncodedPasswords)).append("\n");
    sb.append("    passwordValidator: ").append(toIndentedString(passwordValidator)).append("\n");
    sb.append("    bindPasswordValidator: ").append(toIndentedString(bindPasswordValidator)).append("\n");
    sb.append("    minimumBindPasswordValidationFrequency: ").append(toIndentedString(minimumBindPasswordValidationFrequency)).append("\n");
    sb.append("    bindPasswordValidationFailureAction: ").append(toIndentedString(bindPasswordValidationFailureAction)).append("\n");
    sb.append("    passwordGenerator: ").append(toIndentedString(passwordGenerator)).append("\n");
    sb.append("    passwordHistoryCount: ").append(toIndentedString(passwordHistoryCount)).append("\n");
    sb.append("    passwordHistoryDuration: ").append(toIndentedString(passwordHistoryDuration)).append("\n");
    sb.append("    minPasswordAge: ").append(toIndentedString(minPasswordAge)).append("\n");
    sb.append("    maxPasswordAge: ").append(toIndentedString(maxPasswordAge)).append("\n");
    sb.append("    passwordExpirationWarningInterval: ").append(toIndentedString(passwordExpirationWarningInterval)).append("\n");
    sb.append("    expirePasswordsWithoutWarning: ").append(toIndentedString(expirePasswordsWithoutWarning)).append("\n");
    sb.append("    returnPasswordExpirationControls: ").append(toIndentedString(returnPasswordExpirationControls)).append("\n");
    sb.append("    allowExpiredPasswordChanges: ").append(toIndentedString(allowExpiredPasswordChanges)).append("\n");
    sb.append("    graceLoginCount: ").append(toIndentedString(graceLoginCount)).append("\n");
    sb.append("    requireChangeByTime: ").append(toIndentedString(requireChangeByTime)).append("\n");
    sb.append("    lockoutFailureCount: ").append(toIndentedString(lockoutFailureCount)).append("\n");
    sb.append("    lockoutDuration: ").append(toIndentedString(lockoutDuration)).append("\n");
    sb.append("    lockoutFailureExpirationInterval: ").append(toIndentedString(lockoutFailureExpirationInterval)).append("\n");
    sb.append("    ignoreDuplicatePasswordFailures: ").append(toIndentedString(ignoreDuplicatePasswordFailures)).append("\n");
    sb.append("    failureLockoutAction: ").append(toIndentedString(failureLockoutAction)).append("\n");
    sb.append("    idleLockoutInterval: ").append(toIndentedString(idleLockoutInterval)).append("\n");
    sb.append("    allowUserPasswordChanges: ").append(toIndentedString(allowUserPasswordChanges)).append("\n");
    sb.append("    passwordChangeRequiresCurrentPassword: ").append(toIndentedString(passwordChangeRequiresCurrentPassword)).append("\n");
    sb.append("    passwordRetirementBehavior: ").append(toIndentedString(passwordRetirementBehavior)).append("\n");
    sb.append("    maxRetiredPasswordAge: ").append(toIndentedString(maxRetiredPasswordAge)).append("\n");
    sb.append("    allowedPasswordResetTokenUseCondition: ").append(toIndentedString(allowedPasswordResetTokenUseCondition)).append("\n");
    sb.append("    forceChangeOnAdd: ").append(toIndentedString(forceChangeOnAdd)).append("\n");
    sb.append("    forceChangeOnReset: ").append(toIndentedString(forceChangeOnReset)).append("\n");
    sb.append("    maxPasswordResetAge: ").append(toIndentedString(maxPasswordResetAge)).append("\n");
    sb.append("    skipValidationForAdministrators: ").append(toIndentedString(skipValidationForAdministrators)).append("\n");
    sb.append("    maximumRecentLoginHistorySuccessfulAuthenticationCount: ").append(toIndentedString(maximumRecentLoginHistorySuccessfulAuthenticationCount)).append("\n");
    sb.append("    maximumRecentLoginHistorySuccessfulAuthenticationDuration: ").append(toIndentedString(maximumRecentLoginHistorySuccessfulAuthenticationDuration)).append("\n");
    sb.append("    maximumRecentLoginHistoryFailedAuthenticationCount: ").append(toIndentedString(maximumRecentLoginHistoryFailedAuthenticationCount)).append("\n");
    sb.append("    maximumRecentLoginHistoryFailedAuthenticationDuration: ").append(toIndentedString(maximumRecentLoginHistoryFailedAuthenticationDuration)).append("\n");
    sb.append("    recentLoginHistorySimilarAttemptBehavior: ").append(toIndentedString(recentLoginHistorySimilarAttemptBehavior)).append("\n");
    sb.append("    lastLoginIPAddressAttribute: ").append(toIndentedString(lastLoginIPAddressAttribute)).append("\n");
    sb.append("    lastLoginTimeAttribute: ").append(toIndentedString(lastLoginTimeAttribute)).append("\n");
    sb.append("    lastLoginTimeFormat: ").append(toIndentedString(lastLoginTimeFormat)).append("\n");
    sb.append("    previousLastLoginTimeFormat: ").append(toIndentedString(previousLastLoginTimeFormat)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("requireSecureAuthentication");
    openapiFields.add("requireSecurePasswordChanges");
    openapiFields.add("accountStatusNotificationHandler");
    openapiFields.add("stateUpdateFailurePolicy");
    openapiFields.add("enableDebug");
    openapiFields.add("passwordAttribute");
    openapiFields.add("defaultPasswordStorageScheme");
    openapiFields.add("deprecatedPasswordStorageScheme");
    openapiFields.add("reEncodePasswordsOnSchemeConfigChange");
    openapiFields.add("allowMultiplePasswordValues");
    openapiFields.add("allowPreEncodedPasswords");
    openapiFields.add("passwordValidator");
    openapiFields.add("bindPasswordValidator");
    openapiFields.add("minimumBindPasswordValidationFrequency");
    openapiFields.add("bindPasswordValidationFailureAction");
    openapiFields.add("passwordGenerator");
    openapiFields.add("passwordHistoryCount");
    openapiFields.add("passwordHistoryDuration");
    openapiFields.add("minPasswordAge");
    openapiFields.add("maxPasswordAge");
    openapiFields.add("passwordExpirationWarningInterval");
    openapiFields.add("expirePasswordsWithoutWarning");
    openapiFields.add("returnPasswordExpirationControls");
    openapiFields.add("allowExpiredPasswordChanges");
    openapiFields.add("graceLoginCount");
    openapiFields.add("requireChangeByTime");
    openapiFields.add("lockoutFailureCount");
    openapiFields.add("lockoutDuration");
    openapiFields.add("lockoutFailureExpirationInterval");
    openapiFields.add("ignoreDuplicatePasswordFailures");
    openapiFields.add("failureLockoutAction");
    openapiFields.add("idleLockoutInterval");
    openapiFields.add("allowUserPasswordChanges");
    openapiFields.add("passwordChangeRequiresCurrentPassword");
    openapiFields.add("passwordRetirementBehavior");
    openapiFields.add("maxRetiredPasswordAge");
    openapiFields.add("allowedPasswordResetTokenUseCondition");
    openapiFields.add("forceChangeOnAdd");
    openapiFields.add("forceChangeOnReset");
    openapiFields.add("maxPasswordResetAge");
    openapiFields.add("skipValidationForAdministrators");
    openapiFields.add("maximumRecentLoginHistorySuccessfulAuthenticationCount");
    openapiFields.add("maximumRecentLoginHistorySuccessfulAuthenticationDuration");
    openapiFields.add("maximumRecentLoginHistoryFailedAuthenticationCount");
    openapiFields.add("maximumRecentLoginHistoryFailedAuthenticationDuration");
    openapiFields.add("recentLoginHistorySimilarAttemptBehavior");
    openapiFields.add("lastLoginIPAddressAttribute");
    openapiFields.add("lastLoginTimeAttribute");
    openapiFields.add("lastLoginTimeFormat");
    openapiFields.add("previousLastLoginTimeFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("passwordAttribute");
    openapiRequiredFields.add("defaultPasswordStorageScheme");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PasswordPolicyShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PasswordPolicyShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordPolicyShared is not found in the empty JSON string", PasswordPolicyShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PasswordPolicyShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accountStatusNotificationHandler") != null && !jsonObj.get("accountStatusNotificationHandler").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountStatusNotificationHandler` to be an array in the JSON string but got `%s`", jsonObj.get("accountStatusNotificationHandler").toString()));
      }
      if (!jsonObj.get("passwordAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordAttribute").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("defaultPasswordStorageScheme") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("defaultPasswordStorageScheme").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultPasswordStorageScheme` to be an array in the JSON string but got `%s`", jsonObj.get("defaultPasswordStorageScheme").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deprecatedPasswordStorageScheme") != null && !jsonObj.get("deprecatedPasswordStorageScheme").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deprecatedPasswordStorageScheme` to be an array in the JSON string but got `%s`", jsonObj.get("deprecatedPasswordStorageScheme").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("passwordValidator") != null && !jsonObj.get("passwordValidator").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordValidator` to be an array in the JSON string but got `%s`", jsonObj.get("passwordValidator").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bindPasswordValidator") != null && !jsonObj.get("bindPasswordValidator").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bindPasswordValidator` to be an array in the JSON string but got `%s`", jsonObj.get("bindPasswordValidator").toString()));
      }
      if ((jsonObj.get("minimumBindPasswordValidationFrequency") != null && !jsonObj.get("minimumBindPasswordValidationFrequency").isJsonNull()) && !jsonObj.get("minimumBindPasswordValidationFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimumBindPasswordValidationFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimumBindPasswordValidationFrequency").toString()));
      }
      if ((jsonObj.get("passwordGenerator") != null && !jsonObj.get("passwordGenerator").isJsonNull()) && !jsonObj.get("passwordGenerator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordGenerator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordGenerator").toString()));
      }
      if ((jsonObj.get("passwordHistoryDuration") != null && !jsonObj.get("passwordHistoryDuration").isJsonNull()) && !jsonObj.get("passwordHistoryDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordHistoryDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordHistoryDuration").toString()));
      }
      if ((jsonObj.get("minPasswordAge") != null && !jsonObj.get("minPasswordAge").isJsonNull()) && !jsonObj.get("minPasswordAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minPasswordAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minPasswordAge").toString()));
      }
      if ((jsonObj.get("maxPasswordAge") != null && !jsonObj.get("maxPasswordAge").isJsonNull()) && !jsonObj.get("maxPasswordAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxPasswordAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxPasswordAge").toString()));
      }
      if ((jsonObj.get("passwordExpirationWarningInterval") != null && !jsonObj.get("passwordExpirationWarningInterval").isJsonNull()) && !jsonObj.get("passwordExpirationWarningInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordExpirationWarningInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordExpirationWarningInterval").toString()));
      }
      if ((jsonObj.get("requireChangeByTime") != null && !jsonObj.get("requireChangeByTime").isJsonNull()) && !jsonObj.get("requireChangeByTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requireChangeByTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requireChangeByTime").toString()));
      }
      if ((jsonObj.get("lockoutDuration") != null && !jsonObj.get("lockoutDuration").isJsonNull()) && !jsonObj.get("lockoutDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockoutDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockoutDuration").toString()));
      }
      if ((jsonObj.get("lockoutFailureExpirationInterval") != null && !jsonObj.get("lockoutFailureExpirationInterval").isJsonNull()) && !jsonObj.get("lockoutFailureExpirationInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lockoutFailureExpirationInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lockoutFailureExpirationInterval").toString()));
      }
      if ((jsonObj.get("failureLockoutAction") != null && !jsonObj.get("failureLockoutAction").isJsonNull()) && !jsonObj.get("failureLockoutAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureLockoutAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureLockoutAction").toString()));
      }
      if ((jsonObj.get("idleLockoutInterval") != null && !jsonObj.get("idleLockoutInterval").isJsonNull()) && !jsonObj.get("idleLockoutInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idleLockoutInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idleLockoutInterval").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("passwordRetirementBehavior") != null && !jsonObj.get("passwordRetirementBehavior").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordRetirementBehavior` to be an array in the JSON string but got `%s`", jsonObj.get("passwordRetirementBehavior").toString()));
      }
      if ((jsonObj.get("maxRetiredPasswordAge") != null && !jsonObj.get("maxRetiredPasswordAge").isJsonNull()) && !jsonObj.get("maxRetiredPasswordAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxRetiredPasswordAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxRetiredPasswordAge").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedPasswordResetTokenUseCondition") != null && !jsonObj.get("allowedPasswordResetTokenUseCondition").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedPasswordResetTokenUseCondition` to be an array in the JSON string but got `%s`", jsonObj.get("allowedPasswordResetTokenUseCondition").toString()));
      }
      if ((jsonObj.get("maxPasswordResetAge") != null && !jsonObj.get("maxPasswordResetAge").isJsonNull()) && !jsonObj.get("maxPasswordResetAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxPasswordResetAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxPasswordResetAge").toString()));
      }
      if ((jsonObj.get("maximumRecentLoginHistorySuccessfulAuthenticationDuration") != null && !jsonObj.get("maximumRecentLoginHistorySuccessfulAuthenticationDuration").isJsonNull()) && !jsonObj.get("maximumRecentLoginHistorySuccessfulAuthenticationDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumRecentLoginHistorySuccessfulAuthenticationDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumRecentLoginHistorySuccessfulAuthenticationDuration").toString()));
      }
      if ((jsonObj.get("maximumRecentLoginHistoryFailedAuthenticationDuration") != null && !jsonObj.get("maximumRecentLoginHistoryFailedAuthenticationDuration").isJsonNull()) && !jsonObj.get("maximumRecentLoginHistoryFailedAuthenticationDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumRecentLoginHistoryFailedAuthenticationDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumRecentLoginHistoryFailedAuthenticationDuration").toString()));
      }
      if ((jsonObj.get("lastLoginIPAddressAttribute") != null && !jsonObj.get("lastLoginIPAddressAttribute").isJsonNull()) && !jsonObj.get("lastLoginIPAddressAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLoginIPAddressAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLoginIPAddressAttribute").toString()));
      }
      if ((jsonObj.get("lastLoginTimeAttribute") != null && !jsonObj.get("lastLoginTimeAttribute").isJsonNull()) && !jsonObj.get("lastLoginTimeAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLoginTimeAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLoginTimeAttribute").toString()));
      }
      if ((jsonObj.get("lastLoginTimeFormat") != null && !jsonObj.get("lastLoginTimeFormat").isJsonNull()) && !jsonObj.get("lastLoginTimeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLoginTimeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLoginTimeFormat").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("previousLastLoginTimeFormat") != null && !jsonObj.get("previousLastLoginTimeFormat").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousLastLoginTimeFormat` to be an array in the JSON string but got `%s`", jsonObj.get("previousLastLoginTimeFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordPolicyShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordPolicyShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordPolicyShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordPolicyShared.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordPolicyShared>() {
           @Override
           public void write(JsonWriter out, PasswordPolicyShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordPolicyShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PasswordPolicyShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PasswordPolicyShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PasswordPolicyShared
  * @throws IOException if the JSON string is invalid with respect to PasswordPolicyShared
  */
  public static PasswordPolicyShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordPolicyShared.class);
  }

 /**
  * Convert an instance of PasswordPolicyShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

