/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumdebugTargetDebugCategoryProp;
import com.konfigthis.client.model.EnumdebugTargetDebugLevelProp;
import com.konfigthis.client.model.EnumdebugTargetSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DebugTargetShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DebugTargetShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumdebugTargetSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_DEBUG_SCOPE = "debugScope";
  @SerializedName(SERIALIZED_NAME_DEBUG_SCOPE)
  private String debugScope;

  public static final String SERIALIZED_NAME_DEBUG_LEVEL = "debugLevel";
  @SerializedName(SERIALIZED_NAME_DEBUG_LEVEL)
  private EnumdebugTargetDebugLevelProp debugLevel;

  public static final String SERIALIZED_NAME_DEBUG_CATEGORY = "debugCategory";
  @SerializedName(SERIALIZED_NAME_DEBUG_CATEGORY)
  private List<EnumdebugTargetDebugCategoryProp> debugCategory = null;

  public static final String SERIALIZED_NAME_OMIT_METHOD_ENTRY_ARGUMENTS = "omitMethodEntryArguments";
  @SerializedName(SERIALIZED_NAME_OMIT_METHOD_ENTRY_ARGUMENTS)
  private Boolean omitMethodEntryArguments;

  public static final String SERIALIZED_NAME_OMIT_METHOD_RETURN_VALUE = "omitMethodReturnValue";
  @SerializedName(SERIALIZED_NAME_OMIT_METHOD_RETURN_VALUE)
  private Boolean omitMethodReturnValue;

  public static final String SERIALIZED_NAME_INCLUDE_THROWABLE_CAUSE = "includeThrowableCause";
  @SerializedName(SERIALIZED_NAME_INCLUDE_THROWABLE_CAUSE)
  private Boolean includeThrowableCause;

  public static final String SERIALIZED_NAME_THROWABLE_STACK_FRAMES = "throwableStackFrames";
  @SerializedName(SERIALIZED_NAME_THROWABLE_STACK_FRAMES)
  private Integer throwableStackFrames;

  public DebugTargetShared() {
  }

  public DebugTargetShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Debug Target
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Debug Target")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public DebugTargetShared schemas(List<EnumdebugTargetSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public DebugTargetShared addSchemasItem(EnumdebugTargetSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumdebugTargetSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumdebugTargetSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public DebugTargetShared debugScope(String debugScope) {
    
    
    
    
    this.debugScope = debugScope;
    return this;
  }

   /**
   * Specifies the fully-qualified Java package, class, or method affected by the settings in this target definition. Use the number character (#) to separate the class name and the method name (that is, com.unboundid.directory.server.core.DirectoryServer#startUp).
   * @return debugScope
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the fully-qualified Java package, class, or method affected by the settings in this target definition. Use the number character (#) to separate the class name and the method name (that is, com.unboundid.directory.server.core.DirectoryServer#startUp).")

  public String getDebugScope() {
    return debugScope;
  }


  public void setDebugScope(String debugScope) {
    
    
    
    this.debugScope = debugScope;
  }


  public DebugTargetShared debugLevel(EnumdebugTargetDebugLevelProp debugLevel) {
    
    
    
    
    this.debugLevel = debugLevel;
    return this;
  }

   /**
   * Get debugLevel
   * @return debugLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumdebugTargetDebugLevelProp getDebugLevel() {
    return debugLevel;
  }


  public void setDebugLevel(EnumdebugTargetDebugLevelProp debugLevel) {
    
    
    
    this.debugLevel = debugLevel;
  }


  public DebugTargetShared debugCategory(List<EnumdebugTargetDebugCategoryProp> debugCategory) {
    
    
    
    
    this.debugCategory = debugCategory;
    return this;
  }

  public DebugTargetShared addDebugCategoryItem(EnumdebugTargetDebugCategoryProp debugCategoryItem) {
    if (this.debugCategory == null) {
      this.debugCategory = new ArrayList<>();
    }
    this.debugCategory.add(debugCategoryItem);
    return this;
  }

   /**
   * Get debugCategory
   * @return debugCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumdebugTargetDebugCategoryProp> getDebugCategory() {
    return debugCategory;
  }


  public void setDebugCategory(List<EnumdebugTargetDebugCategoryProp> debugCategory) {
    
    
    
    this.debugCategory = debugCategory;
  }


  public DebugTargetShared omitMethodEntryArguments(Boolean omitMethodEntryArguments) {
    
    
    
    
    this.omitMethodEntryArguments = omitMethodEntryArguments;
    return this;
  }

   /**
   * Specifies the property to indicate whether to include method arguments in debug messages.
   * @return omitMethodEntryArguments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the property to indicate whether to include method arguments in debug messages.")

  public Boolean getOmitMethodEntryArguments() {
    return omitMethodEntryArguments;
  }


  public void setOmitMethodEntryArguments(Boolean omitMethodEntryArguments) {
    
    
    
    this.omitMethodEntryArguments = omitMethodEntryArguments;
  }


  public DebugTargetShared omitMethodReturnValue(Boolean omitMethodReturnValue) {
    
    
    
    
    this.omitMethodReturnValue = omitMethodReturnValue;
    return this;
  }

   /**
   * Specifies the property to indicate whether to include the return value in debug messages.
   * @return omitMethodReturnValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the property to indicate whether to include the return value in debug messages.")

  public Boolean getOmitMethodReturnValue() {
    return omitMethodReturnValue;
  }


  public void setOmitMethodReturnValue(Boolean omitMethodReturnValue) {
    
    
    
    this.omitMethodReturnValue = omitMethodReturnValue;
  }


  public DebugTargetShared includeThrowableCause(Boolean includeThrowableCause) {
    
    
    
    
    this.includeThrowableCause = includeThrowableCause;
    return this;
  }

   /**
   * Specifies the property to indicate whether to include the cause of exceptions in exception thrown and caught messages.
   * @return includeThrowableCause
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the property to indicate whether to include the cause of exceptions in exception thrown and caught messages.")

  public Boolean getIncludeThrowableCause() {
    return includeThrowableCause;
  }


  public void setIncludeThrowableCause(Boolean includeThrowableCause) {
    
    
    
    this.includeThrowableCause = includeThrowableCause;
  }


  public DebugTargetShared throwableStackFrames(Integer throwableStackFrames) {
    
    
    
    
    this.throwableStackFrames = throwableStackFrames;
    return this;
  }

   /**
   * Specifies the property to indicate the number of stack frames to include in the stack trace for method entry and exception thrown messages.
   * @return throwableStackFrames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the property to indicate the number of stack frames to include in the stack trace for method entry and exception thrown messages.")

  public Integer getThrowableStackFrames() {
    return throwableStackFrames;
  }


  public void setThrowableStackFrames(Integer throwableStackFrames) {
    
    
    
    this.throwableStackFrames = throwableStackFrames;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DebugTargetShared instance itself
   */
  public DebugTargetShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DebugTargetShared debugTargetShared = (DebugTargetShared) o;
    return Objects.equals(this.description, debugTargetShared.description) &&
        Objects.equals(this.schemas, debugTargetShared.schemas) &&
        Objects.equals(this.debugScope, debugTargetShared.debugScope) &&
        Objects.equals(this.debugLevel, debugTargetShared.debugLevel) &&
        Objects.equals(this.debugCategory, debugTargetShared.debugCategory) &&
        Objects.equals(this.omitMethodEntryArguments, debugTargetShared.omitMethodEntryArguments) &&
        Objects.equals(this.omitMethodReturnValue, debugTargetShared.omitMethodReturnValue) &&
        Objects.equals(this.includeThrowableCause, debugTargetShared.includeThrowableCause) &&
        Objects.equals(this.throwableStackFrames, debugTargetShared.throwableStackFrames)&&
        Objects.equals(this.additionalProperties, debugTargetShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, debugScope, debugLevel, debugCategory, omitMethodEntryArguments, omitMethodReturnValue, includeThrowableCause, throwableStackFrames, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DebugTargetShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    debugScope: ").append(toIndentedString(debugScope)).append("\n");
    sb.append("    debugLevel: ").append(toIndentedString(debugLevel)).append("\n");
    sb.append("    debugCategory: ").append(toIndentedString(debugCategory)).append("\n");
    sb.append("    omitMethodEntryArguments: ").append(toIndentedString(omitMethodEntryArguments)).append("\n");
    sb.append("    omitMethodReturnValue: ").append(toIndentedString(omitMethodReturnValue)).append("\n");
    sb.append("    includeThrowableCause: ").append(toIndentedString(includeThrowableCause)).append("\n");
    sb.append("    throwableStackFrames: ").append(toIndentedString(throwableStackFrames)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("debugScope");
    openapiFields.add("debugLevel");
    openapiFields.add("debugCategory");
    openapiFields.add("omitMethodEntryArguments");
    openapiFields.add("omitMethodReturnValue");
    openapiFields.add("includeThrowableCause");
    openapiFields.add("throwableStackFrames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("debugScope");
    openapiRequiredFields.add("debugLevel");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DebugTargetShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DebugTargetShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DebugTargetShared is not found in the empty JSON string", DebugTargetShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DebugTargetShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("debugScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debugScope").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("debugCategory") != null && !jsonObj.get("debugCategory").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugCategory` to be an array in the JSON string but got `%s`", jsonObj.get("debugCategory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DebugTargetShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DebugTargetShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DebugTargetShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DebugTargetShared.class));

       return (TypeAdapter<T>) new TypeAdapter<DebugTargetShared>() {
           @Override
           public void write(JsonWriter out, DebugTargetShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DebugTargetShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DebugTargetShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DebugTargetShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DebugTargetShared
  * @throws IOException if the JSON string is invalid with respect to DebugTargetShared
  */
  public static DebugTargetShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DebugTargetShared.class);
  }

 /**
  * Convert an instance of DebugTargetShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

