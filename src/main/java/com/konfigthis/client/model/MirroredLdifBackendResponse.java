/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumbackendMirroredSubtreePreferredMasterTypeProp;
import com.konfigthis.client.model.EnumbackendWritabilityModeProp;
import com.konfigthis.client.model.EnummirroredLdifBackendSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MirroredLdifBackendResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MirroredLdifBackendResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnummirroredLdifBackendSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MIRRORED_SUBTREE_PEER_POLLING_INTERVAL = "mirroredSubtreePeerPollingInterval";
  @SerializedName(SERIALIZED_NAME_MIRRORED_SUBTREE_PEER_POLLING_INTERVAL)
  private String mirroredSubtreePeerPollingInterval;

  public static final String SERIALIZED_NAME_MIRRORED_SUBTREE_ENTRY_UPDATE_TIMEOUT = "mirroredSubtreeEntryUpdateTimeout";
  @SerializedName(SERIALIZED_NAME_MIRRORED_SUBTREE_ENTRY_UPDATE_TIMEOUT)
  private String mirroredSubtreeEntryUpdateTimeout;

  public static final String SERIALIZED_NAME_MIRRORED_SUBTREE_SEARCH_TIMEOUT = "mirroredSubtreeSearchTimeout";
  @SerializedName(SERIALIZED_NAME_MIRRORED_SUBTREE_SEARCH_TIMEOUT)
  private String mirroredSubtreeSearchTimeout;

  public static final String SERIALIZED_NAME_PEER_SERVER = "peerServer";
  @SerializedName(SERIALIZED_NAME_PEER_SERVER)
  private List<String> peerServer = null;

  public static final String SERIALIZED_NAME_MIRRORED_SUBTREE_PREFERRED_MASTER_TYPE = "mirroredSubtreePreferredMasterType";
  @SerializedName(SERIALIZED_NAME_MIRRORED_SUBTREE_PREFERRED_MASTER_TYPE)
  private List<EnumbackendMirroredSubtreePreferredMasterTypeProp> mirroredSubtreePreferredMasterType = null;

  public static final String SERIALIZED_NAME_SIMULATED_RESULT_CODE = "simulatedResultCode";
  @SerializedName(SERIALIZED_NAME_SIMULATED_RESULT_CODE)
  private Integer simulatedResultCode;

  public static final String SERIALIZED_NAME_WRITABILITY_MODE = "writabilityMode";
  @SerializedName(SERIALIZED_NAME_WRITABILITY_MODE)
  private EnumbackendWritabilityModeProp writabilityMode;

  public static final String SERIALIZED_NAME_IS_PRIVATE_BACKEND = "isPrivateBackend";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE_BACKEND)
  private Boolean isPrivateBackend;

  public static final String SERIALIZED_NAME_LDIF_FILE = "ldifFile";
  @SerializedName(SERIALIZED_NAME_LDIF_FILE)
  private String ldifFile;

  public static final String SERIALIZED_NAME_BACKEND_I_D = "backendID";
  @SerializedName(SERIALIZED_NAME_BACKEND_I_D)
  private String backendID;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_BASE_D_N = "baseDN";
  @SerializedName(SERIALIZED_NAME_BASE_D_N)
  private List<String> baseDN = new ArrayList<>();

  public static final String SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED = "setDegradedAlertWhenDisabled";
  @SerializedName(SERIALIZED_NAME_SET_DEGRADED_ALERT_WHEN_DISABLED)
  private Boolean setDegradedAlertWhenDisabled;

  public static final String SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED = "returnUnavailableWhenDisabled";
  @SerializedName(SERIALIZED_NAME_RETURN_UNAVAILABLE_WHEN_DISABLED)
  private Boolean returnUnavailableWhenDisabled;

  public static final String SERIALIZED_NAME_BACKUP_FILE_PERMISSIONS = "backupFilePermissions";
  @SerializedName(SERIALIZED_NAME_BACKUP_FILE_PERMISSIONS)
  private String backupFilePermissions;

  public static final String SERIALIZED_NAME_NOTIFICATION_MANAGER = "notificationManager";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_MANAGER)
  private String notificationManager;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public MirroredLdifBackendResponse() {
  }

  public MirroredLdifBackendResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Backend
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Backend")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public MirroredLdifBackendResponse schemas(List<EnummirroredLdifBackendSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public MirroredLdifBackendResponse addSchemasItem(EnummirroredLdifBackendSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnummirroredLdifBackendSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnummirroredLdifBackendSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public MirroredLdifBackendResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Backend
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Backend")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public MirroredLdifBackendResponse mirroredSubtreePeerPollingInterval(String mirroredSubtreePeerPollingInterval) {
    
    
    
    
    this.mirroredSubtreePeerPollingInterval = mirroredSubtreePeerPollingInterval;
    return this;
  }

   /**
   * The amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the topology. A lower value will make for a quicker failover in the event of a failure, but it will also cause more frequent traffic among the peers.
   * @return mirroredSubtreePeerPollingInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The amount of time to wait before polling the peer servers in the topology to determine if there are any changes in the topology. A lower value will make for a quicker failover in the event of a failure, but it will also cause more frequent traffic among the peers.")

  public String getMirroredSubtreePeerPollingInterval() {
    return mirroredSubtreePeerPollingInterval;
  }


  public void setMirroredSubtreePeerPollingInterval(String mirroredSubtreePeerPollingInterval) {
    
    
    
    this.mirroredSubtreePeerPollingInterval = mirroredSubtreePeerPollingInterval;
  }


  public MirroredLdifBackendResponse mirroredSubtreeEntryUpdateTimeout(String mirroredSubtreeEntryUpdateTimeout) {
    
    
    
    
    this.mirroredSubtreeEntryUpdateTimeout = mirroredSubtreeEntryUpdateTimeout;
    return this;
  }

   /**
   * Specifies the maximum length of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all servers in the topology.
   * @return mirroredSubtreeEntryUpdateTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time to wait for an update operation (add, delete, modify and modify-dn) on an entry to be applied on all servers in the topology.")

  public String getMirroredSubtreeEntryUpdateTimeout() {
    return mirroredSubtreeEntryUpdateTimeout;
  }


  public void setMirroredSubtreeEntryUpdateTimeout(String mirroredSubtreeEntryUpdateTimeout) {
    
    
    
    this.mirroredSubtreeEntryUpdateTimeout = mirroredSubtreeEntryUpdateTimeout;
  }


  public MirroredLdifBackendResponse mirroredSubtreeSearchTimeout(String mirroredSubtreeSearchTimeout) {
    
    
    
    
    this.mirroredSubtreeSearchTimeout = mirroredSubtreeSearchTimeout;
    return this;
  }

   /**
   * Specifies the maximum length of time to wait for a search operation to complete. Search requests that take longer than this timeout will be canceled and considered failures.
   * @return mirroredSubtreeSearchTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of time to wait for a search operation to complete. Search requests that take longer than this timeout will be canceled and considered failures.")

  public String getMirroredSubtreeSearchTimeout() {
    return mirroredSubtreeSearchTimeout;
  }


  public void setMirroredSubtreeSearchTimeout(String mirroredSubtreeSearchTimeout) {
    
    
    
    this.mirroredSubtreeSearchTimeout = mirroredSubtreeSearchTimeout;
  }


  public MirroredLdifBackendResponse peerServer(List<String> peerServer) {
    
    
    
    
    this.peerServer = peerServer;
    return this;
  }

  public MirroredLdifBackendResponse addPeerServerItem(String peerServerItem) {
    if (this.peerServer == null) {
      this.peerServer = new ArrayList<>();
    }
    this.peerServer.add(peerServerItem);
    return this;
  }

   /**
   * Specifies the set of peer servers onto which updates should be mirrored. The local server should not be included in this set, but if it is, then it will just be ignored.
   * @return peerServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the set of peer servers onto which updates should be mirrored. The local server should not be included in this set, but if it is, then it will just be ignored.")

  public List<String> getPeerServer() {
    return peerServer;
  }


  public void setPeerServer(List<String> peerServer) {
    
    
    
    this.peerServer = peerServer;
  }


  public MirroredLdifBackendResponse mirroredSubtreePreferredMasterType(List<EnumbackendMirroredSubtreePreferredMasterTypeProp> mirroredSubtreePreferredMasterType) {
    
    
    
    
    this.mirroredSubtreePreferredMasterType = mirroredSubtreePreferredMasterType;
    return this;
  }

  public MirroredLdifBackendResponse addMirroredSubtreePreferredMasterTypeItem(EnumbackendMirroredSubtreePreferredMasterTypeProp mirroredSubtreePreferredMasterTypeItem) {
    if (this.mirroredSubtreePreferredMasterType == null) {
      this.mirroredSubtreePreferredMasterType = new ArrayList<>();
    }
    this.mirroredSubtreePreferredMasterType.add(mirroredSubtreePreferredMasterTypeItem);
    return this;
  }

   /**
   * Get mirroredSubtreePreferredMasterType
   * @return mirroredSubtreePreferredMasterType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumbackendMirroredSubtreePreferredMasterTypeProp> getMirroredSubtreePreferredMasterType() {
    return mirroredSubtreePreferredMasterType;
  }


  public void setMirroredSubtreePreferredMasterType(List<EnumbackendMirroredSubtreePreferredMasterTypeProp> mirroredSubtreePreferredMasterType) {
    
    
    
    this.mirroredSubtreePreferredMasterType = mirroredSubtreePreferredMasterType;
  }


  public MirroredLdifBackendResponse simulatedResultCode(Integer simulatedResultCode) {
    
    
    
    
    this.simulatedResultCode = simulatedResultCode;
    return this;
  }

   /**
   * Specifies the numeric value of the result code to be assumed for update operations (add, delete, modify and modify-dn) targeted to this backend.
   * @return simulatedResultCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the numeric value of the result code to be assumed for update operations (add, delete, modify and modify-dn) targeted to this backend.")

  public Integer getSimulatedResultCode() {
    return simulatedResultCode;
  }


  public void setSimulatedResultCode(Integer simulatedResultCode) {
    
    
    
    this.simulatedResultCode = simulatedResultCode;
  }


  public MirroredLdifBackendResponse writabilityMode(EnumbackendWritabilityModeProp writabilityMode) {
    
    
    
    
    this.writabilityMode = writabilityMode;
    return this;
  }

   /**
   * Get writabilityMode
   * @return writabilityMode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EnumbackendWritabilityModeProp getWritabilityMode() {
    return writabilityMode;
  }


  public void setWritabilityMode(EnumbackendWritabilityModeProp writabilityMode) {
    
    
    
    this.writabilityMode = writabilityMode;
  }


  public MirroredLdifBackendResponse isPrivateBackend(Boolean isPrivateBackend) {
    
    
    
    
    this.isPrivateBackend = isPrivateBackend;
    return this;
  }

   /**
   * Indicates whether the backend should be considered a private backend, which indicates that it is used for storing operational data rather than user-defined information.
   * @return isPrivateBackend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the backend should be considered a private backend, which indicates that it is used for storing operational data rather than user-defined information.")

  public Boolean getIsPrivateBackend() {
    return isPrivateBackend;
  }


  public void setIsPrivateBackend(Boolean isPrivateBackend) {
    
    
    
    this.isPrivateBackend = isPrivateBackend;
  }


  public MirroredLdifBackendResponse ldifFile(String ldifFile) {
    
    
    
    
    this.ldifFile = ldifFile;
    return this;
  }

   /**
   * Specifies the path to the LDIF file containing the data for this backend.
   * @return ldifFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the path to the LDIF file containing the data for this backend.")

  public String getLdifFile() {
    return ldifFile;
  }


  public void setLdifFile(String ldifFile) {
    
    
    
    this.ldifFile = ldifFile;
  }


  public MirroredLdifBackendResponse backendID(String backendID) {
    
    
    
    
    this.backendID = backendID;
    return this;
  }

   /**
   * Specifies a name to identify the associated backend.
   * @return backendID
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies a name to identify the associated backend.")

  public String getBackendID() {
    return backendID;
  }


  public void setBackendID(String backendID) {
    
    
    
    this.backendID = backendID;
  }


  public MirroredLdifBackendResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the backend is enabled in the server.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the backend is enabled in the server.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public MirroredLdifBackendResponse baseDN(List<String> baseDN) {
    
    
    
    
    this.baseDN = baseDN;
    return this;
  }

  public MirroredLdifBackendResponse addBaseDNItem(String baseDNItem) {
    this.baseDN.add(baseDNItem);
    return this;
  }

   /**
   * Specifies the base DN(s) for the data that the backend handles.
   * @return baseDN
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the base DN(s) for the data that the backend handles.")

  public List<String> getBaseDN() {
    return baseDN;
  }


  public void setBaseDN(List<String> baseDN) {
    
    
    
    this.baseDN = baseDN;
  }


  public MirroredLdifBackendResponse setDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
    return this;
  }

   /**
   * Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.
   * @return setDegradedAlertWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether the Directory Server enters a DEGRADED state (and sends a corresponding alert) when this Backend is disabled.")

  public Boolean getSetDegradedAlertWhenDisabled() {
    return setDegradedAlertWhenDisabled;
  }


  public void setSetDegradedAlertWhenDisabled(Boolean setDegradedAlertWhenDisabled) {
    
    
    
    this.setDegradedAlertWhenDisabled = setDegradedAlertWhenDisabled;
  }


  public MirroredLdifBackendResponse returnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
    return this;
  }

   /**
   * Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.
   * @return returnUnavailableWhenDisabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Determines whether any LDAP operation that would use this Backend is to return UNAVAILABLE when this Backend is disabled.")

  public Boolean getReturnUnavailableWhenDisabled() {
    return returnUnavailableWhenDisabled;
  }


  public void setReturnUnavailableWhenDisabled(Boolean returnUnavailableWhenDisabled) {
    
    
    
    this.returnUnavailableWhenDisabled = returnUnavailableWhenDisabled;
  }


  public MirroredLdifBackendResponse backupFilePermissions(String backupFilePermissions) {
    
    
    
    
    this.backupFilePermissions = backupFilePermissions;
    return this;
  }

   /**
   * Specifies the permissions that should be applied to files and directories created by a backup of the backend.
   * @return backupFilePermissions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the permissions that should be applied to files and directories created by a backup of the backend.")

  public String getBackupFilePermissions() {
    return backupFilePermissions;
  }


  public void setBackupFilePermissions(String backupFilePermissions) {
    
    
    
    this.backupFilePermissions = backupFilePermissions;
  }


  public MirroredLdifBackendResponse notificationManager(String notificationManager) {
    
    
    
    
    this.notificationManager = notificationManager;
    return this;
  }

   /**
   * Specifies a notification manager for changes resulting from operations processed through this Backend
   * @return notificationManager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a notification manager for changes resulting from operations processed through this Backend")

  public String getNotificationManager() {
    return notificationManager;
  }


  public void setNotificationManager(String notificationManager) {
    
    
    
    this.notificationManager = notificationManager;
  }


  public MirroredLdifBackendResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public MirroredLdifBackendResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MirroredLdifBackendResponse instance itself
   */
  public MirroredLdifBackendResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MirroredLdifBackendResponse mirroredLdifBackendResponse = (MirroredLdifBackendResponse) o;
    return Objects.equals(this.description, mirroredLdifBackendResponse.description) &&
        Objects.equals(this.schemas, mirroredLdifBackendResponse.schemas) &&
        Objects.equals(this.id, mirroredLdifBackendResponse.id) &&
        Objects.equals(this.mirroredSubtreePeerPollingInterval, mirroredLdifBackendResponse.mirroredSubtreePeerPollingInterval) &&
        Objects.equals(this.mirroredSubtreeEntryUpdateTimeout, mirroredLdifBackendResponse.mirroredSubtreeEntryUpdateTimeout) &&
        Objects.equals(this.mirroredSubtreeSearchTimeout, mirroredLdifBackendResponse.mirroredSubtreeSearchTimeout) &&
        Objects.equals(this.peerServer, mirroredLdifBackendResponse.peerServer) &&
        Objects.equals(this.mirroredSubtreePreferredMasterType, mirroredLdifBackendResponse.mirroredSubtreePreferredMasterType) &&
        Objects.equals(this.simulatedResultCode, mirroredLdifBackendResponse.simulatedResultCode) &&
        Objects.equals(this.writabilityMode, mirroredLdifBackendResponse.writabilityMode) &&
        Objects.equals(this.isPrivateBackend, mirroredLdifBackendResponse.isPrivateBackend) &&
        Objects.equals(this.ldifFile, mirroredLdifBackendResponse.ldifFile) &&
        Objects.equals(this.backendID, mirroredLdifBackendResponse.backendID) &&
        Objects.equals(this.enabled, mirroredLdifBackendResponse.enabled) &&
        Objects.equals(this.baseDN, mirroredLdifBackendResponse.baseDN) &&
        Objects.equals(this.setDegradedAlertWhenDisabled, mirroredLdifBackendResponse.setDegradedAlertWhenDisabled) &&
        Objects.equals(this.returnUnavailableWhenDisabled, mirroredLdifBackendResponse.returnUnavailableWhenDisabled) &&
        Objects.equals(this.backupFilePermissions, mirroredLdifBackendResponse.backupFilePermissions) &&
        Objects.equals(this.notificationManager, mirroredLdifBackendResponse.notificationManager) &&
        Objects.equals(this.meta, mirroredLdifBackendResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, mirroredLdifBackendResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, mirroredLdifBackendResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, mirroredSubtreePeerPollingInterval, mirroredSubtreeEntryUpdateTimeout, mirroredSubtreeSearchTimeout, peerServer, mirroredSubtreePreferredMasterType, simulatedResultCode, writabilityMode, isPrivateBackend, ldifFile, backendID, enabled, baseDN, setDegradedAlertWhenDisabled, returnUnavailableWhenDisabled, backupFilePermissions, notificationManager, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MirroredLdifBackendResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mirroredSubtreePeerPollingInterval: ").append(toIndentedString(mirroredSubtreePeerPollingInterval)).append("\n");
    sb.append("    mirroredSubtreeEntryUpdateTimeout: ").append(toIndentedString(mirroredSubtreeEntryUpdateTimeout)).append("\n");
    sb.append("    mirroredSubtreeSearchTimeout: ").append(toIndentedString(mirroredSubtreeSearchTimeout)).append("\n");
    sb.append("    peerServer: ").append(toIndentedString(peerServer)).append("\n");
    sb.append("    mirroredSubtreePreferredMasterType: ").append(toIndentedString(mirroredSubtreePreferredMasterType)).append("\n");
    sb.append("    simulatedResultCode: ").append(toIndentedString(simulatedResultCode)).append("\n");
    sb.append("    writabilityMode: ").append(toIndentedString(writabilityMode)).append("\n");
    sb.append("    isPrivateBackend: ").append(toIndentedString(isPrivateBackend)).append("\n");
    sb.append("    ldifFile: ").append(toIndentedString(ldifFile)).append("\n");
    sb.append("    backendID: ").append(toIndentedString(backendID)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    baseDN: ").append(toIndentedString(baseDN)).append("\n");
    sb.append("    setDegradedAlertWhenDisabled: ").append(toIndentedString(setDegradedAlertWhenDisabled)).append("\n");
    sb.append("    returnUnavailableWhenDisabled: ").append(toIndentedString(returnUnavailableWhenDisabled)).append("\n");
    sb.append("    backupFilePermissions: ").append(toIndentedString(backupFilePermissions)).append("\n");
    sb.append("    notificationManager: ").append(toIndentedString(notificationManager)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("mirroredSubtreePeerPollingInterval");
    openapiFields.add("mirroredSubtreeEntryUpdateTimeout");
    openapiFields.add("mirroredSubtreeSearchTimeout");
    openapiFields.add("peerServer");
    openapiFields.add("mirroredSubtreePreferredMasterType");
    openapiFields.add("simulatedResultCode");
    openapiFields.add("writabilityMode");
    openapiFields.add("isPrivateBackend");
    openapiFields.add("ldifFile");
    openapiFields.add("backendID");
    openapiFields.add("enabled");
    openapiFields.add("baseDN");
    openapiFields.add("setDegradedAlertWhenDisabled");
    openapiFields.add("returnUnavailableWhenDisabled");
    openapiFields.add("backupFilePermissions");
    openapiFields.add("notificationManager");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("writabilityMode");
    openapiRequiredFields.add("ldifFile");
    openapiRequiredFields.add("backendID");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("baseDN");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MirroredLdifBackendResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MirroredLdifBackendResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MirroredLdifBackendResponse is not found in the empty JSON string", MirroredLdifBackendResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MirroredLdifBackendResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("mirroredSubtreePeerPollingInterval") != null && !jsonObj.get("mirroredSubtreePeerPollingInterval").isJsonNull()) && !jsonObj.get("mirroredSubtreePeerPollingInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirroredSubtreePeerPollingInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirroredSubtreePeerPollingInterval").toString()));
      }
      if ((jsonObj.get("mirroredSubtreeEntryUpdateTimeout") != null && !jsonObj.get("mirroredSubtreeEntryUpdateTimeout").isJsonNull()) && !jsonObj.get("mirroredSubtreeEntryUpdateTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirroredSubtreeEntryUpdateTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirroredSubtreeEntryUpdateTimeout").toString()));
      }
      if ((jsonObj.get("mirroredSubtreeSearchTimeout") != null && !jsonObj.get("mirroredSubtreeSearchTimeout").isJsonNull()) && !jsonObj.get("mirroredSubtreeSearchTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirroredSubtreeSearchTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirroredSubtreeSearchTimeout").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("peerServer") != null && !jsonObj.get("peerServer").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `peerServer` to be an array in the JSON string but got `%s`", jsonObj.get("peerServer").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mirroredSubtreePreferredMasterType") != null && !jsonObj.get("mirroredSubtreePreferredMasterType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirroredSubtreePreferredMasterType` to be an array in the JSON string but got `%s`", jsonObj.get("mirroredSubtreePreferredMasterType").toString()));
      }
      if (!jsonObj.get("ldifFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldifFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldifFile").toString()));
      }
      if (!jsonObj.get("backendID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendID").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("baseDN") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("baseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseDN` to be an array in the JSON string but got `%s`", jsonObj.get("baseDN").toString()));
      }
      if ((jsonObj.get("backupFilePermissions") != null && !jsonObj.get("backupFilePermissions").isJsonNull()) && !jsonObj.get("backupFilePermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupFilePermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupFilePermissions").toString()));
      }
      if ((jsonObj.get("notificationManager") != null && !jsonObj.get("notificationManager").isJsonNull()) && !jsonObj.get("notificationManager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationManager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationManager").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MirroredLdifBackendResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MirroredLdifBackendResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MirroredLdifBackendResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MirroredLdifBackendResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MirroredLdifBackendResponse>() {
           @Override
           public void write(JsonWriter out, MirroredLdifBackendResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MirroredLdifBackendResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MirroredLdifBackendResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MirroredLdifBackendResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MirroredLdifBackendResponse
  * @throws IOException if the JSON string is invalid with respect to MirroredLdifBackendResponse
  */
  public static MirroredLdifBackendResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MirroredLdifBackendResponse.class);
  }

 /**
  * Convert an instance of MirroredLdifBackendResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

