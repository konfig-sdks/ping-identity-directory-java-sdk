/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumreplicationAssurancePolicyLocalLevelProp;
import com.konfigthis.client.model.EnumreplicationAssurancePolicyRemoteLevelProp;
import com.konfigthis.client.model.EnumreplicationAssurancePolicySchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReplicationAssurancePolicyShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReplicationAssurancePolicyShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumreplicationAssurancePolicySchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EVALUATION_ORDER_INDEX = "evaluationOrderIndex";
  @SerializedName(SERIALIZED_NAME_EVALUATION_ORDER_INDEX)
  private Integer evaluationOrderIndex;

  public static final String SERIALIZED_NAME_LOCAL_LEVEL = "localLevel";
  @SerializedName(SERIALIZED_NAME_LOCAL_LEVEL)
  private EnumreplicationAssurancePolicyLocalLevelProp localLevel;

  public static final String SERIALIZED_NAME_REMOTE_LEVEL = "remoteLevel";
  @SerializedName(SERIALIZED_NAME_REMOTE_LEVEL)
  private EnumreplicationAssurancePolicyRemoteLevelProp remoteLevel;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private String timeout;

  public static final String SERIALIZED_NAME_CONNECTION_CRITERIA = "connectionCriteria";
  @SerializedName(SERIALIZED_NAME_CONNECTION_CRITERIA)
  private String connectionCriteria;

  public static final String SERIALIZED_NAME_REQUEST_CRITERIA = "requestCriteria";
  @SerializedName(SERIALIZED_NAME_REQUEST_CRITERIA)
  private String requestCriteria;

  public ReplicationAssurancePolicyShared() {
  }

  public ReplicationAssurancePolicyShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the Replication Assurance Policy.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the Replication Assurance Policy.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ReplicationAssurancePolicyShared schemas(List<EnumreplicationAssurancePolicySchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public ReplicationAssurancePolicyShared addSchemasItem(EnumreplicationAssurancePolicySchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumreplicationAssurancePolicySchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumreplicationAssurancePolicySchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public ReplicationAssurancePolicyShared enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether this Replication Assurance Policy is enabled for use in the server. If a Replication Assurance Policy is disabled, then no new operations will be associated with it.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether this Replication Assurance Policy is enabled for use in the server. If a Replication Assurance Policy is disabled, then no new operations will be associated with it.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public ReplicationAssurancePolicyShared evaluationOrderIndex(Integer evaluationOrderIndex) {
    
    
    
    
    this.evaluationOrderIndex = evaluationOrderIndex;
    return this;
  }

   /**
   * When multiple Replication Assurance Policies are defined, this property determines the evaluation order for finding a Replication Assurance Policy match against an operation. Policies are evaluated based on this index from least to greatest. Values of this property must be unique but not necessarily contiguous.
   * @return evaluationOrderIndex
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "When multiple Replication Assurance Policies are defined, this property determines the evaluation order for finding a Replication Assurance Policy match against an operation. Policies are evaluated based on this index from least to greatest. Values of this property must be unique but not necessarily contiguous.")

  public Integer getEvaluationOrderIndex() {
    return evaluationOrderIndex;
  }


  public void setEvaluationOrderIndex(Integer evaluationOrderIndex) {
    
    
    
    this.evaluationOrderIndex = evaluationOrderIndex;
  }


  public ReplicationAssurancePolicyShared localLevel(EnumreplicationAssurancePolicyLocalLevelProp localLevel) {
    
    
    
    
    this.localLevel = localLevel;
    return this;
  }

   /**
   * Get localLevel
   * @return localLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumreplicationAssurancePolicyLocalLevelProp getLocalLevel() {
    return localLevel;
  }


  public void setLocalLevel(EnumreplicationAssurancePolicyLocalLevelProp localLevel) {
    
    
    
    this.localLevel = localLevel;
  }


  public ReplicationAssurancePolicyShared remoteLevel(EnumreplicationAssurancePolicyRemoteLevelProp remoteLevel) {
    
    
    
    
    this.remoteLevel = remoteLevel;
    return this;
  }

   /**
   * Get remoteLevel
   * @return remoteLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumreplicationAssurancePolicyRemoteLevelProp getRemoteLevel() {
    return remoteLevel;
  }


  public void setRemoteLevel(EnumreplicationAssurancePolicyRemoteLevelProp remoteLevel) {
    
    
    
    this.remoteLevel = remoteLevel;
  }


  public ReplicationAssurancePolicyShared timeout(String timeout) {
    
    
    
    
    this.timeout = timeout;
    return this;
  }

   /**
   * Specifies the maximum length of time to wait for the replication assurance requirements to be met before timing out and replying to the client.
   * @return timeout
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the maximum length of time to wait for the replication assurance requirements to be met before timing out and replying to the client.")

  public String getTimeout() {
    return timeout;
  }


  public void setTimeout(String timeout) {
    
    
    
    this.timeout = timeout;
  }


  public ReplicationAssurancePolicyShared connectionCriteria(String connectionCriteria) {
    
    
    
    
    this.connectionCriteria = connectionCriteria;
    return this;
  }

   /**
   * Specifies a connection criteria used to indicate which operations from clients matching this criteria use this policy. If both a connection criteria and a request criteria are specified for a policy, then both must match an operation for the policy to be assigned.
   * @return connectionCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a connection criteria used to indicate which operations from clients matching this criteria use this policy. If both a connection criteria and a request criteria are specified for a policy, then both must match an operation for the policy to be assigned.")

  public String getConnectionCriteria() {
    return connectionCriteria;
  }


  public void setConnectionCriteria(String connectionCriteria) {
    
    
    
    this.connectionCriteria = connectionCriteria;
  }


  public ReplicationAssurancePolicyShared requestCriteria(String requestCriteria) {
    
    
    
    
    this.requestCriteria = requestCriteria;
    return this;
  }

   /**
   * Specifies a request criteria used to indicate which operations from clients matching this criteria use this policy. If both a connection criteria and a request criteria are specified for a policy, then both must match an operation for the policy to be assigned.
   * @return requestCriteria
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a request criteria used to indicate which operations from clients matching this criteria use this policy. If both a connection criteria and a request criteria are specified for a policy, then both must match an operation for the policy to be assigned.")

  public String getRequestCriteria() {
    return requestCriteria;
  }


  public void setRequestCriteria(String requestCriteria) {
    
    
    
    this.requestCriteria = requestCriteria;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReplicationAssurancePolicyShared instance itself
   */
  public ReplicationAssurancePolicyShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationAssurancePolicyShared replicationAssurancePolicyShared = (ReplicationAssurancePolicyShared) o;
    return Objects.equals(this.description, replicationAssurancePolicyShared.description) &&
        Objects.equals(this.schemas, replicationAssurancePolicyShared.schemas) &&
        Objects.equals(this.enabled, replicationAssurancePolicyShared.enabled) &&
        Objects.equals(this.evaluationOrderIndex, replicationAssurancePolicyShared.evaluationOrderIndex) &&
        Objects.equals(this.localLevel, replicationAssurancePolicyShared.localLevel) &&
        Objects.equals(this.remoteLevel, replicationAssurancePolicyShared.remoteLevel) &&
        Objects.equals(this.timeout, replicationAssurancePolicyShared.timeout) &&
        Objects.equals(this.connectionCriteria, replicationAssurancePolicyShared.connectionCriteria) &&
        Objects.equals(this.requestCriteria, replicationAssurancePolicyShared.requestCriteria)&&
        Objects.equals(this.additionalProperties, replicationAssurancePolicyShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, enabled, evaluationOrderIndex, localLevel, remoteLevel, timeout, connectionCriteria, requestCriteria, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationAssurancePolicyShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    evaluationOrderIndex: ").append(toIndentedString(evaluationOrderIndex)).append("\n");
    sb.append("    localLevel: ").append(toIndentedString(localLevel)).append("\n");
    sb.append("    remoteLevel: ").append(toIndentedString(remoteLevel)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    connectionCriteria: ").append(toIndentedString(connectionCriteria)).append("\n");
    sb.append("    requestCriteria: ").append(toIndentedString(requestCriteria)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("enabled");
    openapiFields.add("evaluationOrderIndex");
    openapiFields.add("localLevel");
    openapiFields.add("remoteLevel");
    openapiFields.add("timeout");
    openapiFields.add("connectionCriteria");
    openapiFields.add("requestCriteria");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("evaluationOrderIndex");
    openapiRequiredFields.add("timeout");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReplicationAssurancePolicyShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReplicationAssurancePolicyShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationAssurancePolicyShared is not found in the empty JSON string", ReplicationAssurancePolicyShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplicationAssurancePolicyShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeout").toString()));
      }
      if ((jsonObj.get("connectionCriteria") != null && !jsonObj.get("connectionCriteria").isJsonNull()) && !jsonObj.get("connectionCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionCriteria").toString()));
      }
      if ((jsonObj.get("requestCriteria") != null && !jsonObj.get("requestCriteria").isJsonNull()) && !jsonObj.get("requestCriteria").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestCriteria` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestCriteria").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationAssurancePolicyShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationAssurancePolicyShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationAssurancePolicyShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationAssurancePolicyShared.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationAssurancePolicyShared>() {
           @Override
           public void write(JsonWriter out, ReplicationAssurancePolicyShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationAssurancePolicyShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReplicationAssurancePolicyShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReplicationAssurancePolicyShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReplicationAssurancePolicyShared
  * @throws IOException if the JSON string is invalid with respect to ReplicationAssurancePolicyShared
  */
  public static ReplicationAssurancePolicyShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationAssurancePolicyShared.class);
  }

 /**
  * Convert an instance of ReplicationAssurancePolicyShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

