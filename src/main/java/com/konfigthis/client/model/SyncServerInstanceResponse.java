/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumserverInstancePreferredSecurityProp;
import com.konfigthis.client.model.EnumserverInstanceServerInstanceTypeProp;
import com.konfigthis.client.model.EnumsyncServerInstanceSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SyncServerInstanceResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SyncServerInstanceResponse {
  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumsyncServerInstanceSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SERVER_INSTANCE_TYPE = "serverInstanceType";
  @SerializedName(SERIALIZED_NAME_SERVER_INSTANCE_TYPE)
  private EnumserverInstanceServerInstanceTypeProp serverInstanceType;

  public static final String SERIALIZED_NAME_SERVER_INSTANCE_NAME = "serverInstanceName";
  @SerializedName(SERIALIZED_NAME_SERVER_INSTANCE_NAME)
  private String serverInstanceName;

  public static final String SERIALIZED_NAME_CLUSTER_NAME = "clusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_SERVER_INSTANCE_LOCATION = "serverInstanceLocation";
  @SerializedName(SERIALIZED_NAME_SERVER_INSTANCE_LOCATION)
  private String serverInstanceLocation;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_SERVER_ROOT = "serverRoot";
  @SerializedName(SERIALIZED_NAME_SERVER_ROOT)
  private String serverRoot;

  public static final String SERIALIZED_NAME_SERVER_VERSION = "serverVersion";
  @SerializedName(SERIALIZED_NAME_SERVER_VERSION)
  private String serverVersion;

  public static final String SERIALIZED_NAME_INTER_SERVER_CERTIFICATE = "interServerCertificate";
  @SerializedName(SERIALIZED_NAME_INTER_SERVER_CERTIFICATE)
  private String interServerCertificate;

  public static final String SERIALIZED_NAME_LDAP_PORT = "ldapPort";
  @SerializedName(SERIALIZED_NAME_LDAP_PORT)
  private Integer ldapPort;

  public static final String SERIALIZED_NAME_LDAPS_PORT = "ldapsPort";
  @SerializedName(SERIALIZED_NAME_LDAPS_PORT)
  private Integer ldapsPort;

  public static final String SERIALIZED_NAME_HTTP_PORT = "httpPort";
  @SerializedName(SERIALIZED_NAME_HTTP_PORT)
  private Integer httpPort;

  public static final String SERIALIZED_NAME_HTTPS_PORT = "httpsPort";
  @SerializedName(SERIALIZED_NAME_HTTPS_PORT)
  private Integer httpsPort;

  public static final String SERIALIZED_NAME_REPLICATION_PORT = "replicationPort";
  @SerializedName(SERIALIZED_NAME_REPLICATION_PORT)
  private Integer replicationPort;

  public static final String SERIALIZED_NAME_REPLICATION_SERVER_I_D = "replicationServerID";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SERVER_I_D)
  private Integer replicationServerID;

  public static final String SERIALIZED_NAME_REPLICATION_DOMAIN_SERVER_I_D = "replicationDomainServerID";
  @SerializedName(SERIALIZED_NAME_REPLICATION_DOMAIN_SERVER_I_D)
  private List<Integer> replicationDomainServerID = null;

  public static final String SERIALIZED_NAME_JMX_PORT = "jmxPort";
  @SerializedName(SERIALIZED_NAME_JMX_PORT)
  private Integer jmxPort;

  public static final String SERIALIZED_NAME_JMXS_PORT = "jmxsPort";
  @SerializedName(SERIALIZED_NAME_JMXS_PORT)
  private Integer jmxsPort;

  public static final String SERIALIZED_NAME_PREFERRED_SECURITY = "preferredSecurity";
  @SerializedName(SERIALIZED_NAME_PREFERRED_SECURITY)
  private EnumserverInstancePreferredSecurityProp preferredSecurity;

  public static final String SERIALIZED_NAME_START_T_L_S_ENABLED = "startTLSEnabled";
  @SerializedName(SERIALIZED_NAME_START_T_L_S_ENABLED)
  private Boolean startTLSEnabled;

  public static final String SERIALIZED_NAME_BASE_D_N = "baseDN";
  @SerializedName(SERIALIZED_NAME_BASE_D_N)
  private List<String> baseDN = null;

  public static final String SERIALIZED_NAME_MEMBER_OF_SERVER_GROUP = "memberOfServerGroup";
  @SerializedName(SERIALIZED_NAME_MEMBER_OF_SERVER_GROUP)
  private List<String> memberOfServerGroup = null;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public SyncServerInstanceResponse() {
  }

  public SyncServerInstanceResponse schemas(List<EnumsyncServerInstanceSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public SyncServerInstanceResponse addSchemasItem(EnumsyncServerInstanceSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumsyncServerInstanceSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumsyncServerInstanceSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public SyncServerInstanceResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Server Instance
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Server Instance")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public SyncServerInstanceResponse serverInstanceType(EnumserverInstanceServerInstanceTypeProp serverInstanceType) {
    
    
    
    
    this.serverInstanceType = serverInstanceType;
    return this;
  }

   /**
   * Get serverInstanceType
   * @return serverInstanceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumserverInstanceServerInstanceTypeProp getServerInstanceType() {
    return serverInstanceType;
  }


  public void setServerInstanceType(EnumserverInstanceServerInstanceTypeProp serverInstanceType) {
    
    
    
    this.serverInstanceType = serverInstanceType;
  }


  public SyncServerInstanceResponse serverInstanceName(String serverInstanceName) {
    
    
    
    
    this.serverInstanceName = serverInstanceName;
    return this;
  }

   /**
   * The name of this Server Instance. The instance name needs to be unique if this server will be part of a topology of servers that are connected to each other. Once set, it may not be changed.
   * @return serverInstanceName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of this Server Instance. The instance name needs to be unique if this server will be part of a topology of servers that are connected to each other. Once set, it may not be changed.")

  public String getServerInstanceName() {
    return serverInstanceName;
  }


  public void setServerInstanceName(String serverInstanceName) {
    
    
    
    this.serverInstanceName = serverInstanceName;
  }


  public SyncServerInstanceResponse clusterName(String clusterName) {
    
    
    
    
    this.clusterName = clusterName;
    return this;
  }

   /**
   * The name of the cluster to which this Server Instance belongs. Server instances within the same cluster will share the same cluster-wide configuration.
   * @return clusterName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The name of the cluster to which this Server Instance belongs. Server instances within the same cluster will share the same cluster-wide configuration.")

  public String getClusterName() {
    return clusterName;
  }


  public void setClusterName(String clusterName) {
    
    
    
    this.clusterName = clusterName;
  }


  public SyncServerInstanceResponse serverInstanceLocation(String serverInstanceLocation) {
    
    
    
    
    this.serverInstanceLocation = serverInstanceLocation;
    return this;
  }

   /**
   * Specifies the location for the Server Instance.
   * @return serverInstanceLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the location for the Server Instance.")

  public String getServerInstanceLocation() {
    return serverInstanceLocation;
  }


  public void setServerInstanceLocation(String serverInstanceLocation) {
    
    
    
    this.serverInstanceLocation = serverInstanceLocation;
  }


  public SyncServerInstanceResponse hostname(String hostname) {
    
    
    
    
    this.hostname = hostname;
    return this;
  }

   /**
   * The name of the host where this Server Instance is installed.
   * @return hostname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the host where this Server Instance is installed.")

  public String getHostname() {
    return hostname;
  }


  public void setHostname(String hostname) {
    
    
    
    this.hostname = hostname;
  }


  public SyncServerInstanceResponse serverRoot(String serverRoot) {
    
    
    
    
    this.serverRoot = serverRoot;
    return this;
  }

   /**
   * The file system path where this Server Instance is installed.
   * @return serverRoot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The file system path where this Server Instance is installed.")

  public String getServerRoot() {
    return serverRoot;
  }


  public void setServerRoot(String serverRoot) {
    
    
    
    this.serverRoot = serverRoot;
  }


  public SyncServerInstanceResponse serverVersion(String serverVersion) {
    
    
    
    
    this.serverVersion = serverVersion;
    return this;
  }

   /**
   * The version of the server.
   * @return serverVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The version of the server.")

  public String getServerVersion() {
    return serverVersion;
  }


  public void setServerVersion(String serverVersion) {
    
    
    
    this.serverVersion = serverVersion;
  }


  public SyncServerInstanceResponse interServerCertificate(String interServerCertificate) {
    
    
    
    
    this.interServerCertificate = interServerCertificate;
    return this;
  }

   /**
   * The public component of the certificate used by this instance to protect inter-server communication and to perform server-specific encryption. This will generally be managed by the server and should only be altered by administrators under explicit direction from Ping Identity support personnel.
   * @return interServerCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The public component of the certificate used by this instance to protect inter-server communication and to perform server-specific encryption. This will generally be managed by the server and should only be altered by administrators under explicit direction from Ping Identity support personnel.")

  public String getInterServerCertificate() {
    return interServerCertificate;
  }


  public void setInterServerCertificate(String interServerCertificate) {
    
    
    
    this.interServerCertificate = interServerCertificate;
  }


  public SyncServerInstanceResponse ldapPort(Integer ldapPort) {
    
    
    
    
    this.ldapPort = ldapPort;
    return this;
  }

   /**
   * The TCP port on which this server is listening for LDAP connections.
   * @return ldapPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The TCP port on which this server is listening for LDAP connections.")

  public Integer getLdapPort() {
    return ldapPort;
  }


  public void setLdapPort(Integer ldapPort) {
    
    
    
    this.ldapPort = ldapPort;
  }


  public SyncServerInstanceResponse ldapsPort(Integer ldapsPort) {
    
    
    
    
    this.ldapsPort = ldapsPort;
    return this;
  }

   /**
   * The TCP port on which this server is listening for LDAP secure connections.
   * @return ldapsPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The TCP port on which this server is listening for LDAP secure connections.")

  public Integer getLdapsPort() {
    return ldapsPort;
  }


  public void setLdapsPort(Integer ldapsPort) {
    
    
    
    this.ldapsPort = ldapsPort;
  }


  public SyncServerInstanceResponse httpPort(Integer httpPort) {
    
    
    
    
    this.httpPort = httpPort;
    return this;
  }

   /**
   * The TCP port on which this server is listening for HTTP connections.
   * @return httpPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The TCP port on which this server is listening for HTTP connections.")

  public Integer getHttpPort() {
    return httpPort;
  }


  public void setHttpPort(Integer httpPort) {
    
    
    
    this.httpPort = httpPort;
  }


  public SyncServerInstanceResponse httpsPort(Integer httpsPort) {
    
    
    
    
    this.httpsPort = httpsPort;
    return this;
  }

   /**
   * The TCP port on which this server is listening for HTTPS connections.
   * @return httpsPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The TCP port on which this server is listening for HTTPS connections.")

  public Integer getHttpsPort() {
    return httpsPort;
  }


  public void setHttpsPort(Integer httpsPort) {
    
    
    
    this.httpsPort = httpsPort;
  }


  public SyncServerInstanceResponse replicationPort(Integer replicationPort) {
    
    
    
    
    this.replicationPort = replicationPort;
    return this;
  }

   /**
   * The replication TCP port.
   * @return replicationPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The replication TCP port.")

  public Integer getReplicationPort() {
    return replicationPort;
  }


  public void setReplicationPort(Integer replicationPort) {
    
    
    
    this.replicationPort = replicationPort;
  }


  public SyncServerInstanceResponse replicationServerID(Integer replicationServerID) {
    
    
    
    
    this.replicationServerID = replicationServerID;
    return this;
  }

   /**
   * Specifies a unique identifier for the replication server on this server instance.
   * @return replicationServerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a unique identifier for the replication server on this server instance.")

  public Integer getReplicationServerID() {
    return replicationServerID;
  }


  public void setReplicationServerID(Integer replicationServerID) {
    
    
    
    this.replicationServerID = replicationServerID;
  }


  public SyncServerInstanceResponse replicationDomainServerID(List<Integer> replicationDomainServerID) {
    
    
    
    
    this.replicationDomainServerID = replicationDomainServerID;
    return this;
  }

  public SyncServerInstanceResponse addReplicationDomainServerIDItem(Integer replicationDomainServerIDItem) {
    if (this.replicationDomainServerID == null) {
      this.replicationDomainServerID = new ArrayList<>();
    }
    this.replicationDomainServerID.add(replicationDomainServerIDItem);
    return this;
  }

   /**
   * Specifies a unique identifier for the Directory Server within the replication domain.
   * @return replicationDomainServerID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a unique identifier for the Directory Server within the replication domain.")

  public List<Integer> getReplicationDomainServerID() {
    return replicationDomainServerID;
  }


  public void setReplicationDomainServerID(List<Integer> replicationDomainServerID) {
    
    
    
    this.replicationDomainServerID = replicationDomainServerID;
  }


  public SyncServerInstanceResponse jmxPort(Integer jmxPort) {
    
    
    
    
    this.jmxPort = jmxPort;
    return this;
  }

   /**
   * The TCP port on which this server is listening for JMX connections.
   * @return jmxPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The TCP port on which this server is listening for JMX connections.")

  public Integer getJmxPort() {
    return jmxPort;
  }


  public void setJmxPort(Integer jmxPort) {
    
    
    
    this.jmxPort = jmxPort;
  }


  public SyncServerInstanceResponse jmxsPort(Integer jmxsPort) {
    
    
    
    
    this.jmxsPort = jmxsPort;
    return this;
  }

   /**
   * The TCP port on which this server is listening for JMX secure connections.
   * @return jmxsPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The TCP port on which this server is listening for JMX secure connections.")

  public Integer getJmxsPort() {
    return jmxsPort;
  }


  public void setJmxsPort(Integer jmxsPort) {
    
    
    
    this.jmxsPort = jmxsPort;
  }


  public SyncServerInstanceResponse preferredSecurity(EnumserverInstancePreferredSecurityProp preferredSecurity) {
    
    
    
    
    this.preferredSecurity = preferredSecurity;
    return this;
  }

   /**
   * Get preferredSecurity
   * @return preferredSecurity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumserverInstancePreferredSecurityProp getPreferredSecurity() {
    return preferredSecurity;
  }


  public void setPreferredSecurity(EnumserverInstancePreferredSecurityProp preferredSecurity) {
    
    
    
    this.preferredSecurity = preferredSecurity;
  }


  public SyncServerInstanceResponse startTLSEnabled(Boolean startTLSEnabled) {
    
    
    
    
    this.startTLSEnabled = startTLSEnabled;
    return this;
  }

   /**
   * Indicates whether StartTLS is enabled on this server.
   * @return startTLSEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether StartTLS is enabled on this server.")

  public Boolean getStartTLSEnabled() {
    return startTLSEnabled;
  }


  public void setStartTLSEnabled(Boolean startTLSEnabled) {
    
    
    
    this.startTLSEnabled = startTLSEnabled;
  }


  public SyncServerInstanceResponse baseDN(List<String> baseDN) {
    
    
    
    
    this.baseDN = baseDN;
    return this;
  }

  public SyncServerInstanceResponse addBaseDNItem(String baseDNItem) {
    if (this.baseDN == null) {
      this.baseDN = new ArrayList<>();
    }
    this.baseDN.add(baseDNItem);
    return this;
  }

   /**
   * The set of base DNs under the root DSE.
   * @return baseDN
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of base DNs under the root DSE.")

  public List<String> getBaseDN() {
    return baseDN;
  }


  public void setBaseDN(List<String> baseDN) {
    
    
    
    this.baseDN = baseDN;
  }


  public SyncServerInstanceResponse memberOfServerGroup(List<String> memberOfServerGroup) {
    
    
    
    
    this.memberOfServerGroup = memberOfServerGroup;
    return this;
  }

  public SyncServerInstanceResponse addMemberOfServerGroupItem(String memberOfServerGroupItem) {
    if (this.memberOfServerGroup == null) {
      this.memberOfServerGroup = new ArrayList<>();
    }
    this.memberOfServerGroup.add(memberOfServerGroupItem);
    return this;
  }

   /**
   * The set of groups of which this server is a member.
   * @return memberOfServerGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The set of groups of which this server is a member.")

  public List<String> getMemberOfServerGroup() {
    return memberOfServerGroup;
  }


  public void setMemberOfServerGroup(List<String> memberOfServerGroup) {
    
    
    
    this.memberOfServerGroup = memberOfServerGroup;
  }


  public SyncServerInstanceResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public SyncServerInstanceResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SyncServerInstanceResponse instance itself
   */
  public SyncServerInstanceResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncServerInstanceResponse syncServerInstanceResponse = (SyncServerInstanceResponse) o;
    return Objects.equals(this.schemas, syncServerInstanceResponse.schemas) &&
        Objects.equals(this.id, syncServerInstanceResponse.id) &&
        Objects.equals(this.serverInstanceType, syncServerInstanceResponse.serverInstanceType) &&
        Objects.equals(this.serverInstanceName, syncServerInstanceResponse.serverInstanceName) &&
        Objects.equals(this.clusterName, syncServerInstanceResponse.clusterName) &&
        Objects.equals(this.serverInstanceLocation, syncServerInstanceResponse.serverInstanceLocation) &&
        Objects.equals(this.hostname, syncServerInstanceResponse.hostname) &&
        Objects.equals(this.serverRoot, syncServerInstanceResponse.serverRoot) &&
        Objects.equals(this.serverVersion, syncServerInstanceResponse.serverVersion) &&
        Objects.equals(this.interServerCertificate, syncServerInstanceResponse.interServerCertificate) &&
        Objects.equals(this.ldapPort, syncServerInstanceResponse.ldapPort) &&
        Objects.equals(this.ldapsPort, syncServerInstanceResponse.ldapsPort) &&
        Objects.equals(this.httpPort, syncServerInstanceResponse.httpPort) &&
        Objects.equals(this.httpsPort, syncServerInstanceResponse.httpsPort) &&
        Objects.equals(this.replicationPort, syncServerInstanceResponse.replicationPort) &&
        Objects.equals(this.replicationServerID, syncServerInstanceResponse.replicationServerID) &&
        Objects.equals(this.replicationDomainServerID, syncServerInstanceResponse.replicationDomainServerID) &&
        Objects.equals(this.jmxPort, syncServerInstanceResponse.jmxPort) &&
        Objects.equals(this.jmxsPort, syncServerInstanceResponse.jmxsPort) &&
        Objects.equals(this.preferredSecurity, syncServerInstanceResponse.preferredSecurity) &&
        Objects.equals(this.startTLSEnabled, syncServerInstanceResponse.startTLSEnabled) &&
        Objects.equals(this.baseDN, syncServerInstanceResponse.baseDN) &&
        Objects.equals(this.memberOfServerGroup, syncServerInstanceResponse.memberOfServerGroup) &&
        Objects.equals(this.meta, syncServerInstanceResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, syncServerInstanceResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, syncServerInstanceResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemas, id, serverInstanceType, serverInstanceName, clusterName, serverInstanceLocation, hostname, serverRoot, serverVersion, interServerCertificate, ldapPort, ldapsPort, httpPort, httpsPort, replicationPort, replicationServerID, replicationDomainServerID, jmxPort, jmxsPort, preferredSecurity, startTLSEnabled, baseDN, memberOfServerGroup, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncServerInstanceResponse {\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    serverInstanceType: ").append(toIndentedString(serverInstanceType)).append("\n");
    sb.append("    serverInstanceName: ").append(toIndentedString(serverInstanceName)).append("\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    serverInstanceLocation: ").append(toIndentedString(serverInstanceLocation)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    serverRoot: ").append(toIndentedString(serverRoot)).append("\n");
    sb.append("    serverVersion: ").append(toIndentedString(serverVersion)).append("\n");
    sb.append("    interServerCertificate: ").append(toIndentedString(interServerCertificate)).append("\n");
    sb.append("    ldapPort: ").append(toIndentedString(ldapPort)).append("\n");
    sb.append("    ldapsPort: ").append(toIndentedString(ldapsPort)).append("\n");
    sb.append("    httpPort: ").append(toIndentedString(httpPort)).append("\n");
    sb.append("    httpsPort: ").append(toIndentedString(httpsPort)).append("\n");
    sb.append("    replicationPort: ").append(toIndentedString(replicationPort)).append("\n");
    sb.append("    replicationServerID: ").append(toIndentedString(replicationServerID)).append("\n");
    sb.append("    replicationDomainServerID: ").append(toIndentedString(replicationDomainServerID)).append("\n");
    sb.append("    jmxPort: ").append(toIndentedString(jmxPort)).append("\n");
    sb.append("    jmxsPort: ").append(toIndentedString(jmxsPort)).append("\n");
    sb.append("    preferredSecurity: ").append(toIndentedString(preferredSecurity)).append("\n");
    sb.append("    startTLSEnabled: ").append(toIndentedString(startTLSEnabled)).append("\n");
    sb.append("    baseDN: ").append(toIndentedString(baseDN)).append("\n");
    sb.append("    memberOfServerGroup: ").append(toIndentedString(memberOfServerGroup)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("serverInstanceType");
    openapiFields.add("serverInstanceName");
    openapiFields.add("clusterName");
    openapiFields.add("serverInstanceLocation");
    openapiFields.add("hostname");
    openapiFields.add("serverRoot");
    openapiFields.add("serverVersion");
    openapiFields.add("interServerCertificate");
    openapiFields.add("ldapPort");
    openapiFields.add("ldapsPort");
    openapiFields.add("httpPort");
    openapiFields.add("httpsPort");
    openapiFields.add("replicationPort");
    openapiFields.add("replicationServerID");
    openapiFields.add("replicationDomainServerID");
    openapiFields.add("jmxPort");
    openapiFields.add("jmxsPort");
    openapiFields.add("preferredSecurity");
    openapiFields.add("startTLSEnabled");
    openapiFields.add("baseDN");
    openapiFields.add("memberOfServerGroup");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("serverInstanceName");
    openapiRequiredFields.add("clusterName");
    openapiRequiredFields.add("serverVersion");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SyncServerInstanceResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SyncServerInstanceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncServerInstanceResponse is not found in the empty JSON string", SyncServerInstanceResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SyncServerInstanceResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("serverInstanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverInstanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverInstanceName").toString()));
      }
      if (!jsonObj.get("clusterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterName").toString()));
      }
      if ((jsonObj.get("serverInstanceLocation") != null && !jsonObj.get("serverInstanceLocation").isJsonNull()) && !jsonObj.get("serverInstanceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverInstanceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverInstanceLocation").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("serverRoot") != null && !jsonObj.get("serverRoot").isJsonNull()) && !jsonObj.get("serverRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverRoot").toString()));
      }
      if (!jsonObj.get("serverVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverVersion").toString()));
      }
      if ((jsonObj.get("interServerCertificate") != null && !jsonObj.get("interServerCertificate").isJsonNull()) && !jsonObj.get("interServerCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interServerCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interServerCertificate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replicationDomainServerID") != null && !jsonObj.get("replicationDomainServerID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationDomainServerID` to be an array in the JSON string but got `%s`", jsonObj.get("replicationDomainServerID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("baseDN") != null && !jsonObj.get("baseDN").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseDN` to be an array in the JSON string but got `%s`", jsonObj.get("baseDN").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("memberOfServerGroup") != null && !jsonObj.get("memberOfServerGroup").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `memberOfServerGroup` to be an array in the JSON string but got `%s`", jsonObj.get("memberOfServerGroup").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncServerInstanceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncServerInstanceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncServerInstanceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncServerInstanceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncServerInstanceResponse>() {
           @Override
           public void write(JsonWriter out, SyncServerInstanceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncServerInstanceResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SyncServerInstanceResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SyncServerInstanceResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SyncServerInstanceResponse
  * @throws IOException if the JSON string is invalid with respect to SyncServerInstanceResponse
  */
  public static SyncServerInstanceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncServerInstanceResponse.class);
  }

 /**
  * Convert an instance of SyncServerInstanceResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

