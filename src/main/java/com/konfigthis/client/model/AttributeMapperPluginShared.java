/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumattributeMapperPluginSchemaUrn;
import com.konfigthis.client.model.EnumpluginPluginTypeProp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AttributeMapperPluginShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AttributeMapperPluginShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumattributeMapperPluginSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_PLUGIN_TYPE = "pluginType";
  @SerializedName(SERIALIZED_NAME_PLUGIN_TYPE)
  private List<EnumpluginPluginTypeProp> pluginType = null;

  public static final String SERIALIZED_NAME_SOURCE_ATTRIBUTE = "sourceAttribute";
  @SerializedName(SERIALIZED_NAME_SOURCE_ATTRIBUTE)
  private String sourceAttribute;

  public static final String SERIALIZED_NAME_TARGET_ATTRIBUTE = "targetAttribute";
  @SerializedName(SERIALIZED_NAME_TARGET_ATTRIBUTE)
  private String targetAttribute;

  public static final String SERIALIZED_NAME_ENABLE_CONTROL_MAPPING = "enableControlMapping";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONTROL_MAPPING)
  private Boolean enableControlMapping;

  public static final String SERIALIZED_NAME_ALWAYS_MAP_RESPONSES = "alwaysMapResponses";
  @SerializedName(SERIALIZED_NAME_ALWAYS_MAP_RESPONSES)
  private Boolean alwaysMapResponses;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS = "invokeForInternalOperations";
  @SerializedName(SERIALIZED_NAME_INVOKE_FOR_INTERNAL_OPERATIONS)
  private Boolean invokeForInternalOperations;

  public AttributeMapperPluginShared() {
  }

  public AttributeMapperPluginShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public AttributeMapperPluginShared schemas(List<EnumattributeMapperPluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public AttributeMapperPluginShared addSchemasItem(EnumattributeMapperPluginSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumattributeMapperPluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumattributeMapperPluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public AttributeMapperPluginShared pluginType(List<EnumpluginPluginTypeProp> pluginType) {
    
    
    
    
    this.pluginType = pluginType;
    return this;
  }

  public AttributeMapperPluginShared addPluginTypeItem(EnumpluginPluginTypeProp pluginTypeItem) {
    if (this.pluginType == null) {
      this.pluginType = new ArrayList<>();
    }
    this.pluginType.add(pluginTypeItem);
    return this;
  }

   /**
   * Get pluginType
   * @return pluginType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumpluginPluginTypeProp> getPluginType() {
    return pluginType;
  }


  public void setPluginType(List<EnumpluginPluginTypeProp> pluginType) {
    
    
    
    this.pluginType = pluginType;
  }


  public AttributeMapperPluginShared sourceAttribute(String sourceAttribute) {
    
    
    
    
    this.sourceAttribute = sourceAttribute;
    return this;
  }

   /**
   * Specifies the source attribute type that may appear in client requests which should be remapped to the target attribute. Note that the source attribute type must be defined in the server schema and must not be equal to the target attribute type.
   * @return sourceAttribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the source attribute type that may appear in client requests which should be remapped to the target attribute. Note that the source attribute type must be defined in the server schema and must not be equal to the target attribute type.")

  public String getSourceAttribute() {
    return sourceAttribute;
  }


  public void setSourceAttribute(String sourceAttribute) {
    
    
    
    this.sourceAttribute = sourceAttribute;
  }


  public AttributeMapperPluginShared targetAttribute(String targetAttribute) {
    
    
    
    
    this.targetAttribute = targetAttribute;
    return this;
  }

   /**
   * Specifies the target attribute type to which the source attribute type should be mapped. Note that the target attribute type must be defined in the server schema and must not be equal to the source attribute type.
   * @return targetAttribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the target attribute type to which the source attribute type should be mapped. Note that the target attribute type must be defined in the server schema and must not be equal to the source attribute type.")

  public String getTargetAttribute() {
    return targetAttribute;
  }


  public void setTargetAttribute(String targetAttribute) {
    
    
    
    this.targetAttribute = targetAttribute;
  }


  public AttributeMapperPluginShared enableControlMapping(Boolean enableControlMapping) {
    
    
    
    
    this.enableControlMapping = enableControlMapping;
    return this;
  }

   /**
   * Indicates whether mapping should be applied to attribute types that may be present in specific controls. If enabled, attribute mapping will only be applied for control types which are specifically supported by the attribute mapper plugin.
   * @return enableControlMapping
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether mapping should be applied to attribute types that may be present in specific controls. If enabled, attribute mapping will only be applied for control types which are specifically supported by the attribute mapper plugin.")

  public Boolean getEnableControlMapping() {
    return enableControlMapping;
  }


  public void setEnableControlMapping(Boolean enableControlMapping) {
    
    
    
    this.enableControlMapping = enableControlMapping;
  }


  public AttributeMapperPluginShared alwaysMapResponses(Boolean alwaysMapResponses) {
    
    
    
    
    this.alwaysMapResponses = alwaysMapResponses;
    return this;
  }

   /**
   * Indicates whether the target attribute in response messages should always be remapped back to the source attribute. If this is \&quot;false\&quot;, then the mapping will be performed for a response message only if one or more elements of the associated request are mapped. Otherwise, the mapping will be performed for all responses regardless of whether the mapping was applied to the request.
   * @return alwaysMapResponses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the target attribute in response messages should always be remapped back to the source attribute. If this is \"false\", then the mapping will be performed for a response message only if one or more elements of the associated request are mapped. Otherwise, the mapping will be performed for all responses regardless of whether the mapping was applied to the request.")

  public Boolean getAlwaysMapResponses() {
    return alwaysMapResponses;
  }


  public void setAlwaysMapResponses(Boolean alwaysMapResponses) {
    
    
    
    this.alwaysMapResponses = alwaysMapResponses;
  }


  public AttributeMapperPluginShared enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public AttributeMapperPluginShared invokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
    return this;
  }

   /**
   * Indicates whether the plug-in should be invoked for internal operations.
   * @return invokeForInternalOperations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the plug-in should be invoked for internal operations.")

  public Boolean getInvokeForInternalOperations() {
    return invokeForInternalOperations;
  }


  public void setInvokeForInternalOperations(Boolean invokeForInternalOperations) {
    
    
    
    this.invokeForInternalOperations = invokeForInternalOperations;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AttributeMapperPluginShared instance itself
   */
  public AttributeMapperPluginShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeMapperPluginShared attributeMapperPluginShared = (AttributeMapperPluginShared) o;
    return Objects.equals(this.description, attributeMapperPluginShared.description) &&
        Objects.equals(this.schemas, attributeMapperPluginShared.schemas) &&
        Objects.equals(this.pluginType, attributeMapperPluginShared.pluginType) &&
        Objects.equals(this.sourceAttribute, attributeMapperPluginShared.sourceAttribute) &&
        Objects.equals(this.targetAttribute, attributeMapperPluginShared.targetAttribute) &&
        Objects.equals(this.enableControlMapping, attributeMapperPluginShared.enableControlMapping) &&
        Objects.equals(this.alwaysMapResponses, attributeMapperPluginShared.alwaysMapResponses) &&
        Objects.equals(this.enabled, attributeMapperPluginShared.enabled) &&
        Objects.equals(this.invokeForInternalOperations, attributeMapperPluginShared.invokeForInternalOperations)&&
        Objects.equals(this.additionalProperties, attributeMapperPluginShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, pluginType, sourceAttribute, targetAttribute, enableControlMapping, alwaysMapResponses, enabled, invokeForInternalOperations, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeMapperPluginShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    pluginType: ").append(toIndentedString(pluginType)).append("\n");
    sb.append("    sourceAttribute: ").append(toIndentedString(sourceAttribute)).append("\n");
    sb.append("    targetAttribute: ").append(toIndentedString(targetAttribute)).append("\n");
    sb.append("    enableControlMapping: ").append(toIndentedString(enableControlMapping)).append("\n");
    sb.append("    alwaysMapResponses: ").append(toIndentedString(alwaysMapResponses)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    invokeForInternalOperations: ").append(toIndentedString(invokeForInternalOperations)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("pluginType");
    openapiFields.add("sourceAttribute");
    openapiFields.add("targetAttribute");
    openapiFields.add("enableControlMapping");
    openapiFields.add("alwaysMapResponses");
    openapiFields.add("enabled");
    openapiFields.add("invokeForInternalOperations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("sourceAttribute");
    openapiRequiredFields.add("targetAttribute");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AttributeMapperPluginShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AttributeMapperPluginShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeMapperPluginShared is not found in the empty JSON string", AttributeMapperPluginShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttributeMapperPluginShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pluginType") != null && !jsonObj.get("pluginType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pluginType` to be an array in the JSON string but got `%s`", jsonObj.get("pluginType").toString()));
      }
      if (!jsonObj.get("sourceAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAttribute").toString()));
      }
      if (!jsonObj.get("targetAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetAttribute").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeMapperPluginShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeMapperPluginShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeMapperPluginShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeMapperPluginShared.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeMapperPluginShared>() {
           @Override
           public void write(JsonWriter out, AttributeMapperPluginShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeMapperPluginShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AttributeMapperPluginShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AttributeMapperPluginShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AttributeMapperPluginShared
  * @throws IOException if the JSON string is invalid with respect to AttributeMapperPluginShared
  */
  public static AttributeMapperPluginShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeMapperPluginShared.class);
  }

 /**
  * Convert an instance of AttributeMapperPluginShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

