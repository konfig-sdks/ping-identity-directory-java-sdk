/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumldifExportRecurringTaskSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * LdifExportRecurringTaskShared
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LdifExportRecurringTaskShared {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumldifExportRecurringTaskSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_LDIF_DIRECTORY = "ldifDirectory";
  @SerializedName(SERIALIZED_NAME_LDIF_DIRECTORY)
  private String ldifDirectory;

  public static final String SERIALIZED_NAME_BACKEND_I_D = "backendID";
  @SerializedName(SERIALIZED_NAME_BACKEND_I_D)
  private List<String> backendID = null;

  public static final String SERIALIZED_NAME_EXCLUDE_BACKEND_I_D = "excludeBackendID";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_BACKEND_I_D)
  private List<String> excludeBackendID = null;

  public static final String SERIALIZED_NAME_COMPRESS = "compress";
  @SerializedName(SERIALIZED_NAME_COMPRESS)
  private Boolean compress;

  public static final String SERIALIZED_NAME_ENCRYPT = "encrypt";
  @SerializedName(SERIALIZED_NAME_ENCRYPT)
  private Boolean encrypt;

  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS_DEFINITION_I_D = "encryptionSettingsDefinitionID";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS_DEFINITION_I_D)
  private String encryptionSettingsDefinitionID;

  public static final String SERIALIZED_NAME_SIGN = "sign";
  @SerializedName(SERIALIZED_NAME_SIGN)
  private Boolean sign;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_L_D_I_F_EXPORT_COUNT = "retainPreviousLDIFExportCount";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_L_D_I_F_EXPORT_COUNT)
  private Integer retainPreviousLDIFExportCount;

  public static final String SERIALIZED_NAME_RETAIN_PREVIOUS_L_D_I_F_EXPORT_AGE = "retainPreviousLDIFExportAge";
  @SerializedName(SERIALIZED_NAME_RETAIN_PREVIOUS_L_D_I_F_EXPORT_AGE)
  private String retainPreviousLDIFExportAge;

  public static final String SERIALIZED_NAME_MAX_MEGABYTES_PER_SECOND = "maxMegabytesPerSecond";
  @SerializedName(SERIALIZED_NAME_MAX_MEGABYTES_PER_SECOND)
  private Integer maxMegabytesPerSecond;

  public static final String SERIALIZED_NAME_POST_L_D_I_F_EXPORT_TASK_PROCESSOR = "postLDIFExportTaskProcessor";
  @SerializedName(SERIALIZED_NAME_POST_L_D_I_F_EXPORT_TASK_PROCESSOR)
  private List<String> postLDIFExportTaskProcessor = null;

  public static final String SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE = "cancelOnTaskDependencyFailure";
  @SerializedName(SERIALIZED_NAME_CANCEL_ON_TASK_DEPENDENCY_FAILURE)
  private Boolean cancelOnTaskDependencyFailure;

  public static final String SERIALIZED_NAME_EMAIL_ON_START = "emailOnStart";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_START)
  private List<String> emailOnStart = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_SUCCESS = "emailOnSuccess";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_SUCCESS)
  private List<String> emailOnSuccess = null;

  public static final String SERIALIZED_NAME_EMAIL_ON_FAILURE = "emailOnFailure";
  @SerializedName(SERIALIZED_NAME_EMAIL_ON_FAILURE)
  private List<String> emailOnFailure = null;

  public static final String SERIALIZED_NAME_ALERT_ON_START = "alertOnStart";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_START)
  private Boolean alertOnStart;

  public static final String SERIALIZED_NAME_ALERT_ON_SUCCESS = "alertOnSuccess";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_SUCCESS)
  private Boolean alertOnSuccess;

  public static final String SERIALIZED_NAME_ALERT_ON_FAILURE = "alertOnFailure";
  @SerializedName(SERIALIZED_NAME_ALERT_ON_FAILURE)
  private Boolean alertOnFailure;

  public LdifExportRecurringTaskShared() {
  }

  public LdifExportRecurringTaskShared description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Recurring Task
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Recurring Task")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public LdifExportRecurringTaskShared schemas(List<EnumldifExportRecurringTaskSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public LdifExportRecurringTaskShared addSchemasItem(EnumldifExportRecurringTaskSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnumldifExportRecurringTaskSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumldifExportRecurringTaskSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public LdifExportRecurringTaskShared ldifDirectory(String ldifDirectory) {
    
    
    
    
    this.ldifDirectory = ldifDirectory;
    return this;
  }

   /**
   * The directory in which LDIF export files will be placed. The directory must already exist.
   * @return ldifDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The directory in which LDIF export files will be placed. The directory must already exist.")

  public String getLdifDirectory() {
    return ldifDirectory;
  }


  public void setLdifDirectory(String ldifDirectory) {
    
    
    
    this.ldifDirectory = ldifDirectory;
  }


  public LdifExportRecurringTaskShared backendID(List<String> backendID) {
    
    
    
    
    this.backendID = backendID;
    return this;
  }

  public LdifExportRecurringTaskShared addBackendIDItem(String backendIDItem) {
    if (this.backendID == null) {
      this.backendID = new ArrayList<>();
    }
    this.backendID.add(backendIDItem);
    return this;
  }

   /**
   * The backend ID for a backend to be exported.
   * @return backendID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The backend ID for a backend to be exported.")

  public List<String> getBackendID() {
    return backendID;
  }


  public void setBackendID(List<String> backendID) {
    
    
    
    this.backendID = backendID;
  }


  public LdifExportRecurringTaskShared excludeBackendID(List<String> excludeBackendID) {
    
    
    
    
    this.excludeBackendID = excludeBackendID;
    return this;
  }

  public LdifExportRecurringTaskShared addExcludeBackendIDItem(String excludeBackendIDItem) {
    if (this.excludeBackendID == null) {
      this.excludeBackendID = new ArrayList<>();
    }
    this.excludeBackendID.add(excludeBackendIDItem);
    return this;
  }

   /**
   * The backend ID for a backend to be excluded from the export.
   * @return excludeBackendID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The backend ID for a backend to be excluded from the export.")

  public List<String> getExcludeBackendID() {
    return excludeBackendID;
  }


  public void setExcludeBackendID(List<String> excludeBackendID) {
    
    
    
    this.excludeBackendID = excludeBackendID;
  }


  public LdifExportRecurringTaskShared compress(Boolean compress) {
    
    
    
    
    this.compress = compress;
    return this;
  }

   /**
   * Indicates whether to compress the LDIF data as it is exported.
   * @return compress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to compress the LDIF data as it is exported.")

  public Boolean getCompress() {
    return compress;
  }


  public void setCompress(Boolean compress) {
    
    
    
    this.compress = compress;
  }


  public LdifExportRecurringTaskShared encrypt(Boolean encrypt) {
    
    
    
    
    this.encrypt = encrypt;
    return this;
  }

   /**
   * Indicates whether to encrypt the LDIF data as it exported.
   * @return encrypt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to encrypt the LDIF data as it exported.")

  public Boolean getEncrypt() {
    return encrypt;
  }


  public void setEncrypt(Boolean encrypt) {
    
    
    
    this.encrypt = encrypt;
  }


  public LdifExportRecurringTaskShared encryptionSettingsDefinitionID(String encryptionSettingsDefinitionID) {
    
    
    
    
    this.encryptionSettingsDefinitionID = encryptionSettingsDefinitionID;
    return this;
  }

   /**
   * The ID of an encryption settings definition to use to obtain the LDIF export encryption key.
   * @return encryptionSettingsDefinitionID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of an encryption settings definition to use to obtain the LDIF export encryption key.")

  public String getEncryptionSettingsDefinitionID() {
    return encryptionSettingsDefinitionID;
  }


  public void setEncryptionSettingsDefinitionID(String encryptionSettingsDefinitionID) {
    
    
    
    this.encryptionSettingsDefinitionID = encryptionSettingsDefinitionID;
  }


  public LdifExportRecurringTaskShared sign(Boolean sign) {
    
    
    
    
    this.sign = sign;
    return this;
  }

   /**
   * Indicates whether to cryptographically sign the exported data, which will make it possible to detect whether the LDIF data has been altered since it was exported.
   * @return sign
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether to cryptographically sign the exported data, which will make it possible to detect whether the LDIF data has been altered since it was exported.")

  public Boolean getSign() {
    return sign;
  }


  public void setSign(Boolean sign) {
    
    
    
    this.sign = sign;
  }


  public LdifExportRecurringTaskShared retainPreviousLDIFExportCount(Integer retainPreviousLDIFExportCount) {
    
    
    
    
    this.retainPreviousLDIFExportCount = retainPreviousLDIFExportCount;
    return this;
  }

   /**
   * The minimum number of previous LDIF exports that should be preserved after a new export completes successfully.
   * @return retainPreviousLDIFExportCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum number of previous LDIF exports that should be preserved after a new export completes successfully.")

  public Integer getRetainPreviousLDIFExportCount() {
    return retainPreviousLDIFExportCount;
  }


  public void setRetainPreviousLDIFExportCount(Integer retainPreviousLDIFExportCount) {
    
    
    
    this.retainPreviousLDIFExportCount = retainPreviousLDIFExportCount;
  }


  public LdifExportRecurringTaskShared retainPreviousLDIFExportAge(String retainPreviousLDIFExportAge) {
    
    
    
    
    this.retainPreviousLDIFExportAge = retainPreviousLDIFExportAge;
    return this;
  }

   /**
   * The minimum age of previous LDIF exports that should be preserved after a new export completes successfully.
   * @return retainPreviousLDIFExportAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The minimum age of previous LDIF exports that should be preserved after a new export completes successfully.")

  public String getRetainPreviousLDIFExportAge() {
    return retainPreviousLDIFExportAge;
  }


  public void setRetainPreviousLDIFExportAge(String retainPreviousLDIFExportAge) {
    
    
    
    this.retainPreviousLDIFExportAge = retainPreviousLDIFExportAge;
  }


  public LdifExportRecurringTaskShared maxMegabytesPerSecond(Integer maxMegabytesPerSecond) {
    
    
    
    
    this.maxMegabytesPerSecond = maxMegabytesPerSecond;
    return this;
  }

   /**
   * The maximum rate, in megabytes per second, at which LDIF exports should be written.
   * @return maxMegabytesPerSecond
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum rate, in megabytes per second, at which LDIF exports should be written.")

  public Integer getMaxMegabytesPerSecond() {
    return maxMegabytesPerSecond;
  }


  public void setMaxMegabytesPerSecond(Integer maxMegabytesPerSecond) {
    
    
    
    this.maxMegabytesPerSecond = maxMegabytesPerSecond;
  }


  public LdifExportRecurringTaskShared postLDIFExportTaskProcessor(List<String> postLDIFExportTaskProcessor) {
    
    
    
    
    this.postLDIFExportTaskProcessor = postLDIFExportTaskProcessor;
    return this;
  }

  public LdifExportRecurringTaskShared addPostLDIFExportTaskProcessorItem(String postLDIFExportTaskProcessorItem) {
    if (this.postLDIFExportTaskProcessor == null) {
      this.postLDIFExportTaskProcessor = new ArrayList<>();
    }
    this.postLDIFExportTaskProcessor.add(postLDIFExportTaskProcessorItem);
    return this;
  }

   /**
   * An optional set of post-LDIF-export task processors that should be invoked for the resulting LDIF export files.
   * @return postLDIFExportTaskProcessor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional set of post-LDIF-export task processors that should be invoked for the resulting LDIF export files.")

  public List<String> getPostLDIFExportTaskProcessor() {
    return postLDIFExportTaskProcessor;
  }


  public void setPostLDIFExportTaskProcessor(List<String> postLDIFExportTaskProcessor) {
    
    
    
    this.postLDIFExportTaskProcessor = postLDIFExportTaskProcessor;
  }


  public LdifExportRecurringTaskShared cancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
    return this;
  }

   /**
   * Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).
   * @return cancelOnTaskDependencyFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether an instance of this Recurring Task should be canceled if the task immediately before it in the recurring task chain fails to complete successfully (including if it is canceled by an administrator before it starts or while it is running).")

  public Boolean getCancelOnTaskDependencyFailure() {
    return cancelOnTaskDependencyFailure;
  }


  public void setCancelOnTaskDependencyFailure(Boolean cancelOnTaskDependencyFailure) {
    
    
    
    this.cancelOnTaskDependencyFailure = cancelOnTaskDependencyFailure;
  }


  public LdifExportRecurringTaskShared emailOnStart(List<String> emailOnStart) {
    
    
    
    
    this.emailOnStart = emailOnStart;
    return this;
  }

  public LdifExportRecurringTaskShared addEmailOnStartItem(String emailOnStartItem) {
    if (this.emailOnStart == null) {
      this.emailOnStart = new ArrayList<>();
    }
    this.emailOnStart.add(emailOnStartItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task starts running. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnStart() {
    return emailOnStart;
  }


  public void setEmailOnStart(List<String> emailOnStart) {
    
    
    
    this.emailOnStart = emailOnStart;
  }


  public LdifExportRecurringTaskShared emailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    
    this.emailOnSuccess = emailOnSuccess;
    return this;
  }

  public LdifExportRecurringTaskShared addEmailOnSuccessItem(String emailOnSuccessItem) {
    if (this.emailOnSuccess == null) {
      this.emailOnSuccess = new ArrayList<>();
    }
    this.emailOnSuccess.add(emailOnSuccessItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent whenever an instance of this Recurring Task completes successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnSuccess() {
    return emailOnSuccess;
  }


  public void setEmailOnSuccess(List<String> emailOnSuccess) {
    
    
    
    this.emailOnSuccess = emailOnSuccess;
  }


  public LdifExportRecurringTaskShared emailOnFailure(List<String> emailOnFailure) {
    
    
    
    
    this.emailOnFailure = emailOnFailure;
    return this;
  }

  public LdifExportRecurringTaskShared addEmailOnFailureItem(String emailOnFailureItem) {
    if (this.emailOnFailure == null) {
      this.emailOnFailure = new ArrayList<>();
    }
    this.emailOnFailure.add(emailOnFailureItem);
    return this;
  }

   /**
   * The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.
   * @return emailOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email addresses to which a message should be sent if an instance of this Recurring Task fails to complete successfully. If this option is used, then at least one smtp-server must be configured in the global configuration.")

  public List<String> getEmailOnFailure() {
    return emailOnFailure;
  }


  public void setEmailOnFailure(List<String> emailOnFailure) {
    
    
    
    this.emailOnFailure = emailOnFailure;
  }


  public LdifExportRecurringTaskShared alertOnStart(Boolean alertOnStart) {
    
    
    
    
    this.alertOnStart = alertOnStart;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.
   * @return alertOnStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task starts running.")

  public Boolean getAlertOnStart() {
    return alertOnStart;
  }


  public void setAlertOnStart(Boolean alertOnStart) {
    
    
    
    this.alertOnStart = alertOnStart;
  }


  public LdifExportRecurringTaskShared alertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    
    this.alertOnSuccess = alertOnSuccess;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.
   * @return alertOnSuccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task completes successfully.")

  public Boolean getAlertOnSuccess() {
    return alertOnSuccess;
  }


  public void setAlertOnSuccess(Boolean alertOnSuccess) {
    
    
    
    this.alertOnSuccess = alertOnSuccess;
  }


  public LdifExportRecurringTaskShared alertOnFailure(Boolean alertOnFailure) {
    
    
    
    
    this.alertOnFailure = alertOnFailure;
    return this;
  }

   /**
   * Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.
   * @return alertOnFailure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the server should generate an administrative alert whenever an instance of this Recurring Task fails to complete successfully.")

  public Boolean getAlertOnFailure() {
    return alertOnFailure;
  }


  public void setAlertOnFailure(Boolean alertOnFailure) {
    
    
    
    this.alertOnFailure = alertOnFailure;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LdifExportRecurringTaskShared instance itself
   */
  public LdifExportRecurringTaskShared putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LdifExportRecurringTaskShared ldifExportRecurringTaskShared = (LdifExportRecurringTaskShared) o;
    return Objects.equals(this.description, ldifExportRecurringTaskShared.description) &&
        Objects.equals(this.schemas, ldifExportRecurringTaskShared.schemas) &&
        Objects.equals(this.ldifDirectory, ldifExportRecurringTaskShared.ldifDirectory) &&
        Objects.equals(this.backendID, ldifExportRecurringTaskShared.backendID) &&
        Objects.equals(this.excludeBackendID, ldifExportRecurringTaskShared.excludeBackendID) &&
        Objects.equals(this.compress, ldifExportRecurringTaskShared.compress) &&
        Objects.equals(this.encrypt, ldifExportRecurringTaskShared.encrypt) &&
        Objects.equals(this.encryptionSettingsDefinitionID, ldifExportRecurringTaskShared.encryptionSettingsDefinitionID) &&
        Objects.equals(this.sign, ldifExportRecurringTaskShared.sign) &&
        Objects.equals(this.retainPreviousLDIFExportCount, ldifExportRecurringTaskShared.retainPreviousLDIFExportCount) &&
        Objects.equals(this.retainPreviousLDIFExportAge, ldifExportRecurringTaskShared.retainPreviousLDIFExportAge) &&
        Objects.equals(this.maxMegabytesPerSecond, ldifExportRecurringTaskShared.maxMegabytesPerSecond) &&
        Objects.equals(this.postLDIFExportTaskProcessor, ldifExportRecurringTaskShared.postLDIFExportTaskProcessor) &&
        Objects.equals(this.cancelOnTaskDependencyFailure, ldifExportRecurringTaskShared.cancelOnTaskDependencyFailure) &&
        Objects.equals(this.emailOnStart, ldifExportRecurringTaskShared.emailOnStart) &&
        Objects.equals(this.emailOnSuccess, ldifExportRecurringTaskShared.emailOnSuccess) &&
        Objects.equals(this.emailOnFailure, ldifExportRecurringTaskShared.emailOnFailure) &&
        Objects.equals(this.alertOnStart, ldifExportRecurringTaskShared.alertOnStart) &&
        Objects.equals(this.alertOnSuccess, ldifExportRecurringTaskShared.alertOnSuccess) &&
        Objects.equals(this.alertOnFailure, ldifExportRecurringTaskShared.alertOnFailure)&&
        Objects.equals(this.additionalProperties, ldifExportRecurringTaskShared.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, ldifDirectory, backendID, excludeBackendID, compress, encrypt, encryptionSettingsDefinitionID, sign, retainPreviousLDIFExportCount, retainPreviousLDIFExportAge, maxMegabytesPerSecond, postLDIFExportTaskProcessor, cancelOnTaskDependencyFailure, emailOnStart, emailOnSuccess, emailOnFailure, alertOnStart, alertOnSuccess, alertOnFailure, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LdifExportRecurringTaskShared {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    ldifDirectory: ").append(toIndentedString(ldifDirectory)).append("\n");
    sb.append("    backendID: ").append(toIndentedString(backendID)).append("\n");
    sb.append("    excludeBackendID: ").append(toIndentedString(excludeBackendID)).append("\n");
    sb.append("    compress: ").append(toIndentedString(compress)).append("\n");
    sb.append("    encrypt: ").append(toIndentedString(encrypt)).append("\n");
    sb.append("    encryptionSettingsDefinitionID: ").append(toIndentedString(encryptionSettingsDefinitionID)).append("\n");
    sb.append("    sign: ").append(toIndentedString(sign)).append("\n");
    sb.append("    retainPreviousLDIFExportCount: ").append(toIndentedString(retainPreviousLDIFExportCount)).append("\n");
    sb.append("    retainPreviousLDIFExportAge: ").append(toIndentedString(retainPreviousLDIFExportAge)).append("\n");
    sb.append("    maxMegabytesPerSecond: ").append(toIndentedString(maxMegabytesPerSecond)).append("\n");
    sb.append("    postLDIFExportTaskProcessor: ").append(toIndentedString(postLDIFExportTaskProcessor)).append("\n");
    sb.append("    cancelOnTaskDependencyFailure: ").append(toIndentedString(cancelOnTaskDependencyFailure)).append("\n");
    sb.append("    emailOnStart: ").append(toIndentedString(emailOnStart)).append("\n");
    sb.append("    emailOnSuccess: ").append(toIndentedString(emailOnSuccess)).append("\n");
    sb.append("    emailOnFailure: ").append(toIndentedString(emailOnFailure)).append("\n");
    sb.append("    alertOnStart: ").append(toIndentedString(alertOnStart)).append("\n");
    sb.append("    alertOnSuccess: ").append(toIndentedString(alertOnSuccess)).append("\n");
    sb.append("    alertOnFailure: ").append(toIndentedString(alertOnFailure)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("ldifDirectory");
    openapiFields.add("backendID");
    openapiFields.add("excludeBackendID");
    openapiFields.add("compress");
    openapiFields.add("encrypt");
    openapiFields.add("encryptionSettingsDefinitionID");
    openapiFields.add("sign");
    openapiFields.add("retainPreviousLDIFExportCount");
    openapiFields.add("retainPreviousLDIFExportAge");
    openapiFields.add("maxMegabytesPerSecond");
    openapiFields.add("postLDIFExportTaskProcessor");
    openapiFields.add("cancelOnTaskDependencyFailure");
    openapiFields.add("emailOnStart");
    openapiFields.add("emailOnSuccess");
    openapiFields.add("emailOnFailure");
    openapiFields.add("alertOnStart");
    openapiFields.add("alertOnSuccess");
    openapiFields.add("alertOnFailure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LdifExportRecurringTaskShared
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LdifExportRecurringTaskShared.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LdifExportRecurringTaskShared is not found in the empty JSON string", LdifExportRecurringTaskShared.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LdifExportRecurringTaskShared.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("ldifDirectory") != null && !jsonObj.get("ldifDirectory").isJsonNull()) && !jsonObj.get("ldifDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldifDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldifDirectory").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("backendID") != null && !jsonObj.get("backendID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendID` to be an array in the JSON string but got `%s`", jsonObj.get("backendID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludeBackendID") != null && !jsonObj.get("excludeBackendID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludeBackendID` to be an array in the JSON string but got `%s`", jsonObj.get("excludeBackendID").toString()));
      }
      if ((jsonObj.get("encryptionSettingsDefinitionID") != null && !jsonObj.get("encryptionSettingsDefinitionID").isJsonNull()) && !jsonObj.get("encryptionSettingsDefinitionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionSettingsDefinitionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionSettingsDefinitionID").toString()));
      }
      if ((jsonObj.get("retainPreviousLDIFExportAge") != null && !jsonObj.get("retainPreviousLDIFExportAge").isJsonNull()) && !jsonObj.get("retainPreviousLDIFExportAge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retainPreviousLDIFExportAge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retainPreviousLDIFExportAge").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("postLDIFExportTaskProcessor") != null && !jsonObj.get("postLDIFExportTaskProcessor").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `postLDIFExportTaskProcessor` to be an array in the JSON string but got `%s`", jsonObj.get("postLDIFExportTaskProcessor").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnStart") != null && !jsonObj.get("emailOnStart").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnStart` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnStart").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnSuccess") != null && !jsonObj.get("emailOnSuccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnSuccess` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnSuccess").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailOnFailure") != null && !jsonObj.get("emailOnFailure").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailOnFailure` to be an array in the JSON string but got `%s`", jsonObj.get("emailOnFailure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LdifExportRecurringTaskShared.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LdifExportRecurringTaskShared' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LdifExportRecurringTaskShared> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LdifExportRecurringTaskShared.class));

       return (TypeAdapter<T>) new TypeAdapter<LdifExportRecurringTaskShared>() {
           @Override
           public void write(JsonWriter out, LdifExportRecurringTaskShared value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LdifExportRecurringTaskShared read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LdifExportRecurringTaskShared instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LdifExportRecurringTaskShared given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LdifExportRecurringTaskShared
  * @throws IOException if the JSON string is invalid with respect to LdifExportRecurringTaskShared
  */
  public static LdifExportRecurringTaskShared fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LdifExportRecurringTaskShared.class);
  }

 /**
  * Convert an instance of LdifExportRecurringTaskShared to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

