/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumexternalServerScim2HostnameVerificationMethodProp;
import com.konfigthis.client.model.Enumscim2ExternalServerSchemaUrn;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Scim2ExternalServerResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Scim2ExternalServerResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<Enumscim2ExternalServerSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SCIM_SERVICE_U_R_L = "scimServiceURL";
  @SerializedName(SERIALIZED_NAME_SCIM_SERVICE_U_R_L)
  private String scimServiceURL;

  public static final String SERIALIZED_NAME_HTTP_PROXY_EXTERNAL_SERVER = "httpProxyExternalServer";
  @SerializedName(SERIALIZED_NAME_HTTP_PROXY_EXTERNAL_SERVER)
  private String httpProxyExternalServer;

  public static final String SERIALIZED_NAME_KEY_MANAGER_PROVIDER = "keyManagerProvider";
  @SerializedName(SERIALIZED_NAME_KEY_MANAGER_PROVIDER)
  private String keyManagerProvider;

  public static final String SERIALIZED_NAME_TRUST_MANAGER_PROVIDER = "trustManagerProvider";
  @SerializedName(SERIALIZED_NAME_TRUST_MANAGER_PROVIDER)
  private String trustManagerProvider;

  public static final String SERIALIZED_NAME_SSL_CERT_NICKNAME = "sslCertNickname";
  @SerializedName(SERIALIZED_NAME_SSL_CERT_NICKNAME)
  private String sslCertNickname;

  public static final String SERIALIZED_NAME_HOSTNAME_VERIFICATION_METHOD = "hostnameVerificationMethod";
  @SerializedName(SERIALIZED_NAME_HOSTNAME_VERIFICATION_METHOD)
  private EnumexternalServerScim2HostnameVerificationMethodProp hostnameVerificationMethod;

  public static final String SERIALIZED_NAME_HTTP_AUTHORIZATION_METHOD = "httpAuthorizationMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_AUTHORIZATION_METHOD)
  private String httpAuthorizationMethod;

  public static final String SERIALIZED_NAME_RESPONSE_TIMEOUT = "responseTimeout";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIMEOUT)
  private String responseTimeout;

  public static final String SERIALIZED_NAME_CLIENT_RECONNECT_INTERVAL = "clientReconnectInterval";
  @SerializedName(SERIALIZED_NAME_CLIENT_RECONNECT_INTERVAL)
  private String clientReconnectInterval;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public Scim2ExternalServerResponse() {
  }

  public Scim2ExternalServerResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this External Server
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this External Server")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Scim2ExternalServerResponse schemas(List<Enumscim2ExternalServerSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public Scim2ExternalServerResponse addSchemasItem(Enumscim2ExternalServerSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Enumscim2ExternalServerSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<Enumscim2ExternalServerSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public Scim2ExternalServerResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the External Server
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the External Server")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Scim2ExternalServerResponse scimServiceURL(String scimServiceURL) {
    
    
    
    
    this.scimServiceURL = scimServiceURL;
    return this;
  }

   /**
   * The base URL for the SCIMv2 service. It must include the hostname, port, and base path to use to make SCIMv2 calls.
   * @return scimServiceURL
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The base URL for the SCIMv2 service. It must include the hostname, port, and base path to use to make SCIMv2 calls.")

  public String getScimServiceURL() {
    return scimServiceURL;
  }


  public void setScimServiceURL(String scimServiceURL) {
    
    
    
    this.scimServiceURL = scimServiceURL;
  }


  public Scim2ExternalServerResponse httpProxyExternalServer(String httpProxyExternalServer) {
    
    
    
    
    this.httpProxyExternalServer = httpProxyExternalServer;
    return this;
  }

   /**
   * A reference to an HTTP proxy server that should be used for requests sent to the SCIMv2 service.
   * @return httpProxyExternalServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to an HTTP proxy server that should be used for requests sent to the SCIMv2 service.")

  public String getHttpProxyExternalServer() {
    return httpProxyExternalServer;
  }


  public void setHttpProxyExternalServer(String httpProxyExternalServer) {
    
    
    
    this.httpProxyExternalServer = httpProxyExternalServer;
  }


  public Scim2ExternalServerResponse keyManagerProvider(String keyManagerProvider) {
    
    
    
    
    this.keyManagerProvider = keyManagerProvider;
    return this;
  }

   /**
   * The key manager provider to use if it is necessary to present a client certificate to the SCIMv2 server.
   * @return keyManagerProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The key manager provider to use if it is necessary to present a client certificate to the SCIMv2 server.")

  public String getKeyManagerProvider() {
    return keyManagerProvider;
  }


  public void setKeyManagerProvider(String keyManagerProvider) {
    
    
    
    this.keyManagerProvider = keyManagerProvider;
  }


  public Scim2ExternalServerResponse trustManagerProvider(String trustManagerProvider) {
    
    
    
    
    this.trustManagerProvider = trustManagerProvider;
    return this;
  }

   /**
   * The trust manager provider to use to determine whether to trust the certificate presented by the SCIMv2 server during TLS negotiation.
   * @return trustManagerProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The trust manager provider to use to determine whether to trust the certificate presented by the SCIMv2 server during TLS negotiation.")

  public String getTrustManagerProvider() {
    return trustManagerProvider;
  }


  public void setTrustManagerProvider(String trustManagerProvider) {
    
    
    
    this.trustManagerProvider = trustManagerProvider;
  }


  public Scim2ExternalServerResponse sslCertNickname(String sslCertNickname) {
    
    
    
    
    this.sslCertNickname = sslCertNickname;
    return this;
  }

   /**
   * The nickname (alias) of the entry in the associated key store that holds the client certificate chain to present to the SCIMv2 server during TLS negotiation.
   * @return sslCertNickname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The nickname (alias) of the entry in the associated key store that holds the client certificate chain to present to the SCIMv2 server during TLS negotiation.")

  public String getSslCertNickname() {
    return sslCertNickname;
  }


  public void setSslCertNickname(String sslCertNickname) {
    
    
    
    this.sslCertNickname = sslCertNickname;
  }


  public Scim2ExternalServerResponse hostnameVerificationMethod(EnumexternalServerScim2HostnameVerificationMethodProp hostnameVerificationMethod) {
    
    
    
    
    this.hostnameVerificationMethod = hostnameVerificationMethod;
    return this;
  }

   /**
   * Get hostnameVerificationMethod
   * @return hostnameVerificationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumexternalServerScim2HostnameVerificationMethodProp getHostnameVerificationMethod() {
    return hostnameVerificationMethod;
  }


  public void setHostnameVerificationMethod(EnumexternalServerScim2HostnameVerificationMethodProp hostnameVerificationMethod) {
    
    
    
    this.hostnameVerificationMethod = hostnameVerificationMethod;
  }


  public Scim2ExternalServerResponse httpAuthorizationMethod(String httpAuthorizationMethod) {
    
    
    
    
    this.httpAuthorizationMethod = httpAuthorizationMethod;
    return this;
  }

   /**
   * The method to use to authorize requests sent to the SCIMv2 server.
   * @return httpAuthorizationMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The method to use to authorize requests sent to the SCIMv2 server.")

  public String getHttpAuthorizationMethod() {
    return httpAuthorizationMethod;
  }


  public void setHttpAuthorizationMethod(String httpAuthorizationMethod) {
    
    
    
    this.httpAuthorizationMethod = httpAuthorizationMethod;
  }


  public Scim2ExternalServerResponse responseTimeout(String responseTimeout) {
    
    
    
    
    this.responseTimeout = responseTimeout;
    return this;
  }

   /**
   * The maximum length of time to wait for a response from the SCIMv2 server when processing operations.
   * @return responseTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum length of time to wait for a response from the SCIMv2 server when processing operations.")

  public String getResponseTimeout() {
    return responseTimeout;
  }


  public void setResponseTimeout(String responseTimeout) {
    
    
    
    this.responseTimeout = responseTimeout;
  }


  public Scim2ExternalServerResponse clientReconnectInterval(String clientReconnectInterval) {
    
    
    
    
    this.clientReconnectInterval = clientReconnectInterval;
    return this;
  }

   /**
   * The maximum length of time that a client instance should remain active before being recreated.
   * @return clientReconnectInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The maximum length of time that a client instance should remain active before being recreated.")

  public String getClientReconnectInterval() {
    return clientReconnectInterval;
  }


  public void setClientReconnectInterval(String clientReconnectInterval) {
    
    
    
    this.clientReconnectInterval = clientReconnectInterval;
  }


  public Scim2ExternalServerResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public Scim2ExternalServerResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Scim2ExternalServerResponse instance itself
   */
  public Scim2ExternalServerResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scim2ExternalServerResponse scim2ExternalServerResponse = (Scim2ExternalServerResponse) o;
    return Objects.equals(this.description, scim2ExternalServerResponse.description) &&
        Objects.equals(this.schemas, scim2ExternalServerResponse.schemas) &&
        Objects.equals(this.id, scim2ExternalServerResponse.id) &&
        Objects.equals(this.scimServiceURL, scim2ExternalServerResponse.scimServiceURL) &&
        Objects.equals(this.httpProxyExternalServer, scim2ExternalServerResponse.httpProxyExternalServer) &&
        Objects.equals(this.keyManagerProvider, scim2ExternalServerResponse.keyManagerProvider) &&
        Objects.equals(this.trustManagerProvider, scim2ExternalServerResponse.trustManagerProvider) &&
        Objects.equals(this.sslCertNickname, scim2ExternalServerResponse.sslCertNickname) &&
        Objects.equals(this.hostnameVerificationMethod, scim2ExternalServerResponse.hostnameVerificationMethod) &&
        Objects.equals(this.httpAuthorizationMethod, scim2ExternalServerResponse.httpAuthorizationMethod) &&
        Objects.equals(this.responseTimeout, scim2ExternalServerResponse.responseTimeout) &&
        Objects.equals(this.clientReconnectInterval, scim2ExternalServerResponse.clientReconnectInterval) &&
        Objects.equals(this.meta, scim2ExternalServerResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, scim2ExternalServerResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, scim2ExternalServerResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, scimServiceURL, httpProxyExternalServer, keyManagerProvider, trustManagerProvider, sslCertNickname, hostnameVerificationMethod, httpAuthorizationMethod, responseTimeout, clientReconnectInterval, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scim2ExternalServerResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    scimServiceURL: ").append(toIndentedString(scimServiceURL)).append("\n");
    sb.append("    httpProxyExternalServer: ").append(toIndentedString(httpProxyExternalServer)).append("\n");
    sb.append("    keyManagerProvider: ").append(toIndentedString(keyManagerProvider)).append("\n");
    sb.append("    trustManagerProvider: ").append(toIndentedString(trustManagerProvider)).append("\n");
    sb.append("    sslCertNickname: ").append(toIndentedString(sslCertNickname)).append("\n");
    sb.append("    hostnameVerificationMethod: ").append(toIndentedString(hostnameVerificationMethod)).append("\n");
    sb.append("    httpAuthorizationMethod: ").append(toIndentedString(httpAuthorizationMethod)).append("\n");
    sb.append("    responseTimeout: ").append(toIndentedString(responseTimeout)).append("\n");
    sb.append("    clientReconnectInterval: ").append(toIndentedString(clientReconnectInterval)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("scimServiceURL");
    openapiFields.add("httpProxyExternalServer");
    openapiFields.add("keyManagerProvider");
    openapiFields.add("trustManagerProvider");
    openapiFields.add("sslCertNickname");
    openapiFields.add("hostnameVerificationMethod");
    openapiFields.add("httpAuthorizationMethod");
    openapiFields.add("responseTimeout");
    openapiFields.add("clientReconnectInterval");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("scimServiceURL");
    openapiRequiredFields.add("httpAuthorizationMethod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Scim2ExternalServerResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Scim2ExternalServerResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Scim2ExternalServerResponse is not found in the empty JSON string", Scim2ExternalServerResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Scim2ExternalServerResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("scimServiceURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scimServiceURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scimServiceURL").toString()));
      }
      if ((jsonObj.get("httpProxyExternalServer") != null && !jsonObj.get("httpProxyExternalServer").isJsonNull()) && !jsonObj.get("httpProxyExternalServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpProxyExternalServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpProxyExternalServer").toString()));
      }
      if ((jsonObj.get("keyManagerProvider") != null && !jsonObj.get("keyManagerProvider").isJsonNull()) && !jsonObj.get("keyManagerProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyManagerProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyManagerProvider").toString()));
      }
      if ((jsonObj.get("trustManagerProvider") != null && !jsonObj.get("trustManagerProvider").isJsonNull()) && !jsonObj.get("trustManagerProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustManagerProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustManagerProvider").toString()));
      }
      if ((jsonObj.get("sslCertNickname") != null && !jsonObj.get("sslCertNickname").isJsonNull()) && !jsonObj.get("sslCertNickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslCertNickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslCertNickname").toString()));
      }
      if (!jsonObj.get("httpAuthorizationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpAuthorizationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpAuthorizationMethod").toString()));
      }
      if ((jsonObj.get("responseTimeout") != null && !jsonObj.get("responseTimeout").isJsonNull()) && !jsonObj.get("responseTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseTimeout").toString()));
      }
      if ((jsonObj.get("clientReconnectInterval") != null && !jsonObj.get("clientReconnectInterval").isJsonNull()) && !jsonObj.get("clientReconnectInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientReconnectInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientReconnectInterval").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Scim2ExternalServerResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Scim2ExternalServerResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Scim2ExternalServerResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Scim2ExternalServerResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Scim2ExternalServerResponse>() {
           @Override
           public void write(JsonWriter out, Scim2ExternalServerResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Scim2ExternalServerResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Scim2ExternalServerResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Scim2ExternalServerResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Scim2ExternalServerResponse
  * @throws IOException if the JSON string is invalid with respect to Scim2ExternalServerResponse
  */
  public static Scim2ExternalServerResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Scim2ExternalServerResponse.class);
  }

 /**
  * Convert an instance of Scim2ExternalServerResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

