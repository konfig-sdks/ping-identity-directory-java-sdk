/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumhostSystemMonitorProviderSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * HostSystemMonitorProviderResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class HostSystemMonitorProviderResponseAllOf {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumhostSystemMonitorProviderSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_DISK_DEVICES = "diskDevices";
  @SerializedName(SERIALIZED_NAME_DISK_DEVICES)
  private List<String> diskDevices = null;

  public static final String SERIALIZED_NAME_NETWORK_DEVICES = "networkDevices";
  @SerializedName(SERIALIZED_NAME_NETWORK_DEVICES)
  private List<String> networkDevices = null;

  public static final String SERIALIZED_NAME_SYSTEM_UTILIZATION_MONITOR_LOG_DIRECTORY = "systemUtilizationMonitorLogDirectory";
  @SerializedName(SERIALIZED_NAME_SYSTEM_UTILIZATION_MONITOR_LOG_DIRECTORY)
  private String systemUtilizationMonitorLogDirectory;

  public HostSystemMonitorProviderResponseAllOf() {
  }

  public HostSystemMonitorProviderResponseAllOf description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Monitor Provider
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Monitor Provider")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public HostSystemMonitorProviderResponseAllOf schemas(List<EnumhostSystemMonitorProviderSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public HostSystemMonitorProviderResponseAllOf addSchemasItem(EnumhostSystemMonitorProviderSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumhostSystemMonitorProviderSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumhostSystemMonitorProviderSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public HostSystemMonitorProviderResponseAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Monitor Provider
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the Monitor Provider")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public HostSystemMonitorProviderResponseAllOf enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the Host System Monitor Provider is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the Host System Monitor Provider is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public HostSystemMonitorProviderResponseAllOf diskDevices(List<String> diskDevices) {
    
    
    
    
    this.diskDevices = diskDevices;
    return this;
  }

  public HostSystemMonitorProviderResponseAllOf addDiskDevicesItem(String diskDevicesItem) {
    if (this.diskDevices == null) {
      this.diskDevices = new ArrayList<>();
    }
    this.diskDevices.add(diskDevicesItem);
    return this;
  }

   /**
   * Specifies which disk devices to monitor for I/O activity. Should be the device name as displayed by iostat -d.
   * @return diskDevices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies which disk devices to monitor for I/O activity. Should be the device name as displayed by iostat -d.")

  public List<String> getDiskDevices() {
    return diskDevices;
  }


  public void setDiskDevices(List<String> diskDevices) {
    
    
    
    this.diskDevices = diskDevices;
  }


  public HostSystemMonitorProviderResponseAllOf networkDevices(List<String> networkDevices) {
    
    
    
    
    this.networkDevices = networkDevices;
    return this;
  }

  public HostSystemMonitorProviderResponseAllOf addNetworkDevicesItem(String networkDevicesItem) {
    if (this.networkDevices == null) {
      this.networkDevices = new ArrayList<>();
    }
    this.networkDevices.add(networkDevicesItem);
    return this;
  }

   /**
   * Specifies which network interfaces to monitor for I/O activity. Should be the device name as displayed by netstat -i.
   * @return networkDevices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies which network interfaces to monitor for I/O activity. Should be the device name as displayed by netstat -i.")

  public List<String> getNetworkDevices() {
    return networkDevices;
  }


  public void setNetworkDevices(List<String> networkDevices) {
    
    
    
    this.networkDevices = networkDevices;
  }


  public HostSystemMonitorProviderResponseAllOf systemUtilizationMonitorLogDirectory(String systemUtilizationMonitorLogDirectory) {
    
    
    
    
    this.systemUtilizationMonitorLogDirectory = systemUtilizationMonitorLogDirectory;
    return this;
  }

   /**
   * Specifies a relative or absolute path to the directory on the local filesystem containing the log files used by the system utilization monitor. The path must exist, and it must be a writable directory by the server process.
   * @return systemUtilizationMonitorLogDirectory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a relative or absolute path to the directory on the local filesystem containing the log files used by the system utilization monitor. The path must exist, and it must be a writable directory by the server process.")

  public String getSystemUtilizationMonitorLogDirectory() {
    return systemUtilizationMonitorLogDirectory;
  }


  public void setSystemUtilizationMonitorLogDirectory(String systemUtilizationMonitorLogDirectory) {
    
    
    
    this.systemUtilizationMonitorLogDirectory = systemUtilizationMonitorLogDirectory;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the HostSystemMonitorProviderResponseAllOf instance itself
   */
  public HostSystemMonitorProviderResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostSystemMonitorProviderResponseAllOf hostSystemMonitorProviderResponseAllOf = (HostSystemMonitorProviderResponseAllOf) o;
    return Objects.equals(this.description, hostSystemMonitorProviderResponseAllOf.description) &&
        Objects.equals(this.schemas, hostSystemMonitorProviderResponseAllOf.schemas) &&
        Objects.equals(this.id, hostSystemMonitorProviderResponseAllOf.id) &&
        Objects.equals(this.enabled, hostSystemMonitorProviderResponseAllOf.enabled) &&
        Objects.equals(this.diskDevices, hostSystemMonitorProviderResponseAllOf.diskDevices) &&
        Objects.equals(this.networkDevices, hostSystemMonitorProviderResponseAllOf.networkDevices) &&
        Objects.equals(this.systemUtilizationMonitorLogDirectory, hostSystemMonitorProviderResponseAllOf.systemUtilizationMonitorLogDirectory)&&
        Objects.equals(this.additionalProperties, hostSystemMonitorProviderResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, enabled, diskDevices, networkDevices, systemUtilizationMonitorLogDirectory, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostSystemMonitorProviderResponseAllOf {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    diskDevices: ").append(toIndentedString(diskDevices)).append("\n");
    sb.append("    networkDevices: ").append(toIndentedString(networkDevices)).append("\n");
    sb.append("    systemUtilizationMonitorLogDirectory: ").append(toIndentedString(systemUtilizationMonitorLogDirectory)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("enabled");
    openapiFields.add("diskDevices");
    openapiFields.add("networkDevices");
    openapiFields.add("systemUtilizationMonitorLogDirectory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HostSystemMonitorProviderResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HostSystemMonitorProviderResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HostSystemMonitorProviderResponseAllOf is not found in the empty JSON string", HostSystemMonitorProviderResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("diskDevices") != null && !jsonObj.get("diskDevices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskDevices` to be an array in the JSON string but got `%s`", jsonObj.get("diskDevices").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("networkDevices") != null && !jsonObj.get("networkDevices").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkDevices` to be an array in the JSON string but got `%s`", jsonObj.get("networkDevices").toString()));
      }
      if ((jsonObj.get("systemUtilizationMonitorLogDirectory") != null && !jsonObj.get("systemUtilizationMonitorLogDirectory").isJsonNull()) && !jsonObj.get("systemUtilizationMonitorLogDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemUtilizationMonitorLogDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemUtilizationMonitorLogDirectory").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HostSystemMonitorProviderResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HostSystemMonitorProviderResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HostSystemMonitorProviderResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HostSystemMonitorProviderResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<HostSystemMonitorProviderResponseAllOf>() {
           @Override
           public void write(JsonWriter out, HostSystemMonitorProviderResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public HostSystemMonitorProviderResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             HostSystemMonitorProviderResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HostSystemMonitorProviderResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HostSystemMonitorProviderResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to HostSystemMonitorProviderResponseAllOf
  */
  public static HostSystemMonitorProviderResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HostSystemMonitorProviderResponseAllOf.class);
  }

 /**
  * Convert an instance of HostSystemMonitorProviderResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

