/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnummonitorHistoryPluginSchemaUrn;
import com.konfigthis.client.model.EnumpluginLoggingErrorBehaviorProp;
import com.konfigthis.client.model.MetaMeta;
import com.konfigthis.client.model.MetaUrnPingidentitySchemasConfigurationMessages20;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MonitorHistoryPluginResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MonitorHistoryPluginResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnummonitorHistoryPluginSchemaUrn> schemas = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOG_INTERVAL = "logInterval";
  @SerializedName(SERIALIZED_NAME_LOG_INTERVAL)
  private String logInterval;

  public static final String SERIALIZED_NAME_LOG_FILE = "logFile";
  @SerializedName(SERIALIZED_NAME_LOG_FILE)
  private String logFile;

  public static final String SERIALIZED_NAME_LOG_FILE_PERMISSIONS = "logFilePermissions";
  @SerializedName(SERIALIZED_NAME_LOG_FILE_PERMISSIONS)
  private String logFilePermissions;

  public static final String SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR = "loggingErrorBehavior";
  @SerializedName(SERIALIZED_NAME_LOGGING_ERROR_BEHAVIOR)
  private EnumpluginLoggingErrorBehaviorProp loggingErrorBehavior;

  public static final String SERIALIZED_NAME_RETENTION_POLICY = "retentionPolicy";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY)
  private List<String> retentionPolicy = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETAIN_FILES_SPARSELY_BY_AGE = "retainFilesSparselyByAge";
  @SerializedName(SERIALIZED_NAME_RETAIN_FILES_SPARSELY_BY_AGE)
  private Boolean retainFilesSparselyByAge;

  public static final String SERIALIZED_NAME_SANITIZE = "sanitize";
  @SerializedName(SERIALIZED_NAME_SANITIZE)
  private Boolean sanitize;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private MetaMeta meta;

  public static final String SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20 = "urn:pingidentity:schemas:configuration:messages:2.0";
  @SerializedName(SERIALIZED_NAME_URN_COLON_PINGIDENTITY_COLON_SCHEMAS_COLON_CONFIGURATION_COLON_MESSAGES_COLON20)
  private MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;

  public MonitorHistoryPluginResponse() {
  }

  public MonitorHistoryPluginResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this Plugin
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this Plugin")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public MonitorHistoryPluginResponse schemas(List<EnummonitorHistoryPluginSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public MonitorHistoryPluginResponse addSchemasItem(EnummonitorHistoryPluginSchemaUrn schemasItem) {
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<EnummonitorHistoryPluginSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnummonitorHistoryPluginSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public MonitorHistoryPluginResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the Plugin
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the Plugin")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public MonitorHistoryPluginResponse logInterval(String logInterval) {
    
    
    
    
    this.logInterval = logInterval;
    return this;
  }

   /**
   * The duration between logging dumps of cn&#x3D;monitor to a file.
   * @return logInterval
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The duration between logging dumps of cn=monitor to a file.")

  public String getLogInterval() {
    return logInterval;
  }


  public void setLogInterval(String logInterval) {
    
    
    
    this.logInterval = logInterval;
  }


  public MonitorHistoryPluginResponse logFile(String logFile) {
    
    
    
    
    this.logFile = logFile;
    return this;
  }

   /**
   * The file name to use for the log files generated by the Monitor History Plugin. The path to the file can be specified either as relative to the server root or as an absolute path.
   * @return logFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The file name to use for the log files generated by the Monitor History Plugin. The path to the file can be specified either as relative to the server root or as an absolute path.")

  public String getLogFile() {
    return logFile;
  }


  public void setLogFile(String logFile) {
    
    
    
    this.logFile = logFile;
  }


  public MonitorHistoryPluginResponse logFilePermissions(String logFilePermissions) {
    
    
    
    
    this.logFilePermissions = logFilePermissions;
    return this;
  }

   /**
   * The UNIX permissions of the log files created by this Monitor History Plugin.
   * @return logFilePermissions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The UNIX permissions of the log files created by this Monitor History Plugin.")

  public String getLogFilePermissions() {
    return logFilePermissions;
  }


  public void setLogFilePermissions(String logFilePermissions) {
    
    
    
    this.logFilePermissions = logFilePermissions;
  }


  public MonitorHistoryPluginResponse loggingErrorBehavior(EnumpluginLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
    return this;
  }

   /**
   * Get loggingErrorBehavior
   * @return loggingErrorBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumpluginLoggingErrorBehaviorProp getLoggingErrorBehavior() {
    return loggingErrorBehavior;
  }


  public void setLoggingErrorBehavior(EnumpluginLoggingErrorBehaviorProp loggingErrorBehavior) {
    
    
    
    this.loggingErrorBehavior = loggingErrorBehavior;
  }


  public MonitorHistoryPluginResponse retentionPolicy(List<String> retentionPolicy) {
    
    
    
    
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  public MonitorHistoryPluginResponse addRetentionPolicyItem(String retentionPolicyItem) {
    this.retentionPolicy.add(retentionPolicyItem);
    return this;
  }

   /**
   * The retention policy to use for the Monitor History Plugin .
   * @return retentionPolicy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The retention policy to use for the Monitor History Plugin .")

  public List<String> getRetentionPolicy() {
    return retentionPolicy;
  }


  public void setRetentionPolicy(List<String> retentionPolicy) {
    
    
    
    this.retentionPolicy = retentionPolicy;
  }


  public MonitorHistoryPluginResponse retainFilesSparselyByAge(Boolean retainFilesSparselyByAge) {
    
    
    
    
    this.retainFilesSparselyByAge = retainFilesSparselyByAge;
    return this;
  }

   /**
   * Retain some older files to give greater perspective on how monitoring information has changed over time.
   * @return retainFilesSparselyByAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Retain some older files to give greater perspective on how monitoring information has changed over time.")

  public Boolean getRetainFilesSparselyByAge() {
    return retainFilesSparselyByAge;
  }


  public void setRetainFilesSparselyByAge(Boolean retainFilesSparselyByAge) {
    
    
    
    this.retainFilesSparselyByAge = retainFilesSparselyByAge;
  }


  public MonitorHistoryPluginResponse sanitize(Boolean sanitize) {
    
    
    
    
    this.sanitize = sanitize;
    return this;
  }

   /**
   * Server monitoring data can include a small amount of personally identifiable information in the form of LDAP DNs and search filters. Setting this property to true will redact this information from the monitor files. This should only be used when necessary, as it reduces the information available in the archive and can increase the time to find the source of support issues.
   * @return sanitize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Server monitoring data can include a small amount of personally identifiable information in the form of LDAP DNs and search filters. Setting this property to true will redact this information from the monitor files. This should only be used when necessary, as it reduces the information available in the archive and can increase the time to find the source of support issues.")

  public Boolean getSanitize() {
    return sanitize;
  }


  public void setSanitize(Boolean sanitize) {
    
    
    
    this.sanitize = sanitize;
  }


  public MonitorHistoryPluginResponse enabled(Boolean enabled) {
    
    
    
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Indicates whether the plug-in is enabled for use.
   * @return enabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates whether the plug-in is enabled for use.")

  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    
    
    
    this.enabled = enabled;
  }


  public MonitorHistoryPluginResponse meta(MetaMeta meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaMeta getMeta() {
    return meta;
  }


  public void setMeta(MetaMeta meta) {
    
    
    
    this.meta = meta;
  }


  public MonitorHistoryPluginResponse urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
    return this;
  }

   /**
   * Get urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
   * @return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MetaUrnPingidentitySchemasConfigurationMessages20 getUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20() {
    return urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }


  public void setUrnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20(MetaUrnPingidentitySchemasConfigurationMessages20 urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20) {
    
    
    
    this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20 = urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MonitorHistoryPluginResponse instance itself
   */
  public MonitorHistoryPluginResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitorHistoryPluginResponse monitorHistoryPluginResponse = (MonitorHistoryPluginResponse) o;
    return Objects.equals(this.description, monitorHistoryPluginResponse.description) &&
        Objects.equals(this.schemas, monitorHistoryPluginResponse.schemas) &&
        Objects.equals(this.id, monitorHistoryPluginResponse.id) &&
        Objects.equals(this.logInterval, monitorHistoryPluginResponse.logInterval) &&
        Objects.equals(this.logFile, monitorHistoryPluginResponse.logFile) &&
        Objects.equals(this.logFilePermissions, monitorHistoryPluginResponse.logFilePermissions) &&
        Objects.equals(this.loggingErrorBehavior, monitorHistoryPluginResponse.loggingErrorBehavior) &&
        Objects.equals(this.retentionPolicy, monitorHistoryPluginResponse.retentionPolicy) &&
        Objects.equals(this.retainFilesSparselyByAge, monitorHistoryPluginResponse.retainFilesSparselyByAge) &&
        Objects.equals(this.sanitize, monitorHistoryPluginResponse.sanitize) &&
        Objects.equals(this.enabled, monitorHistoryPluginResponse.enabled) &&
        Objects.equals(this.meta, monitorHistoryPluginResponse.meta) &&
        Objects.equals(this.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, monitorHistoryPluginResponse.urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)&&
        Objects.equals(this.additionalProperties, monitorHistoryPluginResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, logInterval, logFile, logFilePermissions, loggingErrorBehavior, retentionPolicy, retainFilesSparselyByAge, sanitize, enabled, meta, urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitorHistoryPluginResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logInterval: ").append(toIndentedString(logInterval)).append("\n");
    sb.append("    logFile: ").append(toIndentedString(logFile)).append("\n");
    sb.append("    logFilePermissions: ").append(toIndentedString(logFilePermissions)).append("\n");
    sb.append("    loggingErrorBehavior: ").append(toIndentedString(loggingErrorBehavior)).append("\n");
    sb.append("    retentionPolicy: ").append(toIndentedString(retentionPolicy)).append("\n");
    sb.append("    retainFilesSparselyByAge: ").append(toIndentedString(retainFilesSparselyByAge)).append("\n");
    sb.append("    sanitize: ").append(toIndentedString(sanitize)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20: ").append(toIndentedString(urnColonPingidentityColonSchemasColonConfigurationColonMessagesColon20)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("logInterval");
    openapiFields.add("logFile");
    openapiFields.add("logFilePermissions");
    openapiFields.add("loggingErrorBehavior");
    openapiFields.add("retentionPolicy");
    openapiFields.add("retainFilesSparselyByAge");
    openapiFields.add("sanitize");
    openapiFields.add("enabled");
    openapiFields.add("meta");
    openapiFields.add("urn:pingidentity:schemas:configuration:messages:2.0");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("schemas");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("logInterval");
    openapiRequiredFields.add("logFile");
    openapiRequiredFields.add("logFilePermissions");
    openapiRequiredFields.add("retentionPolicy");
    openapiRequiredFields.add("enabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MonitorHistoryPluginResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MonitorHistoryPluginResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitorHistoryPluginResponse is not found in the empty JSON string", MonitorHistoryPluginResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MonitorHistoryPluginResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("schemas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("logInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logInterval").toString()));
      }
      if (!jsonObj.get("logFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFile").toString()));
      }
      if (!jsonObj.get("logFilePermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logFilePermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logFilePermissions").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("retentionPolicy") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("retentionPolicy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `retentionPolicy` to be an array in the JSON string but got `%s`", jsonObj.get("retentionPolicy").toString()));
      }
      // validate the optional field `meta`
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        MetaMeta.validateJsonObject(jsonObj.getAsJsonObject("meta"));
      }
      // validate the optional field `urn:pingidentity:schemas:configuration:messages:2.0`
      if (jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0") != null && !jsonObj.get("urn:pingidentity:schemas:configuration:messages:2.0").isJsonNull()) {
        MetaUrnPingidentitySchemasConfigurationMessages20.validateJsonObject(jsonObj.getAsJsonObject("urn:pingidentity:schemas:configuration:messages:2.0"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitorHistoryPluginResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitorHistoryPluginResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitorHistoryPluginResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitorHistoryPluginResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitorHistoryPluginResponse>() {
           @Override
           public void write(JsonWriter out, MonitorHistoryPluginResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitorHistoryPluginResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MonitorHistoryPluginResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MonitorHistoryPluginResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MonitorHistoryPluginResponse
  * @throws IOException if the JSON string is invalid with respect to MonitorHistoryPluginResponse
  */
  public static MonitorHistoryPluginResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitorHistoryPluginResponse.class);
  }

 /**
  * Convert an instance of MonitorHistoryPluginResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

