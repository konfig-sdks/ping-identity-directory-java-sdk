/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumkafkaClusterExternalServerSchemaUrn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * KafkaClusterExternalServerResponseAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class KafkaClusterExternalServerResponseAllOf {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private List<EnumkafkaClusterExternalServerSchemaUrn> schemas = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BOOTSTRAP_SERVER = "bootstrapServer";
  @SerializedName(SERIALIZED_NAME_BOOTSTRAP_SERVER)
  private List<String> bootstrapServer = null;

  public static final String SERIALIZED_NAME_PRODUCER_PROPERTY = "producerProperty";
  @SerializedName(SERIALIZED_NAME_PRODUCER_PROPERTY)
  private List<String> producerProperty = null;

  public static final String SERIALIZED_NAME_USE_S_S_L = "useSSL";
  @SerializedName(SERIALIZED_NAME_USE_S_S_L)
  private Boolean useSSL;

  public static final String SERIALIZED_NAME_TRUST_MANAGER_PROVIDER = "trustManagerProvider";
  @SerializedName(SERIALIZED_NAME_TRUST_MANAGER_PROVIDER)
  private String trustManagerProvider;

  public static final String SERIALIZED_NAME_KEY_MANAGER_PROVIDER = "keyManagerProvider";
  @SerializedName(SERIALIZED_NAME_KEY_MANAGER_PROVIDER)
  private String keyManagerProvider;

  public KafkaClusterExternalServerResponseAllOf() {
  }

  public KafkaClusterExternalServerResponseAllOf description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description for this External Server
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description for this External Server")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public KafkaClusterExternalServerResponseAllOf schemas(List<EnumkafkaClusterExternalServerSchemaUrn> schemas) {
    
    
    
    
    this.schemas = schemas;
    return this;
  }

  public KafkaClusterExternalServerResponseAllOf addSchemasItem(EnumkafkaClusterExternalServerSchemaUrn schemasItem) {
    if (this.schemas == null) {
      this.schemas = new ArrayList<>();
    }
    this.schemas.add(schemasItem);
    return this;
  }

   /**
   * Get schemas
   * @return schemas
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EnumkafkaClusterExternalServerSchemaUrn> getSchemas() {
    return schemas;
  }


  public void setSchemas(List<EnumkafkaClusterExternalServerSchemaUrn> schemas) {
    
    
    
    this.schemas = schemas;
  }


  public KafkaClusterExternalServerResponseAllOf id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Name of the External Server
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the External Server")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public KafkaClusterExternalServerResponseAllOf bootstrapServer(List<String> bootstrapServer) {
    
    
    
    
    this.bootstrapServer = bootstrapServer;
    return this;
  }

  public KafkaClusterExternalServerResponseAllOf addBootstrapServerItem(String bootstrapServerItem) {
    if (this.bootstrapServer == null) {
      this.bootstrapServer = new ArrayList<>();
    }
    this.bootstrapServer.add(bootstrapServerItem);
    return this;
  }

   /**
   * List of Kafka brokers to use for this Kafka Cluster External Server, following the host:port format.
   * @return bootstrapServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of Kafka brokers to use for this Kafka Cluster External Server, following the host:port format.")

  public List<String> getBootstrapServer() {
    return bootstrapServer;
  }


  public void setBootstrapServer(List<String> bootstrapServer) {
    
    
    
    this.bootstrapServer = bootstrapServer;
  }


  public KafkaClusterExternalServerResponseAllOf producerProperty(List<String> producerProperty) {
    
    
    
    
    this.producerProperty = producerProperty;
    return this;
  }

  public KafkaClusterExternalServerResponseAllOf addProducerPropertyItem(String producerPropertyItem) {
    if (this.producerProperty == null) {
      this.producerProperty = new ArrayList<>();
    }
    this.producerProperty.add(producerPropertyItem);
    return this;
  }

   /**
   * Specifies extra properties to use when constructing the KafkaProducer for sending messages.
   * @return producerProperty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies extra properties to use when constructing the KafkaProducer for sending messages.")

  public List<String> getProducerProperty() {
    return producerProperty;
  }


  public void setProducerProperty(List<String> producerProperty) {
    
    
    
    this.producerProperty = producerProperty;
  }


  public KafkaClusterExternalServerResponseAllOf useSSL(Boolean useSSL) {
    
    
    
    
    this.useSSL = useSSL;
    return this;
  }

   /**
   * If enabled, the Kafka Cluster External Server will use SSL to encrypt communication with the Kafka brokers.
   * @return useSSL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If enabled, the Kafka Cluster External Server will use SSL to encrypt communication with the Kafka brokers.")

  public Boolean getUseSSL() {
    return useSSL;
  }


  public void setUseSSL(Boolean useSSL) {
    
    
    
    this.useSSL = useSSL;
  }


  public KafkaClusterExternalServerResponseAllOf trustManagerProvider(String trustManagerProvider) {
    
    
    
    
    this.trustManagerProvider = trustManagerProvider;
    return this;
  }

   /**
   * Specifies the file-based trust manager that should be used with the Kafka Cluster External Server for connecting to the Kafka cluster over SSL.
   * @return trustManagerProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the file-based trust manager that should be used with the Kafka Cluster External Server for connecting to the Kafka cluster over SSL.")

  public String getTrustManagerProvider() {
    return trustManagerProvider;
  }


  public void setTrustManagerProvider(String trustManagerProvider) {
    
    
    
    this.trustManagerProvider = trustManagerProvider;
  }


  public KafkaClusterExternalServerResponseAllOf keyManagerProvider(String keyManagerProvider) {
    
    
    
    
    this.keyManagerProvider = keyManagerProvider;
    return this;
  }

   /**
   * Specifies the file-based key manager that should be used with the Kafka Cluster External Server for connecting to the Kafka cluster over SSL.
   * @return keyManagerProvider
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the file-based key manager that should be used with the Kafka Cluster External Server for connecting to the Kafka cluster over SSL.")

  public String getKeyManagerProvider() {
    return keyManagerProvider;
  }


  public void setKeyManagerProvider(String keyManagerProvider) {
    
    
    
    this.keyManagerProvider = keyManagerProvider;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the KafkaClusterExternalServerResponseAllOf instance itself
   */
  public KafkaClusterExternalServerResponseAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KafkaClusterExternalServerResponseAllOf kafkaClusterExternalServerResponseAllOf = (KafkaClusterExternalServerResponseAllOf) o;
    return Objects.equals(this.description, kafkaClusterExternalServerResponseAllOf.description) &&
        Objects.equals(this.schemas, kafkaClusterExternalServerResponseAllOf.schemas) &&
        Objects.equals(this.id, kafkaClusterExternalServerResponseAllOf.id) &&
        Objects.equals(this.bootstrapServer, kafkaClusterExternalServerResponseAllOf.bootstrapServer) &&
        Objects.equals(this.producerProperty, kafkaClusterExternalServerResponseAllOf.producerProperty) &&
        Objects.equals(this.useSSL, kafkaClusterExternalServerResponseAllOf.useSSL) &&
        Objects.equals(this.trustManagerProvider, kafkaClusterExternalServerResponseAllOf.trustManagerProvider) &&
        Objects.equals(this.keyManagerProvider, kafkaClusterExternalServerResponseAllOf.keyManagerProvider)&&
        Objects.equals(this.additionalProperties, kafkaClusterExternalServerResponseAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, schemas, id, bootstrapServer, producerProperty, useSSL, trustManagerProvider, keyManagerProvider, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KafkaClusterExternalServerResponseAllOf {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    bootstrapServer: ").append(toIndentedString(bootstrapServer)).append("\n");
    sb.append("    producerProperty: ").append(toIndentedString(producerProperty)).append("\n");
    sb.append("    useSSL: ").append(toIndentedString(useSSL)).append("\n");
    sb.append("    trustManagerProvider: ").append(toIndentedString(trustManagerProvider)).append("\n");
    sb.append("    keyManagerProvider: ").append(toIndentedString(keyManagerProvider)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("schemas");
    openapiFields.add("id");
    openapiFields.add("bootstrapServer");
    openapiFields.add("producerProperty");
    openapiFields.add("useSSL");
    openapiFields.add("trustManagerProvider");
    openapiFields.add("keyManagerProvider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to KafkaClusterExternalServerResponseAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!KafkaClusterExternalServerResponseAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KafkaClusterExternalServerResponseAllOf is not found in the empty JSON string", KafkaClusterExternalServerResponseAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("schemas") != null && !jsonObj.get("schemas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemas` to be an array in the JSON string but got `%s`", jsonObj.get("schemas").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bootstrapServer") != null && !jsonObj.get("bootstrapServer").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootstrapServer` to be an array in the JSON string but got `%s`", jsonObj.get("bootstrapServer").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("producerProperty") != null && !jsonObj.get("producerProperty").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `producerProperty` to be an array in the JSON string but got `%s`", jsonObj.get("producerProperty").toString()));
      }
      if ((jsonObj.get("trustManagerProvider") != null && !jsonObj.get("trustManagerProvider").isJsonNull()) && !jsonObj.get("trustManagerProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trustManagerProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trustManagerProvider").toString()));
      }
      if ((jsonObj.get("keyManagerProvider") != null && !jsonObj.get("keyManagerProvider").isJsonNull()) && !jsonObj.get("keyManagerProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyManagerProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyManagerProvider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KafkaClusterExternalServerResponseAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KafkaClusterExternalServerResponseAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KafkaClusterExternalServerResponseAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KafkaClusterExternalServerResponseAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<KafkaClusterExternalServerResponseAllOf>() {
           @Override
           public void write(JsonWriter out, KafkaClusterExternalServerResponseAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public KafkaClusterExternalServerResponseAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             KafkaClusterExternalServerResponseAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KafkaClusterExternalServerResponseAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KafkaClusterExternalServerResponseAllOf
  * @throws IOException if the JSON string is invalid with respect to KafkaClusterExternalServerResponseAllOf
  */
  public static KafkaClusterExternalServerResponseAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KafkaClusterExternalServerResponseAllOf.class);
  }

 /**
  * Convert an instance of KafkaClusterExternalServerResponseAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

