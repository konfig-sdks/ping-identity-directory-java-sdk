/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddScimAttributeMappingRequest;
import com.konfigthis.client.model.EnumscimAttributeMappingSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.ScimAttributeMappingListResponse;
import com.konfigthis.client.model.ScimAttributeMappingResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScimAttributeMappingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScimAttributeMappingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScimAttributeMappingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewMappingCall(String scimResourceTypeName, AddScimAttributeMappingRequest addScimAttributeMappingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addScimAttributeMappingRequest;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings"
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewMappingValidateBeforeCall(String scimResourceTypeName, AddScimAttributeMappingRequest addScimAttributeMappingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling addNewMapping(Async)");
        }

        // verify the required parameter 'addScimAttributeMappingRequest' is set
        if (addScimAttributeMappingRequest == null) {
            throw new ApiException("Missing the required parameter 'addScimAttributeMappingRequest' when calling addNewMapping(Async)");
        }

        return addNewMappingCall(scimResourceTypeName, addScimAttributeMappingRequest, _callback);

    }


    private ApiResponse<ScimAttributeMappingResponse> addNewMappingWithHttpInfo(String scimResourceTypeName, AddScimAttributeMappingRequest addScimAttributeMappingRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewMappingValidateBeforeCall(scimResourceTypeName, addScimAttributeMappingRequest, null);
        Type localVarReturnType = new TypeToken<ScimAttributeMappingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewMappingAsync(String scimResourceTypeName, AddScimAttributeMappingRequest addScimAttributeMappingRequest, final ApiCallback<ScimAttributeMappingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewMappingValidateBeforeCall(scimResourceTypeName, addScimAttributeMappingRequest, _callback);
        Type localVarReturnType = new TypeToken<ScimAttributeMappingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewMappingRequestBuilder {
        private final String mappingName;
        private final String scimResourceTypeName;
        private List<EnumscimAttributeMappingSchemaUrn> schemas;
        private String correlatedLDAPDataView;
        private String scimResourceTypeAttribute;
        private String ldapAttribute;
        private Boolean readable;
        private Boolean writable;
        private Boolean searchable;
        private Boolean authoritative;

        private AddNewMappingRequestBuilder(String mappingName, String scimResourceTypeName) {
            this.mappingName = mappingName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewMappingRequestBuilder
         */
        public AddNewMappingRequestBuilder schemas(List<EnumscimAttributeMappingSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set correlatedLDAPDataView
         * @param correlatedLDAPDataView The Correlated LDAP Data View that persists the mapped SCIM Resource Type attribute(s). (optional)
         * @return AddNewMappingRequestBuilder
         */
        public AddNewMappingRequestBuilder correlatedLDAPDataView(String correlatedLDAPDataView) {
            this.correlatedLDAPDataView = correlatedLDAPDataView;
            return this;
        }
        
        /**
         * Set scimResourceTypeAttribute
         * @param scimResourceTypeAttribute The attribute path of SCIM Resource Type attributes to be mapped. (optional)
         * @return AddNewMappingRequestBuilder
         */
        public AddNewMappingRequestBuilder scimResourceTypeAttribute(String scimResourceTypeAttribute) {
            this.scimResourceTypeAttribute = scimResourceTypeAttribute;
            return this;
        }
        
        /**
         * Set ldapAttribute
         * @param ldapAttribute The LDAP attribute to be mapped, or the path to a specific field of an LDAP attribute with the JSON object attribute syntax. (optional)
         * @return AddNewMappingRequestBuilder
         */
        public AddNewMappingRequestBuilder ldapAttribute(String ldapAttribute) {
            this.ldapAttribute = ldapAttribute;
            return this;
        }
        
        /**
         * Set readable
         * @param readable Specifies whether the mapping is used to map from LDAP attribute to SCIM Resource Type attribute in a read operation. (optional)
         * @return AddNewMappingRequestBuilder
         */
        public AddNewMappingRequestBuilder readable(Boolean readable) {
            this.readable = readable;
            return this;
        }
        
        /**
         * Set writable
         * @param writable Specifies that the mapping is used to map from SCIM Resource Type attribute to LDAP attribute in a write operation. (optional)
         * @return AddNewMappingRequestBuilder
         */
        public AddNewMappingRequestBuilder writable(Boolean writable) {
            this.writable = writable;
            return this;
        }
        
        /**
         * Set searchable
         * @param searchable Specifies that the mapping is used to map from SCIM Resource Type attribute to LDAP attribute in a search filter. (optional)
         * @return AddNewMappingRequestBuilder
         */
        public AddNewMappingRequestBuilder searchable(Boolean searchable) {
            this.searchable = searchable;
            return this;
        }
        
        /**
         * Set authoritative
         * @param authoritative Specifies that the mapping is authoritative over other mappings for the same SCIM Resource Type attribute (for read operations). (optional)
         * @return AddNewMappingRequestBuilder
         */
        public AddNewMappingRequestBuilder authoritative(Boolean authoritative) {
            this.authoritative = authoritative;
            return this;
        }
        
        /**
         * Build call for addNewMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute Mapping already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddScimAttributeMappingRequest addScimAttributeMappingRequest = buildBodyParams();
            return addNewMappingCall(scimResourceTypeName, addScimAttributeMappingRequest, _callback);
        }

        private AddScimAttributeMappingRequest buildBodyParams() {
            AddScimAttributeMappingRequest addScimAttributeMappingRequest = new AddScimAttributeMappingRequest();
            return addScimAttributeMappingRequest;
        }

        /**
         * Execute addNewMapping request
         * @return ScimAttributeMappingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute Mapping already exists </td><td>  -  </td></tr>
         </table>
         */
        public ScimAttributeMappingResponse execute() throws ApiException {
            AddScimAttributeMappingRequest addScimAttributeMappingRequest = buildBodyParams();
            ApiResponse<ScimAttributeMappingResponse> localVarResp = addNewMappingWithHttpInfo(scimResourceTypeName, addScimAttributeMappingRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewMapping request with HTTP info returned
         * @return ApiResponse&lt;ScimAttributeMappingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute Mapping already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimAttributeMappingResponse> executeWithHttpInfo() throws ApiException {
            AddScimAttributeMappingRequest addScimAttributeMappingRequest = buildBodyParams();
            return addNewMappingWithHttpInfo(scimResourceTypeName, addScimAttributeMappingRequest);
        }

        /**
         * Execute addNewMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute Mapping already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimAttributeMappingResponse> _callback) throws ApiException {
            AddScimAttributeMappingRequest addScimAttributeMappingRequest = buildBodyParams();
            return addNewMappingAsync(scimResourceTypeName, addScimAttributeMappingRequest, _callback);
        }
    }

    /**
     * Add a new SCIM Attribute Mapping to the config
     * 
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @param addScimAttributeMappingRequest Create a new SCIM Attribute Mapping in the config (required)
     * @return AddNewMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The SCIM Attribute Mapping already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewMappingRequestBuilder addNewMapping(String mappingName, String scimResourceTypeName) throws IllegalArgumentException {
        if (mappingName == null) throw new IllegalArgumentException("\"mappingName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new AddNewMappingRequestBuilder(mappingName, scimResourceTypeName);
    }
    private okhttp3.Call deleteMappingCall(String scimAttributeMappingName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}"
            .replace("{" + "scim-attribute-mapping-name" + "}", localVarApiClient.escapeString(scimAttributeMappingName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMappingValidateBeforeCall(String scimAttributeMappingName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimAttributeMappingName' is set
        if (scimAttributeMappingName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeMappingName' when calling deleteMapping(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling deleteMapping(Async)");
        }

        return deleteMappingCall(scimAttributeMappingName, scimResourceTypeName, _callback);

    }


    private ApiResponse<Void> deleteMappingWithHttpInfo(String scimAttributeMappingName, String scimResourceTypeName) throws ApiException {
        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(scimAttributeMappingName, scimResourceTypeName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMappingAsync(String scimAttributeMappingName, String scimResourceTypeName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(scimAttributeMappingName, scimResourceTypeName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMappingRequestBuilder {
        private final String scimAttributeMappingName;
        private final String scimResourceTypeName;

        private DeleteMappingRequestBuilder(String scimAttributeMappingName, String scimResourceTypeName) {
            this.scimAttributeMappingName = scimAttributeMappingName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Build call for deleteMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute Mapping cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMappingCall(scimAttributeMappingName, scimResourceTypeName, _callback);
        }


        /**
         * Execute deleteMapping request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute Mapping cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMappingWithHttpInfo(scimAttributeMappingName, scimResourceTypeName);
        }

        /**
         * Execute deleteMapping request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute Mapping cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMappingWithHttpInfo(scimAttributeMappingName, scimResourceTypeName);
        }

        /**
         * Execute deleteMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute Mapping cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMappingAsync(scimAttributeMappingName, scimResourceTypeName, _callback);
        }
    }

    /**
     * Delete a SCIM Attribute Mapping
     * 
     * @param scimAttributeMappingName Name of the SCIM Attribute Mapping (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @return DeleteMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The SCIM Attribute Mapping cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMappingRequestBuilder deleteMapping(String scimAttributeMappingName, String scimResourceTypeName) throws IllegalArgumentException {
        if (scimAttributeMappingName == null) throw new IllegalArgumentException("\"scimAttributeMappingName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new DeleteMappingRequestBuilder(scimAttributeMappingName, scimResourceTypeName);
    }
    private okhttp3.Call getAllMappingsCall(String scimResourceTypeName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings"
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllMappingsValidateBeforeCall(String scimResourceTypeName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling getAllMappings(Async)");
        }

        return getAllMappingsCall(scimResourceTypeName, filter, _callback);

    }


    private ApiResponse<ScimAttributeMappingListResponse> getAllMappingsWithHttpInfo(String scimResourceTypeName, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAllMappingsValidateBeforeCall(scimResourceTypeName, filter, null);
        Type localVarReturnType = new TypeToken<ScimAttributeMappingListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllMappingsAsync(String scimResourceTypeName, String filter, final ApiCallback<ScimAttributeMappingListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllMappingsValidateBeforeCall(scimResourceTypeName, filter, _callback);
        Type localVarReturnType = new TypeToken<ScimAttributeMappingListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllMappingsRequestBuilder {
        private final String scimResourceTypeName;
        private String filter;

        private GetAllMappingsRequestBuilder(String scimResourceTypeName) {
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return GetAllMappingsRequestBuilder
         */
        public GetAllMappingsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAllMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllMappingsCall(scimResourceTypeName, filter, _callback);
        }


        /**
         * Execute getAllMappings request
         * @return ScimAttributeMappingListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ScimAttributeMappingListResponse execute() throws ApiException {
            ApiResponse<ScimAttributeMappingListResponse> localVarResp = getAllMappingsWithHttpInfo(scimResourceTypeName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllMappings request with HTTP info returned
         * @return ApiResponse&lt;ScimAttributeMappingListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimAttributeMappingListResponse> executeWithHttpInfo() throws ApiException {
            return getAllMappingsWithHttpInfo(scimResourceTypeName, filter);
        }

        /**
         * Execute getAllMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimAttributeMappingListResponse> _callback) throws ApiException {
            return getAllMappingsAsync(scimResourceTypeName, filter, _callback);
        }
    }

    /**
     * Returns a list of all SCIM Attribute Mapping objects
     * 
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @return GetAllMappingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public GetAllMappingsRequestBuilder getAllMappings(String scimResourceTypeName) throws IllegalArgumentException {
        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new GetAllMappingsRequestBuilder(scimResourceTypeName);
    }
    private okhttp3.Call getSingleScimAttributeMappingCall(String scimAttributeMappingName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}"
            .replace("{" + "scim-attribute-mapping-name" + "}", localVarApiClient.escapeString(scimAttributeMappingName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleScimAttributeMappingValidateBeforeCall(String scimAttributeMappingName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimAttributeMappingName' is set
        if (scimAttributeMappingName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeMappingName' when calling getSingleScimAttributeMapping(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling getSingleScimAttributeMapping(Async)");
        }

        return getSingleScimAttributeMappingCall(scimAttributeMappingName, scimResourceTypeName, _callback);

    }


    private ApiResponse<ScimAttributeMappingResponse> getSingleScimAttributeMappingWithHttpInfo(String scimAttributeMappingName, String scimResourceTypeName) throws ApiException {
        okhttp3.Call localVarCall = getSingleScimAttributeMappingValidateBeforeCall(scimAttributeMappingName, scimResourceTypeName, null);
        Type localVarReturnType = new TypeToken<ScimAttributeMappingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleScimAttributeMappingAsync(String scimAttributeMappingName, String scimResourceTypeName, final ApiCallback<ScimAttributeMappingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleScimAttributeMappingValidateBeforeCall(scimAttributeMappingName, scimResourceTypeName, _callback);
        Type localVarReturnType = new TypeToken<ScimAttributeMappingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleScimAttributeMappingRequestBuilder {
        private final String scimAttributeMappingName;
        private final String scimResourceTypeName;

        private GetSingleScimAttributeMappingRequestBuilder(String scimAttributeMappingName, String scimResourceTypeName) {
            this.scimAttributeMappingName = scimAttributeMappingName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Build call for getSingleScimAttributeMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleScimAttributeMappingCall(scimAttributeMappingName, scimResourceTypeName, _callback);
        }


        /**
         * Execute getSingleScimAttributeMapping request
         * @return ScimAttributeMappingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ScimAttributeMappingResponse execute() throws ApiException {
            ApiResponse<ScimAttributeMappingResponse> localVarResp = getSingleScimAttributeMappingWithHttpInfo(scimAttributeMappingName, scimResourceTypeName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleScimAttributeMapping request with HTTP info returned
         * @return ApiResponse&lt;ScimAttributeMappingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimAttributeMappingResponse> executeWithHttpInfo() throws ApiException {
            return getSingleScimAttributeMappingWithHttpInfo(scimAttributeMappingName, scimResourceTypeName);
        }

        /**
         * Execute getSingleScimAttributeMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimAttributeMappingResponse> _callback) throws ApiException {
            return getSingleScimAttributeMappingAsync(scimAttributeMappingName, scimResourceTypeName, _callback);
        }
    }

    /**
     * Returns a single SCIM Attribute Mapping
     * 
     * @param scimAttributeMappingName Name of the SCIM Attribute Mapping (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @return GetSingleScimAttributeMappingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleScimAttributeMappingRequestBuilder getSingleScimAttributeMapping(String scimAttributeMappingName, String scimResourceTypeName) throws IllegalArgumentException {
        if (scimAttributeMappingName == null) throw new IllegalArgumentException("\"scimAttributeMappingName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new GetSingleScimAttributeMappingRequestBuilder(scimAttributeMappingName, scimResourceTypeName);
    }
    private okhttp3.Call updateByNameCall(String scimAttributeMappingName, String scimResourceTypeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/scim-attribute-mappings/{scim-attribute-mapping-name}"
            .replace("{" + "scim-attribute-mapping-name" + "}", localVarApiClient.escapeString(scimAttributeMappingName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String scimAttributeMappingName, String scimResourceTypeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimAttributeMappingName' is set
        if (scimAttributeMappingName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeMappingName' when calling updateByName(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(scimAttributeMappingName, scimResourceTypeName, updateRequest, _callback);

    }


    private ApiResponse<ScimAttributeMappingResponse> updateByNameWithHttpInfo(String scimAttributeMappingName, String scimResourceTypeName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(scimAttributeMappingName, scimResourceTypeName, updateRequest, null);
        Type localVarReturnType = new TypeToken<ScimAttributeMappingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String scimAttributeMappingName, String scimResourceTypeName, UpdateRequest updateRequest, final ApiCallback<ScimAttributeMappingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(scimAttributeMappingName, scimResourceTypeName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<ScimAttributeMappingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String scimAttributeMappingName;
        private final String scimResourceTypeName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String scimAttributeMappingName, String scimResourceTypeName) {
            this.operations = operations;
            this.scimAttributeMappingName = scimAttributeMappingName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(scimAttributeMappingName, scimResourceTypeName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return ScimAttributeMappingResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ScimAttributeMappingResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<ScimAttributeMappingResponse> localVarResp = updateByNameWithHttpInfo(scimAttributeMappingName, scimResourceTypeName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;ScimAttributeMappingResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimAttributeMappingResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(scimAttributeMappingName, scimResourceTypeName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimAttributeMappingResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(scimAttributeMappingName, scimResourceTypeName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing SCIM Attribute Mapping by name
     * 
     * @param scimAttributeMappingName Name of the SCIM Attribute Mapping (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @param updateRequest Update an existing SCIM Attribute Mapping (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The SCIM Attribute Mapping does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String scimAttributeMappingName, String scimResourceTypeName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (scimAttributeMappingName == null) throw new IllegalArgumentException("\"scimAttributeMappingName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, scimAttributeMappingName, scimResourceTypeName);
    }
}
