/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddRecurringTaskChainRequest;
import com.konfigthis.client.model.EnumrecurringTaskChainInterruptedByShutdownBehaviorProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledDateSelectionTypeProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledDayOfTheMonthProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledDayOfTheWeekProp;
import com.konfigthis.client.model.EnumrecurringTaskChainScheduledMonthProp;
import com.konfigthis.client.model.EnumrecurringTaskChainSchemaUrn;
import com.konfigthis.client.model.EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.RecurringTaskChainListResponse;
import com.konfigthis.client.model.RecurringTaskChainResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RecurringTaskChainApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecurringTaskChainApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RecurringTaskChainApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewToConfigCall(AddRecurringTaskChainRequest addRecurringTaskChainRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addRecurringTaskChainRequest;

        // create path and map variables
        String localVarPath = "/recurring-task-chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewToConfigValidateBeforeCall(AddRecurringTaskChainRequest addRecurringTaskChainRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addRecurringTaskChainRequest' is set
        if (addRecurringTaskChainRequest == null) {
            throw new ApiException("Missing the required parameter 'addRecurringTaskChainRequest' when calling addNewToConfig(Async)");
        }

        return addNewToConfigCall(addRecurringTaskChainRequest, _callback);

    }


    private ApiResponse<RecurringTaskChainResponse> addNewToConfigWithHttpInfo(AddRecurringTaskChainRequest addRecurringTaskChainRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewToConfigValidateBeforeCall(addRecurringTaskChainRequest, null);
        Type localVarReturnType = new TypeToken<RecurringTaskChainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewToConfigAsync(AddRecurringTaskChainRequest addRecurringTaskChainRequest, final ApiCallback<RecurringTaskChainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewToConfigValidateBeforeCall(addRecurringTaskChainRequest, _callback);
        Type localVarReturnType = new TypeToken<RecurringTaskChainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewToConfigRequestBuilder {
        private final String chainName;
        private String description;
        private List<EnumrecurringTaskChainSchemaUrn> schemas;
        private Boolean enabled;
        private List<String> recurringTask;
        private List<EnumrecurringTaskChainScheduledMonthProp> scheduledMonth;
        private EnumrecurringTaskChainScheduledDateSelectionTypeProp scheduledDateSelectionType;
        private List<EnumrecurringTaskChainScheduledDayOfTheWeekProp> scheduledDayOfTheWeek;
        private List<EnumrecurringTaskChainScheduledDayOfTheMonthProp> scheduledDayOfTheMonth;
        private List<String> scheduledTimeOfDay;
        private String timeZone;
        private EnumrecurringTaskChainInterruptedByShutdownBehaviorProp interruptedByShutdownBehavior;
        private EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp serverOfflineAtStartTimeBehavior;

        private AddNewToConfigRequestBuilder(String chainName) {
            this.chainName = chainName;
        }

        /**
         * Set description
         * @param description A description for this Recurring Task Chain (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder schemas(List<EnumrecurringTaskChainSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Indicates whether this Recurring Task Chain is enabled for use. Recurring Task Chains that are disabled will not have any new instances scheduled, but instances that are already scheduled will be preserved. Those instances may be manually canceled if desired. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set recurringTask
         * @param recurringTask The set of recurring tasks that make up this chain. At least one value must be provided. If multiple values are given, then the task instances will be invoked in the order in which they are listed. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder recurringTask(List<String> recurringTask) {
            this.recurringTask = recurringTask;
            return this;
        }
        
        /**
         * Set scheduledMonth
         * @param scheduledMonth  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder scheduledMonth(List<EnumrecurringTaskChainScheduledMonthProp> scheduledMonth) {
            this.scheduledMonth = scheduledMonth;
            return this;
        }
        
        /**
         * Set scheduledDateSelectionType
         * @param scheduledDateSelectionType  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder scheduledDateSelectionType(EnumrecurringTaskChainScheduledDateSelectionTypeProp scheduledDateSelectionType) {
            this.scheduledDateSelectionType = scheduledDateSelectionType;
            return this;
        }
        
        /**
         * Set scheduledDayOfTheWeek
         * @param scheduledDayOfTheWeek  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder scheduledDayOfTheWeek(List<EnumrecurringTaskChainScheduledDayOfTheWeekProp> scheduledDayOfTheWeek) {
            this.scheduledDayOfTheWeek = scheduledDayOfTheWeek;
            return this;
        }
        
        /**
         * Set scheduledDayOfTheMonth
         * @param scheduledDayOfTheMonth  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder scheduledDayOfTheMonth(List<EnumrecurringTaskChainScheduledDayOfTheMonthProp> scheduledDayOfTheMonth) {
            this.scheduledDayOfTheMonth = scheduledDayOfTheMonth;
            return this;
        }
        
        /**
         * Set scheduledTimeOfDay
         * @param scheduledTimeOfDay The time of day at which instances of the Recurring Task Chain should be eligible to start running. Values should be in the format HH:MM (where HH is a two-digit representation of the hour of the day, between 00 and 23, inclusive), and MM is a two-digit representation of the minute of the hour (between 00 and 59, inclusive). Alternately, the value can be in the form *:MM, which indicates that the task should be eligible to start at the specified minute of every hour. At least one value must be provided, but multiple values may be given to indicate multiple start times within the same day. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder scheduledTimeOfDay(List<String> scheduledTimeOfDay) {
            this.scheduledTimeOfDay = scheduledTimeOfDay;
            return this;
        }
        
        /**
         * Set timeZone
         * @param timeZone The time zone that will be used to interpret the scheduled-time-of-day values. If no value is provided, then the JVM&#39;s default time zone will be used. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder timeZone(String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        
        /**
         * Set interruptedByShutdownBehavior
         * @param interruptedByShutdownBehavior  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder interruptedByShutdownBehavior(EnumrecurringTaskChainInterruptedByShutdownBehaviorProp interruptedByShutdownBehavior) {
            this.interruptedByShutdownBehavior = interruptedByShutdownBehavior;
            return this;
        }
        
        /**
         * Set serverOfflineAtStartTimeBehavior
         * @param serverOfflineAtStartTimeBehavior  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder serverOfflineAtStartTimeBehavior(EnumrecurringTaskChainServerOfflineAtStartTimeBehaviorProp serverOfflineAtStartTimeBehavior) {
            this.serverOfflineAtStartTimeBehavior = serverOfflineAtStartTimeBehavior;
            return this;
        }
        
        /**
         * Build call for addNewToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Recurring Task Chain already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddRecurringTaskChainRequest addRecurringTaskChainRequest = buildBodyParams();
            return addNewToConfigCall(addRecurringTaskChainRequest, _callback);
        }

        private AddRecurringTaskChainRequest buildBodyParams() {
            AddRecurringTaskChainRequest addRecurringTaskChainRequest = new AddRecurringTaskChainRequest();
            return addRecurringTaskChainRequest;
        }

        /**
         * Execute addNewToConfig request
         * @return RecurringTaskChainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Recurring Task Chain already exists </td><td>  -  </td></tr>
         </table>
         */
        public RecurringTaskChainResponse execute() throws ApiException {
            AddRecurringTaskChainRequest addRecurringTaskChainRequest = buildBodyParams();
            ApiResponse<RecurringTaskChainResponse> localVarResp = addNewToConfigWithHttpInfo(addRecurringTaskChainRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewToConfig request with HTTP info returned
         * @return ApiResponse&lt;RecurringTaskChainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Recurring Task Chain already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringTaskChainResponse> executeWithHttpInfo() throws ApiException {
            AddRecurringTaskChainRequest addRecurringTaskChainRequest = buildBodyParams();
            return addNewToConfigWithHttpInfo(addRecurringTaskChainRequest);
        }

        /**
         * Execute addNewToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Recurring Task Chain already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringTaskChainResponse> _callback) throws ApiException {
            AddRecurringTaskChainRequest addRecurringTaskChainRequest = buildBodyParams();
            return addNewToConfigAsync(addRecurringTaskChainRequest, _callback);
        }
    }

    /**
     * Add a new Recurring Task Chain to the config
     * 
     * @param addRecurringTaskChainRequest Create a new Recurring Task Chain in the config (required)
     * @return AddNewToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Recurring Task Chain already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewToConfigRequestBuilder addNewToConfig(String chainName) throws IllegalArgumentException {
        if (chainName == null) throw new IllegalArgumentException("\"chainName\" is required but got null");
            

        return new AddNewToConfigRequestBuilder(chainName);
    }
    private okhttp3.Call deleteChainCall(String recurringTaskChainName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurring-task-chains/{recurring-task-chain-name}"
            .replace("{" + "recurring-task-chain-name" + "}", localVarApiClient.escapeString(recurringTaskChainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChainValidateBeforeCall(String recurringTaskChainName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recurringTaskChainName' is set
        if (recurringTaskChainName == null) {
            throw new ApiException("Missing the required parameter 'recurringTaskChainName' when calling deleteChain(Async)");
        }

        return deleteChainCall(recurringTaskChainName, _callback);

    }


    private ApiResponse<Void> deleteChainWithHttpInfo(String recurringTaskChainName) throws ApiException {
        okhttp3.Call localVarCall = deleteChainValidateBeforeCall(recurringTaskChainName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteChainAsync(String recurringTaskChainName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChainValidateBeforeCall(recurringTaskChainName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteChainRequestBuilder {
        private final String recurringTaskChainName;

        private DeleteChainRequestBuilder(String recurringTaskChainName) {
            this.recurringTaskChainName = recurringTaskChainName;
        }

        /**
         * Build call for deleteChain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Recurring Task Chain cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteChainCall(recurringTaskChainName, _callback);
        }


        /**
         * Execute deleteChain request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Recurring Task Chain cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteChainWithHttpInfo(recurringTaskChainName);
        }

        /**
         * Execute deleteChain request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Recurring Task Chain cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteChainWithHttpInfo(recurringTaskChainName);
        }

        /**
         * Execute deleteChain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Recurring Task Chain cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteChainAsync(recurringTaskChainName, _callback);
        }
    }

    /**
     * Delete a Recurring Task Chain
     * 
     * @param recurringTaskChainName Name of the Recurring Task Chain (required)
     * @return DeleteChainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Recurring Task Chain cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteChainRequestBuilder deleteChain(String recurringTaskChainName) throws IllegalArgumentException {
        if (recurringTaskChainName == null) throw new IllegalArgumentException("\"recurringTaskChainName\" is required but got null");
            

        return new DeleteChainRequestBuilder(recurringTaskChainName);
    }
    private okhttp3.Call getSingleCall(String recurringTaskChainName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurring-task-chains/{recurring-task-chain-name}"
            .replace("{" + "recurring-task-chain-name" + "}", localVarApiClient.escapeString(recurringTaskChainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String recurringTaskChainName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recurringTaskChainName' is set
        if (recurringTaskChainName == null) {
            throw new ApiException("Missing the required parameter 'recurringTaskChainName' when calling getSingle(Async)");
        }

        return getSingleCall(recurringTaskChainName, _callback);

    }


    private ApiResponse<RecurringTaskChainResponse> getSingleWithHttpInfo(String recurringTaskChainName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(recurringTaskChainName, null);
        Type localVarReturnType = new TypeToken<RecurringTaskChainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String recurringTaskChainName, final ApiCallback<RecurringTaskChainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(recurringTaskChainName, _callback);
        Type localVarReturnType = new TypeToken<RecurringTaskChainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String recurringTaskChainName;

        private GetSingleRequestBuilder(String recurringTaskChainName) {
            this.recurringTaskChainName = recurringTaskChainName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(recurringTaskChainName, _callback);
        }


        /**
         * Execute getSingle request
         * @return RecurringTaskChainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public RecurringTaskChainResponse execute() throws ApiException {
            ApiResponse<RecurringTaskChainResponse> localVarResp = getSingleWithHttpInfo(recurringTaskChainName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;RecurringTaskChainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringTaskChainResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(recurringTaskChainName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringTaskChainResponse> _callback) throws ApiException {
            return getSingleAsync(recurringTaskChainName, _callback);
        }
    }

    /**
     * Returns a single Recurring Task Chain
     * 
     * @param recurringTaskChainName Name of the Recurring Task Chain (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String recurringTaskChainName) throws IllegalArgumentException {
        if (recurringTaskChainName == null) throw new IllegalArgumentException("\"recurringTaskChainName\" is required but got null");
            

        return new GetSingleRequestBuilder(recurringTaskChainName);
    }
    private okhttp3.Call listAllObjectsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recurring-task-chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAllObjectsCall(filter, _callback);

    }


    private ApiResponse<RecurringTaskChainListResponse> listAllObjectsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<RecurringTaskChainListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String filter, final ApiCallback<RecurringTaskChainListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<RecurringTaskChainListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private String filter;

        private ListAllObjectsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(filter, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return RecurringTaskChainListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public RecurringTaskChainListResponse execute() throws ApiException {
            ApiResponse<RecurringTaskChainListResponse> localVarResp = listAllObjectsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;RecurringTaskChainListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringTaskChainListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(filter);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringTaskChainListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Recurring Task Chain objects
     * 
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects() throws IllegalArgumentException {
        return new ListAllObjectsRequestBuilder();
    }
    private okhttp3.Call updateByRecurringTaskChainNameCall(String recurringTaskChainName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/recurring-task-chains/{recurring-task-chain-name}"
            .replace("{" + "recurring-task-chain-name" + "}", localVarApiClient.escapeString(recurringTaskChainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByRecurringTaskChainNameValidateBeforeCall(String recurringTaskChainName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recurringTaskChainName' is set
        if (recurringTaskChainName == null) {
            throw new ApiException("Missing the required parameter 'recurringTaskChainName' when calling updateByRecurringTaskChainName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByRecurringTaskChainName(Async)");
        }

        return updateByRecurringTaskChainNameCall(recurringTaskChainName, updateRequest, _callback);

    }


    private ApiResponse<RecurringTaskChainResponse> updateByRecurringTaskChainNameWithHttpInfo(String recurringTaskChainName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByRecurringTaskChainNameValidateBeforeCall(recurringTaskChainName, updateRequest, null);
        Type localVarReturnType = new TypeToken<RecurringTaskChainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByRecurringTaskChainNameAsync(String recurringTaskChainName, UpdateRequest updateRequest, final ApiCallback<RecurringTaskChainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByRecurringTaskChainNameValidateBeforeCall(recurringTaskChainName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<RecurringTaskChainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByRecurringTaskChainNameRequestBuilder {
        private final List<Operation> operations;
        private final String recurringTaskChainName;

        private UpdateByRecurringTaskChainNameRequestBuilder(List<Operation> operations, String recurringTaskChainName) {
            this.operations = operations;
            this.recurringTaskChainName = recurringTaskChainName;
        }

        /**
         * Build call for updateByRecurringTaskChainName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByRecurringTaskChainNameCall(recurringTaskChainName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByRecurringTaskChainName request
         * @return RecurringTaskChainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public RecurringTaskChainResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<RecurringTaskChainResponse> localVarResp = updateByRecurringTaskChainNameWithHttpInfo(recurringTaskChainName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByRecurringTaskChainName request with HTTP info returned
         * @return ApiResponse&lt;RecurringTaskChainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecurringTaskChainResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByRecurringTaskChainNameWithHttpInfo(recurringTaskChainName, updateRequest);
        }

        /**
         * Execute updateByRecurringTaskChainName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecurringTaskChainResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByRecurringTaskChainNameAsync(recurringTaskChainName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Recurring Task Chain by name
     * 
     * @param recurringTaskChainName Name of the Recurring Task Chain (required)
     * @param updateRequest Update an existing Recurring Task Chain (required)
     * @return UpdateByRecurringTaskChainNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Recurring Task Chain does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByRecurringTaskChainNameRequestBuilder updateByRecurringTaskChainName(List<Operation> operations, String recurringTaskChainName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (recurringTaskChainName == null) throw new IllegalArgumentException("\"recurringTaskChainName\" is required but got null");
            

        return new UpdateByRecurringTaskChainNameRequestBuilder(operations, recurringTaskChainName);
    }
}
