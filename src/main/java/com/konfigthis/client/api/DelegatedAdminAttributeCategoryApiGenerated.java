/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddDelegatedAdminAttributeCategoryRequest;
import com.konfigthis.client.model.DelegatedAdminAttributeCategoryListResponse;
import com.konfigthis.client.model.DelegatedAdminAttributeCategoryResponse;
import com.konfigthis.client.model.EnumdelegatedAdminAttributeCategorySchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DelegatedAdminAttributeCategoryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DelegatedAdminAttributeCategoryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DelegatedAdminAttributeCategoryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewCategoryCall(AddDelegatedAdminAttributeCategoryRequest addDelegatedAdminAttributeCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDelegatedAdminAttributeCategoryRequest;

        // create path and map variables
        String localVarPath = "/delegated-admin-attribute-categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewCategoryValidateBeforeCall(AddDelegatedAdminAttributeCategoryRequest addDelegatedAdminAttributeCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addDelegatedAdminAttributeCategoryRequest' is set
        if (addDelegatedAdminAttributeCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'addDelegatedAdminAttributeCategoryRequest' when calling addNewCategory(Async)");
        }

        return addNewCategoryCall(addDelegatedAdminAttributeCategoryRequest, _callback);

    }


    private ApiResponse<DelegatedAdminAttributeCategoryResponse> addNewCategoryWithHttpInfo(AddDelegatedAdminAttributeCategoryRequest addDelegatedAdminAttributeCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewCategoryValidateBeforeCall(addDelegatedAdminAttributeCategoryRequest, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminAttributeCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewCategoryAsync(AddDelegatedAdminAttributeCategoryRequest addDelegatedAdminAttributeCategoryRequest, final ApiCallback<DelegatedAdminAttributeCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewCategoryValidateBeforeCall(addDelegatedAdminAttributeCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminAttributeCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewCategoryRequestBuilder {
        private final String displayName;
        private String description;
        private List<EnumdelegatedAdminAttributeCategorySchemaUrn> schemas;
        private Integer displayOrderIndex;

        private AddNewCategoryRequestBuilder(String displayName) {
            this.displayName = displayName;
        }

        /**
         * Set description
         * @param description A description for this Delegated Admin Attribute Category (optional)
         * @return AddNewCategoryRequestBuilder
         */
        public AddNewCategoryRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewCategoryRequestBuilder
         */
        public AddNewCategoryRequestBuilder schemas(List<EnumdelegatedAdminAttributeCategorySchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set displayOrderIndex
         * @param displayOrderIndex Delegated Admin Attribute Categories are ordered for display based on this index from least to greatest. (optional)
         * @return AddNewCategoryRequestBuilder
         */
        public AddNewCategoryRequestBuilder displayOrderIndex(Integer displayOrderIndex) {
            this.displayOrderIndex = displayOrderIndex;
            return this;
        }
        
        /**
         * Build call for addNewCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Attribute Category already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddDelegatedAdminAttributeCategoryRequest addDelegatedAdminAttributeCategoryRequest = buildBodyParams();
            return addNewCategoryCall(addDelegatedAdminAttributeCategoryRequest, _callback);
        }

        private AddDelegatedAdminAttributeCategoryRequest buildBodyParams() {
            AddDelegatedAdminAttributeCategoryRequest addDelegatedAdminAttributeCategoryRequest = new AddDelegatedAdminAttributeCategoryRequest();
            return addDelegatedAdminAttributeCategoryRequest;
        }

        /**
         * Execute addNewCategory request
         * @return DelegatedAdminAttributeCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Attribute Category already exists </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminAttributeCategoryResponse execute() throws ApiException {
            AddDelegatedAdminAttributeCategoryRequest addDelegatedAdminAttributeCategoryRequest = buildBodyParams();
            ApiResponse<DelegatedAdminAttributeCategoryResponse> localVarResp = addNewCategoryWithHttpInfo(addDelegatedAdminAttributeCategoryRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewCategory request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminAttributeCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Attribute Category already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminAttributeCategoryResponse> executeWithHttpInfo() throws ApiException {
            AddDelegatedAdminAttributeCategoryRequest addDelegatedAdminAttributeCategoryRequest = buildBodyParams();
            return addNewCategoryWithHttpInfo(addDelegatedAdminAttributeCategoryRequest);
        }

        /**
         * Execute addNewCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Attribute Category already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminAttributeCategoryResponse> _callback) throws ApiException {
            AddDelegatedAdminAttributeCategoryRequest addDelegatedAdminAttributeCategoryRequest = buildBodyParams();
            return addNewCategoryAsync(addDelegatedAdminAttributeCategoryRequest, _callback);
        }
    }

    /**
     * Add a new Delegated Admin Attribute Category to the config
     * 
     * @param addDelegatedAdminAttributeCategoryRequest Create a new Delegated Admin Attribute Category in the config (required)
     * @return AddNewCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Delegated Admin Attribute Category already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewCategoryRequestBuilder addNewCategory(String displayName) throws IllegalArgumentException {
        if (displayName == null) throw new IllegalArgumentException("\"displayName\" is required but got null");
            

        return new AddNewCategoryRequestBuilder(displayName);
    }
    private okhttp3.Call deleteCategoryCall(String delegatedAdminAttributeCategoryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegated-admin-attribute-categories/{delegated-admin-attribute-category-name}"
            .replace("{" + "delegated-admin-attribute-category-name" + "}", localVarApiClient.escapeString(delegatedAdminAttributeCategoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryValidateBeforeCall(String delegatedAdminAttributeCategoryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminAttributeCategoryName' is set
        if (delegatedAdminAttributeCategoryName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminAttributeCategoryName' when calling deleteCategory(Async)");
        }

        return deleteCategoryCall(delegatedAdminAttributeCategoryName, _callback);

    }


    private ApiResponse<Void> deleteCategoryWithHttpInfo(String delegatedAdminAttributeCategoryName) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(delegatedAdminAttributeCategoryName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCategoryAsync(String delegatedAdminAttributeCategoryName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(delegatedAdminAttributeCategoryName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCategoryRequestBuilder {
        private final String delegatedAdminAttributeCategoryName;

        private DeleteCategoryRequestBuilder(String delegatedAdminAttributeCategoryName) {
            this.delegatedAdminAttributeCategoryName = delegatedAdminAttributeCategoryName;
        }

        /**
         * Build call for deleteCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Attribute Category cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCategoryCall(delegatedAdminAttributeCategoryName, _callback);
        }


        /**
         * Execute deleteCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Attribute Category cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCategoryWithHttpInfo(delegatedAdminAttributeCategoryName);
        }

        /**
         * Execute deleteCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Attribute Category cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCategoryWithHttpInfo(delegatedAdminAttributeCategoryName);
        }

        /**
         * Execute deleteCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Attribute Category cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCategoryAsync(delegatedAdminAttributeCategoryName, _callback);
        }
    }

    /**
     * Delete a Delegated Admin Attribute Category
     * 
     * @param delegatedAdminAttributeCategoryName Name of the Delegated Admin Attribute Category (required)
     * @return DeleteCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Delegated Admin Attribute Category cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCategoryRequestBuilder deleteCategory(String delegatedAdminAttributeCategoryName) throws IllegalArgumentException {
        if (delegatedAdminAttributeCategoryName == null) throw new IllegalArgumentException("\"delegatedAdminAttributeCategoryName\" is required but got null");
            

        return new DeleteCategoryRequestBuilder(delegatedAdminAttributeCategoryName);
    }
    private okhttp3.Call getSingleCall(String delegatedAdminAttributeCategoryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegated-admin-attribute-categories/{delegated-admin-attribute-category-name}"
            .replace("{" + "delegated-admin-attribute-category-name" + "}", localVarApiClient.escapeString(delegatedAdminAttributeCategoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String delegatedAdminAttributeCategoryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminAttributeCategoryName' is set
        if (delegatedAdminAttributeCategoryName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminAttributeCategoryName' when calling getSingle(Async)");
        }

        return getSingleCall(delegatedAdminAttributeCategoryName, _callback);

    }


    private ApiResponse<DelegatedAdminAttributeCategoryResponse> getSingleWithHttpInfo(String delegatedAdminAttributeCategoryName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(delegatedAdminAttributeCategoryName, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminAttributeCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String delegatedAdminAttributeCategoryName, final ApiCallback<DelegatedAdminAttributeCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(delegatedAdminAttributeCategoryName, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminAttributeCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String delegatedAdminAttributeCategoryName;

        private GetSingleRequestBuilder(String delegatedAdminAttributeCategoryName) {
            this.delegatedAdminAttributeCategoryName = delegatedAdminAttributeCategoryName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(delegatedAdminAttributeCategoryName, _callback);
        }


        /**
         * Execute getSingle request
         * @return DelegatedAdminAttributeCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminAttributeCategoryResponse execute() throws ApiException {
            ApiResponse<DelegatedAdminAttributeCategoryResponse> localVarResp = getSingleWithHttpInfo(delegatedAdminAttributeCategoryName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminAttributeCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminAttributeCategoryResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(delegatedAdminAttributeCategoryName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminAttributeCategoryResponse> _callback) throws ApiException {
            return getSingleAsync(delegatedAdminAttributeCategoryName, _callback);
        }
    }

    /**
     * Returns a single Delegated Admin Attribute Category
     * 
     * @param delegatedAdminAttributeCategoryName Name of the Delegated Admin Attribute Category (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String delegatedAdminAttributeCategoryName) throws IllegalArgumentException {
        if (delegatedAdminAttributeCategoryName == null) throw new IllegalArgumentException("\"delegatedAdminAttributeCategoryName\" is required but got null");
            

        return new GetSingleRequestBuilder(delegatedAdminAttributeCategoryName);
    }
    private okhttp3.Call listAllCategoriesCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegated-admin-attribute-categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllCategoriesValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAllCategoriesCall(filter, _callback);

    }


    private ApiResponse<DelegatedAdminAttributeCategoryListResponse> listAllCategoriesWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllCategoriesValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminAttributeCategoryListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllCategoriesAsync(String filter, final ApiCallback<DelegatedAdminAttributeCategoryListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllCategoriesValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminAttributeCategoryListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllCategoriesRequestBuilder {
        private String filter;

        private ListAllCategoriesRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllCategoriesRequestBuilder
         */
        public ListAllCategoriesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCategoriesCall(filter, _callback);
        }


        /**
         * Execute listAllCategories request
         * @return DelegatedAdminAttributeCategoryListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminAttributeCategoryListResponse execute() throws ApiException {
            ApiResponse<DelegatedAdminAttributeCategoryListResponse> localVarResp = listAllCategoriesWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllCategories request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminAttributeCategoryListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminAttributeCategoryListResponse> executeWithHttpInfo() throws ApiException {
            return listAllCategoriesWithHttpInfo(filter);
        }

        /**
         * Execute listAllCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminAttributeCategoryListResponse> _callback) throws ApiException {
            return listAllCategoriesAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Delegated Admin Attribute Category objects
     * 
     * @return ListAllCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllCategoriesRequestBuilder listAllCategories() throws IllegalArgumentException {
        return new ListAllCategoriesRequestBuilder();
    }
    private okhttp3.Call updateByNameCall(String delegatedAdminAttributeCategoryName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/delegated-admin-attribute-categories/{delegated-admin-attribute-category-name}"
            .replace("{" + "delegated-admin-attribute-category-name" + "}", localVarApiClient.escapeString(delegatedAdminAttributeCategoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String delegatedAdminAttributeCategoryName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminAttributeCategoryName' is set
        if (delegatedAdminAttributeCategoryName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminAttributeCategoryName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(delegatedAdminAttributeCategoryName, updateRequest, _callback);

    }


    private ApiResponse<DelegatedAdminAttributeCategoryResponse> updateByNameWithHttpInfo(String delegatedAdminAttributeCategoryName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(delegatedAdminAttributeCategoryName, updateRequest, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminAttributeCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String delegatedAdminAttributeCategoryName, UpdateRequest updateRequest, final ApiCallback<DelegatedAdminAttributeCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(delegatedAdminAttributeCategoryName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminAttributeCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String delegatedAdminAttributeCategoryName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String delegatedAdminAttributeCategoryName) {
            this.operations = operations;
            this.delegatedAdminAttributeCategoryName = delegatedAdminAttributeCategoryName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(delegatedAdminAttributeCategoryName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return DelegatedAdminAttributeCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminAttributeCategoryResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<DelegatedAdminAttributeCategoryResponse> localVarResp = updateByNameWithHttpInfo(delegatedAdminAttributeCategoryName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminAttributeCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminAttributeCategoryResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(delegatedAdminAttributeCategoryName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminAttributeCategoryResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(delegatedAdminAttributeCategoryName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Delegated Admin Attribute Category by name
     * 
     * @param delegatedAdminAttributeCategoryName Name of the Delegated Admin Attribute Category (required)
     * @param updateRequest Update an existing Delegated Admin Attribute Category (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Attribute Category does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String delegatedAdminAttributeCategoryName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (delegatedAdminAttributeCategoryName == null) throw new IllegalArgumentException("\"delegatedAdminAttributeCategoryName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, delegatedAdminAttributeCategoryName);
    }
}
