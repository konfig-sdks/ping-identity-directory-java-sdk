/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddCorrelatedLdapDataViewRequest;
import com.konfigthis.client.model.CorrelatedLdapDataViewListResponse;
import com.konfigthis.client.model.CorrelatedLdapDataViewResponse;
import com.konfigthis.client.model.EnumcorrelatedLdapDataViewSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CorrelatedLdapDataViewApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CorrelatedLdapDataViewApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CorrelatedLdapDataViewApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewConfigCall(String scimResourceTypeName, AddCorrelatedLdapDataViewRequest addCorrelatedLdapDataViewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addCorrelatedLdapDataViewRequest;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views"
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewConfigValidateBeforeCall(String scimResourceTypeName, AddCorrelatedLdapDataViewRequest addCorrelatedLdapDataViewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling addNewConfig(Async)");
        }

        // verify the required parameter 'addCorrelatedLdapDataViewRequest' is set
        if (addCorrelatedLdapDataViewRequest == null) {
            throw new ApiException("Missing the required parameter 'addCorrelatedLdapDataViewRequest' when calling addNewConfig(Async)");
        }

        return addNewConfigCall(scimResourceTypeName, addCorrelatedLdapDataViewRequest, _callback);

    }


    private ApiResponse<CorrelatedLdapDataViewResponse> addNewConfigWithHttpInfo(String scimResourceTypeName, AddCorrelatedLdapDataViewRequest addCorrelatedLdapDataViewRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(scimResourceTypeName, addCorrelatedLdapDataViewRequest, null);
        Type localVarReturnType = new TypeToken<CorrelatedLdapDataViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewConfigAsync(String scimResourceTypeName, AddCorrelatedLdapDataViewRequest addCorrelatedLdapDataViewRequest, final ApiCallback<CorrelatedLdapDataViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(scimResourceTypeName, addCorrelatedLdapDataViewRequest, _callback);
        Type localVarReturnType = new TypeToken<CorrelatedLdapDataViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewConfigRequestBuilder {
        private final String viewName;
        private final String scimResourceTypeName;
        private List<EnumcorrelatedLdapDataViewSchemaUrn> schemas;
        private String structuralLDAPObjectclass;
        private List<String> auxiliaryLDAPObjectclass;
        private String includeBaseDN;
        private List<String> includeFilter;
        private List<String> includeOperationalAttribute;
        private String createDNPattern;
        private String primaryCorrelationAttribute;
        private String secondaryCorrelationAttribute;

        private AddNewConfigRequestBuilder(String viewName, String scimResourceTypeName) {
            this.viewName = viewName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder schemas(List<EnumcorrelatedLdapDataViewSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set structuralLDAPObjectclass
         * @param structuralLDAPObjectclass Specifies the LDAP structural object class that should be exposed by this Correlated LDAP Data View. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder structuralLDAPObjectclass(String structuralLDAPObjectclass) {
            this.structuralLDAPObjectclass = structuralLDAPObjectclass;
            return this;
        }
        
        /**
         * Set auxiliaryLDAPObjectclass
         * @param auxiliaryLDAPObjectclass Specifies an auxiliary LDAP object class that should be exposed by this Correlated LDAP Data View. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder auxiliaryLDAPObjectclass(List<String> auxiliaryLDAPObjectclass) {
            this.auxiliaryLDAPObjectclass = auxiliaryLDAPObjectclass;
            return this;
        }
        
        /**
         * Set includeBaseDN
         * @param includeBaseDN Specifies the base DN of the branch of the LDAP directory that can be accessed by this Correlated LDAP Data View. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder includeBaseDN(String includeBaseDN) {
            this.includeBaseDN = includeBaseDN;
            return this;
        }
        
        /**
         * Set includeFilter
         * @param includeFilter The set of LDAP filters that define the LDAP entries that should be included in this Correlated LDAP Data View. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder includeFilter(List<String> includeFilter) {
            this.includeFilter = includeFilter;
            return this;
        }
        
        /**
         * Set includeOperationalAttribute
         * @param includeOperationalAttribute Specifies the set of operational LDAP attributes to be provided by this Correlated LDAP Data View. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder includeOperationalAttribute(List<String> includeOperationalAttribute) {
            this.includeOperationalAttribute = includeOperationalAttribute;
            return this;
        }
        
        /**
         * Set createDNPattern
         * @param createDNPattern Specifies the template to use for the DN when creating new entries. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder createDNPattern(String createDNPattern) {
            this.createDNPattern = createDNPattern;
            return this;
        }
        
        /**
         * Set primaryCorrelationAttribute
         * @param primaryCorrelationAttribute The LDAP attribute from the parent SCIM Resource Type whose value will be used to match objects in the Correlated LDAP Data View. If multiple correlation attributes are required they may be created using additional correlation-attribute-pairs. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder primaryCorrelationAttribute(String primaryCorrelationAttribute) {
            this.primaryCorrelationAttribute = primaryCorrelationAttribute;
            return this;
        }
        
        /**
         * Set secondaryCorrelationAttribute
         * @param secondaryCorrelationAttribute The LDAP attribute from the Correlated LDAP Data View whose value will be matched with the primary-correlation-attribute. If multiple correlation attributes are required they may be specified by creating additional correlation-attribute-pairs. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder secondaryCorrelationAttribute(String secondaryCorrelationAttribute) {
            this.secondaryCorrelationAttribute = secondaryCorrelationAttribute;
            return this;
        }
        
        /**
         * Build call for addNewConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Correlated LDAP Data View already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddCorrelatedLdapDataViewRequest addCorrelatedLdapDataViewRequest = buildBodyParams();
            return addNewConfigCall(scimResourceTypeName, addCorrelatedLdapDataViewRequest, _callback);
        }

        private AddCorrelatedLdapDataViewRequest buildBodyParams() {
            AddCorrelatedLdapDataViewRequest addCorrelatedLdapDataViewRequest = new AddCorrelatedLdapDataViewRequest();
            return addCorrelatedLdapDataViewRequest;
        }

        /**
         * Execute addNewConfig request
         * @return CorrelatedLdapDataViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Correlated LDAP Data View already exists </td><td>  -  </td></tr>
         </table>
         */
        public CorrelatedLdapDataViewResponse execute() throws ApiException {
            AddCorrelatedLdapDataViewRequest addCorrelatedLdapDataViewRequest = buildBodyParams();
            ApiResponse<CorrelatedLdapDataViewResponse> localVarResp = addNewConfigWithHttpInfo(scimResourceTypeName, addCorrelatedLdapDataViewRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewConfig request with HTTP info returned
         * @return ApiResponse&lt;CorrelatedLdapDataViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Correlated LDAP Data View already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CorrelatedLdapDataViewResponse> executeWithHttpInfo() throws ApiException {
            AddCorrelatedLdapDataViewRequest addCorrelatedLdapDataViewRequest = buildBodyParams();
            return addNewConfigWithHttpInfo(scimResourceTypeName, addCorrelatedLdapDataViewRequest);
        }

        /**
         * Execute addNewConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Correlated LDAP Data View already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CorrelatedLdapDataViewResponse> _callback) throws ApiException {
            AddCorrelatedLdapDataViewRequest addCorrelatedLdapDataViewRequest = buildBodyParams();
            return addNewConfigAsync(scimResourceTypeName, addCorrelatedLdapDataViewRequest, _callback);
        }
    }

    /**
     * Add a new Correlated LDAP Data View to the config
     * 
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @param addCorrelatedLdapDataViewRequest Create a new Correlated LDAP Data View in the config (required)
     * @return AddNewConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Correlated LDAP Data View already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewConfigRequestBuilder addNewConfig(String viewName, String scimResourceTypeName) throws IllegalArgumentException {
        if (viewName == null) throw new IllegalArgumentException("\"viewName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new AddNewConfigRequestBuilder(viewName, scimResourceTypeName);
    }
    private okhttp3.Call deleteCorrelatedLdapDataViewCall(String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}"
            .replace("{" + "correlated-ldap-data-view-name" + "}", localVarApiClient.escapeString(correlatedLdapDataViewName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCorrelatedLdapDataViewValidateBeforeCall(String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'correlatedLdapDataViewName' is set
        if (correlatedLdapDataViewName == null) {
            throw new ApiException("Missing the required parameter 'correlatedLdapDataViewName' when calling deleteCorrelatedLdapDataView(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling deleteCorrelatedLdapDataView(Async)");
        }

        return deleteCorrelatedLdapDataViewCall(correlatedLdapDataViewName, scimResourceTypeName, _callback);

    }


    private ApiResponse<Void> deleteCorrelatedLdapDataViewWithHttpInfo(String correlatedLdapDataViewName, String scimResourceTypeName) throws ApiException {
        okhttp3.Call localVarCall = deleteCorrelatedLdapDataViewValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCorrelatedLdapDataViewAsync(String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCorrelatedLdapDataViewValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCorrelatedLdapDataViewRequestBuilder {
        private final String correlatedLdapDataViewName;
        private final String scimResourceTypeName;

        private DeleteCorrelatedLdapDataViewRequestBuilder(String correlatedLdapDataViewName, String scimResourceTypeName) {
            this.correlatedLdapDataViewName = correlatedLdapDataViewName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Build call for deleteCorrelatedLdapDataView
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Correlated LDAP Data View cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCorrelatedLdapDataViewCall(correlatedLdapDataViewName, scimResourceTypeName, _callback);
        }


        /**
         * Execute deleteCorrelatedLdapDataView request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Correlated LDAP Data View cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCorrelatedLdapDataViewWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName);
        }

        /**
         * Execute deleteCorrelatedLdapDataView request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Correlated LDAP Data View cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCorrelatedLdapDataViewWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName);
        }

        /**
         * Execute deleteCorrelatedLdapDataView request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Correlated LDAP Data View cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCorrelatedLdapDataViewAsync(correlatedLdapDataViewName, scimResourceTypeName, _callback);
        }
    }

    /**
     * Delete a Correlated LDAP Data View
     * 
     * @param correlatedLdapDataViewName Name of the Correlated LDAP Data View (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @return DeleteCorrelatedLdapDataViewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Correlated LDAP Data View cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCorrelatedLdapDataViewRequestBuilder deleteCorrelatedLdapDataView(String correlatedLdapDataViewName, String scimResourceTypeName) throws IllegalArgumentException {
        if (correlatedLdapDataViewName == null) throw new IllegalArgumentException("\"correlatedLdapDataViewName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new DeleteCorrelatedLdapDataViewRequestBuilder(correlatedLdapDataViewName, scimResourceTypeName);
    }
    private okhttp3.Call getListCall(String scimResourceTypeName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views"
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String scimResourceTypeName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling getList(Async)");
        }

        return getListCall(scimResourceTypeName, filter, _callback);

    }


    private ApiResponse<CorrelatedLdapDataViewListResponse> getListWithHttpInfo(String scimResourceTypeName, String filter) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(scimResourceTypeName, filter, null);
        Type localVarReturnType = new TypeToken<CorrelatedLdapDataViewListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String scimResourceTypeName, String filter, final ApiCallback<CorrelatedLdapDataViewListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(scimResourceTypeName, filter, _callback);
        Type localVarReturnType = new TypeToken<CorrelatedLdapDataViewListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String scimResourceTypeName;
        private String filter;

        private GetListRequestBuilder(String scimResourceTypeName) {
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(scimResourceTypeName, filter, _callback);
        }


        /**
         * Execute getList request
         * @return CorrelatedLdapDataViewListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public CorrelatedLdapDataViewListResponse execute() throws ApiException {
            ApiResponse<CorrelatedLdapDataViewListResponse> localVarResp = getListWithHttpInfo(scimResourceTypeName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;CorrelatedLdapDataViewListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CorrelatedLdapDataViewListResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(scimResourceTypeName, filter);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CorrelatedLdapDataViewListResponse> _callback) throws ApiException {
            return getListAsync(scimResourceTypeName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Correlated LDAP Data View objects
     * 
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList(String scimResourceTypeName) throws IllegalArgumentException {
        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new GetListRequestBuilder(scimResourceTypeName);
    }
    private okhttp3.Call getSingleCall(String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}"
            .replace("{" + "correlated-ldap-data-view-name" + "}", localVarApiClient.escapeString(correlatedLdapDataViewName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'correlatedLdapDataViewName' is set
        if (correlatedLdapDataViewName == null) {
            throw new ApiException("Missing the required parameter 'correlatedLdapDataViewName' when calling getSingle(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling getSingle(Async)");
        }

        return getSingleCall(correlatedLdapDataViewName, scimResourceTypeName, _callback);

    }


    private ApiResponse<CorrelatedLdapDataViewResponse> getSingleWithHttpInfo(String correlatedLdapDataViewName, String scimResourceTypeName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, null);
        Type localVarReturnType = new TypeToken<CorrelatedLdapDataViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback<CorrelatedLdapDataViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, _callback);
        Type localVarReturnType = new TypeToken<CorrelatedLdapDataViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String correlatedLdapDataViewName;
        private final String scimResourceTypeName;

        private GetSingleRequestBuilder(String correlatedLdapDataViewName, String scimResourceTypeName) {
            this.correlatedLdapDataViewName = correlatedLdapDataViewName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(correlatedLdapDataViewName, scimResourceTypeName, _callback);
        }


        /**
         * Execute getSingle request
         * @return CorrelatedLdapDataViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
         </table>
         */
        public CorrelatedLdapDataViewResponse execute() throws ApiException {
            ApiResponse<CorrelatedLdapDataViewResponse> localVarResp = getSingleWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;CorrelatedLdapDataViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CorrelatedLdapDataViewResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CorrelatedLdapDataViewResponse> _callback) throws ApiException {
            return getSingleAsync(correlatedLdapDataViewName, scimResourceTypeName, _callback);
        }
    }

    /**
     * Returns a single Correlated LDAP Data View
     * 
     * @param correlatedLdapDataViewName Name of the Correlated LDAP Data View (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String correlatedLdapDataViewName, String scimResourceTypeName) throws IllegalArgumentException {
        if (correlatedLdapDataViewName == null) throw new IllegalArgumentException("\"correlatedLdapDataViewName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new GetSingleRequestBuilder(correlatedLdapDataViewName, scimResourceTypeName);
    }
    private okhttp3.Call updateByNameCall(String correlatedLdapDataViewName, String scimResourceTypeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}"
            .replace("{" + "correlated-ldap-data-view-name" + "}", localVarApiClient.escapeString(correlatedLdapDataViewName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String correlatedLdapDataViewName, String scimResourceTypeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'correlatedLdapDataViewName' is set
        if (correlatedLdapDataViewName == null) {
            throw new ApiException("Missing the required parameter 'correlatedLdapDataViewName' when calling updateByName(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(correlatedLdapDataViewName, scimResourceTypeName, updateRequest, _callback);

    }


    private ApiResponse<CorrelatedLdapDataViewResponse> updateByNameWithHttpInfo(String correlatedLdapDataViewName, String scimResourceTypeName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, updateRequest, null);
        Type localVarReturnType = new TypeToken<CorrelatedLdapDataViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String correlatedLdapDataViewName, String scimResourceTypeName, UpdateRequest updateRequest, final ApiCallback<CorrelatedLdapDataViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<CorrelatedLdapDataViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String correlatedLdapDataViewName;
        private final String scimResourceTypeName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String correlatedLdapDataViewName, String scimResourceTypeName) {
            this.operations = operations;
            this.correlatedLdapDataViewName = correlatedLdapDataViewName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(correlatedLdapDataViewName, scimResourceTypeName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return CorrelatedLdapDataViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
         </table>
         */
        public CorrelatedLdapDataViewResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<CorrelatedLdapDataViewResponse> localVarResp = updateByNameWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;CorrelatedLdapDataViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CorrelatedLdapDataViewResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CorrelatedLdapDataViewResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(correlatedLdapDataViewName, scimResourceTypeName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Correlated LDAP Data View by name
     * 
     * @param correlatedLdapDataViewName Name of the Correlated LDAP Data View (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @param updateRequest Update an existing Correlated LDAP Data View (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Correlated LDAP Data View does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String correlatedLdapDataViewName, String scimResourceTypeName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (correlatedLdapDataViewName == null) throw new IllegalArgumentException("\"correlatedLdapDataViewName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, correlatedLdapDataViewName, scimResourceTypeName);
    }
}
