/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddDnMapRequest;
import com.konfigthis.client.model.DnMapListResponse;
import com.konfigthis.client.model.DnMapResponse;
import com.konfigthis.client.model.EnumdnMapSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DnMapApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DnMapApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DnMapApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDnMapCall(AddDnMapRequest addDnMapRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDnMapRequest;

        // create path and map variables
        String localVarPath = "/dn-maps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDnMapValidateBeforeCall(AddDnMapRequest addDnMapRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addDnMapRequest' is set
        if (addDnMapRequest == null) {
            throw new ApiException("Missing the required parameter 'addDnMapRequest' when calling createNewDnMap(Async)");
        }

        return createNewDnMapCall(addDnMapRequest, _callback);

    }


    private ApiResponse<DnMapResponse> createNewDnMapWithHttpInfo(AddDnMapRequest addDnMapRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewDnMapValidateBeforeCall(addDnMapRequest, null);
        Type localVarReturnType = new TypeToken<DnMapResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDnMapAsync(AddDnMapRequest addDnMapRequest, final ApiCallback<DnMapResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDnMapValidateBeforeCall(addDnMapRequest, _callback);
        Type localVarReturnType = new TypeToken<DnMapResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDnMapRequestBuilder {
        private final String mapName;
        private String description;
        private List<EnumdnMapSchemaUrn> schemas;
        private String fromDNPattern;
        private String toDNPattern;

        private CreateNewDnMapRequestBuilder(String mapName) {
            this.mapName = mapName;
        }

        /**
         * Set description
         * @param description A description for this DN Map (optional)
         * @return CreateNewDnMapRequestBuilder
         */
        public CreateNewDnMapRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return CreateNewDnMapRequestBuilder
         */
        public CreateNewDnMapRequestBuilder schemas(List<EnumdnMapSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set fromDNPattern
         * @param fromDNPattern Specifies the DN pattern to match when determining whether this map applies to a specific source DN. If the provided bind DN matches this pattern, then the to-dn-pattern will be used to perform the mapping. If the provided bind DN does not match this pattern, then no mapping will be performed. (optional)
         * @return CreateNewDnMapRequestBuilder
         */
        public CreateNewDnMapRequestBuilder fromDNPattern(String fromDNPattern) {
            this.fromDNPattern = fromDNPattern;
            return this;
        }
        
        /**
         * Set toDNPattern
         * @param toDNPattern Specifies a pattern for constructing the DN value using fixed text, DN components matching wild-card values in from-dn-pattern, and attribute values from the source entry. (optional)
         * @return CreateNewDnMapRequestBuilder
         */
        public CreateNewDnMapRequestBuilder toDNPattern(String toDNPattern) {
            this.toDNPattern = toDNPattern;
            return this;
        }
        
        /**
         * Build call for createNewDnMap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The DN Map already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddDnMapRequest addDnMapRequest = buildBodyParams();
            return createNewDnMapCall(addDnMapRequest, _callback);
        }

        private AddDnMapRequest buildBodyParams() {
            AddDnMapRequest addDnMapRequest = new AddDnMapRequest();
            return addDnMapRequest;
        }

        /**
         * Execute createNewDnMap request
         * @return DnMapResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The DN Map already exists </td><td>  -  </td></tr>
         </table>
         */
        public DnMapResponse execute() throws ApiException {
            AddDnMapRequest addDnMapRequest = buildBodyParams();
            ApiResponse<DnMapResponse> localVarResp = createNewDnMapWithHttpInfo(addDnMapRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDnMap request with HTTP info returned
         * @return ApiResponse&lt;DnMapResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The DN Map already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DnMapResponse> executeWithHttpInfo() throws ApiException {
            AddDnMapRequest addDnMapRequest = buildBodyParams();
            return createNewDnMapWithHttpInfo(addDnMapRequest);
        }

        /**
         * Execute createNewDnMap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The DN Map already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DnMapResponse> _callback) throws ApiException {
            AddDnMapRequest addDnMapRequest = buildBodyParams();
            return createNewDnMapAsync(addDnMapRequest, _callback);
        }
    }

    /**
     * Add a new DN Map to the config
     * 
     * @param addDnMapRequest Create a new DN Map in the config (required)
     * @return CreateNewDnMapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The DN Map already exists </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDnMapRequestBuilder createNewDnMap(String mapName) throws IllegalArgumentException {
        if (mapName == null) throw new IllegalArgumentException("\"mapName\" is required but got null");
            

        return new CreateNewDnMapRequestBuilder(mapName);
    }
    private okhttp3.Call deleteDnMapCall(String dnMapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dn-maps/{dn-map-name}"
            .replace("{" + "dn-map-name" + "}", localVarApiClient.escapeString(dnMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDnMapValidateBeforeCall(String dnMapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnMapName' is set
        if (dnMapName == null) {
            throw new ApiException("Missing the required parameter 'dnMapName' when calling deleteDnMap(Async)");
        }

        return deleteDnMapCall(dnMapName, _callback);

    }


    private ApiResponse<Void> deleteDnMapWithHttpInfo(String dnMapName) throws ApiException {
        okhttp3.Call localVarCall = deleteDnMapValidateBeforeCall(dnMapName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDnMapAsync(String dnMapName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDnMapValidateBeforeCall(dnMapName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDnMapRequestBuilder {
        private final String dnMapName;

        private DeleteDnMapRequestBuilder(String dnMapName) {
            this.dnMapName = dnMapName;
        }

        /**
         * Build call for deleteDnMap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The DN Map cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDnMapCall(dnMapName, _callback);
        }


        /**
         * Execute deleteDnMap request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The DN Map cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDnMapWithHttpInfo(dnMapName);
        }

        /**
         * Execute deleteDnMap request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The DN Map cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDnMapWithHttpInfo(dnMapName);
        }

        /**
         * Execute deleteDnMap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The DN Map cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDnMapAsync(dnMapName, _callback);
        }
    }

    /**
     * Delete a DN Map
     * 
     * @param dnMapName Name of the DN Map (required)
     * @return DeleteDnMapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The DN Map cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDnMapRequestBuilder deleteDnMap(String dnMapName) throws IllegalArgumentException {
        if (dnMapName == null) throw new IllegalArgumentException("\"dnMapName\" is required but got null");
            

        return new DeleteDnMapRequestBuilder(dnMapName);
    }
    private okhttp3.Call getSingleDnMapCall(String dnMapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dn-maps/{dn-map-name}"
            .replace("{" + "dn-map-name" + "}", localVarApiClient.escapeString(dnMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleDnMapValidateBeforeCall(String dnMapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnMapName' is set
        if (dnMapName == null) {
            throw new ApiException("Missing the required parameter 'dnMapName' when calling getSingleDnMap(Async)");
        }

        return getSingleDnMapCall(dnMapName, _callback);

    }


    private ApiResponse<DnMapResponse> getSingleDnMapWithHttpInfo(String dnMapName) throws ApiException {
        okhttp3.Call localVarCall = getSingleDnMapValidateBeforeCall(dnMapName, null);
        Type localVarReturnType = new TypeToken<DnMapResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleDnMapAsync(String dnMapName, final ApiCallback<DnMapResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleDnMapValidateBeforeCall(dnMapName, _callback);
        Type localVarReturnType = new TypeToken<DnMapResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleDnMapRequestBuilder {
        private final String dnMapName;

        private GetSingleDnMapRequestBuilder(String dnMapName) {
            this.dnMapName = dnMapName;
        }

        /**
         * Build call for getSingleDnMap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleDnMapCall(dnMapName, _callback);
        }


        /**
         * Execute getSingleDnMap request
         * @return DnMapResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DnMapResponse execute() throws ApiException {
            ApiResponse<DnMapResponse> localVarResp = getSingleDnMapWithHttpInfo(dnMapName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleDnMap request with HTTP info returned
         * @return ApiResponse&lt;DnMapResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DnMapResponse> executeWithHttpInfo() throws ApiException {
            return getSingleDnMapWithHttpInfo(dnMapName);
        }

        /**
         * Execute getSingleDnMap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DnMapResponse> _callback) throws ApiException {
            return getSingleDnMapAsync(dnMapName, _callback);
        }
    }

    /**
     * Returns a single DN Map
     * 
     * @param dnMapName Name of the DN Map (required)
     * @return GetSingleDnMapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleDnMapRequestBuilder getSingleDnMap(String dnMapName) throws IllegalArgumentException {
        if (dnMapName == null) throw new IllegalArgumentException("\"dnMapName\" is required but got null");
            

        return new GetSingleDnMapRequestBuilder(dnMapName);
    }
    private okhttp3.Call listObjectsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dn-maps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listObjectsCall(filter, _callback);

    }


    private ApiResponse<DnMapListResponse> listObjectsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<DnMapListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listObjectsAsync(String filter, final ApiCallback<DnMapListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<DnMapListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListObjectsRequestBuilder {
        private String filter;

        private ListObjectsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListObjectsRequestBuilder
         */
        public ListObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listObjectsCall(filter, _callback);
        }


        /**
         * Execute listObjects request
         * @return DnMapListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public DnMapListResponse execute() throws ApiException {
            ApiResponse<DnMapListResponse> localVarResp = listObjectsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listObjects request with HTTP info returned
         * @return ApiResponse&lt;DnMapListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DnMapListResponse> executeWithHttpInfo() throws ApiException {
            return listObjectsWithHttpInfo(filter);
        }

        /**
         * Execute listObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DnMapListResponse> _callback) throws ApiException {
            return listObjectsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all DN Map objects
     * 
     * @return ListObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectsRequestBuilder listObjects() throws IllegalArgumentException {
        return new ListObjectsRequestBuilder();
    }
    private okhttp3.Call updateDnMapByNameCall(String dnMapName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/dn-maps/{dn-map-name}"
            .replace("{" + "dn-map-name" + "}", localVarApiClient.escapeString(dnMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDnMapByNameValidateBeforeCall(String dnMapName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnMapName' is set
        if (dnMapName == null) {
            throw new ApiException("Missing the required parameter 'dnMapName' when calling updateDnMapByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateDnMapByName(Async)");
        }

        return updateDnMapByNameCall(dnMapName, updateRequest, _callback);

    }


    private ApiResponse<DnMapResponse> updateDnMapByNameWithHttpInfo(String dnMapName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateDnMapByNameValidateBeforeCall(dnMapName, updateRequest, null);
        Type localVarReturnType = new TypeToken<DnMapResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDnMapByNameAsync(String dnMapName, UpdateRequest updateRequest, final ApiCallback<DnMapResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDnMapByNameValidateBeforeCall(dnMapName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<DnMapResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDnMapByNameRequestBuilder {
        private final List<Operation> operations;
        private final String dnMapName;

        private UpdateDnMapByNameRequestBuilder(List<Operation> operations, String dnMapName) {
            this.operations = operations;
            this.dnMapName = dnMapName;
        }

        /**
         * Build call for updateDnMapByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateDnMapByNameCall(dnMapName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateDnMapByName request
         * @return DnMapResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DnMapResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<DnMapResponse> localVarResp = updateDnMapByNameWithHttpInfo(dnMapName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDnMapByName request with HTTP info returned
         * @return ApiResponse&lt;DnMapResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DnMapResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateDnMapByNameWithHttpInfo(dnMapName, updateRequest);
        }

        /**
         * Execute updateDnMapByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DnMapResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateDnMapByNameAsync(dnMapName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing DN Map by name
     * 
     * @param dnMapName Name of the DN Map (required)
     * @param updateRequest Update an existing DN Map (required)
     * @return UpdateDnMapByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The DN Map does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDnMapByNameRequestBuilder updateDnMapByName(List<Operation> operations, String dnMapName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (dnMapName == null) throw new IllegalArgumentException("\"dnMapName\" is required but got null");
            

        return new UpdateDnMapByNameRequestBuilder(operations, dnMapName);
    }
}
