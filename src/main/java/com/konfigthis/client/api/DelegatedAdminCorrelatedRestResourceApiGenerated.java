/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddDelegatedAdminCorrelatedRestResourceRequest;
import com.konfigthis.client.model.DelegatedAdminCorrelatedRestResourceListResponse;
import com.konfigthis.client.model.DelegatedAdminCorrelatedRestResourceResponse;
import com.konfigthis.client.model.EnumdelegatedAdminCorrelatedRestResourceSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DelegatedAdminCorrelatedRestResourceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DelegatedAdminCorrelatedRestResourceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DelegatedAdminCorrelatedRestResourceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewToConfigCall(String restResourceTypeName, AddDelegatedAdminCorrelatedRestResourceRequest addDelegatedAdminCorrelatedRestResourceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDelegatedAdminCorrelatedRestResourceRequest;

        // create path and map variables
        String localVarPath = "/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources"
            .replace("{" + "rest-resource-type-name" + "}", localVarApiClient.escapeString(restResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewToConfigValidateBeforeCall(String restResourceTypeName, AddDelegatedAdminCorrelatedRestResourceRequest addDelegatedAdminCorrelatedRestResourceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'restResourceTypeName' is set
        if (restResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'restResourceTypeName' when calling addNewToConfig(Async)");
        }

        // verify the required parameter 'addDelegatedAdminCorrelatedRestResourceRequest' is set
        if (addDelegatedAdminCorrelatedRestResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'addDelegatedAdminCorrelatedRestResourceRequest' when calling addNewToConfig(Async)");
        }

        return addNewToConfigCall(restResourceTypeName, addDelegatedAdminCorrelatedRestResourceRequest, _callback);

    }


    private ApiResponse<DelegatedAdminCorrelatedRestResourceResponse> addNewToConfigWithHttpInfo(String restResourceTypeName, AddDelegatedAdminCorrelatedRestResourceRequest addDelegatedAdminCorrelatedRestResourceRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewToConfigValidateBeforeCall(restResourceTypeName, addDelegatedAdminCorrelatedRestResourceRequest, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminCorrelatedRestResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewToConfigAsync(String restResourceTypeName, AddDelegatedAdminCorrelatedRestResourceRequest addDelegatedAdminCorrelatedRestResourceRequest, final ApiCallback<DelegatedAdminCorrelatedRestResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewToConfigValidateBeforeCall(restResourceTypeName, addDelegatedAdminCorrelatedRestResourceRequest, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminCorrelatedRestResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewToConfigRequestBuilder {
        private final String resourceName;
        private final String restResourceTypeName;
        private List<EnumdelegatedAdminCorrelatedRestResourceSchemaUrn> schemas;
        private String displayName;
        private String correlatedRESTResource;
        private String primaryRESTResourceCorrelationAttribute;
        private String secondaryRESTResourceCorrelationAttribute;
        private Boolean useSecondaryValueForLinking;

        private AddNewToConfigRequestBuilder(String resourceName, String restResourceTypeName) {
            this.resourceName = resourceName;
            this.restResourceTypeName = restResourceTypeName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder schemas(List<EnumdelegatedAdminCorrelatedRestResourceSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set displayName
         * @param displayName A human readable display name for this Delegated Admin Correlated REST Resource. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder displayName(String displayName) {
            this.displayName = displayName;
            return this;
        }
        
        /**
         * Set correlatedRESTResource
         * @param correlatedRESTResource The REST Resource Type that will be linked to this REST Resource Type. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder correlatedRESTResource(String correlatedRESTResource) {
            this.correlatedRESTResource = correlatedRESTResource;
            return this;
        }
        
        /**
         * Set primaryRESTResourceCorrelationAttribute
         * @param primaryRESTResourceCorrelationAttribute The LDAP attribute from the parent REST Resource Type whose value will be used to match objects in the Delegated Admin Correlated REST Resource. This attribute must be writeable when use-secondary-value-for-linking is enabled. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder primaryRESTResourceCorrelationAttribute(String primaryRESTResourceCorrelationAttribute) {
            this.primaryRESTResourceCorrelationAttribute = primaryRESTResourceCorrelationAttribute;
            return this;
        }
        
        /**
         * Set secondaryRESTResourceCorrelationAttribute
         * @param secondaryRESTResourceCorrelationAttribute The LDAP attribute from the Delegated Admin Correlated REST Resource whose value will be matched with the primary-rest-resource-correlation-attribute. This attribute must be writeable when use-secondary-value-for-linking is disabled. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder secondaryRESTResourceCorrelationAttribute(String secondaryRESTResourceCorrelationAttribute) {
            this.secondaryRESTResourceCorrelationAttribute = secondaryRESTResourceCorrelationAttribute;
            return this;
        }
        
        /**
         * Set useSecondaryValueForLinking
         * @param useSecondaryValueForLinking Indicates whether links should be created using the secondary correlation attribute value. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder useSecondaryValueForLinking(Boolean useSecondaryValueForLinking) {
            this.useSecondaryValueForLinking = useSecondaryValueForLinking;
            return this;
        }
        
        /**
         * Build call for addNewToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddDelegatedAdminCorrelatedRestResourceRequest addDelegatedAdminCorrelatedRestResourceRequest = buildBodyParams();
            return addNewToConfigCall(restResourceTypeName, addDelegatedAdminCorrelatedRestResourceRequest, _callback);
        }

        private AddDelegatedAdminCorrelatedRestResourceRequest buildBodyParams() {
            AddDelegatedAdminCorrelatedRestResourceRequest addDelegatedAdminCorrelatedRestResourceRequest = new AddDelegatedAdminCorrelatedRestResourceRequest();
            return addDelegatedAdminCorrelatedRestResourceRequest;
        }

        /**
         * Execute addNewToConfig request
         * @return DelegatedAdminCorrelatedRestResourceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource already exists </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminCorrelatedRestResourceResponse execute() throws ApiException {
            AddDelegatedAdminCorrelatedRestResourceRequest addDelegatedAdminCorrelatedRestResourceRequest = buildBodyParams();
            ApiResponse<DelegatedAdminCorrelatedRestResourceResponse> localVarResp = addNewToConfigWithHttpInfo(restResourceTypeName, addDelegatedAdminCorrelatedRestResourceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewToConfig request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminCorrelatedRestResourceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminCorrelatedRestResourceResponse> executeWithHttpInfo() throws ApiException {
            AddDelegatedAdminCorrelatedRestResourceRequest addDelegatedAdminCorrelatedRestResourceRequest = buildBodyParams();
            return addNewToConfigWithHttpInfo(restResourceTypeName, addDelegatedAdminCorrelatedRestResourceRequest);
        }

        /**
         * Execute addNewToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminCorrelatedRestResourceResponse> _callback) throws ApiException {
            AddDelegatedAdminCorrelatedRestResourceRequest addDelegatedAdminCorrelatedRestResourceRequest = buildBodyParams();
            return addNewToConfigAsync(restResourceTypeName, addDelegatedAdminCorrelatedRestResourceRequest, _callback);
        }
    }

    /**
     * Add a new Delegated Admin Correlated REST Resource to the config
     * 
     * @param restResourceTypeName Name of the REST Resource Type (required)
     * @param addDelegatedAdminCorrelatedRestResourceRequest Create a new Delegated Admin Correlated REST Resource in the config (required)
     * @return AddNewToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewToConfigRequestBuilder addNewToConfig(String resourceName, String restResourceTypeName) throws IllegalArgumentException {
        if (resourceName == null) throw new IllegalArgumentException("\"resourceName\" is required but got null");
            

        if (restResourceTypeName == null) throw new IllegalArgumentException("\"restResourceTypeName\" is required but got null");
            

        return new AddNewToConfigRequestBuilder(resourceName, restResourceTypeName);
    }
    private okhttp3.Call deleteResourceCall(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}"
            .replace("{" + "delegated-admin-correlated-rest-resource-name" + "}", localVarApiClient.escapeString(delegatedAdminCorrelatedRestResourceName.toString()))
            .replace("{" + "rest-resource-type-name" + "}", localVarApiClient.escapeString(restResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceValidateBeforeCall(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminCorrelatedRestResourceName' is set
        if (delegatedAdminCorrelatedRestResourceName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminCorrelatedRestResourceName' when calling deleteResource(Async)");
        }

        // verify the required parameter 'restResourceTypeName' is set
        if (restResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'restResourceTypeName' when calling deleteResource(Async)");
        }

        return deleteResourceCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, _callback);

    }


    private ApiResponse<Void> deleteResourceWithHttpInfo(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceValidateBeforeCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteResourceAsync(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceValidateBeforeCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteResourceRequestBuilder {
        private final String delegatedAdminCorrelatedRestResourceName;
        private final String restResourceTypeName;

        private DeleteResourceRequestBuilder(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName) {
            this.delegatedAdminCorrelatedRestResourceName = delegatedAdminCorrelatedRestResourceName;
            this.restResourceTypeName = restResourceTypeName;
        }

        /**
         * Build call for deleteResource
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteResourceCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, _callback);
        }


        /**
         * Execute deleteResource request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteResourceWithHttpInfo(delegatedAdminCorrelatedRestResourceName, restResourceTypeName);
        }

        /**
         * Execute deleteResource request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteResourceWithHttpInfo(delegatedAdminCorrelatedRestResourceName, restResourceTypeName);
        }

        /**
         * Execute deleteResource request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteResourceAsync(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, _callback);
        }
    }

    /**
     * Delete a Delegated Admin Correlated REST Resource
     * 
     * @param delegatedAdminCorrelatedRestResourceName Name of the Delegated Admin Correlated REST Resource (required)
     * @param restResourceTypeName Name of the REST Resource Type (required)
     * @return DeleteResourceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Delegated Admin Correlated REST Resource cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteResourceRequestBuilder deleteResource(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName) throws IllegalArgumentException {
        if (delegatedAdminCorrelatedRestResourceName == null) throw new IllegalArgumentException("\"delegatedAdminCorrelatedRestResourceName\" is required but got null");
            

        if (restResourceTypeName == null) throw new IllegalArgumentException("\"restResourceTypeName\" is required but got null");
            

        return new DeleteResourceRequestBuilder(delegatedAdminCorrelatedRestResourceName, restResourceTypeName);
    }
    private okhttp3.Call getSingleCorrelatedCall(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}"
            .replace("{" + "delegated-admin-correlated-rest-resource-name" + "}", localVarApiClient.escapeString(delegatedAdminCorrelatedRestResourceName.toString()))
            .replace("{" + "rest-resource-type-name" + "}", localVarApiClient.escapeString(restResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleCorrelatedValidateBeforeCall(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminCorrelatedRestResourceName' is set
        if (delegatedAdminCorrelatedRestResourceName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminCorrelatedRestResourceName' when calling getSingleCorrelated(Async)");
        }

        // verify the required parameter 'restResourceTypeName' is set
        if (restResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'restResourceTypeName' when calling getSingleCorrelated(Async)");
        }

        return getSingleCorrelatedCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, _callback);

    }


    private ApiResponse<DelegatedAdminCorrelatedRestResourceResponse> getSingleCorrelatedWithHttpInfo(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName) throws ApiException {
        okhttp3.Call localVarCall = getSingleCorrelatedValidateBeforeCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminCorrelatedRestResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleCorrelatedAsync(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, final ApiCallback<DelegatedAdminCorrelatedRestResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleCorrelatedValidateBeforeCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminCorrelatedRestResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleCorrelatedRequestBuilder {
        private final String delegatedAdminCorrelatedRestResourceName;
        private final String restResourceTypeName;

        private GetSingleCorrelatedRequestBuilder(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName) {
            this.delegatedAdminCorrelatedRestResourceName = delegatedAdminCorrelatedRestResourceName;
            this.restResourceTypeName = restResourceTypeName;
        }

        /**
         * Build call for getSingleCorrelated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCorrelatedCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, _callback);
        }


        /**
         * Execute getSingleCorrelated request
         * @return DelegatedAdminCorrelatedRestResourceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminCorrelatedRestResourceResponse execute() throws ApiException {
            ApiResponse<DelegatedAdminCorrelatedRestResourceResponse> localVarResp = getSingleCorrelatedWithHttpInfo(delegatedAdminCorrelatedRestResourceName, restResourceTypeName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleCorrelated request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminCorrelatedRestResourceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminCorrelatedRestResourceResponse> executeWithHttpInfo() throws ApiException {
            return getSingleCorrelatedWithHttpInfo(delegatedAdminCorrelatedRestResourceName, restResourceTypeName);
        }

        /**
         * Execute getSingleCorrelated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminCorrelatedRestResourceResponse> _callback) throws ApiException {
            return getSingleCorrelatedAsync(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, _callback);
        }
    }

    /**
     * Returns a single Delegated Admin Correlated REST Resource
     * 
     * @param delegatedAdminCorrelatedRestResourceName Name of the Delegated Admin Correlated REST Resource (required)
     * @param restResourceTypeName Name of the REST Resource Type (required)
     * @return GetSingleCorrelatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleCorrelatedRequestBuilder getSingleCorrelated(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName) throws IllegalArgumentException {
        if (delegatedAdminCorrelatedRestResourceName == null) throw new IllegalArgumentException("\"delegatedAdminCorrelatedRestResourceName\" is required but got null");
            

        if (restResourceTypeName == null) throw new IllegalArgumentException("\"restResourceTypeName\" is required but got null");
            

        return new GetSingleCorrelatedRequestBuilder(delegatedAdminCorrelatedRestResourceName, restResourceTypeName);
    }
    private okhttp3.Call listAllObjectsCall(String restResourceTypeName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources"
            .replace("{" + "rest-resource-type-name" + "}", localVarApiClient.escapeString(restResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String restResourceTypeName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'restResourceTypeName' is set
        if (restResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'restResourceTypeName' when calling listAllObjects(Async)");
        }

        return listAllObjectsCall(restResourceTypeName, filter, _callback);

    }


    private ApiResponse<DelegatedAdminCorrelatedRestResourceListResponse> listAllObjectsWithHttpInfo(String restResourceTypeName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(restResourceTypeName, filter, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminCorrelatedRestResourceListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String restResourceTypeName, String filter, final ApiCallback<DelegatedAdminCorrelatedRestResourceListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(restResourceTypeName, filter, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminCorrelatedRestResourceListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private final String restResourceTypeName;
        private String filter;

        private ListAllObjectsRequestBuilder(String restResourceTypeName) {
            this.restResourceTypeName = restResourceTypeName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(restResourceTypeName, filter, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return DelegatedAdminCorrelatedRestResourceListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminCorrelatedRestResourceListResponse execute() throws ApiException {
            ApiResponse<DelegatedAdminCorrelatedRestResourceListResponse> localVarResp = listAllObjectsWithHttpInfo(restResourceTypeName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminCorrelatedRestResourceListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminCorrelatedRestResourceListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(restResourceTypeName, filter);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminCorrelatedRestResourceListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(restResourceTypeName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Delegated Admin Correlated REST Resource objects
     * 
     * @param restResourceTypeName Name of the REST Resource Type (required)
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects(String restResourceTypeName) throws IllegalArgumentException {
        if (restResourceTypeName == null) throw new IllegalArgumentException("\"restResourceTypeName\" is required but got null");
            

        return new ListAllObjectsRequestBuilder(restResourceTypeName);
    }
    private okhttp3.Call updateByNameCall(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/rest-resource-types/{rest-resource-type-name}/delegated-admin-correlated-rest-resources/{delegated-admin-correlated-rest-resource-name}"
            .replace("{" + "delegated-admin-correlated-rest-resource-name" + "}", localVarApiClient.escapeString(delegatedAdminCorrelatedRestResourceName.toString()))
            .replace("{" + "rest-resource-type-name" + "}", localVarApiClient.escapeString(restResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminCorrelatedRestResourceName' is set
        if (delegatedAdminCorrelatedRestResourceName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminCorrelatedRestResourceName' when calling updateByName(Async)");
        }

        // verify the required parameter 'restResourceTypeName' is set
        if (restResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'restResourceTypeName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, updateRequest, _callback);

    }


    private ApiResponse<DelegatedAdminCorrelatedRestResourceResponse> updateByNameWithHttpInfo(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, updateRequest, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminCorrelatedRestResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName, UpdateRequest updateRequest, final ApiCallback<DelegatedAdminCorrelatedRestResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminCorrelatedRestResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String delegatedAdminCorrelatedRestResourceName;
        private final String restResourceTypeName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName) {
            this.operations = operations;
            this.delegatedAdminCorrelatedRestResourceName = delegatedAdminCorrelatedRestResourceName;
            this.restResourceTypeName = restResourceTypeName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return DelegatedAdminCorrelatedRestResourceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminCorrelatedRestResourceResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<DelegatedAdminCorrelatedRestResourceResponse> localVarResp = updateByNameWithHttpInfo(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminCorrelatedRestResourceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminCorrelatedRestResourceResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminCorrelatedRestResourceResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(delegatedAdminCorrelatedRestResourceName, restResourceTypeName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Delegated Admin Correlated REST Resource by name
     * 
     * @param delegatedAdminCorrelatedRestResourceName Name of the Delegated Admin Correlated REST Resource (required)
     * @param restResourceTypeName Name of the REST Resource Type (required)
     * @param updateRequest Update an existing Delegated Admin Correlated REST Resource (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Correlated REST Resource does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String delegatedAdminCorrelatedRestResourceName, String restResourceTypeName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (delegatedAdminCorrelatedRestResourceName == null) throw new IllegalArgumentException("\"delegatedAdminCorrelatedRestResourceName\" is required but got null");
            

        if (restResourceTypeName == null) throw new IllegalArgumentException("\"restResourceTypeName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, delegatedAdminCorrelatedRestResourceName, restResourceTypeName);
    }
}
