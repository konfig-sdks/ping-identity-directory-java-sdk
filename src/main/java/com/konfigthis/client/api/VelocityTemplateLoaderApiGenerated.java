/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddVelocityTemplateLoaderRequest;
import com.konfigthis.client.model.EnumvelocityTemplateLoaderSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;
import com.konfigthis.client.model.VelocityTemplateLoaderListResponse;
import com.konfigthis.client.model.VelocityTemplateLoaderResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VelocityTemplateLoaderApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VelocityTemplateLoaderApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VelocityTemplateLoaderApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewLoaderToConfigCall(String httpServletExtensionName, AddVelocityTemplateLoaderRequest addVelocityTemplateLoaderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addVelocityTemplateLoaderRequest;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders"
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewLoaderToConfigValidateBeforeCall(String httpServletExtensionName, AddVelocityTemplateLoaderRequest addVelocityTemplateLoaderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling addNewLoaderToConfig(Async)");
        }

        // verify the required parameter 'addVelocityTemplateLoaderRequest' is set
        if (addVelocityTemplateLoaderRequest == null) {
            throw new ApiException("Missing the required parameter 'addVelocityTemplateLoaderRequest' when calling addNewLoaderToConfig(Async)");
        }

        return addNewLoaderToConfigCall(httpServletExtensionName, addVelocityTemplateLoaderRequest, _callback);

    }


    private ApiResponse<VelocityTemplateLoaderResponse> addNewLoaderToConfigWithHttpInfo(String httpServletExtensionName, AddVelocityTemplateLoaderRequest addVelocityTemplateLoaderRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewLoaderToConfigValidateBeforeCall(httpServletExtensionName, addVelocityTemplateLoaderRequest, null);
        Type localVarReturnType = new TypeToken<VelocityTemplateLoaderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewLoaderToConfigAsync(String httpServletExtensionName, AddVelocityTemplateLoaderRequest addVelocityTemplateLoaderRequest, final ApiCallback<VelocityTemplateLoaderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewLoaderToConfigValidateBeforeCall(httpServletExtensionName, addVelocityTemplateLoaderRequest, _callback);
        Type localVarReturnType = new TypeToken<VelocityTemplateLoaderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewLoaderToConfigRequestBuilder {
        private final String loaderName;
        private final String httpServletExtensionName;
        private List<EnumvelocityTemplateLoaderSchemaUrn> schemas;
        private Boolean enabled;
        private Integer evaluationOrderIndex;
        private String mimeTypeMatcher;
        private String mimeType;
        private String templateSuffix;
        private String templateDirectory;

        private AddNewLoaderToConfigRequestBuilder(String loaderName, String httpServletExtensionName) {
            this.loaderName = loaderName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewLoaderToConfigRequestBuilder
         */
        public AddNewLoaderToConfigRequestBuilder schemas(List<EnumvelocityTemplateLoaderSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Indicates whether this Velocity Template Loader is enabled. (optional)
         * @return AddNewLoaderToConfigRequestBuilder
         */
        public AddNewLoaderToConfigRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set evaluationOrderIndex
         * @param evaluationOrderIndex This property determines the evaluation order for determining the correct Velocity Template Loader to load a template for generating content for a particular request. (optional)
         * @return AddNewLoaderToConfigRequestBuilder
         */
        public AddNewLoaderToConfigRequestBuilder evaluationOrderIndex(Integer evaluationOrderIndex) {
            this.evaluationOrderIndex = evaluationOrderIndex;
            return this;
        }
        
        /**
         * Set mimeTypeMatcher
         * @param mimeTypeMatcher Specifies a media type for matching Accept request-header values. (optional)
         * @return AddNewLoaderToConfigRequestBuilder
         */
        public AddNewLoaderToConfigRequestBuilder mimeTypeMatcher(String mimeTypeMatcher) {
            this.mimeTypeMatcher = mimeTypeMatcher;
            return this;
        }
        
        /**
         * Set mimeType
         * @param mimeType Specifies a the value that will be used in the response&#39;s Content-Type header that indicates the type of content to return. (optional)
         * @return AddNewLoaderToConfigRequestBuilder
         */
        public AddNewLoaderToConfigRequestBuilder mimeType(String mimeType) {
            this.mimeType = mimeType;
            return this;
        }
        
        /**
         * Set templateSuffix
         * @param templateSuffix Specifies the suffix to append to the requested resource name when searching for the template file with which to form a response. (optional)
         * @return AddNewLoaderToConfigRequestBuilder
         */
        public AddNewLoaderToConfigRequestBuilder templateSuffix(String templateSuffix) {
            this.templateSuffix = templateSuffix;
            return this;
        }
        
        /**
         * Set templateDirectory
         * @param templateDirectory Specifies the directory in which to search for the template files. (optional)
         * @return AddNewLoaderToConfigRequestBuilder
         */
        public AddNewLoaderToConfigRequestBuilder templateDirectory(String templateDirectory) {
            this.templateDirectory = templateDirectory;
            return this;
        }
        
        /**
         * Build call for addNewLoaderToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Template Loader already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddVelocityTemplateLoaderRequest addVelocityTemplateLoaderRequest = buildBodyParams();
            return addNewLoaderToConfigCall(httpServletExtensionName, addVelocityTemplateLoaderRequest, _callback);
        }

        private AddVelocityTemplateLoaderRequest buildBodyParams() {
            AddVelocityTemplateLoaderRequest addVelocityTemplateLoaderRequest = new AddVelocityTemplateLoaderRequest();
            return addVelocityTemplateLoaderRequest;
        }

        /**
         * Execute addNewLoaderToConfig request
         * @return VelocityTemplateLoaderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Template Loader already exists </td><td>  -  </td></tr>
         </table>
         */
        public VelocityTemplateLoaderResponse execute() throws ApiException {
            AddVelocityTemplateLoaderRequest addVelocityTemplateLoaderRequest = buildBodyParams();
            ApiResponse<VelocityTemplateLoaderResponse> localVarResp = addNewLoaderToConfigWithHttpInfo(httpServletExtensionName, addVelocityTemplateLoaderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewLoaderToConfig request with HTTP info returned
         * @return ApiResponse&lt;VelocityTemplateLoaderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Template Loader already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VelocityTemplateLoaderResponse> executeWithHttpInfo() throws ApiException {
            AddVelocityTemplateLoaderRequest addVelocityTemplateLoaderRequest = buildBodyParams();
            return addNewLoaderToConfigWithHttpInfo(httpServletExtensionName, addVelocityTemplateLoaderRequest);
        }

        /**
         * Execute addNewLoaderToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Template Loader already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VelocityTemplateLoaderResponse> _callback) throws ApiException {
            AddVelocityTemplateLoaderRequest addVelocityTemplateLoaderRequest = buildBodyParams();
            return addNewLoaderToConfigAsync(httpServletExtensionName, addVelocityTemplateLoaderRequest, _callback);
        }
    }

    /**
     * Add a new Velocity Template Loader to the config
     * 
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @param addVelocityTemplateLoaderRequest Create a new Velocity Template Loader in the config (required)
     * @return AddNewLoaderToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Velocity Template Loader already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewLoaderToConfigRequestBuilder addNewLoaderToConfig(String loaderName, String httpServletExtensionName) throws IllegalArgumentException {
        if (loaderName == null) throw new IllegalArgumentException("\"loaderName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new AddNewLoaderToConfigRequestBuilder(loaderName, httpServletExtensionName);
    }
    private okhttp3.Call deleteLoaderCall(String velocityTemplateLoaderName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}"
            .replace("{" + "velocity-template-loader-name" + "}", localVarApiClient.escapeString(velocityTemplateLoaderName.toString()))
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLoaderValidateBeforeCall(String velocityTemplateLoaderName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'velocityTemplateLoaderName' is set
        if (velocityTemplateLoaderName == null) {
            throw new ApiException("Missing the required parameter 'velocityTemplateLoaderName' when calling deleteLoader(Async)");
        }

        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling deleteLoader(Async)");
        }

        return deleteLoaderCall(velocityTemplateLoaderName, httpServletExtensionName, _callback);

    }


    private ApiResponse<Void> deleteLoaderWithHttpInfo(String velocityTemplateLoaderName, String httpServletExtensionName) throws ApiException {
        okhttp3.Call localVarCall = deleteLoaderValidateBeforeCall(velocityTemplateLoaderName, httpServletExtensionName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLoaderAsync(String velocityTemplateLoaderName, String httpServletExtensionName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLoaderValidateBeforeCall(velocityTemplateLoaderName, httpServletExtensionName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteLoaderRequestBuilder {
        private final String velocityTemplateLoaderName;
        private final String httpServletExtensionName;

        private DeleteLoaderRequestBuilder(String velocityTemplateLoaderName, String httpServletExtensionName) {
            this.velocityTemplateLoaderName = velocityTemplateLoaderName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Build call for deleteLoader
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Template Loader cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLoaderCall(velocityTemplateLoaderName, httpServletExtensionName, _callback);
        }


        /**
         * Execute deleteLoader request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Template Loader cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLoaderWithHttpInfo(velocityTemplateLoaderName, httpServletExtensionName);
        }

        /**
         * Execute deleteLoader request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Template Loader cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLoaderWithHttpInfo(velocityTemplateLoaderName, httpServletExtensionName);
        }

        /**
         * Execute deleteLoader request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Template Loader cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLoaderAsync(velocityTemplateLoaderName, httpServletExtensionName, _callback);
        }
    }

    /**
     * Delete a Velocity Template Loader
     * 
     * @param velocityTemplateLoaderName Name of the Velocity Template Loader (required)
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @return DeleteLoaderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Velocity Template Loader cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLoaderRequestBuilder deleteLoader(String velocityTemplateLoaderName, String httpServletExtensionName) throws IllegalArgumentException {
        if (velocityTemplateLoaderName == null) throw new IllegalArgumentException("\"velocityTemplateLoaderName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new DeleteLoaderRequestBuilder(velocityTemplateLoaderName, httpServletExtensionName);
    }
    private okhttp3.Call getAllTemplateLoadersCall(String httpServletExtensionName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders"
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTemplateLoadersValidateBeforeCall(String httpServletExtensionName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling getAllTemplateLoaders(Async)");
        }

        return getAllTemplateLoadersCall(httpServletExtensionName, filter, _callback);

    }


    private ApiResponse<VelocityTemplateLoaderListResponse> getAllTemplateLoadersWithHttpInfo(String httpServletExtensionName, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAllTemplateLoadersValidateBeforeCall(httpServletExtensionName, filter, null);
        Type localVarReturnType = new TypeToken<VelocityTemplateLoaderListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllTemplateLoadersAsync(String httpServletExtensionName, String filter, final ApiCallback<VelocityTemplateLoaderListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTemplateLoadersValidateBeforeCall(httpServletExtensionName, filter, _callback);
        Type localVarReturnType = new TypeToken<VelocityTemplateLoaderListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllTemplateLoadersRequestBuilder {
        private final String httpServletExtensionName;
        private String filter;

        private GetAllTemplateLoadersRequestBuilder(String httpServletExtensionName) {
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return GetAllTemplateLoadersRequestBuilder
         */
        public GetAllTemplateLoadersRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAllTemplateLoaders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllTemplateLoadersCall(httpServletExtensionName, filter, _callback);
        }


        /**
         * Execute getAllTemplateLoaders request
         * @return VelocityTemplateLoaderListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public VelocityTemplateLoaderListResponse execute() throws ApiException {
            ApiResponse<VelocityTemplateLoaderListResponse> localVarResp = getAllTemplateLoadersWithHttpInfo(httpServletExtensionName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllTemplateLoaders request with HTTP info returned
         * @return ApiResponse&lt;VelocityTemplateLoaderListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VelocityTemplateLoaderListResponse> executeWithHttpInfo() throws ApiException {
            return getAllTemplateLoadersWithHttpInfo(httpServletExtensionName, filter);
        }

        /**
         * Execute getAllTemplateLoaders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VelocityTemplateLoaderListResponse> _callback) throws ApiException {
            return getAllTemplateLoadersAsync(httpServletExtensionName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Velocity Template Loader objects
     * 
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @return GetAllTemplateLoadersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public GetAllTemplateLoadersRequestBuilder getAllTemplateLoaders(String httpServletExtensionName) throws IllegalArgumentException {
        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new GetAllTemplateLoadersRequestBuilder(httpServletExtensionName);
    }
    private okhttp3.Call getSingleLoaderCall(String velocityTemplateLoaderName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}"
            .replace("{" + "velocity-template-loader-name" + "}", localVarApiClient.escapeString(velocityTemplateLoaderName.toString()))
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleLoaderValidateBeforeCall(String velocityTemplateLoaderName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'velocityTemplateLoaderName' is set
        if (velocityTemplateLoaderName == null) {
            throw new ApiException("Missing the required parameter 'velocityTemplateLoaderName' when calling getSingleLoader(Async)");
        }

        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling getSingleLoader(Async)");
        }

        return getSingleLoaderCall(velocityTemplateLoaderName, httpServletExtensionName, _callback);

    }


    private ApiResponse<VelocityTemplateLoaderResponse> getSingleLoaderWithHttpInfo(String velocityTemplateLoaderName, String httpServletExtensionName) throws ApiException {
        okhttp3.Call localVarCall = getSingleLoaderValidateBeforeCall(velocityTemplateLoaderName, httpServletExtensionName, null);
        Type localVarReturnType = new TypeToken<VelocityTemplateLoaderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleLoaderAsync(String velocityTemplateLoaderName, String httpServletExtensionName, final ApiCallback<VelocityTemplateLoaderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleLoaderValidateBeforeCall(velocityTemplateLoaderName, httpServletExtensionName, _callback);
        Type localVarReturnType = new TypeToken<VelocityTemplateLoaderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleLoaderRequestBuilder {
        private final String velocityTemplateLoaderName;
        private final String httpServletExtensionName;

        private GetSingleLoaderRequestBuilder(String velocityTemplateLoaderName, String httpServletExtensionName) {
            this.velocityTemplateLoaderName = velocityTemplateLoaderName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Build call for getSingleLoader
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleLoaderCall(velocityTemplateLoaderName, httpServletExtensionName, _callback);
        }


        /**
         * Execute getSingleLoader request
         * @return VelocityTemplateLoaderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
         </table>
         */
        public VelocityTemplateLoaderResponse execute() throws ApiException {
            ApiResponse<VelocityTemplateLoaderResponse> localVarResp = getSingleLoaderWithHttpInfo(velocityTemplateLoaderName, httpServletExtensionName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleLoader request with HTTP info returned
         * @return ApiResponse&lt;VelocityTemplateLoaderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VelocityTemplateLoaderResponse> executeWithHttpInfo() throws ApiException {
            return getSingleLoaderWithHttpInfo(velocityTemplateLoaderName, httpServletExtensionName);
        }

        /**
         * Execute getSingleLoader request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VelocityTemplateLoaderResponse> _callback) throws ApiException {
            return getSingleLoaderAsync(velocityTemplateLoaderName, httpServletExtensionName, _callback);
        }
    }

    /**
     * Returns a single Velocity Template Loader
     * 
     * @param velocityTemplateLoaderName Name of the Velocity Template Loader (required)
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @return GetSingleLoaderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleLoaderRequestBuilder getSingleLoader(String velocityTemplateLoaderName, String httpServletExtensionName) throws IllegalArgumentException {
        if (velocityTemplateLoaderName == null) throw new IllegalArgumentException("\"velocityTemplateLoaderName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new GetSingleLoaderRequestBuilder(velocityTemplateLoaderName, httpServletExtensionName);
    }
    private okhttp3.Call updateByNameCall(String velocityTemplateLoaderName, String httpServletExtensionName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-template-loaders/{velocity-template-loader-name}"
            .replace("{" + "velocity-template-loader-name" + "}", localVarApiClient.escapeString(velocityTemplateLoaderName.toString()))
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String velocityTemplateLoaderName, String httpServletExtensionName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'velocityTemplateLoaderName' is set
        if (velocityTemplateLoaderName == null) {
            throw new ApiException("Missing the required parameter 'velocityTemplateLoaderName' when calling updateByName(Async)");
        }

        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(velocityTemplateLoaderName, httpServletExtensionName, updateRequest, _callback);

    }


    private ApiResponse<VelocityTemplateLoaderResponse> updateByNameWithHttpInfo(String velocityTemplateLoaderName, String httpServletExtensionName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(velocityTemplateLoaderName, httpServletExtensionName, updateRequest, null);
        Type localVarReturnType = new TypeToken<VelocityTemplateLoaderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String velocityTemplateLoaderName, String httpServletExtensionName, UpdateRequest updateRequest, final ApiCallback<VelocityTemplateLoaderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(velocityTemplateLoaderName, httpServletExtensionName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<VelocityTemplateLoaderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String velocityTemplateLoaderName;
        private final String httpServletExtensionName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String velocityTemplateLoaderName, String httpServletExtensionName) {
            this.operations = operations;
            this.velocityTemplateLoaderName = velocityTemplateLoaderName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(velocityTemplateLoaderName, httpServletExtensionName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return VelocityTemplateLoaderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
         </table>
         */
        public VelocityTemplateLoaderResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<VelocityTemplateLoaderResponse> localVarResp = updateByNameWithHttpInfo(velocityTemplateLoaderName, httpServletExtensionName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;VelocityTemplateLoaderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VelocityTemplateLoaderResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(velocityTemplateLoaderName, httpServletExtensionName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VelocityTemplateLoaderResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(velocityTemplateLoaderName, httpServletExtensionName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Velocity Template Loader by name
     * 
     * @param velocityTemplateLoaderName Name of the Velocity Template Loader (required)
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @param updateRequest Update an existing Velocity Template Loader (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Velocity Template Loader does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String velocityTemplateLoaderName, String httpServletExtensionName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (velocityTemplateLoaderName == null) throw new IllegalArgumentException("\"velocityTemplateLoaderName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, velocityTemplateLoaderName, httpServletExtensionName);
    }
}
