/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;
import com.konfigthis.client.model.VelocityContextProviderListResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VelocityContextProviderApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VelocityContextProviderApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VelocityContextProviderApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewProviderToConfigCall(String httpServletExtensionName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-context-providers"
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewProviderToConfigValidateBeforeCall(String httpServletExtensionName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling addNewProviderToConfig(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNewProviderToConfig(Async)");
        }

        return addNewProviderToConfigCall(httpServletExtensionName, body, _callback);

    }


    private ApiResponse<Object> addNewProviderToConfigWithHttpInfo(String httpServletExtensionName, Object body) throws ApiException {
        okhttp3.Call localVarCall = addNewProviderToConfigValidateBeforeCall(httpServletExtensionName, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewProviderToConfigAsync(String httpServletExtensionName, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewProviderToConfigValidateBeforeCall(httpServletExtensionName, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewProviderToConfigRequestBuilder {
        private final String httpServletExtensionName;
        private Object body;

        private AddNewProviderToConfigRequestBuilder(String httpServletExtensionName) {
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Set body
         * @param body Create a new Velocity Context Provider in the config (optional)
         * @return AddNewProviderToConfigRequestBuilder
         */
        public AddNewProviderToConfigRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for addNewProviderToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Context Provider already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return addNewProviderToConfigCall(httpServletExtensionName, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute addNewProviderToConfig request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Context Provider already exists </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Object> localVarResp = addNewProviderToConfigWithHttpInfo(httpServletExtensionName, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewProviderToConfig request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Context Provider already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return addNewProviderToConfigWithHttpInfo(httpServletExtensionName, body);
        }

        /**
         * Execute addNewProviderToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Context Provider already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Object body = buildBodyParams();
            return addNewProviderToConfigAsync(httpServletExtensionName, body, _callback);
        }
    }

    /**
     * Add a new Velocity Context Provider to the config
     * 
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @param body Create a new Velocity Context Provider in the config (required)
     * @return AddNewProviderToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Velocity Context Provider already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewProviderToConfigRequestBuilder addNewProviderToConfig(String httpServletExtensionName) throws IllegalArgumentException {
        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new AddNewProviderToConfigRequestBuilder(httpServletExtensionName);
    }
    private okhttp3.Call deleteVelocityContextProviderCall(String velocityContextProviderName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-context-providers/{velocity-context-provider-name}"
            .replace("{" + "velocity-context-provider-name" + "}", localVarApiClient.escapeString(velocityContextProviderName.toString()))
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVelocityContextProviderValidateBeforeCall(String velocityContextProviderName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'velocityContextProviderName' is set
        if (velocityContextProviderName == null) {
            throw new ApiException("Missing the required parameter 'velocityContextProviderName' when calling deleteVelocityContextProvider(Async)");
        }

        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling deleteVelocityContextProvider(Async)");
        }

        return deleteVelocityContextProviderCall(velocityContextProviderName, httpServletExtensionName, _callback);

    }


    private ApiResponse<Void> deleteVelocityContextProviderWithHttpInfo(String velocityContextProviderName, String httpServletExtensionName) throws ApiException {
        okhttp3.Call localVarCall = deleteVelocityContextProviderValidateBeforeCall(velocityContextProviderName, httpServletExtensionName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteVelocityContextProviderAsync(String velocityContextProviderName, String httpServletExtensionName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVelocityContextProviderValidateBeforeCall(velocityContextProviderName, httpServletExtensionName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteVelocityContextProviderRequestBuilder {
        private final String velocityContextProviderName;
        private final String httpServletExtensionName;

        private DeleteVelocityContextProviderRequestBuilder(String velocityContextProviderName, String httpServletExtensionName) {
            this.velocityContextProviderName = velocityContextProviderName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Build call for deleteVelocityContextProvider
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Context Provider cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteVelocityContextProviderCall(velocityContextProviderName, httpServletExtensionName, _callback);
        }


        /**
         * Execute deleteVelocityContextProvider request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Context Provider cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteVelocityContextProviderWithHttpInfo(velocityContextProviderName, httpServletExtensionName);
        }

        /**
         * Execute deleteVelocityContextProvider request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Context Provider cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteVelocityContextProviderWithHttpInfo(velocityContextProviderName, httpServletExtensionName);
        }

        /**
         * Execute deleteVelocityContextProvider request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Velocity Context Provider cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteVelocityContextProviderAsync(velocityContextProviderName, httpServletExtensionName, _callback);
        }
    }

    /**
     * Delete a Velocity Context Provider
     * 
     * @param velocityContextProviderName Name of the Velocity Context Provider (required)
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @return DeleteVelocityContextProviderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Velocity Context Provider cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVelocityContextProviderRequestBuilder deleteVelocityContextProvider(String velocityContextProviderName, String httpServletExtensionName) throws IllegalArgumentException {
        if (velocityContextProviderName == null) throw new IllegalArgumentException("\"velocityContextProviderName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new DeleteVelocityContextProviderRequestBuilder(velocityContextProviderName, httpServletExtensionName);
    }
    private okhttp3.Call getSingleVelocityContextProviderCall(String velocityContextProviderName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-context-providers/{velocity-context-provider-name}"
            .replace("{" + "velocity-context-provider-name" + "}", localVarApiClient.escapeString(velocityContextProviderName.toString()))
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleVelocityContextProviderValidateBeforeCall(String velocityContextProviderName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'velocityContextProviderName' is set
        if (velocityContextProviderName == null) {
            throw new ApiException("Missing the required parameter 'velocityContextProviderName' when calling getSingleVelocityContextProvider(Async)");
        }

        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling getSingleVelocityContextProvider(Async)");
        }

        return getSingleVelocityContextProviderCall(velocityContextProviderName, httpServletExtensionName, _callback);

    }


    private ApiResponse<Object> getSingleVelocityContextProviderWithHttpInfo(String velocityContextProviderName, String httpServletExtensionName) throws ApiException {
        okhttp3.Call localVarCall = getSingleVelocityContextProviderValidateBeforeCall(velocityContextProviderName, httpServletExtensionName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleVelocityContextProviderAsync(String velocityContextProviderName, String httpServletExtensionName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleVelocityContextProviderValidateBeforeCall(velocityContextProviderName, httpServletExtensionName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleVelocityContextProviderRequestBuilder {
        private final String velocityContextProviderName;
        private final String httpServletExtensionName;

        private GetSingleVelocityContextProviderRequestBuilder(String velocityContextProviderName, String httpServletExtensionName) {
            this.velocityContextProviderName = velocityContextProviderName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Build call for getSingleVelocityContextProvider
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleVelocityContextProviderCall(velocityContextProviderName, httpServletExtensionName, _callback);
        }


        /**
         * Execute getSingleVelocityContextProvider request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getSingleVelocityContextProviderWithHttpInfo(velocityContextProviderName, httpServletExtensionName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleVelocityContextProvider request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getSingleVelocityContextProviderWithHttpInfo(velocityContextProviderName, httpServletExtensionName);
        }

        /**
         * Execute getSingleVelocityContextProvider request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getSingleVelocityContextProviderAsync(velocityContextProviderName, httpServletExtensionName, _callback);
        }
    }

    /**
     * Returns a single Velocity Context Provider
     * 
     * @param velocityContextProviderName Name of the Velocity Context Provider (required)
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @return GetSingleVelocityContextProviderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleVelocityContextProviderRequestBuilder getSingleVelocityContextProvider(String velocityContextProviderName, String httpServletExtensionName) throws IllegalArgumentException {
        if (velocityContextProviderName == null) throw new IllegalArgumentException("\"velocityContextProviderName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new GetSingleVelocityContextProviderRequestBuilder(velocityContextProviderName, httpServletExtensionName);
    }
    private okhttp3.Call listAllVelocityContextProvidersCall(String httpServletExtensionName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-context-providers"
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllVelocityContextProvidersValidateBeforeCall(String httpServletExtensionName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling listAllVelocityContextProviders(Async)");
        }

        return listAllVelocityContextProvidersCall(httpServletExtensionName, filter, _callback);

    }


    private ApiResponse<VelocityContextProviderListResponse> listAllVelocityContextProvidersWithHttpInfo(String httpServletExtensionName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllVelocityContextProvidersValidateBeforeCall(httpServletExtensionName, filter, null);
        Type localVarReturnType = new TypeToken<VelocityContextProviderListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllVelocityContextProvidersAsync(String httpServletExtensionName, String filter, final ApiCallback<VelocityContextProviderListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllVelocityContextProvidersValidateBeforeCall(httpServletExtensionName, filter, _callback);
        Type localVarReturnType = new TypeToken<VelocityContextProviderListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllVelocityContextProvidersRequestBuilder {
        private final String httpServletExtensionName;
        private String filter;

        private ListAllVelocityContextProvidersRequestBuilder(String httpServletExtensionName) {
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllVelocityContextProvidersRequestBuilder
         */
        public ListAllVelocityContextProvidersRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllVelocityContextProviders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllVelocityContextProvidersCall(httpServletExtensionName, filter, _callback);
        }


        /**
         * Execute listAllVelocityContextProviders request
         * @return VelocityContextProviderListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public VelocityContextProviderListResponse execute() throws ApiException {
            ApiResponse<VelocityContextProviderListResponse> localVarResp = listAllVelocityContextProvidersWithHttpInfo(httpServletExtensionName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllVelocityContextProviders request with HTTP info returned
         * @return ApiResponse&lt;VelocityContextProviderListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VelocityContextProviderListResponse> executeWithHttpInfo() throws ApiException {
            return listAllVelocityContextProvidersWithHttpInfo(httpServletExtensionName, filter);
        }

        /**
         * Execute listAllVelocityContextProviders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VelocityContextProviderListResponse> _callback) throws ApiException {
            return listAllVelocityContextProvidersAsync(httpServletExtensionName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Velocity Context Provider objects
     * 
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @return ListAllVelocityContextProvidersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllVelocityContextProvidersRequestBuilder listAllVelocityContextProviders(String httpServletExtensionName) throws IllegalArgumentException {
        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new ListAllVelocityContextProvidersRequestBuilder(httpServletExtensionName);
    }
    private okhttp3.Call updateBynameVelocityContextProviderCall(String velocityContextProviderName, String httpServletExtensionName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/velocity-context-providers/{velocity-context-provider-name}"
            .replace("{" + "velocity-context-provider-name" + "}", localVarApiClient.escapeString(velocityContextProviderName.toString()))
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBynameVelocityContextProviderValidateBeforeCall(String velocityContextProviderName, String httpServletExtensionName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'velocityContextProviderName' is set
        if (velocityContextProviderName == null) {
            throw new ApiException("Missing the required parameter 'velocityContextProviderName' when calling updateBynameVelocityContextProvider(Async)");
        }

        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling updateBynameVelocityContextProvider(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateBynameVelocityContextProvider(Async)");
        }

        return updateBynameVelocityContextProviderCall(velocityContextProviderName, httpServletExtensionName, updateRequest, _callback);

    }


    private ApiResponse<Object> updateBynameVelocityContextProviderWithHttpInfo(String velocityContextProviderName, String httpServletExtensionName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBynameVelocityContextProviderValidateBeforeCall(velocityContextProviderName, httpServletExtensionName, updateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBynameVelocityContextProviderAsync(String velocityContextProviderName, String httpServletExtensionName, UpdateRequest updateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBynameVelocityContextProviderValidateBeforeCall(velocityContextProviderName, httpServletExtensionName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBynameVelocityContextProviderRequestBuilder {
        private final List<Operation> operations;
        private final String velocityContextProviderName;
        private final String httpServletExtensionName;

        private UpdateBynameVelocityContextProviderRequestBuilder(List<Operation> operations, String velocityContextProviderName, String httpServletExtensionName) {
            this.operations = operations;
            this.velocityContextProviderName = velocityContextProviderName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Build call for updateBynameVelocityContextProvider
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateBynameVelocityContextProviderCall(velocityContextProviderName, httpServletExtensionName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateBynameVelocityContextProvider request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateBynameVelocityContextProviderWithHttpInfo(velocityContextProviderName, httpServletExtensionName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBynameVelocityContextProvider request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateBynameVelocityContextProviderWithHttpInfo(velocityContextProviderName, httpServletExtensionName, updateRequest);
        }

        /**
         * Execute updateBynameVelocityContextProvider request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateBynameVelocityContextProviderAsync(velocityContextProviderName, httpServletExtensionName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Velocity Context Provider by name
     * 
     * @param velocityContextProviderName Name of the Velocity Context Provider (required)
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @param updateRequest Update an existing Velocity Context Provider (required)
     * @return UpdateBynameVelocityContextProviderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Velocity Context Provider does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBynameVelocityContextProviderRequestBuilder updateBynameVelocityContextProvider(List<Operation> operations, String velocityContextProviderName, String httpServletExtensionName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (velocityContextProviderName == null) throw new IllegalArgumentException("\"velocityContextProviderName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new UpdateBynameVelocityContextProviderRequestBuilder(operations, velocityContextProviderName, httpServletExtensionName);
    }
}
