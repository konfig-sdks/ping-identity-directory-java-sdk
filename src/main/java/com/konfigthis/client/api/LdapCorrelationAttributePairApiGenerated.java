/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddLdapCorrelationAttributePairRequest;
import com.konfigthis.client.model.EnumldapCorrelationAttributePairSchemaUrn;
import com.konfigthis.client.model.LdapCorrelationAttributePairListResponse;
import com.konfigthis.client.model.LdapCorrelationAttributePairResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LdapCorrelationAttributePairApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LdapCorrelationAttributePairApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LdapCorrelationAttributePairApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewPairToConfigCall(String correlatedLdapDataViewName, String scimResourceTypeName, AddLdapCorrelationAttributePairRequest addLdapCorrelationAttributePairRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addLdapCorrelationAttributePairRequest;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs"
            .replace("{" + "correlated-ldap-data-view-name" + "}", localVarApiClient.escapeString(correlatedLdapDataViewName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewPairToConfigValidateBeforeCall(String correlatedLdapDataViewName, String scimResourceTypeName, AddLdapCorrelationAttributePairRequest addLdapCorrelationAttributePairRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'correlatedLdapDataViewName' is set
        if (correlatedLdapDataViewName == null) {
            throw new ApiException("Missing the required parameter 'correlatedLdapDataViewName' when calling addNewPairToConfig(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling addNewPairToConfig(Async)");
        }

        // verify the required parameter 'addLdapCorrelationAttributePairRequest' is set
        if (addLdapCorrelationAttributePairRequest == null) {
            throw new ApiException("Missing the required parameter 'addLdapCorrelationAttributePairRequest' when calling addNewPairToConfig(Async)");
        }

        return addNewPairToConfigCall(correlatedLdapDataViewName, scimResourceTypeName, addLdapCorrelationAttributePairRequest, _callback);

    }


    private ApiResponse<LdapCorrelationAttributePairResponse> addNewPairToConfigWithHttpInfo(String correlatedLdapDataViewName, String scimResourceTypeName, AddLdapCorrelationAttributePairRequest addLdapCorrelationAttributePairRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewPairToConfigValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, addLdapCorrelationAttributePairRequest, null);
        Type localVarReturnType = new TypeToken<LdapCorrelationAttributePairResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewPairToConfigAsync(String correlatedLdapDataViewName, String scimResourceTypeName, AddLdapCorrelationAttributePairRequest addLdapCorrelationAttributePairRequest, final ApiCallback<LdapCorrelationAttributePairResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewPairToConfigValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, addLdapCorrelationAttributePairRequest, _callback);
        Type localVarReturnType = new TypeToken<LdapCorrelationAttributePairResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewPairToConfigRequestBuilder {
        private final String pairName;
        private final String correlatedLdapDataViewName;
        private final String scimResourceTypeName;
        private List<EnumldapCorrelationAttributePairSchemaUrn> schemas;
        private String primaryCorrelationAttribute;
        private String secondaryCorrelationAttribute;

        private AddNewPairToConfigRequestBuilder(String pairName, String correlatedLdapDataViewName, String scimResourceTypeName) {
            this.pairName = pairName;
            this.correlatedLdapDataViewName = correlatedLdapDataViewName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewPairToConfigRequestBuilder
         */
        public AddNewPairToConfigRequestBuilder schemas(List<EnumldapCorrelationAttributePairSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set primaryCorrelationAttribute
         * @param primaryCorrelationAttribute The LDAP attribute from the base SCIM Resource Type whose value will be used to match objects in the Correlated LDAP Data View. (optional)
         * @return AddNewPairToConfigRequestBuilder
         */
        public AddNewPairToConfigRequestBuilder primaryCorrelationAttribute(String primaryCorrelationAttribute) {
            this.primaryCorrelationAttribute = primaryCorrelationAttribute;
            return this;
        }
        
        /**
         * Set secondaryCorrelationAttribute
         * @param secondaryCorrelationAttribute The LDAP attribute from the Correlated LDAP Data View whose value will be matched. (optional)
         * @return AddNewPairToConfigRequestBuilder
         */
        public AddNewPairToConfigRequestBuilder secondaryCorrelationAttribute(String secondaryCorrelationAttribute) {
            this.secondaryCorrelationAttribute = secondaryCorrelationAttribute;
            return this;
        }
        
        /**
         * Build call for addNewPairToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddLdapCorrelationAttributePairRequest addLdapCorrelationAttributePairRequest = buildBodyParams();
            return addNewPairToConfigCall(correlatedLdapDataViewName, scimResourceTypeName, addLdapCorrelationAttributePairRequest, _callback);
        }

        private AddLdapCorrelationAttributePairRequest buildBodyParams() {
            AddLdapCorrelationAttributePairRequest addLdapCorrelationAttributePairRequest = new AddLdapCorrelationAttributePairRequest();
            return addLdapCorrelationAttributePairRequest;
        }

        /**
         * Execute addNewPairToConfig request
         * @return LdapCorrelationAttributePairResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair already exists </td><td>  -  </td></tr>
         </table>
         */
        public LdapCorrelationAttributePairResponse execute() throws ApiException {
            AddLdapCorrelationAttributePairRequest addLdapCorrelationAttributePairRequest = buildBodyParams();
            ApiResponse<LdapCorrelationAttributePairResponse> localVarResp = addNewPairToConfigWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName, addLdapCorrelationAttributePairRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewPairToConfig request with HTTP info returned
         * @return ApiResponse&lt;LdapCorrelationAttributePairResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LdapCorrelationAttributePairResponse> executeWithHttpInfo() throws ApiException {
            AddLdapCorrelationAttributePairRequest addLdapCorrelationAttributePairRequest = buildBodyParams();
            return addNewPairToConfigWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName, addLdapCorrelationAttributePairRequest);
        }

        /**
         * Execute addNewPairToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LdapCorrelationAttributePairResponse> _callback) throws ApiException {
            AddLdapCorrelationAttributePairRequest addLdapCorrelationAttributePairRequest = buildBodyParams();
            return addNewPairToConfigAsync(correlatedLdapDataViewName, scimResourceTypeName, addLdapCorrelationAttributePairRequest, _callback);
        }
    }

    /**
     * Add a new LDAP Correlation Attribute Pair to the config
     * 
     * @param correlatedLdapDataViewName Name of the Correlated LDAP Data View (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @param addLdapCorrelationAttributePairRequest Create a new LDAP Correlation Attribute Pair in the config (required)
     * @return AddNewPairToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewPairToConfigRequestBuilder addNewPairToConfig(String pairName, String correlatedLdapDataViewName, String scimResourceTypeName) throws IllegalArgumentException {
        if (pairName == null) throw new IllegalArgumentException("\"pairName\" is required but got null");
            

        if (correlatedLdapDataViewName == null) throw new IllegalArgumentException("\"correlatedLdapDataViewName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new AddNewPairToConfigRequestBuilder(pairName, correlatedLdapDataViewName, scimResourceTypeName);
    }
    private okhttp3.Call deleteCall(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs/{ldap-correlation-attribute-pair-name}"
            .replace("{" + "ldap-correlation-attribute-pair-name" + "}", localVarApiClient.escapeString(ldapCorrelationAttributePairName.toString()))
            .replace("{" + "correlated-ldap-data-view-name" + "}", localVarApiClient.escapeString(correlatedLdapDataViewName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ldapCorrelationAttributePairName' is set
        if (ldapCorrelationAttributePairName == null) {
            throw new ApiException("Missing the required parameter 'ldapCorrelationAttributePairName' when calling delete(Async)");
        }

        // verify the required parameter 'correlatedLdapDataViewName' is set
        if (correlatedLdapDataViewName == null) {
            throw new ApiException("Missing the required parameter 'correlatedLdapDataViewName' when calling delete(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling delete(Async)");
        }

        return deleteCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, _callback);

    }


    private ApiResponse<Void> deleteWithHttpInfo(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAsync(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private final String ldapCorrelationAttributePairName;
        private final String correlatedLdapDataViewName;
        private final String scimResourceTypeName;

        private DeleteRequestBuilder(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName) {
            this.ldapCorrelationAttributePairName = ldapCorrelationAttributePairName;
            this.correlatedLdapDataViewName = correlatedLdapDataViewName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, _callback);
        }


        /**
         * Execute delete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWithHttpInfo(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName);
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAsync(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, _callback);
        }
    }

    /**
     * Delete a LDAP Correlation Attribute Pair
     * 
     * @param ldapCorrelationAttributePairName Name of the LDAP Correlation Attribute Pair (required)
     * @param correlatedLdapDataViewName Name of the Correlated LDAP Data View (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The LDAP Correlation Attribute Pair cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestBuilder delete(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName) throws IllegalArgumentException {
        if (ldapCorrelationAttributePairName == null) throw new IllegalArgumentException("\"ldapCorrelationAttributePairName\" is required but got null");
            

        if (correlatedLdapDataViewName == null) throw new IllegalArgumentException("\"correlatedLdapDataViewName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new DeleteRequestBuilder(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName);
    }
    private okhttp3.Call getSingleCall(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs/{ldap-correlation-attribute-pair-name}"
            .replace("{" + "ldap-correlation-attribute-pair-name" + "}", localVarApiClient.escapeString(ldapCorrelationAttributePairName.toString()))
            .replace("{" + "correlated-ldap-data-view-name" + "}", localVarApiClient.escapeString(correlatedLdapDataViewName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ldapCorrelationAttributePairName' is set
        if (ldapCorrelationAttributePairName == null) {
            throw new ApiException("Missing the required parameter 'ldapCorrelationAttributePairName' when calling getSingle(Async)");
        }

        // verify the required parameter 'correlatedLdapDataViewName' is set
        if (correlatedLdapDataViewName == null) {
            throw new ApiException("Missing the required parameter 'correlatedLdapDataViewName' when calling getSingle(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling getSingle(Async)");
        }

        return getSingleCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, _callback);

    }


    private ApiResponse<LdapCorrelationAttributePairResponse> getSingleWithHttpInfo(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, null);
        Type localVarReturnType = new TypeToken<LdapCorrelationAttributePairResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, final ApiCallback<LdapCorrelationAttributePairResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, _callback);
        Type localVarReturnType = new TypeToken<LdapCorrelationAttributePairResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String ldapCorrelationAttributePairName;
        private final String correlatedLdapDataViewName;
        private final String scimResourceTypeName;

        private GetSingleRequestBuilder(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName) {
            this.ldapCorrelationAttributePairName = ldapCorrelationAttributePairName;
            this.correlatedLdapDataViewName = correlatedLdapDataViewName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, _callback);
        }


        /**
         * Execute getSingle request
         * @return LdapCorrelationAttributePairResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public LdapCorrelationAttributePairResponse execute() throws ApiException {
            ApiResponse<LdapCorrelationAttributePairResponse> localVarResp = getSingleWithHttpInfo(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;LdapCorrelationAttributePairResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LdapCorrelationAttributePairResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LdapCorrelationAttributePairResponse> _callback) throws ApiException {
            return getSingleAsync(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, _callback);
        }
    }

    /**
     * Returns a single LDAP Correlation Attribute Pair
     * 
     * @param ldapCorrelationAttributePairName Name of the LDAP Correlation Attribute Pair (required)
     * @param correlatedLdapDataViewName Name of the Correlated LDAP Data View (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName) throws IllegalArgumentException {
        if (ldapCorrelationAttributePairName == null) throw new IllegalArgumentException("\"ldapCorrelationAttributePairName\" is required but got null");
            

        if (correlatedLdapDataViewName == null) throw new IllegalArgumentException("\"correlatedLdapDataViewName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new GetSingleRequestBuilder(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName);
    }
    private okhttp3.Call listCorrelationAttributePairsCall(String correlatedLdapDataViewName, String scimResourceTypeName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs"
            .replace("{" + "correlated-ldap-data-view-name" + "}", localVarApiClient.escapeString(correlatedLdapDataViewName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCorrelationAttributePairsValidateBeforeCall(String correlatedLdapDataViewName, String scimResourceTypeName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'correlatedLdapDataViewName' is set
        if (correlatedLdapDataViewName == null) {
            throw new ApiException("Missing the required parameter 'correlatedLdapDataViewName' when calling listCorrelationAttributePairs(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling listCorrelationAttributePairs(Async)");
        }

        return listCorrelationAttributePairsCall(correlatedLdapDataViewName, scimResourceTypeName, filter, _callback);

    }


    private ApiResponse<LdapCorrelationAttributePairListResponse> listCorrelationAttributePairsWithHttpInfo(String correlatedLdapDataViewName, String scimResourceTypeName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listCorrelationAttributePairsValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, filter, null);
        Type localVarReturnType = new TypeToken<LdapCorrelationAttributePairListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCorrelationAttributePairsAsync(String correlatedLdapDataViewName, String scimResourceTypeName, String filter, final ApiCallback<LdapCorrelationAttributePairListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCorrelationAttributePairsValidateBeforeCall(correlatedLdapDataViewName, scimResourceTypeName, filter, _callback);
        Type localVarReturnType = new TypeToken<LdapCorrelationAttributePairListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCorrelationAttributePairsRequestBuilder {
        private final String correlatedLdapDataViewName;
        private final String scimResourceTypeName;
        private String filter;

        private ListCorrelationAttributePairsRequestBuilder(String correlatedLdapDataViewName, String scimResourceTypeName) {
            this.correlatedLdapDataViewName = correlatedLdapDataViewName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListCorrelationAttributePairsRequestBuilder
         */
        public ListCorrelationAttributePairsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listCorrelationAttributePairs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCorrelationAttributePairsCall(correlatedLdapDataViewName, scimResourceTypeName, filter, _callback);
        }


        /**
         * Execute listCorrelationAttributePairs request
         * @return LdapCorrelationAttributePairListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public LdapCorrelationAttributePairListResponse execute() throws ApiException {
            ApiResponse<LdapCorrelationAttributePairListResponse> localVarResp = listCorrelationAttributePairsWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCorrelationAttributePairs request with HTTP info returned
         * @return ApiResponse&lt;LdapCorrelationAttributePairListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LdapCorrelationAttributePairListResponse> executeWithHttpInfo() throws ApiException {
            return listCorrelationAttributePairsWithHttpInfo(correlatedLdapDataViewName, scimResourceTypeName, filter);
        }

        /**
         * Execute listCorrelationAttributePairs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LdapCorrelationAttributePairListResponse> _callback) throws ApiException {
            return listCorrelationAttributePairsAsync(correlatedLdapDataViewName, scimResourceTypeName, filter, _callback);
        }
    }

    /**
     * Returns a list of all LDAP Correlation Attribute Pair objects
     * 
     * @param correlatedLdapDataViewName Name of the Correlated LDAP Data View (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @return ListCorrelationAttributePairsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListCorrelationAttributePairsRequestBuilder listCorrelationAttributePairs(String correlatedLdapDataViewName, String scimResourceTypeName) throws IllegalArgumentException {
        if (correlatedLdapDataViewName == null) throw new IllegalArgumentException("\"correlatedLdapDataViewName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new ListCorrelationAttributePairsRequestBuilder(correlatedLdapDataViewName, scimResourceTypeName);
    }
    private okhttp3.Call updateByNameCall(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/scim-resource-types/{scim-resource-type-name}/correlated-ldap-data-views/{correlated-ldap-data-view-name}/ldap-correlation-attribute-pairs/{ldap-correlation-attribute-pair-name}"
            .replace("{" + "ldap-correlation-attribute-pair-name" + "}", localVarApiClient.escapeString(ldapCorrelationAttributePairName.toString()))
            .replace("{" + "correlated-ldap-data-view-name" + "}", localVarApiClient.escapeString(correlatedLdapDataViewName.toString()))
            .replace("{" + "scim-resource-type-name" + "}", localVarApiClient.escapeString(scimResourceTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ldapCorrelationAttributePairName' is set
        if (ldapCorrelationAttributePairName == null) {
            throw new ApiException("Missing the required parameter 'ldapCorrelationAttributePairName' when calling updateByName(Async)");
        }

        // verify the required parameter 'correlatedLdapDataViewName' is set
        if (correlatedLdapDataViewName == null) {
            throw new ApiException("Missing the required parameter 'correlatedLdapDataViewName' when calling updateByName(Async)");
        }

        // verify the required parameter 'scimResourceTypeName' is set
        if (scimResourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'scimResourceTypeName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, updateRequest, _callback);

    }


    private ApiResponse<LdapCorrelationAttributePairResponse> updateByNameWithHttpInfo(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, updateRequest, null);
        Type localVarReturnType = new TypeToken<LdapCorrelationAttributePairResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName, UpdateRequest updateRequest, final ApiCallback<LdapCorrelationAttributePairResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<LdapCorrelationAttributePairResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String ldapCorrelationAttributePairName;
        private final String correlatedLdapDataViewName;
        private final String scimResourceTypeName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName) {
            this.operations = operations;
            this.ldapCorrelationAttributePairName = ldapCorrelationAttributePairName;
            this.correlatedLdapDataViewName = correlatedLdapDataViewName;
            this.scimResourceTypeName = scimResourceTypeName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return LdapCorrelationAttributePairResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public LdapCorrelationAttributePairResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<LdapCorrelationAttributePairResponse> localVarResp = updateByNameWithHttpInfo(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;LdapCorrelationAttributePairResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LdapCorrelationAttributePairResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LdapCorrelationAttributePairResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing LDAP Correlation Attribute Pair by name
     * 
     * @param ldapCorrelationAttributePairName Name of the LDAP Correlation Attribute Pair (required)
     * @param correlatedLdapDataViewName Name of the Correlated LDAP Data View (required)
     * @param scimResourceTypeName Name of the SCIM Resource Type (required)
     * @param updateRequest Update an existing LDAP Correlation Attribute Pair (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The LDAP Correlation Attribute Pair does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String ldapCorrelationAttributePairName, String correlatedLdapDataViewName, String scimResourceTypeName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (ldapCorrelationAttributePairName == null) throw new IllegalArgumentException("\"ldapCorrelationAttributePairName\" is required but got null");
            

        if (correlatedLdapDataViewName == null) throw new IllegalArgumentException("\"correlatedLdapDataViewName\" is required but got null");
            

        if (scimResourceTypeName == null) throw new IllegalArgumentException("\"scimResourceTypeName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, ldapCorrelationAttributePairName, correlatedLdapDataViewName, scimResourceTypeName);
    }
}
