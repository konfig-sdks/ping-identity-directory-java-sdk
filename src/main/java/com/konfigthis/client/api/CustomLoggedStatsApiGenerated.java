/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddCustomLoggedStatsRequest;
import com.konfigthis.client.model.CustomLoggedStatsListResponse;
import com.konfigthis.client.model.CustomLoggedStatsResponse;
import com.konfigthis.client.model.EnumcustomLoggedStatsSchemaUrn;
import com.konfigthis.client.model.EnumcustomLoggedStatsStatisticTypeProp;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomLoggedStatsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomLoggedStatsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomLoggedStatsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewStatToConfigCall(String pluginName, AddCustomLoggedStatsRequest addCustomLoggedStatsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addCustomLoggedStatsRequest;

        // create path and map variables
        String localVarPath = "/plugin-root/plugins/{plugin-name}/custom-logged-stats"
            .replace("{" + "plugin-name" + "}", localVarApiClient.escapeString(pluginName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewStatToConfigValidateBeforeCall(String pluginName, AddCustomLoggedStatsRequest addCustomLoggedStatsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginName' is set
        if (pluginName == null) {
            throw new ApiException("Missing the required parameter 'pluginName' when calling addNewStatToConfig(Async)");
        }

        // verify the required parameter 'addCustomLoggedStatsRequest' is set
        if (addCustomLoggedStatsRequest == null) {
            throw new ApiException("Missing the required parameter 'addCustomLoggedStatsRequest' when calling addNewStatToConfig(Async)");
        }

        return addNewStatToConfigCall(pluginName, addCustomLoggedStatsRequest, _callback);

    }


    private ApiResponse<CustomLoggedStatsResponse> addNewStatToConfigWithHttpInfo(String pluginName, AddCustomLoggedStatsRequest addCustomLoggedStatsRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewStatToConfigValidateBeforeCall(pluginName, addCustomLoggedStatsRequest, null);
        Type localVarReturnType = new TypeToken<CustomLoggedStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewStatToConfigAsync(String pluginName, AddCustomLoggedStatsRequest addCustomLoggedStatsRequest, final ApiCallback<CustomLoggedStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewStatToConfigValidateBeforeCall(pluginName, addCustomLoggedStatsRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomLoggedStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewStatToConfigRequestBuilder {
        private final String statsName;
        private final String pluginName;
        private String description;
        private List<EnumcustomLoggedStatsSchemaUrn> schemas;
        private Boolean enabled;
        private String monitorObjectclass;
        private String includeFilter;
        private List<String> attributeToLog;
        private List<String> columnName;
        private List<EnumcustomLoggedStatsStatisticTypeProp> statisticType;
        private String headerPrefix;
        private String headerPrefixAttribute;
        private String regexPattern;
        private String regexReplacement;
        private String divideValueBy;
        private String divideValueByAttribute;
        private String decimalFormat;
        private Boolean nonZeroImpliesNotIdle;

        private AddNewStatToConfigRequestBuilder(String statsName, String pluginName) {
            this.statsName = statsName;
            this.pluginName = pluginName;
        }

        /**
         * Set description
         * @param description A description for this Custom Logged Stats (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder schemas(List<EnumcustomLoggedStatsSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Indicates whether the Custom Logged Stats object is enabled. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set monitorObjectclass
         * @param monitorObjectclass The objectclass name of the monitor entries to examine for generating these statistics. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder monitorObjectclass(String monitorObjectclass) {
            this.monitorObjectclass = monitorObjectclass;
            return this;
        }
        
        /**
         * Set includeFilter
         * @param includeFilter An optional LDAP filter that can be used restrict which monitor entries are used to produce the output. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder includeFilter(String includeFilter) {
            this.includeFilter = includeFilter;
            return this;
        }
        
        /**
         * Set attributeToLog
         * @param attributeToLog Specifies the attributes on the monitor entries that should be included in the output. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder attributeToLog(List<String> attributeToLog) {
            this.attributeToLog = attributeToLog;
            return this;
        }
        
        /**
         * Set columnName
         * @param columnName Optionally, specifies an explicit name for each column header instead of having these names automatically generated from the monitored attribute name. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder columnName(List<String> columnName) {
            this.columnName = columnName;
            return this;
        }
        
        /**
         * Set statisticType
         * @param statisticType  (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder statisticType(List<EnumcustomLoggedStatsStatisticTypeProp> statisticType) {
            this.statisticType = statisticType;
            return this;
        }
        
        /**
         * Set headerPrefix
         * @param headerPrefix An optional prefix that is included in the header before the column name. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder headerPrefix(String headerPrefix) {
            this.headerPrefix = headerPrefix;
            return this;
        }
        
        /**
         * Set headerPrefixAttribute
         * @param headerPrefixAttribute An optional attribute from the monitor entry that is included as a prefix before the column name in the column header. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder headerPrefixAttribute(String headerPrefixAttribute) {
            this.headerPrefixAttribute = headerPrefixAttribute;
            return this;
        }
        
        /**
         * Set regexPattern
         * @param regexPattern An optional regular expression pattern, that when used in conjunction with regex-replacement, can alter the value of the attribute being monitored. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder regexPattern(String regexPattern) {
            this.regexPattern = regexPattern;
            return this;
        }
        
        /**
         * Set regexReplacement
         * @param regexReplacement An optional regular expression replacement value, that when used in conjunction with regex-pattern, can alter the value of the attribute being monitored. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder regexReplacement(String regexReplacement) {
            this.regexReplacement = regexReplacement;
            return this;
        }
        
        /**
         * Set divideValueBy
         * @param divideValueBy An optional floating point value that can be used to scale the resulting value. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder divideValueBy(String divideValueBy) {
            this.divideValueBy = divideValueBy;
            return this;
        }
        
        /**
         * Set divideValueByAttribute
         * @param divideValueByAttribute An optional property that can scale the resulting value by another attribute in the monitored entry. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder divideValueByAttribute(String divideValueByAttribute) {
            this.divideValueByAttribute = divideValueByAttribute;
            return this;
        }
        
        /**
         * Set decimalFormat
         * @param decimalFormat This provides a way to format the monitored attribute value in the output to control the precision for instance. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder decimalFormat(String decimalFormat) {
            this.decimalFormat = decimalFormat;
            return this;
        }
        
        /**
         * Set nonZeroImpliesNotIdle
         * @param nonZeroImpliesNotIdle If this property is set to true, then the value of any of the monitored attributes here can contribute to whether an interval is considered \\\&quot;idle\\\&quot; by the Periodic Stats Logger. (optional)
         * @return AddNewStatToConfigRequestBuilder
         */
        public AddNewStatToConfigRequestBuilder nonZeroImpliesNotIdle(Boolean nonZeroImpliesNotIdle) {
            this.nonZeroImpliesNotIdle = nonZeroImpliesNotIdle;
            return this;
        }
        
        /**
         * Build call for addNewStatToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Custom Logged Stats already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddCustomLoggedStatsRequest addCustomLoggedStatsRequest = buildBodyParams();
            return addNewStatToConfigCall(pluginName, addCustomLoggedStatsRequest, _callback);
        }

        private AddCustomLoggedStatsRequest buildBodyParams() {
            AddCustomLoggedStatsRequest addCustomLoggedStatsRequest = new AddCustomLoggedStatsRequest();
            return addCustomLoggedStatsRequest;
        }

        /**
         * Execute addNewStatToConfig request
         * @return CustomLoggedStatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Custom Logged Stats already exists </td><td>  -  </td></tr>
         </table>
         */
        public CustomLoggedStatsResponse execute() throws ApiException {
            AddCustomLoggedStatsRequest addCustomLoggedStatsRequest = buildBodyParams();
            ApiResponse<CustomLoggedStatsResponse> localVarResp = addNewStatToConfigWithHttpInfo(pluginName, addCustomLoggedStatsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewStatToConfig request with HTTP info returned
         * @return ApiResponse&lt;CustomLoggedStatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Custom Logged Stats already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomLoggedStatsResponse> executeWithHttpInfo() throws ApiException {
            AddCustomLoggedStatsRequest addCustomLoggedStatsRequest = buildBodyParams();
            return addNewStatToConfigWithHttpInfo(pluginName, addCustomLoggedStatsRequest);
        }

        /**
         * Execute addNewStatToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Custom Logged Stats already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomLoggedStatsResponse> _callback) throws ApiException {
            AddCustomLoggedStatsRequest addCustomLoggedStatsRequest = buildBodyParams();
            return addNewStatToConfigAsync(pluginName, addCustomLoggedStatsRequest, _callback);
        }
    }

    /**
     * Add a new Custom Logged Stats to the config
     * 
     * @param pluginName Name of the Plugin (required)
     * @param addCustomLoggedStatsRequest Create a new Custom Logged Stats in the config (required)
     * @return AddNewStatToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Custom Logged Stats already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewStatToConfigRequestBuilder addNewStatToConfig(String statsName, String pluginName) throws IllegalArgumentException {
        if (statsName == null) throw new IllegalArgumentException("\"statsName\" is required but got null");
            

        if (pluginName == null) throw new IllegalArgumentException("\"pluginName\" is required but got null");
            

        return new AddNewStatToConfigRequestBuilder(statsName, pluginName);
    }
    private okhttp3.Call deleteStatCall(String customLoggedStatsName, String pluginName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plugin-root/plugins/{plugin-name}/custom-logged-stats/{custom-logged-stats-name}"
            .replace("{" + "custom-logged-stats-name" + "}", localVarApiClient.escapeString(customLoggedStatsName.toString()))
            .replace("{" + "plugin-name" + "}", localVarApiClient.escapeString(pluginName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStatValidateBeforeCall(String customLoggedStatsName, String pluginName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customLoggedStatsName' is set
        if (customLoggedStatsName == null) {
            throw new ApiException("Missing the required parameter 'customLoggedStatsName' when calling deleteStat(Async)");
        }

        // verify the required parameter 'pluginName' is set
        if (pluginName == null) {
            throw new ApiException("Missing the required parameter 'pluginName' when calling deleteStat(Async)");
        }

        return deleteStatCall(customLoggedStatsName, pluginName, _callback);

    }


    private ApiResponse<Void> deleteStatWithHttpInfo(String customLoggedStatsName, String pluginName) throws ApiException {
        okhttp3.Call localVarCall = deleteStatValidateBeforeCall(customLoggedStatsName, pluginName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteStatAsync(String customLoggedStatsName, String pluginName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStatValidateBeforeCall(customLoggedStatsName, pluginName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteStatRequestBuilder {
        private final String customLoggedStatsName;
        private final String pluginName;

        private DeleteStatRequestBuilder(String customLoggedStatsName, String pluginName) {
            this.customLoggedStatsName = customLoggedStatsName;
            this.pluginName = pluginName;
        }

        /**
         * Build call for deleteStat
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Custom Logged Stats cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteStatCall(customLoggedStatsName, pluginName, _callback);
        }


        /**
         * Execute deleteStat request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Custom Logged Stats cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteStatWithHttpInfo(customLoggedStatsName, pluginName);
        }

        /**
         * Execute deleteStat request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Custom Logged Stats cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteStatWithHttpInfo(customLoggedStatsName, pluginName);
        }

        /**
         * Execute deleteStat request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Custom Logged Stats cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteStatAsync(customLoggedStatsName, pluginName, _callback);
        }
    }

    /**
     * Delete a Custom Logged Stats
     * 
     * @param customLoggedStatsName Name of the Custom Logged Stats (required)
     * @param pluginName Name of the Plugin (required)
     * @return DeleteStatRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Custom Logged Stats cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteStatRequestBuilder deleteStat(String customLoggedStatsName, String pluginName) throws IllegalArgumentException {
        if (customLoggedStatsName == null) throw new IllegalArgumentException("\"customLoggedStatsName\" is required but got null");
            

        if (pluginName == null) throw new IllegalArgumentException("\"pluginName\" is required but got null");
            

        return new DeleteStatRequestBuilder(customLoggedStatsName, pluginName);
    }
    private okhttp3.Call getSingleCall(String customLoggedStatsName, String pluginName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plugin-root/plugins/{plugin-name}/custom-logged-stats/{custom-logged-stats-name}"
            .replace("{" + "custom-logged-stats-name" + "}", localVarApiClient.escapeString(customLoggedStatsName.toString()))
            .replace("{" + "plugin-name" + "}", localVarApiClient.escapeString(pluginName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String customLoggedStatsName, String pluginName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customLoggedStatsName' is set
        if (customLoggedStatsName == null) {
            throw new ApiException("Missing the required parameter 'customLoggedStatsName' when calling getSingle(Async)");
        }

        // verify the required parameter 'pluginName' is set
        if (pluginName == null) {
            throw new ApiException("Missing the required parameter 'pluginName' when calling getSingle(Async)");
        }

        return getSingleCall(customLoggedStatsName, pluginName, _callback);

    }


    private ApiResponse<CustomLoggedStatsResponse> getSingleWithHttpInfo(String customLoggedStatsName, String pluginName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(customLoggedStatsName, pluginName, null);
        Type localVarReturnType = new TypeToken<CustomLoggedStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String customLoggedStatsName, String pluginName, final ApiCallback<CustomLoggedStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(customLoggedStatsName, pluginName, _callback);
        Type localVarReturnType = new TypeToken<CustomLoggedStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String customLoggedStatsName;
        private final String pluginName;

        private GetSingleRequestBuilder(String customLoggedStatsName, String pluginName) {
            this.customLoggedStatsName = customLoggedStatsName;
            this.pluginName = pluginName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(customLoggedStatsName, pluginName, _callback);
        }


        /**
         * Execute getSingle request
         * @return CustomLoggedStatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
         </table>
         */
        public CustomLoggedStatsResponse execute() throws ApiException {
            ApiResponse<CustomLoggedStatsResponse> localVarResp = getSingleWithHttpInfo(customLoggedStatsName, pluginName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;CustomLoggedStatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomLoggedStatsResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(customLoggedStatsName, pluginName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomLoggedStatsResponse> _callback) throws ApiException {
            return getSingleAsync(customLoggedStatsName, pluginName, _callback);
        }
    }

    /**
     * Returns a single Custom Logged Stats
     * 
     * @param customLoggedStatsName Name of the Custom Logged Stats (required)
     * @param pluginName Name of the Plugin (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String customLoggedStatsName, String pluginName) throws IllegalArgumentException {
        if (customLoggedStatsName == null) throw new IllegalArgumentException("\"customLoggedStatsName\" is required but got null");
            

        if (pluginName == null) throw new IllegalArgumentException("\"pluginName\" is required but got null");
            

        return new GetSingleRequestBuilder(customLoggedStatsName, pluginName);
    }
    private okhttp3.Call listAllObjectsCall(String pluginName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/plugin-root/plugins/{plugin-name}/custom-logged-stats"
            .replace("{" + "plugin-name" + "}", localVarApiClient.escapeString(pluginName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String pluginName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginName' is set
        if (pluginName == null) {
            throw new ApiException("Missing the required parameter 'pluginName' when calling listAllObjects(Async)");
        }

        return listAllObjectsCall(pluginName, filter, _callback);

    }


    private ApiResponse<CustomLoggedStatsListResponse> listAllObjectsWithHttpInfo(String pluginName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(pluginName, filter, null);
        Type localVarReturnType = new TypeToken<CustomLoggedStatsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String pluginName, String filter, final ApiCallback<CustomLoggedStatsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(pluginName, filter, _callback);
        Type localVarReturnType = new TypeToken<CustomLoggedStatsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private final String pluginName;
        private String filter;

        private ListAllObjectsRequestBuilder(String pluginName) {
            this.pluginName = pluginName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(pluginName, filter, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return CustomLoggedStatsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public CustomLoggedStatsListResponse execute() throws ApiException {
            ApiResponse<CustomLoggedStatsListResponse> localVarResp = listAllObjectsWithHttpInfo(pluginName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;CustomLoggedStatsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomLoggedStatsListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(pluginName, filter);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomLoggedStatsListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(pluginName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Custom Logged Stats objects
     * 
     * @param pluginName Name of the Plugin (required)
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects(String pluginName) throws IllegalArgumentException {
        if (pluginName == null) throw new IllegalArgumentException("\"pluginName\" is required but got null");
            

        return new ListAllObjectsRequestBuilder(pluginName);
    }
    private okhttp3.Call updateByNameCall(String customLoggedStatsName, String pluginName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/plugin-root/plugins/{plugin-name}/custom-logged-stats/{custom-logged-stats-name}"
            .replace("{" + "custom-logged-stats-name" + "}", localVarApiClient.escapeString(customLoggedStatsName.toString()))
            .replace("{" + "plugin-name" + "}", localVarApiClient.escapeString(pluginName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String customLoggedStatsName, String pluginName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customLoggedStatsName' is set
        if (customLoggedStatsName == null) {
            throw new ApiException("Missing the required parameter 'customLoggedStatsName' when calling updateByName(Async)");
        }

        // verify the required parameter 'pluginName' is set
        if (pluginName == null) {
            throw new ApiException("Missing the required parameter 'pluginName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(customLoggedStatsName, pluginName, updateRequest, _callback);

    }


    private ApiResponse<CustomLoggedStatsResponse> updateByNameWithHttpInfo(String customLoggedStatsName, String pluginName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(customLoggedStatsName, pluginName, updateRequest, null);
        Type localVarReturnType = new TypeToken<CustomLoggedStatsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String customLoggedStatsName, String pluginName, UpdateRequest updateRequest, final ApiCallback<CustomLoggedStatsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(customLoggedStatsName, pluginName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomLoggedStatsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String customLoggedStatsName;
        private final String pluginName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String customLoggedStatsName, String pluginName) {
            this.operations = operations;
            this.customLoggedStatsName = customLoggedStatsName;
            this.pluginName = pluginName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(customLoggedStatsName, pluginName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return CustomLoggedStatsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
         </table>
         */
        public CustomLoggedStatsResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<CustomLoggedStatsResponse> localVarResp = updateByNameWithHttpInfo(customLoggedStatsName, pluginName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;CustomLoggedStatsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomLoggedStatsResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(customLoggedStatsName, pluginName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomLoggedStatsResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(customLoggedStatsName, pluginName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Custom Logged Stats by name
     * 
     * @param customLoggedStatsName Name of the Custom Logged Stats (required)
     * @param pluginName Name of the Plugin (required)
     * @param updateRequest Update an existing Custom Logged Stats (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Custom Logged Stats does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String customLoggedStatsName, String pluginName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (customLoggedStatsName == null) throw new IllegalArgumentException("\"customLoggedStatsName\" is required but got null");
            

        if (pluginName == null) throw new IllegalArgumentException("\"pluginName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, customLoggedStatsName, pluginName);
    }
}
