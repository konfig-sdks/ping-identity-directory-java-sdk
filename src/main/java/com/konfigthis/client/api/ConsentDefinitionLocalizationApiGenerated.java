/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddConsentDefinitionLocalizationRequest;
import com.konfigthis.client.model.ConsentDefinitionLocalizationListResponse;
import com.konfigthis.client.model.ConsentDefinitionLocalizationResponse;
import com.konfigthis.client.model.EnumconsentDefinitionLocalizationSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConsentDefinitionLocalizationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConsentDefinitionLocalizationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConsentDefinitionLocalizationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewCall(String consentDefinitionName, AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addConsentDefinitionLocalizationRequest;

        // create path and map variables
        String localVarPath = "/consent-definitions/{consent-definition-name}/consent-definition-localizations"
            .replace("{" + "consent-definition-name" + "}", localVarApiClient.escapeString(consentDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewValidateBeforeCall(String consentDefinitionName, AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentDefinitionName' is set
        if (consentDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'consentDefinitionName' when calling addNew(Async)");
        }

        // verify the required parameter 'addConsentDefinitionLocalizationRequest' is set
        if (addConsentDefinitionLocalizationRequest == null) {
            throw new ApiException("Missing the required parameter 'addConsentDefinitionLocalizationRequest' when calling addNew(Async)");
        }

        return addNewCall(consentDefinitionName, addConsentDefinitionLocalizationRequest, _callback);

    }


    private ApiResponse<ConsentDefinitionLocalizationResponse> addNewWithHttpInfo(String consentDefinitionName, AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewValidateBeforeCall(consentDefinitionName, addConsentDefinitionLocalizationRequest, null);
        Type localVarReturnType = new TypeToken<ConsentDefinitionLocalizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewAsync(String consentDefinitionName, AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest, final ApiCallback<ConsentDefinitionLocalizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewValidateBeforeCall(consentDefinitionName, addConsentDefinitionLocalizationRequest, _callback);
        Type localVarReturnType = new TypeToken<ConsentDefinitionLocalizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewRequestBuilder {
        private final String localizationName;
        private final String consentDefinitionName;
        private String version;
        private List<EnumconsentDefinitionLocalizationSchemaUrn> schemas;
        private String locale;
        private String titleText;
        private String dataText;
        private String purposeText;

        private AddNewRequestBuilder(String localizationName, String consentDefinitionName) {
            this.localizationName = localizationName;
            this.consentDefinitionName = consentDefinitionName;
        }

        /**
         * Set version
         * @param version The version of this Consent Definition Localization, using the format MAJOR.MINOR. (optional)
         * @return AddNewRequestBuilder
         */
        public AddNewRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewRequestBuilder
         */
        public AddNewRequestBuilder schemas(List<EnumconsentDefinitionLocalizationSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set locale
         * @param locale The locale of this Consent Definition Localization. (optional)
         * @return AddNewRequestBuilder
         */
        public AddNewRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set titleText
         * @param titleText Localized text that may be used to provide a title or summary for a consent request or a granted consent. (optional)
         * @return AddNewRequestBuilder
         */
        public AddNewRequestBuilder titleText(String titleText) {
            this.titleText = titleText;
            return this;
        }
        
        /**
         * Set dataText
         * @param dataText Localized text describing the data to be shared. (optional)
         * @return AddNewRequestBuilder
         */
        public AddNewRequestBuilder dataText(String dataText) {
            this.dataText = dataText;
            return this;
        }
        
        /**
         * Set purposeText
         * @param purposeText Localized text describing how the data is to be used. (optional)
         * @return AddNewRequestBuilder
         */
        public AddNewRequestBuilder purposeText(String purposeText) {
            this.purposeText = purposeText;
            return this;
        }
        
        /**
         * Build call for addNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Consent Definition Localization already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest = buildBodyParams();
            return addNewCall(consentDefinitionName, addConsentDefinitionLocalizationRequest, _callback);
        }

        private AddConsentDefinitionLocalizationRequest buildBodyParams() {
            AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest = new AddConsentDefinitionLocalizationRequest();
            return addConsentDefinitionLocalizationRequest;
        }

        /**
         * Execute addNew request
         * @return ConsentDefinitionLocalizationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Consent Definition Localization already exists </td><td>  -  </td></tr>
         </table>
         */
        public ConsentDefinitionLocalizationResponse execute() throws ApiException {
            AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest = buildBodyParams();
            ApiResponse<ConsentDefinitionLocalizationResponse> localVarResp = addNewWithHttpInfo(consentDefinitionName, addConsentDefinitionLocalizationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNew request with HTTP info returned
         * @return ApiResponse&lt;ConsentDefinitionLocalizationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Consent Definition Localization already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsentDefinitionLocalizationResponse> executeWithHttpInfo() throws ApiException {
            AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest = buildBodyParams();
            return addNewWithHttpInfo(consentDefinitionName, addConsentDefinitionLocalizationRequest);
        }

        /**
         * Execute addNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Consent Definition Localization already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsentDefinitionLocalizationResponse> _callback) throws ApiException {
            AddConsentDefinitionLocalizationRequest addConsentDefinitionLocalizationRequest = buildBodyParams();
            return addNewAsync(consentDefinitionName, addConsentDefinitionLocalizationRequest, _callback);
        }
    }

    /**
     * Add a new Consent Definition Localization to the config
     * 
     * @param consentDefinitionName Name of the Consent Definition (required)
     * @param addConsentDefinitionLocalizationRequest Create a new Consent Definition Localization in the config (required)
     * @return AddNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Consent Definition Localization already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewRequestBuilder addNew(String localizationName, String consentDefinitionName) throws IllegalArgumentException {
        if (localizationName == null) throw new IllegalArgumentException("\"localizationName\" is required but got null");
            

        if (consentDefinitionName == null) throw new IllegalArgumentException("\"consentDefinitionName\" is required but got null");
            

        return new AddNewRequestBuilder(localizationName, consentDefinitionName);
    }
    private okhttp3.Call deleteLocalizationCall(String consentDefinitionLocalizationName, String consentDefinitionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}"
            .replace("{" + "consent-definition-localization-name" + "}", localVarApiClient.escapeString(consentDefinitionLocalizationName.toString()))
            .replace("{" + "consent-definition-name" + "}", localVarApiClient.escapeString(consentDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLocalizationValidateBeforeCall(String consentDefinitionLocalizationName, String consentDefinitionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentDefinitionLocalizationName' is set
        if (consentDefinitionLocalizationName == null) {
            throw new ApiException("Missing the required parameter 'consentDefinitionLocalizationName' when calling deleteLocalization(Async)");
        }

        // verify the required parameter 'consentDefinitionName' is set
        if (consentDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'consentDefinitionName' when calling deleteLocalization(Async)");
        }

        return deleteLocalizationCall(consentDefinitionLocalizationName, consentDefinitionName, _callback);

    }


    private ApiResponse<Void> deleteLocalizationWithHttpInfo(String consentDefinitionLocalizationName, String consentDefinitionName) throws ApiException {
        okhttp3.Call localVarCall = deleteLocalizationValidateBeforeCall(consentDefinitionLocalizationName, consentDefinitionName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteLocalizationAsync(String consentDefinitionLocalizationName, String consentDefinitionName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLocalizationValidateBeforeCall(consentDefinitionLocalizationName, consentDefinitionName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteLocalizationRequestBuilder {
        private final String consentDefinitionLocalizationName;
        private final String consentDefinitionName;

        private DeleteLocalizationRequestBuilder(String consentDefinitionLocalizationName, String consentDefinitionName) {
            this.consentDefinitionLocalizationName = consentDefinitionLocalizationName;
            this.consentDefinitionName = consentDefinitionName;
        }

        /**
         * Build call for deleteLocalization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Consent Definition Localization cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteLocalizationCall(consentDefinitionLocalizationName, consentDefinitionName, _callback);
        }


        /**
         * Execute deleteLocalization request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Consent Definition Localization cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteLocalizationWithHttpInfo(consentDefinitionLocalizationName, consentDefinitionName);
        }

        /**
         * Execute deleteLocalization request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Consent Definition Localization cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteLocalizationWithHttpInfo(consentDefinitionLocalizationName, consentDefinitionName);
        }

        /**
         * Execute deleteLocalization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Consent Definition Localization cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteLocalizationAsync(consentDefinitionLocalizationName, consentDefinitionName, _callback);
        }
    }

    /**
     * Delete a Consent Definition Localization
     * 
     * @param consentDefinitionLocalizationName Name of the Consent Definition Localization (required)
     * @param consentDefinitionName Name of the Consent Definition (required)
     * @return DeleteLocalizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Consent Definition Localization cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteLocalizationRequestBuilder deleteLocalization(String consentDefinitionLocalizationName, String consentDefinitionName) throws IllegalArgumentException {
        if (consentDefinitionLocalizationName == null) throw new IllegalArgumentException("\"consentDefinitionLocalizationName\" is required but got null");
            

        if (consentDefinitionName == null) throw new IllegalArgumentException("\"consentDefinitionName\" is required but got null");
            

        return new DeleteLocalizationRequestBuilder(consentDefinitionLocalizationName, consentDefinitionName);
    }
    private okhttp3.Call getAllObjectsCall(String consentDefinitionName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consent-definitions/{consent-definition-name}/consent-definition-localizations"
            .replace("{" + "consent-definition-name" + "}", localVarApiClient.escapeString(consentDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllObjectsValidateBeforeCall(String consentDefinitionName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentDefinitionName' is set
        if (consentDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'consentDefinitionName' when calling getAllObjects(Async)");
        }

        return getAllObjectsCall(consentDefinitionName, filter, _callback);

    }


    private ApiResponse<ConsentDefinitionLocalizationListResponse> getAllObjectsWithHttpInfo(String consentDefinitionName, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAllObjectsValidateBeforeCall(consentDefinitionName, filter, null);
        Type localVarReturnType = new TypeToken<ConsentDefinitionLocalizationListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllObjectsAsync(String consentDefinitionName, String filter, final ApiCallback<ConsentDefinitionLocalizationListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllObjectsValidateBeforeCall(consentDefinitionName, filter, _callback);
        Type localVarReturnType = new TypeToken<ConsentDefinitionLocalizationListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllObjectsRequestBuilder {
        private final String consentDefinitionName;
        private String filter;

        private GetAllObjectsRequestBuilder(String consentDefinitionName) {
            this.consentDefinitionName = consentDefinitionName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return GetAllObjectsRequestBuilder
         */
        public GetAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllObjectsCall(consentDefinitionName, filter, _callback);
        }


        /**
         * Execute getAllObjects request
         * @return ConsentDefinitionLocalizationListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ConsentDefinitionLocalizationListResponse execute() throws ApiException {
            ApiResponse<ConsentDefinitionLocalizationListResponse> localVarResp = getAllObjectsWithHttpInfo(consentDefinitionName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllObjects request with HTTP info returned
         * @return ApiResponse&lt;ConsentDefinitionLocalizationListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsentDefinitionLocalizationListResponse> executeWithHttpInfo() throws ApiException {
            return getAllObjectsWithHttpInfo(consentDefinitionName, filter);
        }

        /**
         * Execute getAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsentDefinitionLocalizationListResponse> _callback) throws ApiException {
            return getAllObjectsAsync(consentDefinitionName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Consent Definition Localization objects
     * 
     * @param consentDefinitionName Name of the Consent Definition (required)
     * @return GetAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public GetAllObjectsRequestBuilder getAllObjects(String consentDefinitionName) throws IllegalArgumentException {
        if (consentDefinitionName == null) throw new IllegalArgumentException("\"consentDefinitionName\" is required but got null");
            

        return new GetAllObjectsRequestBuilder(consentDefinitionName);
    }
    private okhttp3.Call getSingleCall(String consentDefinitionLocalizationName, String consentDefinitionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}"
            .replace("{" + "consent-definition-localization-name" + "}", localVarApiClient.escapeString(consentDefinitionLocalizationName.toString()))
            .replace("{" + "consent-definition-name" + "}", localVarApiClient.escapeString(consentDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String consentDefinitionLocalizationName, String consentDefinitionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentDefinitionLocalizationName' is set
        if (consentDefinitionLocalizationName == null) {
            throw new ApiException("Missing the required parameter 'consentDefinitionLocalizationName' when calling getSingle(Async)");
        }

        // verify the required parameter 'consentDefinitionName' is set
        if (consentDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'consentDefinitionName' when calling getSingle(Async)");
        }

        return getSingleCall(consentDefinitionLocalizationName, consentDefinitionName, _callback);

    }


    private ApiResponse<ConsentDefinitionLocalizationResponse> getSingleWithHttpInfo(String consentDefinitionLocalizationName, String consentDefinitionName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(consentDefinitionLocalizationName, consentDefinitionName, null);
        Type localVarReturnType = new TypeToken<ConsentDefinitionLocalizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String consentDefinitionLocalizationName, String consentDefinitionName, final ApiCallback<ConsentDefinitionLocalizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(consentDefinitionLocalizationName, consentDefinitionName, _callback);
        Type localVarReturnType = new TypeToken<ConsentDefinitionLocalizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String consentDefinitionLocalizationName;
        private final String consentDefinitionName;

        private GetSingleRequestBuilder(String consentDefinitionLocalizationName, String consentDefinitionName) {
            this.consentDefinitionLocalizationName = consentDefinitionLocalizationName;
            this.consentDefinitionName = consentDefinitionName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(consentDefinitionLocalizationName, consentDefinitionName, _callback);
        }


        /**
         * Execute getSingle request
         * @return ConsentDefinitionLocalizationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ConsentDefinitionLocalizationResponse execute() throws ApiException {
            ApiResponse<ConsentDefinitionLocalizationResponse> localVarResp = getSingleWithHttpInfo(consentDefinitionLocalizationName, consentDefinitionName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;ConsentDefinitionLocalizationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsentDefinitionLocalizationResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(consentDefinitionLocalizationName, consentDefinitionName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsentDefinitionLocalizationResponse> _callback) throws ApiException {
            return getSingleAsync(consentDefinitionLocalizationName, consentDefinitionName, _callback);
        }
    }

    /**
     * Returns a single Consent Definition Localization
     * 
     * @param consentDefinitionLocalizationName Name of the Consent Definition Localization (required)
     * @param consentDefinitionName Name of the Consent Definition (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String consentDefinitionLocalizationName, String consentDefinitionName) throws IllegalArgumentException {
        if (consentDefinitionLocalizationName == null) throw new IllegalArgumentException("\"consentDefinitionLocalizationName\" is required but got null");
            

        if (consentDefinitionName == null) throw new IllegalArgumentException("\"consentDefinitionName\" is required but got null");
            

        return new GetSingleRequestBuilder(consentDefinitionLocalizationName, consentDefinitionName);
    }
    private okhttp3.Call updateByNameCall(String consentDefinitionLocalizationName, String consentDefinitionName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/consent-definitions/{consent-definition-name}/consent-definition-localizations/{consent-definition-localization-name}"
            .replace("{" + "consent-definition-localization-name" + "}", localVarApiClient.escapeString(consentDefinitionLocalizationName.toString()))
            .replace("{" + "consent-definition-name" + "}", localVarApiClient.escapeString(consentDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String consentDefinitionLocalizationName, String consentDefinitionName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'consentDefinitionLocalizationName' is set
        if (consentDefinitionLocalizationName == null) {
            throw new ApiException("Missing the required parameter 'consentDefinitionLocalizationName' when calling updateByName(Async)");
        }

        // verify the required parameter 'consentDefinitionName' is set
        if (consentDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'consentDefinitionName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(consentDefinitionLocalizationName, consentDefinitionName, updateRequest, _callback);

    }


    private ApiResponse<ConsentDefinitionLocalizationResponse> updateByNameWithHttpInfo(String consentDefinitionLocalizationName, String consentDefinitionName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(consentDefinitionLocalizationName, consentDefinitionName, updateRequest, null);
        Type localVarReturnType = new TypeToken<ConsentDefinitionLocalizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String consentDefinitionLocalizationName, String consentDefinitionName, UpdateRequest updateRequest, final ApiCallback<ConsentDefinitionLocalizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(consentDefinitionLocalizationName, consentDefinitionName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<ConsentDefinitionLocalizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String consentDefinitionLocalizationName;
        private final String consentDefinitionName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String consentDefinitionLocalizationName, String consentDefinitionName) {
            this.operations = operations;
            this.consentDefinitionLocalizationName = consentDefinitionLocalizationName;
            this.consentDefinitionName = consentDefinitionName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(consentDefinitionLocalizationName, consentDefinitionName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return ConsentDefinitionLocalizationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ConsentDefinitionLocalizationResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<ConsentDefinitionLocalizationResponse> localVarResp = updateByNameWithHttpInfo(consentDefinitionLocalizationName, consentDefinitionName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;ConsentDefinitionLocalizationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsentDefinitionLocalizationResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(consentDefinitionLocalizationName, consentDefinitionName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsentDefinitionLocalizationResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(consentDefinitionLocalizationName, consentDefinitionName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Consent Definition Localization by name
     * 
     * @param consentDefinitionLocalizationName Name of the Consent Definition Localization (required)
     * @param consentDefinitionName Name of the Consent Definition (required)
     * @param updateRequest Update an existing Consent Definition Localization (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Consent Definition Localization does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String consentDefinitionLocalizationName, String consentDefinitionName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (consentDefinitionLocalizationName == null) throw new IllegalArgumentException("\"consentDefinitionLocalizationName\" is required but got null");
            

        if (consentDefinitionName == null) throw new IllegalArgumentException("\"consentDefinitionName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, consentDefinitionLocalizationName, consentDefinitionName);
    }
}
