/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddResultCodeMapRequest;
import com.konfigthis.client.model.EnumresultCodeMapSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.ResultCodeMapListResponse;
import com.konfigthis.client.model.ResultCodeMapResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ResultCodeMapApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResultCodeMapApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ResultCodeMapApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewResultCodeMapCall(AddResultCodeMapRequest addResultCodeMapRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addResultCodeMapRequest;

        // create path and map variables
        String localVarPath = "/result-code-maps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewResultCodeMapValidateBeforeCall(AddResultCodeMapRequest addResultCodeMapRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addResultCodeMapRequest' is set
        if (addResultCodeMapRequest == null) {
            throw new ApiException("Missing the required parameter 'addResultCodeMapRequest' when calling addNewResultCodeMap(Async)");
        }

        return addNewResultCodeMapCall(addResultCodeMapRequest, _callback);

    }


    private ApiResponse<ResultCodeMapResponse> addNewResultCodeMapWithHttpInfo(AddResultCodeMapRequest addResultCodeMapRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewResultCodeMapValidateBeforeCall(addResultCodeMapRequest, null);
        Type localVarReturnType = new TypeToken<ResultCodeMapResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewResultCodeMapAsync(AddResultCodeMapRequest addResultCodeMapRequest, final ApiCallback<ResultCodeMapResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewResultCodeMapValidateBeforeCall(addResultCodeMapRequest, _callback);
        Type localVarReturnType = new TypeToken<ResultCodeMapResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewResultCodeMapRequestBuilder {
        private final String mapName;
        private String description;
        private List<EnumresultCodeMapSchemaUrn> schemas;
        private Integer bindAccountLockedResultCode;
        private Integer bindMissingUserResultCode;
        private Integer bindMissingPasswordResultCode;
        private Integer serverErrorResultCode;

        private AddNewResultCodeMapRequestBuilder(String mapName) {
            this.mapName = mapName;
        }

        /**
         * Set description
         * @param description A description for this Result Code Map (optional)
         * @return AddNewResultCodeMapRequestBuilder
         */
        public AddNewResultCodeMapRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewResultCodeMapRequestBuilder
         */
        public AddNewResultCodeMapRequestBuilder schemas(List<EnumresultCodeMapSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set bindAccountLockedResultCode
         * @param bindAccountLockedResultCode Specifies the result code that should be returned if a bind attempt fails because the user&#39;s account is locked as a result of too many failed authentication attempts. (optional)
         * @return AddNewResultCodeMapRequestBuilder
         */
        public AddNewResultCodeMapRequestBuilder bindAccountLockedResultCode(Integer bindAccountLockedResultCode) {
            this.bindAccountLockedResultCode = bindAccountLockedResultCode;
            return this;
        }
        
        /**
         * Set bindMissingUserResultCode
         * @param bindMissingUserResultCode Specifies the result code that should be returned if a bind attempt fails because the target user entry does not exist in the server. (optional)
         * @return AddNewResultCodeMapRequestBuilder
         */
        public AddNewResultCodeMapRequestBuilder bindMissingUserResultCode(Integer bindMissingUserResultCode) {
            this.bindMissingUserResultCode = bindMissingUserResultCode;
            return this;
        }
        
        /**
         * Set bindMissingPasswordResultCode
         * @param bindMissingPasswordResultCode Specifies the result code that should be returned if a password-based bind attempt fails because the target user entry does not have a password. (optional)
         * @return AddNewResultCodeMapRequestBuilder
         */
        public AddNewResultCodeMapRequestBuilder bindMissingPasswordResultCode(Integer bindMissingPasswordResultCode) {
            this.bindMissingPasswordResultCode = bindMissingPasswordResultCode;
            return this;
        }
        
        /**
         * Set serverErrorResultCode
         * @param serverErrorResultCode Specifies the result code that should be returned if a generic error occurs within the server. (optional)
         * @return AddNewResultCodeMapRequestBuilder
         */
        public AddNewResultCodeMapRequestBuilder serverErrorResultCode(Integer serverErrorResultCode) {
            this.serverErrorResultCode = serverErrorResultCode;
            return this;
        }
        
        /**
         * Build call for addNewResultCodeMap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Result Code Map already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddResultCodeMapRequest addResultCodeMapRequest = buildBodyParams();
            return addNewResultCodeMapCall(addResultCodeMapRequest, _callback);
        }

        private AddResultCodeMapRequest buildBodyParams() {
            AddResultCodeMapRequest addResultCodeMapRequest = new AddResultCodeMapRequest();
            return addResultCodeMapRequest;
        }

        /**
         * Execute addNewResultCodeMap request
         * @return ResultCodeMapResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Result Code Map already exists </td><td>  -  </td></tr>
         </table>
         */
        public ResultCodeMapResponse execute() throws ApiException {
            AddResultCodeMapRequest addResultCodeMapRequest = buildBodyParams();
            ApiResponse<ResultCodeMapResponse> localVarResp = addNewResultCodeMapWithHttpInfo(addResultCodeMapRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewResultCodeMap request with HTTP info returned
         * @return ApiResponse&lt;ResultCodeMapResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Result Code Map already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultCodeMapResponse> executeWithHttpInfo() throws ApiException {
            AddResultCodeMapRequest addResultCodeMapRequest = buildBodyParams();
            return addNewResultCodeMapWithHttpInfo(addResultCodeMapRequest);
        }

        /**
         * Execute addNewResultCodeMap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Result Code Map already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultCodeMapResponse> _callback) throws ApiException {
            AddResultCodeMapRequest addResultCodeMapRequest = buildBodyParams();
            return addNewResultCodeMapAsync(addResultCodeMapRequest, _callback);
        }
    }

    /**
     * Add a new Result Code Map to the config
     * 
     * @param addResultCodeMapRequest Create a new Result Code Map in the config (required)
     * @return AddNewResultCodeMapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Result Code Map already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewResultCodeMapRequestBuilder addNewResultCodeMap(String mapName) throws IllegalArgumentException {
        if (mapName == null) throw new IllegalArgumentException("\"mapName\" is required but got null");
            

        return new AddNewResultCodeMapRequestBuilder(mapName);
    }
    private okhttp3.Call deleteResultCodeMapCall(String resultCodeMapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/result-code-maps/{result-code-map-name}"
            .replace("{" + "result-code-map-name" + "}", localVarApiClient.escapeString(resultCodeMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResultCodeMapValidateBeforeCall(String resultCodeMapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resultCodeMapName' is set
        if (resultCodeMapName == null) {
            throw new ApiException("Missing the required parameter 'resultCodeMapName' when calling deleteResultCodeMap(Async)");
        }

        return deleteResultCodeMapCall(resultCodeMapName, _callback);

    }


    private ApiResponse<Void> deleteResultCodeMapWithHttpInfo(String resultCodeMapName) throws ApiException {
        okhttp3.Call localVarCall = deleteResultCodeMapValidateBeforeCall(resultCodeMapName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteResultCodeMapAsync(String resultCodeMapName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResultCodeMapValidateBeforeCall(resultCodeMapName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteResultCodeMapRequestBuilder {
        private final String resultCodeMapName;

        private DeleteResultCodeMapRequestBuilder(String resultCodeMapName) {
            this.resultCodeMapName = resultCodeMapName;
        }

        /**
         * Build call for deleteResultCodeMap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Result Code Map cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteResultCodeMapCall(resultCodeMapName, _callback);
        }


        /**
         * Execute deleteResultCodeMap request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Result Code Map cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteResultCodeMapWithHttpInfo(resultCodeMapName);
        }

        /**
         * Execute deleteResultCodeMap request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Result Code Map cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteResultCodeMapWithHttpInfo(resultCodeMapName);
        }

        /**
         * Execute deleteResultCodeMap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Result Code Map cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteResultCodeMapAsync(resultCodeMapName, _callback);
        }
    }

    /**
     * Delete a Result Code Map
     * 
     * @param resultCodeMapName Name of the Result Code Map (required)
     * @return DeleteResultCodeMapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Result Code Map cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteResultCodeMapRequestBuilder deleteResultCodeMap(String resultCodeMapName) throws IllegalArgumentException {
        if (resultCodeMapName == null) throw new IllegalArgumentException("\"resultCodeMapName\" is required but got null");
            

        return new DeleteResultCodeMapRequestBuilder(resultCodeMapName);
    }
    private okhttp3.Call getAllObjectsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/result-code-maps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllObjectsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return getAllObjectsCall(filter, _callback);

    }


    private ApiResponse<ResultCodeMapListResponse> getAllObjectsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = getAllObjectsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<ResultCodeMapListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllObjectsAsync(String filter, final ApiCallback<ResultCodeMapListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllObjectsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<ResultCodeMapListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllObjectsRequestBuilder {
        private String filter;

        private GetAllObjectsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return GetAllObjectsRequestBuilder
         */
        public GetAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllObjectsCall(filter, _callback);
        }


        /**
         * Execute getAllObjects request
         * @return ResultCodeMapListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ResultCodeMapListResponse execute() throws ApiException {
            ApiResponse<ResultCodeMapListResponse> localVarResp = getAllObjectsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllObjects request with HTTP info returned
         * @return ApiResponse&lt;ResultCodeMapListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultCodeMapListResponse> executeWithHttpInfo() throws ApiException {
            return getAllObjectsWithHttpInfo(filter);
        }

        /**
         * Execute getAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultCodeMapListResponse> _callback) throws ApiException {
            return getAllObjectsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Result Code Map objects
     * 
     * @return GetAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public GetAllObjectsRequestBuilder getAllObjects() throws IllegalArgumentException {
        return new GetAllObjectsRequestBuilder();
    }
    private okhttp3.Call getSingleMapCall(String resultCodeMapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/result-code-maps/{result-code-map-name}"
            .replace("{" + "result-code-map-name" + "}", localVarApiClient.escapeString(resultCodeMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleMapValidateBeforeCall(String resultCodeMapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resultCodeMapName' is set
        if (resultCodeMapName == null) {
            throw new ApiException("Missing the required parameter 'resultCodeMapName' when calling getSingleMap(Async)");
        }

        return getSingleMapCall(resultCodeMapName, _callback);

    }


    private ApiResponse<ResultCodeMapResponse> getSingleMapWithHttpInfo(String resultCodeMapName) throws ApiException {
        okhttp3.Call localVarCall = getSingleMapValidateBeforeCall(resultCodeMapName, null);
        Type localVarReturnType = new TypeToken<ResultCodeMapResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleMapAsync(String resultCodeMapName, final ApiCallback<ResultCodeMapResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleMapValidateBeforeCall(resultCodeMapName, _callback);
        Type localVarReturnType = new TypeToken<ResultCodeMapResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleMapRequestBuilder {
        private final String resultCodeMapName;

        private GetSingleMapRequestBuilder(String resultCodeMapName) {
            this.resultCodeMapName = resultCodeMapName;
        }

        /**
         * Build call for getSingleMap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleMapCall(resultCodeMapName, _callback);
        }


        /**
         * Execute getSingleMap request
         * @return ResultCodeMapResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ResultCodeMapResponse execute() throws ApiException {
            ApiResponse<ResultCodeMapResponse> localVarResp = getSingleMapWithHttpInfo(resultCodeMapName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleMap request with HTTP info returned
         * @return ApiResponse&lt;ResultCodeMapResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultCodeMapResponse> executeWithHttpInfo() throws ApiException {
            return getSingleMapWithHttpInfo(resultCodeMapName);
        }

        /**
         * Execute getSingleMap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultCodeMapResponse> _callback) throws ApiException {
            return getSingleMapAsync(resultCodeMapName, _callback);
        }
    }

    /**
     * Returns a single Result Code Map
     * 
     * @param resultCodeMapName Name of the Result Code Map (required)
     * @return GetSingleMapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleMapRequestBuilder getSingleMap(String resultCodeMapName) throws IllegalArgumentException {
        if (resultCodeMapName == null) throw new IllegalArgumentException("\"resultCodeMapName\" is required but got null");
            

        return new GetSingleMapRequestBuilder(resultCodeMapName);
    }
    private okhttp3.Call updateByNameCall(String resultCodeMapName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/result-code-maps/{result-code-map-name}"
            .replace("{" + "result-code-map-name" + "}", localVarApiClient.escapeString(resultCodeMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String resultCodeMapName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resultCodeMapName' is set
        if (resultCodeMapName == null) {
            throw new ApiException("Missing the required parameter 'resultCodeMapName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(resultCodeMapName, updateRequest, _callback);

    }


    private ApiResponse<ResultCodeMapResponse> updateByNameWithHttpInfo(String resultCodeMapName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(resultCodeMapName, updateRequest, null);
        Type localVarReturnType = new TypeToken<ResultCodeMapResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String resultCodeMapName, UpdateRequest updateRequest, final ApiCallback<ResultCodeMapResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(resultCodeMapName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<ResultCodeMapResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String resultCodeMapName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String resultCodeMapName) {
            this.operations = operations;
            this.resultCodeMapName = resultCodeMapName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(resultCodeMapName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return ResultCodeMapResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ResultCodeMapResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<ResultCodeMapResponse> localVarResp = updateByNameWithHttpInfo(resultCodeMapName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;ResultCodeMapResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultCodeMapResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(resultCodeMapName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultCodeMapResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(resultCodeMapName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Result Code Map by name
     * 
     * @param resultCodeMapName Name of the Result Code Map (required)
     * @param updateRequest Update an existing Result Code Map (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Result Code Map does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String resultCodeMapName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (resultCodeMapName == null) throw new IllegalArgumentException("\"resultCodeMapName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, resultCodeMapName);
    }
}
