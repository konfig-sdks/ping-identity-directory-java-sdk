/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddConstructedAttributeRequest;
import com.konfigthis.client.model.ConstructedAttributeListResponse;
import com.konfigthis.client.model.ConstructedAttributeResponse;
import com.konfigthis.client.model.EnumconstructedAttributeSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConstructedAttributeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConstructedAttributeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConstructedAttributeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewAttributeCall(AddConstructedAttributeRequest addConstructedAttributeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addConstructedAttributeRequest;

        // create path and map variables
        String localVarPath = "/constructed-attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewAttributeValidateBeforeCall(AddConstructedAttributeRequest addConstructedAttributeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addConstructedAttributeRequest' is set
        if (addConstructedAttributeRequest == null) {
            throw new ApiException("Missing the required parameter 'addConstructedAttributeRequest' when calling addNewAttribute(Async)");
        }

        return addNewAttributeCall(addConstructedAttributeRequest, _callback);

    }


    private ApiResponse<ConstructedAttributeResponse> addNewAttributeWithHttpInfo(AddConstructedAttributeRequest addConstructedAttributeRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewAttributeValidateBeforeCall(addConstructedAttributeRequest, null);
        Type localVarReturnType = new TypeToken<ConstructedAttributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewAttributeAsync(AddConstructedAttributeRequest addConstructedAttributeRequest, final ApiCallback<ConstructedAttributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewAttributeValidateBeforeCall(addConstructedAttributeRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructedAttributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewAttributeRequestBuilder {
        private final String attributeName;
        private String description;
        private List<EnumconstructedAttributeSchemaUrn> schemas;
        private String attributeType;
        private List<String> valuePattern;

        private AddNewAttributeRequestBuilder(String attributeName) {
            this.attributeName = attributeName;
        }

        /**
         * Set description
         * @param description A description for this Constructed Attribute (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder schemas(List<EnumconstructedAttributeSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set attributeType
         * @param attributeType Specifies the attribute type for the attribute whose values are to be constructed. (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder attributeType(String attributeType) {
            this.attributeType = attributeType;
            return this;
        }
        
        /**
         * Set valuePattern
         * @param valuePattern Specifies a pattern for constructing the attribute value using fixed text and attribute values from the entry. (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder valuePattern(List<String> valuePattern) {
            this.valuePattern = valuePattern;
            return this;
        }
        
        /**
         * Build call for addNewAttribute
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Constructed Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddConstructedAttributeRequest addConstructedAttributeRequest = buildBodyParams();
            return addNewAttributeCall(addConstructedAttributeRequest, _callback);
        }

        private AddConstructedAttributeRequest buildBodyParams() {
            AddConstructedAttributeRequest addConstructedAttributeRequest = new AddConstructedAttributeRequest();
            return addConstructedAttributeRequest;
        }

        /**
         * Execute addNewAttribute request
         * @return ConstructedAttributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Constructed Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public ConstructedAttributeResponse execute() throws ApiException {
            AddConstructedAttributeRequest addConstructedAttributeRequest = buildBodyParams();
            ApiResponse<ConstructedAttributeResponse> localVarResp = addNewAttributeWithHttpInfo(addConstructedAttributeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewAttribute request with HTTP info returned
         * @return ApiResponse&lt;ConstructedAttributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Constructed Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConstructedAttributeResponse> executeWithHttpInfo() throws ApiException {
            AddConstructedAttributeRequest addConstructedAttributeRequest = buildBodyParams();
            return addNewAttributeWithHttpInfo(addConstructedAttributeRequest);
        }

        /**
         * Execute addNewAttribute request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Constructed Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConstructedAttributeResponse> _callback) throws ApiException {
            AddConstructedAttributeRequest addConstructedAttributeRequest = buildBodyParams();
            return addNewAttributeAsync(addConstructedAttributeRequest, _callback);
        }
    }

    /**
     * Add a new Constructed Attribute to the config
     * 
     * @param addConstructedAttributeRequest Create a new Constructed Attribute in the config (required)
     * @return AddNewAttributeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Constructed Attribute already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewAttributeRequestBuilder addNewAttribute(String attributeName) throws IllegalArgumentException {
        if (attributeName == null) throw new IllegalArgumentException("\"attributeName\" is required but got null");
            

        return new AddNewAttributeRequestBuilder(attributeName);
    }
    private okhttp3.Call deleteAttributeCall(String constructedAttributeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/constructed-attributes/{constructed-attribute-name}"
            .replace("{" + "constructed-attribute-name" + "}", localVarApiClient.escapeString(constructedAttributeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttributeValidateBeforeCall(String constructedAttributeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'constructedAttributeName' is set
        if (constructedAttributeName == null) {
            throw new ApiException("Missing the required parameter 'constructedAttributeName' when calling deleteAttribute(Async)");
        }

        return deleteAttributeCall(constructedAttributeName, _callback);

    }


    private ApiResponse<Void> deleteAttributeWithHttpInfo(String constructedAttributeName) throws ApiException {
        okhttp3.Call localVarCall = deleteAttributeValidateBeforeCall(constructedAttributeName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAttributeAsync(String constructedAttributeName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttributeValidateBeforeCall(constructedAttributeName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAttributeRequestBuilder {
        private final String constructedAttributeName;

        private DeleteAttributeRequestBuilder(String constructedAttributeName) {
            this.constructedAttributeName = constructedAttributeName;
        }

        /**
         * Build call for deleteAttribute
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Constructed Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAttributeCall(constructedAttributeName, _callback);
        }


        /**
         * Execute deleteAttribute request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Constructed Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAttributeWithHttpInfo(constructedAttributeName);
        }

        /**
         * Execute deleteAttribute request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Constructed Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAttributeWithHttpInfo(constructedAttributeName);
        }

        /**
         * Execute deleteAttribute request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Constructed Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAttributeAsync(constructedAttributeName, _callback);
        }
    }

    /**
     * Delete a Constructed Attribute
     * 
     * @param constructedAttributeName Name of the Constructed Attribute (required)
     * @return DeleteAttributeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Constructed Attribute cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttributeRequestBuilder deleteAttribute(String constructedAttributeName) throws IllegalArgumentException {
        if (constructedAttributeName == null) throw new IllegalArgumentException("\"constructedAttributeName\" is required but got null");
            

        return new DeleteAttributeRequestBuilder(constructedAttributeName);
    }
    private okhttp3.Call getSingleAttributeCall(String constructedAttributeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/constructed-attributes/{constructed-attribute-name}"
            .replace("{" + "constructed-attribute-name" + "}", localVarApiClient.escapeString(constructedAttributeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleAttributeValidateBeforeCall(String constructedAttributeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'constructedAttributeName' is set
        if (constructedAttributeName == null) {
            throw new ApiException("Missing the required parameter 'constructedAttributeName' when calling getSingleAttribute(Async)");
        }

        return getSingleAttributeCall(constructedAttributeName, _callback);

    }


    private ApiResponse<ConstructedAttributeResponse> getSingleAttributeWithHttpInfo(String constructedAttributeName) throws ApiException {
        okhttp3.Call localVarCall = getSingleAttributeValidateBeforeCall(constructedAttributeName, null);
        Type localVarReturnType = new TypeToken<ConstructedAttributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAttributeAsync(String constructedAttributeName, final ApiCallback<ConstructedAttributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleAttributeValidateBeforeCall(constructedAttributeName, _callback);
        Type localVarReturnType = new TypeToken<ConstructedAttributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleAttributeRequestBuilder {
        private final String constructedAttributeName;

        private GetSingleAttributeRequestBuilder(String constructedAttributeName) {
            this.constructedAttributeName = constructedAttributeName;
        }

        /**
         * Build call for getSingleAttribute
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleAttributeCall(constructedAttributeName, _callback);
        }


        /**
         * Execute getSingleAttribute request
         * @return ConstructedAttributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ConstructedAttributeResponse execute() throws ApiException {
            ApiResponse<ConstructedAttributeResponse> localVarResp = getSingleAttributeWithHttpInfo(constructedAttributeName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleAttribute request with HTTP info returned
         * @return ApiResponse&lt;ConstructedAttributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConstructedAttributeResponse> executeWithHttpInfo() throws ApiException {
            return getSingleAttributeWithHttpInfo(constructedAttributeName);
        }

        /**
         * Execute getSingleAttribute request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConstructedAttributeResponse> _callback) throws ApiException {
            return getSingleAttributeAsync(constructedAttributeName, _callback);
        }
    }

    /**
     * Returns a single Constructed Attribute
     * 
     * @param constructedAttributeName Name of the Constructed Attribute (required)
     * @return GetSingleAttributeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleAttributeRequestBuilder getSingleAttribute(String constructedAttributeName) throws IllegalArgumentException {
        if (constructedAttributeName == null) throw new IllegalArgumentException("\"constructedAttributeName\" is required but got null");
            

        return new GetSingleAttributeRequestBuilder(constructedAttributeName);
    }
    private okhttp3.Call listAllAttributesCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/constructed-attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllAttributesValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAllAttributesCall(filter, _callback);

    }


    private ApiResponse<ConstructedAttributeListResponse> listAllAttributesWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllAttributesValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<ConstructedAttributeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAttributesAsync(String filter, final ApiCallback<ConstructedAttributeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllAttributesValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<ConstructedAttributeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllAttributesRequestBuilder {
        private String filter;

        private ListAllAttributesRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllAttributesRequestBuilder
         */
        public ListAllAttributesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllAttributesCall(filter, _callback);
        }


        /**
         * Execute listAllAttributes request
         * @return ConstructedAttributeListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ConstructedAttributeListResponse execute() throws ApiException {
            ApiResponse<ConstructedAttributeListResponse> localVarResp = listAllAttributesWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllAttributes request with HTTP info returned
         * @return ApiResponse&lt;ConstructedAttributeListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConstructedAttributeListResponse> executeWithHttpInfo() throws ApiException {
            return listAllAttributesWithHttpInfo(filter);
        }

        /**
         * Execute listAllAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConstructedAttributeListResponse> _callback) throws ApiException {
            return listAllAttributesAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Constructed Attribute objects
     * 
     * @return ListAllAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllAttributesRequestBuilder listAllAttributes() throws IllegalArgumentException {
        return new ListAllAttributesRequestBuilder();
    }
    private okhttp3.Call updateByNameCall(String constructedAttributeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/constructed-attributes/{constructed-attribute-name}"
            .replace("{" + "constructed-attribute-name" + "}", localVarApiClient.escapeString(constructedAttributeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String constructedAttributeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'constructedAttributeName' is set
        if (constructedAttributeName == null) {
            throw new ApiException("Missing the required parameter 'constructedAttributeName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(constructedAttributeName, updateRequest, _callback);

    }


    private ApiResponse<ConstructedAttributeResponse> updateByNameWithHttpInfo(String constructedAttributeName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(constructedAttributeName, updateRequest, null);
        Type localVarReturnType = new TypeToken<ConstructedAttributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String constructedAttributeName, UpdateRequest updateRequest, final ApiCallback<ConstructedAttributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(constructedAttributeName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<ConstructedAttributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String constructedAttributeName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String constructedAttributeName) {
            this.operations = operations;
            this.constructedAttributeName = constructedAttributeName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(constructedAttributeName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return ConstructedAttributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ConstructedAttributeResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<ConstructedAttributeResponse> localVarResp = updateByNameWithHttpInfo(constructedAttributeName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;ConstructedAttributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConstructedAttributeResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(constructedAttributeName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConstructedAttributeResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(constructedAttributeName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Constructed Attribute by name
     * 
     * @param constructedAttributeName Name of the Constructed Attribute (required)
     * @param updateRequest Update an existing Constructed Attribute (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Constructed Attribute does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String constructedAttributeName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (constructedAttributeName == null) throw new IllegalArgumentException("\"constructedAttributeName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, constructedAttributeName);
    }
}
