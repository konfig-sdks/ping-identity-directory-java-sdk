/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddRootDnUserRequest;
import com.konfigthis.client.model.EnumrootDnUserIsProxyableProp;
import com.konfigthis.client.model.EnumrootDnUserPrivilegeProp;
import com.konfigthis.client.model.EnumrootDnUserSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.RootDnUserListResponse;
import com.konfigthis.client.model.RootDnUserResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RootDnUserApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RootDnUserApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RootDnUserApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewUserToConfigCall(AddRootDnUserRequest addRootDnUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addRootDnUserRequest;

        // create path and map variables
        String localVarPath = "/root-dn/root-dn-users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewUserToConfigValidateBeforeCall(AddRootDnUserRequest addRootDnUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addRootDnUserRequest' is set
        if (addRootDnUserRequest == null) {
            throw new ApiException("Missing the required parameter 'addRootDnUserRequest' when calling addNewUserToConfig(Async)");
        }

        return addNewUserToConfigCall(addRootDnUserRequest, _callback);

    }


    private ApiResponse<RootDnUserResponse> addNewUserToConfigWithHttpInfo(AddRootDnUserRequest addRootDnUserRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewUserToConfigValidateBeforeCall(addRootDnUserRequest, null);
        Type localVarReturnType = new TypeToken<RootDnUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewUserToConfigAsync(AddRootDnUserRequest addRootDnUserRequest, final ApiCallback<RootDnUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewUserToConfigValidateBeforeCall(addRootDnUserRequest, _callback);
        Type localVarReturnType = new TypeToken<RootDnUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewUserToConfigRequestBuilder {
        private final String userName;
        private String description;
        private List<EnumrootDnUserSchemaUrn> schemas;
        private List<String> alternateBindDN;
        private String password;
        private List<String> firstName;
        private List<String> lastName;
        private String userID;
        private List<String> emailAddress;
        private List<String> workTelephoneNumber;
        private List<String> homeTelephoneNumber;
        private List<String> mobileTelephoneNumber;
        private List<String> pagerTelephoneNumber;
        private Boolean inheritDefaultRootPrivileges;
        private List<EnumrootDnUserPrivilegeProp> privilege;
        private Integer searchResultEntryLimit;
        private Integer timeLimitSeconds;
        private Integer lookThroughEntryLimit;
        private Integer idleTimeLimitSeconds;
        private String passwordPolicy;
        private Boolean disabled;
        private String accountActivationTime;
        private String accountExpirationTime;
        private Boolean requireSecureAuthentication;
        private Boolean requireSecureConnections;
        private List<String> allowedAuthenticationType;
        private List<String> allowedAuthenticationIPAddress;
        private List<String> preferredOTPDeliveryMechanism;
        private EnumrootDnUserIsProxyableProp isProxyable;
        private List<String> isProxyableByDN;
        private List<String> isProxyableByGroup;
        private List<String> isProxyableByURL;
        private List<String> mayProxyAsDN;
        private List<String> mayProxyAsGroup;
        private List<String> mayProxyAsURL;

        private AddNewUserToConfigRequestBuilder(String userName) {
            this.userName = userName;
        }

        /**
         * Set description
         * @param description A description for this User. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder schemas(List<EnumrootDnUserSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set alternateBindDN
         * @param alternateBindDN Specifies one or more alternate DNs that can be used to bind to the server as this User. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder alternateBindDN(List<String> alternateBindDN) {
            this.alternateBindDN = alternateBindDN;
            return this;
        }
        
        /**
         * Set password
         * @param password Specifies the user&#39;s password. This is stored in the userPassword LDAP attribute. To set a pre-hashed value, the account making the change must have the bypass-pw-policy privilege. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName Specifies the user&#39;s first name. This is stored in the givenName LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder firstName(List<String> firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Specifies the user&#39;s last name. This is stored in the sn LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder lastName(List<String> lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set userID
         * @param userID Specifies the user&#39;s user ID. This is stored in the uid LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder userID(String userID) {
            this.userID = userID;
            return this;
        }
        
        /**
         * Set emailAddress
         * @param emailAddress Specifies the user&#39;s email address. This is stored in the mail LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder emailAddress(List<String> emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Set workTelephoneNumber
         * @param workTelephoneNumber Specifies the user&#39;s work telephone number. This is stored in the telephoneNumber LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder workTelephoneNumber(List<String> workTelephoneNumber) {
            this.workTelephoneNumber = workTelephoneNumber;
            return this;
        }
        
        /**
         * Set homeTelephoneNumber
         * @param homeTelephoneNumber Specifies the user&#39;s home telephone number. This is stored in the homePhone LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder homeTelephoneNumber(List<String> homeTelephoneNumber) {
            this.homeTelephoneNumber = homeTelephoneNumber;
            return this;
        }
        
        /**
         * Set mobileTelephoneNumber
         * @param mobileTelephoneNumber Specifies the user&#39;s mobile telephone number. This is stored in the mobile LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder mobileTelephoneNumber(List<String> mobileTelephoneNumber) {
            this.mobileTelephoneNumber = mobileTelephoneNumber;
            return this;
        }
        
        /**
         * Set pagerTelephoneNumber
         * @param pagerTelephoneNumber Specifies the user&#39;s pager telephone number. This is stored in the pager LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder pagerTelephoneNumber(List<String> pagerTelephoneNumber) {
            this.pagerTelephoneNumber = pagerTelephoneNumber;
            return this;
        }
        
        /**
         * Set inheritDefaultRootPrivileges
         * @param inheritDefaultRootPrivileges Indicates whether this User should be automatically granted the set of privileges defined in the default-root-privilege-name property of the Root DN configuration object. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder inheritDefaultRootPrivileges(Boolean inheritDefaultRootPrivileges) {
            this.inheritDefaultRootPrivileges = inheritDefaultRootPrivileges;
            return this;
        }
        
        /**
         * Set privilege
         * @param privilege  (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder privilege(List<EnumrootDnUserPrivilegeProp> privilege) {
            this.privilege = privilege;
            return this;
        }
        
        /**
         * Set searchResultEntryLimit
         * @param searchResultEntryLimit Specifies the maximum number of entries that the server may return to the user in response to any single search request. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-size-limit LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder searchResultEntryLimit(Integer searchResultEntryLimit) {
            this.searchResultEntryLimit = searchResultEntryLimit;
            return this;
        }
        
        /**
         * Set timeLimitSeconds
         * @param timeLimitSeconds Specifies the maximum length of time (in seconds) that the server may spend processing any single search request. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-time-limit LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder timeLimitSeconds(Integer timeLimitSeconds) {
            this.timeLimitSeconds = timeLimitSeconds;
            return this;
        }
        
        /**
         * Set lookThroughEntryLimit
         * @param lookThroughEntryLimit Specifies the maximum number of candidate entries that the server may examine in the course of processing any single search request. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-lookthrough-limit LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder lookThroughEntryLimit(Integer lookThroughEntryLimit) {
            this.lookThroughEntryLimit = lookThroughEntryLimit;
            return this;
        }
        
        /**
         * Set idleTimeLimitSeconds
         * @param idleTimeLimitSeconds Specifies the maximum length of time (in seconds) that a connection authenticated as this user may remain established without issuing any requests. A value of 0 indicates no limit should be enforced. This is stored in the ds-rlim-idle-time-limit LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder idleTimeLimitSeconds(Integer idleTimeLimitSeconds) {
            this.idleTimeLimitSeconds = idleTimeLimitSeconds;
            return this;
        }
        
        /**
         * Set passwordPolicy
         * @param passwordPolicy Specifies the password policy for the user. This is stored in the ds-pwp-password-policy-dn LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder passwordPolicy(String passwordPolicy) {
            this.passwordPolicy = passwordPolicy;
            return this;
        }
        
        /**
         * Set disabled
         * @param disabled Specifies whether the root user account should be disabled. A disabled account is not permitted to authenticate, nor can it be used as an authorization identity. This is stored in the ds-pwp-account-disabled LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder disabled(Boolean disabled) {
            this.disabled = disabled;
            return this;
        }
        
        /**
         * Set accountActivationTime
         * @param accountActivationTime Specifies the time, in generalized time format (e.g., &#39;20160101070000Z&#39;), that the root user account should become active. If an activation time is specified, the user will not be permitted to authenticate, nor can the account be used as an authorization identity, until the activation time has arrived. This is stored in the ds-pwp-account-activation-time LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder accountActivationTime(String accountActivationTime) {
            this.accountActivationTime = accountActivationTime;
            return this;
        }
        
        /**
         * Set accountExpirationTime
         * @param accountExpirationTime Specifies the time, in generalized time format (e.g., &#39;20240101070000Z&#39;), that the root user account should expire. If an expiration time is specified, the user will not be permitted to authenticate, nor can the account be used as an authorization identity, after this time has passed. This is stored in the ds-pwp-account-expiration-time LDAP attribute. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder accountExpirationTime(String accountExpirationTime) {
            this.accountExpirationTime = accountExpirationTime;
            return this;
        }
        
        /**
         * Set requireSecureAuthentication
         * @param requireSecureAuthentication Indicates whether this User must authenticate in a secure manner. When set to \\\&quot;true\\\&quot;, the User will only be allowed to authenticate over a secure connection or using a mechanism that does not expose user credentials (e.g., the CRAM-MD5, DIGEST-MD5, and GSSAPI SASL mechanisms). (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder requireSecureAuthentication(Boolean requireSecureAuthentication) {
            this.requireSecureAuthentication = requireSecureAuthentication;
            return this;
        }
        
        /**
         * Set requireSecureConnections
         * @param requireSecureConnections Indicates whether this User must be required to communicate with the server over a secure connection. When set to \\\&quot;true\\\&quot;, the User will only be allowed to communicate with the server over a secure connection (i.e., using TLS or the StartTLS extended operation). (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder requireSecureConnections(Boolean requireSecureConnections) {
            this.requireSecureConnections = requireSecureConnections;
            return this;
        }
        
        /**
         * Set allowedAuthenticationType
         * @param allowedAuthenticationType Indicates that User should only be allowed to authenticate in certain ways. Allowed values include \\\&quot;simple\\\&quot; (to indicate that the user should be allowed to bind using simple authentication) or \\\&quot;sasl {mech}\\\&quot; (to indicate that the user should be allowed to bind using the specified SASL mechanism, like \\\&quot;sasl PLAIN\\\&quot;). The list of available SASL mechanisms can be retrieved by running \\\&quot;dsconfig --advanced list-sasl-mechanism-handlers\\\&quot;. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder allowedAuthenticationType(List<String> allowedAuthenticationType) {
            this.allowedAuthenticationType = allowedAuthenticationType;
            return this;
        }
        
        /**
         * Set allowedAuthenticationIPAddress
         * @param allowedAuthenticationIPAddress An IPv4 or IPv6 address mask that controls the set of IP addresses from which this User can authenticate to the server. For instance a value of 127.0.0.1 (or ::1 in IPv6) would restricted access only to localhost connections, whereas 10.6.1.* would restrict access to servers on the 10.6.1.* subnet. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder allowedAuthenticationIPAddress(List<String> allowedAuthenticationIPAddress) {
            this.allowedAuthenticationIPAddress = allowedAuthenticationIPAddress;
            return this;
        }
        
        /**
         * Set preferredOTPDeliveryMechanism
         * @param preferredOTPDeliveryMechanism Overrides the default settings for the mechanisms (e.g., email or SMS) that are used to deliver one time passwords to Users. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder preferredOTPDeliveryMechanism(List<String> preferredOTPDeliveryMechanism) {
            this.preferredOTPDeliveryMechanism = preferredOTPDeliveryMechanism;
            return this;
        }
        
        /**
         * Set isProxyable
         * @param isProxyable  (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder isProxyable(EnumrootDnUserIsProxyableProp isProxyable) {
            this.isProxyable = isProxyable;
            return this;
        }
        
        /**
         * Set isProxyableByDN
         * @param isProxyableByDN Specifies the DNs of accounts that can proxy as this User using the proxied authorization v1 or v2 control, the intermediate client control, or a SASL mechanism that allows specifying an alternate authorization identity. This property is only applicable if is-proxyable is set to \\\&quot;allowed\\\&quot; or \\\&quot;required\\\&quot;. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder isProxyableByDN(List<String> isProxyableByDN) {
            this.isProxyableByDN = isProxyableByDN;
            return this;
        }
        
        /**
         * Set isProxyableByGroup
         * @param isProxyableByGroup Specifies the DNs of groups whose members can proxy as this User using the proxied authorization v1 or v2 control, the intermediate client control, or a SASL mechanism that allows specifying an alternate authorization identity. This property is only applicable if is-proxyable is set to \\\&quot;allowed\\\&quot; or \\\&quot;required\\\&quot;. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder isProxyableByGroup(List<String> isProxyableByGroup) {
            this.isProxyableByGroup = isProxyableByGroup;
            return this;
        }
        
        /**
         * Set isProxyableByURL
         * @param isProxyableByURL Specifies LDAP URLs of accounts that can proxy as this User using the proxied authorization v1 or v2 control, the intermediate client control, or a SASL mechanism that allows specifying an alternate authorization identity. This property is only applicable if is-proxyable is set to \\\&quot;allowed\\\&quot; or \\\&quot;required\\\&quot;. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder isProxyableByURL(List<String> isProxyableByURL) {
            this.isProxyableByURL = isProxyableByURL;
            return this;
        }
        
        /**
         * Set mayProxyAsDN
         * @param mayProxyAsDN This restricts the set of accounts that this User can proxy as to entries with the specified DNs. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder mayProxyAsDN(List<String> mayProxyAsDN) {
            this.mayProxyAsDN = mayProxyAsDN;
            return this;
        }
        
        /**
         * Set mayProxyAsGroup
         * @param mayProxyAsGroup This restricts the set of accounts that this User can proxy as to entries that are in the group with the specified DN. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder mayProxyAsGroup(List<String> mayProxyAsGroup) {
            this.mayProxyAsGroup = mayProxyAsGroup;
            return this;
        }
        
        /**
         * Set mayProxyAsURL
         * @param mayProxyAsURL This restricts the set of accounts that this User can proxy as to entries that are matched by the specified LDAP URL. (optional)
         * @return AddNewUserToConfigRequestBuilder
         */
        public AddNewUserToConfigRequestBuilder mayProxyAsURL(List<String> mayProxyAsURL) {
            this.mayProxyAsURL = mayProxyAsURL;
            return this;
        }
        
        /**
         * Build call for addNewUserToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Root DN User already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddRootDnUserRequest addRootDnUserRequest = buildBodyParams();
            return addNewUserToConfigCall(addRootDnUserRequest, _callback);
        }

        private AddRootDnUserRequest buildBodyParams() {
            AddRootDnUserRequest addRootDnUserRequest = new AddRootDnUserRequest();
            return addRootDnUserRequest;
        }

        /**
         * Execute addNewUserToConfig request
         * @return RootDnUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Root DN User already exists </td><td>  -  </td></tr>
         </table>
         */
        public RootDnUserResponse execute() throws ApiException {
            AddRootDnUserRequest addRootDnUserRequest = buildBodyParams();
            ApiResponse<RootDnUserResponse> localVarResp = addNewUserToConfigWithHttpInfo(addRootDnUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewUserToConfig request with HTTP info returned
         * @return ApiResponse&lt;RootDnUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Root DN User already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RootDnUserResponse> executeWithHttpInfo() throws ApiException {
            AddRootDnUserRequest addRootDnUserRequest = buildBodyParams();
            return addNewUserToConfigWithHttpInfo(addRootDnUserRequest);
        }

        /**
         * Execute addNewUserToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Root DN User already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RootDnUserResponse> _callback) throws ApiException {
            AddRootDnUserRequest addRootDnUserRequest = buildBodyParams();
            return addNewUserToConfigAsync(addRootDnUserRequest, _callback);
        }
    }

    /**
     * Add a new Root DN User to the config
     * 
     * @param addRootDnUserRequest Create a new Root DN User in the config (required)
     * @return AddNewUserToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Root DN User already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewUserToConfigRequestBuilder addNewUserToConfig(String userName) throws IllegalArgumentException {
        if (userName == null) throw new IllegalArgumentException("\"userName\" is required but got null");
            

        return new AddNewUserToConfigRequestBuilder(userName);
    }
    private okhttp3.Call deleteUserCall(String rootDnUserName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/root-dn/root-dn-users/{root-dn-user-name}"
            .replace("{" + "root-dn-user-name" + "}", localVarApiClient.escapeString(rootDnUserName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String rootDnUserName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rootDnUserName' is set
        if (rootDnUserName == null) {
            throw new ApiException("Missing the required parameter 'rootDnUserName' when calling deleteUser(Async)");
        }

        return deleteUserCall(rootDnUserName, _callback);

    }


    private ApiResponse<Void> deleteUserWithHttpInfo(String rootDnUserName) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(rootDnUserName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteUserAsync(String rootDnUserName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(rootDnUserName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteUserRequestBuilder {
        private final String rootDnUserName;

        private DeleteUserRequestBuilder(String rootDnUserName) {
            this.rootDnUserName = rootDnUserName;
        }

        /**
         * Build call for deleteUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Root DN User cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteUserCall(rootDnUserName, _callback);
        }


        /**
         * Execute deleteUser request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Root DN User cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteUserWithHttpInfo(rootDnUserName);
        }

        /**
         * Execute deleteUser request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Root DN User cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteUserWithHttpInfo(rootDnUserName);
        }

        /**
         * Execute deleteUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Root DN User cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteUserAsync(rootDnUserName, _callback);
        }
    }

    /**
     * Delete a Root DN User
     * 
     * @param rootDnUserName Name of the Root DN User (required)
     * @return DeleteUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Root DN User cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserRequestBuilder deleteUser(String rootDnUserName) throws IllegalArgumentException {
        if (rootDnUserName == null) throw new IllegalArgumentException("\"rootDnUserName\" is required but got null");
            

        return new DeleteUserRequestBuilder(rootDnUserName);
    }
    private okhttp3.Call getSingleUserCall(String rootDnUserName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/root-dn/root-dn-users/{root-dn-user-name}"
            .replace("{" + "root-dn-user-name" + "}", localVarApiClient.escapeString(rootDnUserName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleUserValidateBeforeCall(String rootDnUserName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rootDnUserName' is set
        if (rootDnUserName == null) {
            throw new ApiException("Missing the required parameter 'rootDnUserName' when calling getSingleUser(Async)");
        }

        return getSingleUserCall(rootDnUserName, _callback);

    }


    private ApiResponse<RootDnUserResponse> getSingleUserWithHttpInfo(String rootDnUserName) throws ApiException {
        okhttp3.Call localVarCall = getSingleUserValidateBeforeCall(rootDnUserName, null);
        Type localVarReturnType = new TypeToken<RootDnUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleUserAsync(String rootDnUserName, final ApiCallback<RootDnUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleUserValidateBeforeCall(rootDnUserName, _callback);
        Type localVarReturnType = new TypeToken<RootDnUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleUserRequestBuilder {
        private final String rootDnUserName;

        private GetSingleUserRequestBuilder(String rootDnUserName) {
            this.rootDnUserName = rootDnUserName;
        }

        /**
         * Build call for getSingleUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleUserCall(rootDnUserName, _callback);
        }


        /**
         * Execute getSingleUser request
         * @return RootDnUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
         </table>
         */
        public RootDnUserResponse execute() throws ApiException {
            ApiResponse<RootDnUserResponse> localVarResp = getSingleUserWithHttpInfo(rootDnUserName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleUser request with HTTP info returned
         * @return ApiResponse&lt;RootDnUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RootDnUserResponse> executeWithHttpInfo() throws ApiException {
            return getSingleUserWithHttpInfo(rootDnUserName);
        }

        /**
         * Execute getSingleUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RootDnUserResponse> _callback) throws ApiException {
            return getSingleUserAsync(rootDnUserName, _callback);
        }
    }

    /**
     * Returns a single Root DN User
     * 
     * @param rootDnUserName Name of the Root DN User (required)
     * @return GetSingleUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleUserRequestBuilder getSingleUser(String rootDnUserName) throws IllegalArgumentException {
        if (rootDnUserName == null) throw new IllegalArgumentException("\"rootDnUserName\" is required but got null");
            

        return new GetSingleUserRequestBuilder(rootDnUserName);
    }
    private okhttp3.Call listAllUsersCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/root-dn/root-dn-users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllUsersValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAllUsersCall(filter, _callback);

    }


    private ApiResponse<RootDnUserListResponse> listAllUsersWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<RootDnUserListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllUsersAsync(String filter, final ApiCallback<RootDnUserListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<RootDnUserListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllUsersRequestBuilder {
        private String filter;

        private ListAllUsersRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllUsersRequestBuilder
         */
        public ListAllUsersRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllUsersCall(filter, _callback);
        }


        /**
         * Execute listAllUsers request
         * @return RootDnUserListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public RootDnUserListResponse execute() throws ApiException {
            ApiResponse<RootDnUserListResponse> localVarResp = listAllUsersWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllUsers request with HTTP info returned
         * @return ApiResponse&lt;RootDnUserListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RootDnUserListResponse> executeWithHttpInfo() throws ApiException {
            return listAllUsersWithHttpInfo(filter);
        }

        /**
         * Execute listAllUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RootDnUserListResponse> _callback) throws ApiException {
            return listAllUsersAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Root DN User objects
     * 
     * @return ListAllUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllUsersRequestBuilder listAllUsers() throws IllegalArgumentException {
        return new ListAllUsersRequestBuilder();
    }
    private okhttp3.Call updateByNameCall(String rootDnUserName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/root-dn/root-dn-users/{root-dn-user-name}"
            .replace("{" + "root-dn-user-name" + "}", localVarApiClient.escapeString(rootDnUserName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String rootDnUserName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rootDnUserName' is set
        if (rootDnUserName == null) {
            throw new ApiException("Missing the required parameter 'rootDnUserName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(rootDnUserName, updateRequest, _callback);

    }


    private ApiResponse<RootDnUserResponse> updateByNameWithHttpInfo(String rootDnUserName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(rootDnUserName, updateRequest, null);
        Type localVarReturnType = new TypeToken<RootDnUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String rootDnUserName, UpdateRequest updateRequest, final ApiCallback<RootDnUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(rootDnUserName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<RootDnUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String rootDnUserName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String rootDnUserName) {
            this.operations = operations;
            this.rootDnUserName = rootDnUserName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(rootDnUserName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return RootDnUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
         </table>
         */
        public RootDnUserResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<RootDnUserResponse> localVarResp = updateByNameWithHttpInfo(rootDnUserName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;RootDnUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RootDnUserResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(rootDnUserName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RootDnUserResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(rootDnUserName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Root DN User by name
     * 
     * @param rootDnUserName Name of the Root DN User (required)
     * @param updateRequest Update an existing Root DN User (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Root DN User does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String rootDnUserName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (rootDnUserName == null) throw new IllegalArgumentException("\"rootDnUserName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, rootDnUserName);
    }
}
