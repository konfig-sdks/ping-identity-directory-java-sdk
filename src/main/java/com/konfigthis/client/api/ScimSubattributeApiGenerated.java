/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddScimSubattributeRequest;
import com.konfigthis.client.model.EnumscimSubattributeMutabilityProp;
import com.konfigthis.client.model.EnumscimSubattributeReturnedProp;
import com.konfigthis.client.model.EnumscimSubattributeSchemaUrn;
import com.konfigthis.client.model.EnumscimSubattributeTypeProp;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.ScimSubattributeListResponse;
import com.konfigthis.client.model.ScimSubattributeResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScimSubattributeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScimSubattributeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScimSubattributeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewConfigCall(String scimAttributeName, String scimSchemaName, AddScimSubattributeRequest addScimSubattributeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addScimSubattributeRequest;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes"
            .replace("{" + "scim-attribute-name" + "}", localVarApiClient.escapeString(scimAttributeName.toString()))
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewConfigValidateBeforeCall(String scimAttributeName, String scimSchemaName, AddScimSubattributeRequest addScimSubattributeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimAttributeName' is set
        if (scimAttributeName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeName' when calling addNewConfig(Async)");
        }

        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling addNewConfig(Async)");
        }

        // verify the required parameter 'addScimSubattributeRequest' is set
        if (addScimSubattributeRequest == null) {
            throw new ApiException("Missing the required parameter 'addScimSubattributeRequest' when calling addNewConfig(Async)");
        }

        return addNewConfigCall(scimAttributeName, scimSchemaName, addScimSubattributeRequest, _callback);

    }


    private ApiResponse<ScimSubattributeResponse> addNewConfigWithHttpInfo(String scimAttributeName, String scimSchemaName, AddScimSubattributeRequest addScimSubattributeRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(scimAttributeName, scimSchemaName, addScimSubattributeRequest, null);
        Type localVarReturnType = new TypeToken<ScimSubattributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewConfigAsync(String scimAttributeName, String scimSchemaName, AddScimSubattributeRequest addScimSubattributeRequest, final ApiCallback<ScimSubattributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(scimAttributeName, scimSchemaName, addScimSubattributeRequest, _callback);
        Type localVarReturnType = new TypeToken<ScimSubattributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewConfigRequestBuilder {
        private final String subattributeName;
        private final String scimAttributeName;
        private final String scimSchemaName;
        private String description;
        private List<EnumscimSubattributeSchemaUrn> schemas;
        private EnumscimSubattributeTypeProp type;
        private Boolean required;
        private Boolean caseExact;
        private Boolean multiValued;
        private List<String> canonicalValue;
        private EnumscimSubattributeMutabilityProp mutability;
        private EnumscimSubattributeReturnedProp returned;
        private List<String> referenceType;

        private AddNewConfigRequestBuilder(String subattributeName, String scimAttributeName, String scimSchemaName) {
            this.subattributeName = subattributeName;
            this.scimAttributeName = scimAttributeName;
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Set description
         * @param description A description for this SCIM Subattribute (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder schemas(List<EnumscimSubattributeSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder type(EnumscimSubattributeTypeProp type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set required
         * @param required Specifies whether this sub-attribute is required. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set caseExact
         * @param caseExact Specifies whether the sub-attribute values are case sensitive. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder caseExact(Boolean caseExact) {
            this.caseExact = caseExact;
            return this;
        }
        
        /**
         * Set multiValued
         * @param multiValued Specifies whether this attribute may have multiple values. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder multiValued(Boolean multiValued) {
            this.multiValued = multiValued;
            return this;
        }
        
        /**
         * Set canonicalValue
         * @param canonicalValue Specifies the suggested canonical type values for the sub-attribute. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder canonicalValue(List<String> canonicalValue) {
            this.canonicalValue = canonicalValue;
            return this;
        }
        
        /**
         * Set mutability
         * @param mutability  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder mutability(EnumscimSubattributeMutabilityProp mutability) {
            this.mutability = mutability;
            return this;
        }
        
        /**
         * Set returned
         * @param returned  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder returned(EnumscimSubattributeReturnedProp returned) {
            this.returned = returned;
            return this;
        }
        
        /**
         * Set referenceType
         * @param referenceType Specifies the SCIM resource types that may be referenced. This property is only applicable for sub-attributes that are of type &#39;reference&#39;. Valid values are: A SCIM resource type (e.g., &#39;User&#39; or &#39;Group&#39;), &#39;external&#39; - indicating the resource is an external resource (e.g., such as a photo), or &#39;uri&#39; - indicating that the reference is to a service endpoint or an identifier (such as a schema urn). (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder referenceType(List<String> referenceType) {
            this.referenceType = referenceType;
            return this;
        }
        
        /**
         * Build call for addNewConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Subattribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddScimSubattributeRequest addScimSubattributeRequest = buildBodyParams();
            return addNewConfigCall(scimAttributeName, scimSchemaName, addScimSubattributeRequest, _callback);
        }

        private AddScimSubattributeRequest buildBodyParams() {
            AddScimSubattributeRequest addScimSubattributeRequest = new AddScimSubattributeRequest();
            return addScimSubattributeRequest;
        }

        /**
         * Execute addNewConfig request
         * @return ScimSubattributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Subattribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public ScimSubattributeResponse execute() throws ApiException {
            AddScimSubattributeRequest addScimSubattributeRequest = buildBodyParams();
            ApiResponse<ScimSubattributeResponse> localVarResp = addNewConfigWithHttpInfo(scimAttributeName, scimSchemaName, addScimSubattributeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewConfig request with HTTP info returned
         * @return ApiResponse&lt;ScimSubattributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Subattribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimSubattributeResponse> executeWithHttpInfo() throws ApiException {
            AddScimSubattributeRequest addScimSubattributeRequest = buildBodyParams();
            return addNewConfigWithHttpInfo(scimAttributeName, scimSchemaName, addScimSubattributeRequest);
        }

        /**
         * Execute addNewConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Subattribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimSubattributeResponse> _callback) throws ApiException {
            AddScimSubattributeRequest addScimSubattributeRequest = buildBodyParams();
            return addNewConfigAsync(scimAttributeName, scimSchemaName, addScimSubattributeRequest, _callback);
        }
    }

    /**
     * Add a new SCIM Subattribute to the config
     * 
     * @param scimAttributeName Name of the SCIM Attribute (required)
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @param addScimSubattributeRequest Create a new SCIM Subattribute in the config (required)
     * @return AddNewConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The SCIM Subattribute already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewConfigRequestBuilder addNewConfig(String subattributeName, String scimAttributeName, String scimSchemaName) throws IllegalArgumentException {
        if (subattributeName == null) throw new IllegalArgumentException("\"subattributeName\" is required but got null");
            

        if (scimAttributeName == null) throw new IllegalArgumentException("\"scimAttributeName\" is required but got null");
            

        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new AddNewConfigRequestBuilder(subattributeName, scimAttributeName, scimSchemaName);
    }
    private okhttp3.Call deleteSubattributeCall(String scimSubattributeName, String scimAttributeName, String scimSchemaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}"
            .replace("{" + "scim-subattribute-name" + "}", localVarApiClient.escapeString(scimSubattributeName.toString()))
            .replace("{" + "scim-attribute-name" + "}", localVarApiClient.escapeString(scimAttributeName.toString()))
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSubattributeValidateBeforeCall(String scimSubattributeName, String scimAttributeName, String scimSchemaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimSubattributeName' is set
        if (scimSubattributeName == null) {
            throw new ApiException("Missing the required parameter 'scimSubattributeName' when calling deleteSubattribute(Async)");
        }

        // verify the required parameter 'scimAttributeName' is set
        if (scimAttributeName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeName' when calling deleteSubattribute(Async)");
        }

        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling deleteSubattribute(Async)");
        }

        return deleteSubattributeCall(scimSubattributeName, scimAttributeName, scimSchemaName, _callback);

    }


    private ApiResponse<Void> deleteSubattributeWithHttpInfo(String scimSubattributeName, String scimAttributeName, String scimSchemaName) throws ApiException {
        okhttp3.Call localVarCall = deleteSubattributeValidateBeforeCall(scimSubattributeName, scimAttributeName, scimSchemaName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSubattributeAsync(String scimSubattributeName, String scimAttributeName, String scimSchemaName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSubattributeValidateBeforeCall(scimSubattributeName, scimAttributeName, scimSchemaName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSubattributeRequestBuilder {
        private final String scimSubattributeName;
        private final String scimAttributeName;
        private final String scimSchemaName;

        private DeleteSubattributeRequestBuilder(String scimSubattributeName, String scimAttributeName, String scimSchemaName) {
            this.scimSubattributeName = scimSubattributeName;
            this.scimAttributeName = scimAttributeName;
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Build call for deleteSubattribute
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Subattribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSubattributeCall(scimSubattributeName, scimAttributeName, scimSchemaName, _callback);
        }


        /**
         * Execute deleteSubattribute request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Subattribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSubattributeWithHttpInfo(scimSubattributeName, scimAttributeName, scimSchemaName);
        }

        /**
         * Execute deleteSubattribute request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Subattribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSubattributeWithHttpInfo(scimSubattributeName, scimAttributeName, scimSchemaName);
        }

        /**
         * Execute deleteSubattribute request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Subattribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSubattributeAsync(scimSubattributeName, scimAttributeName, scimSchemaName, _callback);
        }
    }

    /**
     * Delete a SCIM Subattribute
     * 
     * @param scimSubattributeName Name of the SCIM Subattribute (required)
     * @param scimAttributeName Name of the SCIM Attribute (required)
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @return DeleteSubattributeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The SCIM Subattribute cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSubattributeRequestBuilder deleteSubattribute(String scimSubattributeName, String scimAttributeName, String scimSchemaName) throws IllegalArgumentException {
        if (scimSubattributeName == null) throw new IllegalArgumentException("\"scimSubattributeName\" is required but got null");
            

        if (scimAttributeName == null) throw new IllegalArgumentException("\"scimAttributeName\" is required but got null");
            

        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new DeleteSubattributeRequestBuilder(scimSubattributeName, scimAttributeName, scimSchemaName);
    }
    private okhttp3.Call getSingleSubattributeCall(String scimSubattributeName, String scimAttributeName, String scimSchemaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}"
            .replace("{" + "scim-subattribute-name" + "}", localVarApiClient.escapeString(scimSubattributeName.toString()))
            .replace("{" + "scim-attribute-name" + "}", localVarApiClient.escapeString(scimAttributeName.toString()))
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleSubattributeValidateBeforeCall(String scimSubattributeName, String scimAttributeName, String scimSchemaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimSubattributeName' is set
        if (scimSubattributeName == null) {
            throw new ApiException("Missing the required parameter 'scimSubattributeName' when calling getSingleSubattribute(Async)");
        }

        // verify the required parameter 'scimAttributeName' is set
        if (scimAttributeName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeName' when calling getSingleSubattribute(Async)");
        }

        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling getSingleSubattribute(Async)");
        }

        return getSingleSubattributeCall(scimSubattributeName, scimAttributeName, scimSchemaName, _callback);

    }


    private ApiResponse<ScimSubattributeResponse> getSingleSubattributeWithHttpInfo(String scimSubattributeName, String scimAttributeName, String scimSchemaName) throws ApiException {
        okhttp3.Call localVarCall = getSingleSubattributeValidateBeforeCall(scimSubattributeName, scimAttributeName, scimSchemaName, null);
        Type localVarReturnType = new TypeToken<ScimSubattributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleSubattributeAsync(String scimSubattributeName, String scimAttributeName, String scimSchemaName, final ApiCallback<ScimSubattributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleSubattributeValidateBeforeCall(scimSubattributeName, scimAttributeName, scimSchemaName, _callback);
        Type localVarReturnType = new TypeToken<ScimSubattributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleSubattributeRequestBuilder {
        private final String scimSubattributeName;
        private final String scimAttributeName;
        private final String scimSchemaName;

        private GetSingleSubattributeRequestBuilder(String scimSubattributeName, String scimAttributeName, String scimSchemaName) {
            this.scimSubattributeName = scimSubattributeName;
            this.scimAttributeName = scimAttributeName;
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Build call for getSingleSubattribute
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleSubattributeCall(scimSubattributeName, scimAttributeName, scimSchemaName, _callback);
        }


        /**
         * Execute getSingleSubattribute request
         * @return ScimSubattributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ScimSubattributeResponse execute() throws ApiException {
            ApiResponse<ScimSubattributeResponse> localVarResp = getSingleSubattributeWithHttpInfo(scimSubattributeName, scimAttributeName, scimSchemaName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleSubattribute request with HTTP info returned
         * @return ApiResponse&lt;ScimSubattributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimSubattributeResponse> executeWithHttpInfo() throws ApiException {
            return getSingleSubattributeWithHttpInfo(scimSubattributeName, scimAttributeName, scimSchemaName);
        }

        /**
         * Execute getSingleSubattribute request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimSubattributeResponse> _callback) throws ApiException {
            return getSingleSubattributeAsync(scimSubattributeName, scimAttributeName, scimSchemaName, _callback);
        }
    }

    /**
     * Returns a single SCIM Subattribute
     * 
     * @param scimSubattributeName Name of the SCIM Subattribute (required)
     * @param scimAttributeName Name of the SCIM Attribute (required)
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @return GetSingleSubattributeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleSubattributeRequestBuilder getSingleSubattribute(String scimSubattributeName, String scimAttributeName, String scimSchemaName) throws IllegalArgumentException {
        if (scimSubattributeName == null) throw new IllegalArgumentException("\"scimSubattributeName\" is required but got null");
            

        if (scimAttributeName == null) throw new IllegalArgumentException("\"scimAttributeName\" is required but got null");
            

        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new GetSingleSubattributeRequestBuilder(scimSubattributeName, scimAttributeName, scimSchemaName);
    }
    private okhttp3.Call listAllSubattributesCall(String scimAttributeName, String scimSchemaName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes"
            .replace("{" + "scim-attribute-name" + "}", localVarApiClient.escapeString(scimAttributeName.toString()))
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllSubattributesValidateBeforeCall(String scimAttributeName, String scimSchemaName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimAttributeName' is set
        if (scimAttributeName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeName' when calling listAllSubattributes(Async)");
        }

        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling listAllSubattributes(Async)");
        }

        return listAllSubattributesCall(scimAttributeName, scimSchemaName, filter, _callback);

    }


    private ApiResponse<ScimSubattributeListResponse> listAllSubattributesWithHttpInfo(String scimAttributeName, String scimSchemaName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllSubattributesValidateBeforeCall(scimAttributeName, scimSchemaName, filter, null);
        Type localVarReturnType = new TypeToken<ScimSubattributeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllSubattributesAsync(String scimAttributeName, String scimSchemaName, String filter, final ApiCallback<ScimSubattributeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllSubattributesValidateBeforeCall(scimAttributeName, scimSchemaName, filter, _callback);
        Type localVarReturnType = new TypeToken<ScimSubattributeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllSubattributesRequestBuilder {
        private final String scimAttributeName;
        private final String scimSchemaName;
        private String filter;

        private ListAllSubattributesRequestBuilder(String scimAttributeName, String scimSchemaName) {
            this.scimAttributeName = scimAttributeName;
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllSubattributesRequestBuilder
         */
        public ListAllSubattributesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllSubattributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllSubattributesCall(scimAttributeName, scimSchemaName, filter, _callback);
        }


        /**
         * Execute listAllSubattributes request
         * @return ScimSubattributeListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ScimSubattributeListResponse execute() throws ApiException {
            ApiResponse<ScimSubattributeListResponse> localVarResp = listAllSubattributesWithHttpInfo(scimAttributeName, scimSchemaName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllSubattributes request with HTTP info returned
         * @return ApiResponse&lt;ScimSubattributeListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimSubattributeListResponse> executeWithHttpInfo() throws ApiException {
            return listAllSubattributesWithHttpInfo(scimAttributeName, scimSchemaName, filter);
        }

        /**
         * Execute listAllSubattributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimSubattributeListResponse> _callback) throws ApiException {
            return listAllSubattributesAsync(scimAttributeName, scimSchemaName, filter, _callback);
        }
    }

    /**
     * Returns a list of all SCIM Subattribute objects
     * 
     * @param scimAttributeName Name of the SCIM Attribute (required)
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @return ListAllSubattributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllSubattributesRequestBuilder listAllSubattributes(String scimAttributeName, String scimSchemaName) throws IllegalArgumentException {
        if (scimAttributeName == null) throw new IllegalArgumentException("\"scimAttributeName\" is required but got null");
            

        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new ListAllSubattributesRequestBuilder(scimAttributeName, scimSchemaName);
    }
    private okhttp3.Call updateByNameCall(String scimSubattributeName, String scimAttributeName, String scimSchemaName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}/scim-subattributes/{scim-subattribute-name}"
            .replace("{" + "scim-subattribute-name" + "}", localVarApiClient.escapeString(scimSubattributeName.toString()))
            .replace("{" + "scim-attribute-name" + "}", localVarApiClient.escapeString(scimAttributeName.toString()))
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String scimSubattributeName, String scimAttributeName, String scimSchemaName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimSubattributeName' is set
        if (scimSubattributeName == null) {
            throw new ApiException("Missing the required parameter 'scimSubattributeName' when calling updateByName(Async)");
        }

        // verify the required parameter 'scimAttributeName' is set
        if (scimAttributeName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeName' when calling updateByName(Async)");
        }

        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(scimSubattributeName, scimAttributeName, scimSchemaName, updateRequest, _callback);

    }


    private ApiResponse<ScimSubattributeResponse> updateByNameWithHttpInfo(String scimSubattributeName, String scimAttributeName, String scimSchemaName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(scimSubattributeName, scimAttributeName, scimSchemaName, updateRequest, null);
        Type localVarReturnType = new TypeToken<ScimSubattributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String scimSubattributeName, String scimAttributeName, String scimSchemaName, UpdateRequest updateRequest, final ApiCallback<ScimSubattributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(scimSubattributeName, scimAttributeName, scimSchemaName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<ScimSubattributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String scimSubattributeName;
        private final String scimAttributeName;
        private final String scimSchemaName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String scimSubattributeName, String scimAttributeName, String scimSchemaName) {
            this.operations = operations;
            this.scimSubattributeName = scimSubattributeName;
            this.scimAttributeName = scimAttributeName;
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(scimSubattributeName, scimAttributeName, scimSchemaName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return ScimSubattributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ScimSubattributeResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<ScimSubattributeResponse> localVarResp = updateByNameWithHttpInfo(scimSubattributeName, scimAttributeName, scimSchemaName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;ScimSubattributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimSubattributeResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(scimSubattributeName, scimAttributeName, scimSchemaName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimSubattributeResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(scimSubattributeName, scimAttributeName, scimSchemaName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing SCIM Subattribute by name
     * 
     * @param scimSubattributeName Name of the SCIM Subattribute (required)
     * @param scimAttributeName Name of the SCIM Attribute (required)
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @param updateRequest Update an existing SCIM Subattribute (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The SCIM Subattribute does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String scimSubattributeName, String scimAttributeName, String scimSchemaName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (scimSubattributeName == null) throw new IllegalArgumentException("\"scimSubattributeName\" is required but got null");
            

        if (scimAttributeName == null) throw new IllegalArgumentException("\"scimAttributeName\" is required but got null");
            

        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, scimSubattributeName, scimAttributeName, scimSchemaName);
    }
}
