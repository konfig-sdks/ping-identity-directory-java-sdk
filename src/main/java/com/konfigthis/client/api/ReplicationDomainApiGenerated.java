/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.ReplicationDomainListResponse;
import com.konfigthis.client.model.ReplicationDomainResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReplicationDomainApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicationDomainApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicationDomainApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSingleCall(String replicationDomainName, String synchronizationProviderName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/synchronization-providers/{synchronization-provider-name}/replication-domains/{replication-domain-name}"
            .replace("{" + "replication-domain-name" + "}", localVarApiClient.escapeString(replicationDomainName.toString()))
            .replace("{" + "synchronization-provider-name" + "}", localVarApiClient.escapeString(synchronizationProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String replicationDomainName, String synchronizationProviderName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationDomainName' is set
        if (replicationDomainName == null) {
            throw new ApiException("Missing the required parameter 'replicationDomainName' when calling getSingle(Async)");
        }

        // verify the required parameter 'synchronizationProviderName' is set
        if (synchronizationProviderName == null) {
            throw new ApiException("Missing the required parameter 'synchronizationProviderName' when calling getSingle(Async)");
        }

        return getSingleCall(replicationDomainName, synchronizationProviderName, _callback);

    }


    private ApiResponse<ReplicationDomainResponse> getSingleWithHttpInfo(String replicationDomainName, String synchronizationProviderName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(replicationDomainName, synchronizationProviderName, null);
        Type localVarReturnType = new TypeToken<ReplicationDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String replicationDomainName, String synchronizationProviderName, final ApiCallback<ReplicationDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(replicationDomainName, synchronizationProviderName, _callback);
        Type localVarReturnType = new TypeToken<ReplicationDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String replicationDomainName;
        private final String synchronizationProviderName;

        private GetSingleRequestBuilder(String replicationDomainName, String synchronizationProviderName) {
            this.replicationDomainName = replicationDomainName;
            this.synchronizationProviderName = synchronizationProviderName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(replicationDomainName, synchronizationProviderName, _callback);
        }


        /**
         * Execute getSingle request
         * @return ReplicationDomainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ReplicationDomainResponse execute() throws ApiException {
            ApiResponse<ReplicationDomainResponse> localVarResp = getSingleWithHttpInfo(replicationDomainName, synchronizationProviderName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;ReplicationDomainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReplicationDomainResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(replicationDomainName, synchronizationProviderName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReplicationDomainResponse> _callback) throws ApiException {
            return getSingleAsync(replicationDomainName, synchronizationProviderName, _callback);
        }
    }

    /**
     * Returns a single Replication Domain
     * 
     * @param replicationDomainName Name of the Replication Domain (required)
     * @param synchronizationProviderName Name of the Synchronization Provider (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String replicationDomainName, String synchronizationProviderName) throws IllegalArgumentException {
        if (replicationDomainName == null) throw new IllegalArgumentException("\"replicationDomainName\" is required but got null");
            

        if (synchronizationProviderName == null) throw new IllegalArgumentException("\"synchronizationProviderName\" is required but got null");
            

        return new GetSingleRequestBuilder(replicationDomainName, synchronizationProviderName);
    }
    private okhttp3.Call listAllDomainsCall(String synchronizationProviderName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/synchronization-providers/{synchronization-provider-name}/replication-domains"
            .replace("{" + "synchronization-provider-name" + "}", localVarApiClient.escapeString(synchronizationProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllDomainsValidateBeforeCall(String synchronizationProviderName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'synchronizationProviderName' is set
        if (synchronizationProviderName == null) {
            throw new ApiException("Missing the required parameter 'synchronizationProviderName' when calling listAllDomains(Async)");
        }

        return listAllDomainsCall(synchronizationProviderName, filter, _callback);

    }


    private ApiResponse<ReplicationDomainListResponse> listAllDomainsWithHttpInfo(String synchronizationProviderName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllDomainsValidateBeforeCall(synchronizationProviderName, filter, null);
        Type localVarReturnType = new TypeToken<ReplicationDomainListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllDomainsAsync(String synchronizationProviderName, String filter, final ApiCallback<ReplicationDomainListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllDomainsValidateBeforeCall(synchronizationProviderName, filter, _callback);
        Type localVarReturnType = new TypeToken<ReplicationDomainListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllDomainsRequestBuilder {
        private final String synchronizationProviderName;
        private String filter;

        private ListAllDomainsRequestBuilder(String synchronizationProviderName) {
            this.synchronizationProviderName = synchronizationProviderName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllDomainsRequestBuilder
         */
        public ListAllDomainsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllDomainsCall(synchronizationProviderName, filter, _callback);
        }


        /**
         * Execute listAllDomains request
         * @return ReplicationDomainListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ReplicationDomainListResponse execute() throws ApiException {
            ApiResponse<ReplicationDomainListResponse> localVarResp = listAllDomainsWithHttpInfo(synchronizationProviderName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllDomains request with HTTP info returned
         * @return ApiResponse&lt;ReplicationDomainListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReplicationDomainListResponse> executeWithHttpInfo() throws ApiException {
            return listAllDomainsWithHttpInfo(synchronizationProviderName, filter);
        }

        /**
         * Execute listAllDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReplicationDomainListResponse> _callback) throws ApiException {
            return listAllDomainsAsync(synchronizationProviderName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Replication Domain objects
     * 
     * @param synchronizationProviderName Name of the Synchronization Provider (required)
     * @return ListAllDomainsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllDomainsRequestBuilder listAllDomains(String synchronizationProviderName) throws IllegalArgumentException {
        if (synchronizationProviderName == null) throw new IllegalArgumentException("\"synchronizationProviderName\" is required but got null");
            

        return new ListAllDomainsRequestBuilder(synchronizationProviderName);
    }
    private okhttp3.Call updateByNameCall(String replicationDomainName, String synchronizationProviderName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/synchronization-providers/{synchronization-provider-name}/replication-domains/{replication-domain-name}"
            .replace("{" + "replication-domain-name" + "}", localVarApiClient.escapeString(replicationDomainName.toString()))
            .replace("{" + "synchronization-provider-name" + "}", localVarApiClient.escapeString(synchronizationProviderName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String replicationDomainName, String synchronizationProviderName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationDomainName' is set
        if (replicationDomainName == null) {
            throw new ApiException("Missing the required parameter 'replicationDomainName' when calling updateByName(Async)");
        }

        // verify the required parameter 'synchronizationProviderName' is set
        if (synchronizationProviderName == null) {
            throw new ApiException("Missing the required parameter 'synchronizationProviderName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(replicationDomainName, synchronizationProviderName, updateRequest, _callback);

    }


    private ApiResponse<ReplicationDomainResponse> updateByNameWithHttpInfo(String replicationDomainName, String synchronizationProviderName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(replicationDomainName, synchronizationProviderName, updateRequest, null);
        Type localVarReturnType = new TypeToken<ReplicationDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String replicationDomainName, String synchronizationProviderName, UpdateRequest updateRequest, final ApiCallback<ReplicationDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(replicationDomainName, synchronizationProviderName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<ReplicationDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String replicationDomainName;
        private final String synchronizationProviderName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String replicationDomainName, String synchronizationProviderName) {
            this.operations = operations;
            this.replicationDomainName = replicationDomainName;
            this.synchronizationProviderName = synchronizationProviderName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(replicationDomainName, synchronizationProviderName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return ReplicationDomainResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ReplicationDomainResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<ReplicationDomainResponse> localVarResp = updateByNameWithHttpInfo(replicationDomainName, synchronizationProviderName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;ReplicationDomainResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReplicationDomainResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(replicationDomainName, synchronizationProviderName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReplicationDomainResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(replicationDomainName, synchronizationProviderName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Replication Domain by name
     * 
     * @param replicationDomainName Name of the Replication Domain (required)
     * @param synchronizationProviderName Name of the Synchronization Provider (required)
     * @param updateRequest Update an existing Replication Domain (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Replication Domain does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String replicationDomainName, String synchronizationProviderName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (replicationDomainName == null) throw new IllegalArgumentException("\"replicationDomainName\" is required but got null");
            

        if (synchronizationProviderName == null) throw new IllegalArgumentException("\"synchronizationProviderName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, replicationDomainName, synchronizationProviderName);
    }
}
