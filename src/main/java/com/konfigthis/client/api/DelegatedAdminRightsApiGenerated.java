/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddDelegatedAdminRightsRequest;
import com.konfigthis.client.model.DelegatedAdminRightsListResponse;
import com.konfigthis.client.model.DelegatedAdminRightsResponse;
import com.konfigthis.client.model.EnumdelegatedAdminRightsSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DelegatedAdminRightsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DelegatedAdminRightsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DelegatedAdminRightsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewConfigCall(AddDelegatedAdminRightsRequest addDelegatedAdminRightsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDelegatedAdminRightsRequest;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewConfigValidateBeforeCall(AddDelegatedAdminRightsRequest addDelegatedAdminRightsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addDelegatedAdminRightsRequest' is set
        if (addDelegatedAdminRightsRequest == null) {
            throw new ApiException("Missing the required parameter 'addDelegatedAdminRightsRequest' when calling addNewConfig(Async)");
        }

        return addNewConfigCall(addDelegatedAdminRightsRequest, _callback);

    }


    private ApiResponse<DelegatedAdminRightsResponse> addNewConfigWithHttpInfo(AddDelegatedAdminRightsRequest addDelegatedAdminRightsRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(addDelegatedAdminRightsRequest, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminRightsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewConfigAsync(AddDelegatedAdminRightsRequest addDelegatedAdminRightsRequest, final ApiCallback<DelegatedAdminRightsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(addDelegatedAdminRightsRequest, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminRightsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewConfigRequestBuilder {
        private final String rightsName;
        private String description;
        private List<EnumdelegatedAdminRightsSchemaUrn> schemas;
        private Boolean enabled;
        private String adminUserDN;
        private String adminGroupDN;

        private AddNewConfigRequestBuilder(String rightsName) {
            this.rightsName = rightsName;
        }

        /**
         * Set description
         * @param description A description for this Delegated Admin Rights (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder schemas(List<EnumdelegatedAdminRightsSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Indicates whether the Delegated Admin Rights is enabled. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set adminUserDN
         * @param adminUserDN Specifies the DN of an administrative user who has authority to manage resources. Either admin-user-dn or admin-group-dn must be specified, but not both. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder adminUserDN(String adminUserDN) {
            this.adminUserDN = adminUserDN;
            return this;
        }
        
        /**
         * Set adminGroupDN
         * @param adminGroupDN Specifies the DN of a group of administrative users who have authority to manage resources. Either admin-user-dn or admin-group-dn must be specified, but not both. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder adminGroupDN(String adminGroupDN) {
            this.adminGroupDN = adminGroupDN;
            return this;
        }
        
        /**
         * Build call for addNewConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Rights already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddDelegatedAdminRightsRequest addDelegatedAdminRightsRequest = buildBodyParams();
            return addNewConfigCall(addDelegatedAdminRightsRequest, _callback);
        }

        private AddDelegatedAdminRightsRequest buildBodyParams() {
            AddDelegatedAdminRightsRequest addDelegatedAdminRightsRequest = new AddDelegatedAdminRightsRequest();
            return addDelegatedAdminRightsRequest;
        }

        /**
         * Execute addNewConfig request
         * @return DelegatedAdminRightsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Rights already exists </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminRightsResponse execute() throws ApiException {
            AddDelegatedAdminRightsRequest addDelegatedAdminRightsRequest = buildBodyParams();
            ApiResponse<DelegatedAdminRightsResponse> localVarResp = addNewConfigWithHttpInfo(addDelegatedAdminRightsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewConfig request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminRightsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Rights already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminRightsResponse> executeWithHttpInfo() throws ApiException {
            AddDelegatedAdminRightsRequest addDelegatedAdminRightsRequest = buildBodyParams();
            return addNewConfigWithHttpInfo(addDelegatedAdminRightsRequest);
        }

        /**
         * Execute addNewConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Rights already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminRightsResponse> _callback) throws ApiException {
            AddDelegatedAdminRightsRequest addDelegatedAdminRightsRequest = buildBodyParams();
            return addNewConfigAsync(addDelegatedAdminRightsRequest, _callback);
        }
    }

    /**
     * Add a new Delegated Admin Rights to the config
     * 
     * @param addDelegatedAdminRightsRequest Create a new Delegated Admin Rights in the config (required)
     * @return AddNewConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Delegated Admin Rights already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewConfigRequestBuilder addNewConfig(String rightsName) throws IllegalArgumentException {
        if (rightsName == null) throw new IllegalArgumentException("\"rightsName\" is required but got null");
            

        return new AddNewConfigRequestBuilder(rightsName);
    }
    private okhttp3.Call deleteDelegatedAdminRightsCall(String delegatedAdminRightsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights/{delegated-admin-rights-name}"
            .replace("{" + "delegated-admin-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminRightsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDelegatedAdminRightsValidateBeforeCall(String delegatedAdminRightsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminRightsName' is set
        if (delegatedAdminRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminRightsName' when calling deleteDelegatedAdminRights(Async)");
        }

        return deleteDelegatedAdminRightsCall(delegatedAdminRightsName, _callback);

    }


    private ApiResponse<Void> deleteDelegatedAdminRightsWithHttpInfo(String delegatedAdminRightsName) throws ApiException {
        okhttp3.Call localVarCall = deleteDelegatedAdminRightsValidateBeforeCall(delegatedAdminRightsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDelegatedAdminRightsAsync(String delegatedAdminRightsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDelegatedAdminRightsValidateBeforeCall(delegatedAdminRightsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDelegatedAdminRightsRequestBuilder {
        private final String delegatedAdminRightsName;

        private DeleteDelegatedAdminRightsRequestBuilder(String delegatedAdminRightsName) {
            this.delegatedAdminRightsName = delegatedAdminRightsName;
        }

        /**
         * Build call for deleteDelegatedAdminRights
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Rights cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDelegatedAdminRightsCall(delegatedAdminRightsName, _callback);
        }


        /**
         * Execute deleteDelegatedAdminRights request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Rights cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDelegatedAdminRightsWithHttpInfo(delegatedAdminRightsName);
        }

        /**
         * Execute deleteDelegatedAdminRights request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Rights cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDelegatedAdminRightsWithHttpInfo(delegatedAdminRightsName);
        }

        /**
         * Execute deleteDelegatedAdminRights request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Rights cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDelegatedAdminRightsAsync(delegatedAdminRightsName, _callback);
        }
    }

    /**
     * Delete a Delegated Admin Rights
     * 
     * @param delegatedAdminRightsName Name of the Delegated Admin Rights (required)
     * @return DeleteDelegatedAdminRightsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Delegated Admin Rights cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDelegatedAdminRightsRequestBuilder deleteDelegatedAdminRights(String delegatedAdminRightsName) throws IllegalArgumentException {
        if (delegatedAdminRightsName == null) throw new IllegalArgumentException("\"delegatedAdminRightsName\" is required but got null");
            

        return new DeleteDelegatedAdminRightsRequestBuilder(delegatedAdminRightsName);
    }
    private okhttp3.Call getSingleRightsCall(String delegatedAdminRightsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights/{delegated-admin-rights-name}"
            .replace("{" + "delegated-admin-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminRightsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleRightsValidateBeforeCall(String delegatedAdminRightsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminRightsName' is set
        if (delegatedAdminRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminRightsName' when calling getSingleRights(Async)");
        }

        return getSingleRightsCall(delegatedAdminRightsName, _callback);

    }


    private ApiResponse<DelegatedAdminRightsResponse> getSingleRightsWithHttpInfo(String delegatedAdminRightsName) throws ApiException {
        okhttp3.Call localVarCall = getSingleRightsValidateBeforeCall(delegatedAdminRightsName, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminRightsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleRightsAsync(String delegatedAdminRightsName, final ApiCallback<DelegatedAdminRightsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleRightsValidateBeforeCall(delegatedAdminRightsName, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminRightsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRightsRequestBuilder {
        private final String delegatedAdminRightsName;

        private GetSingleRightsRequestBuilder(String delegatedAdminRightsName) {
            this.delegatedAdminRightsName = delegatedAdminRightsName;
        }

        /**
         * Build call for getSingleRights
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleRightsCall(delegatedAdminRightsName, _callback);
        }


        /**
         * Execute getSingleRights request
         * @return DelegatedAdminRightsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminRightsResponse execute() throws ApiException {
            ApiResponse<DelegatedAdminRightsResponse> localVarResp = getSingleRightsWithHttpInfo(delegatedAdminRightsName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleRights request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminRightsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminRightsResponse> executeWithHttpInfo() throws ApiException {
            return getSingleRightsWithHttpInfo(delegatedAdminRightsName);
        }

        /**
         * Execute getSingleRights request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminRightsResponse> _callback) throws ApiException {
            return getSingleRightsAsync(delegatedAdminRightsName, _callback);
        }
    }

    /**
     * Returns a single Delegated Admin Rights
     * 
     * @param delegatedAdminRightsName Name of the Delegated Admin Rights (required)
     * @return GetSingleRightsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRightsRequestBuilder getSingleRights(String delegatedAdminRightsName) throws IllegalArgumentException {
        if (delegatedAdminRightsName == null) throw new IllegalArgumentException("\"delegatedAdminRightsName\" is required but got null");
            

        return new GetSingleRightsRequestBuilder(delegatedAdminRightsName);
    }
    private okhttp3.Call listAllObjectsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAllObjectsCall(filter, _callback);

    }


    private ApiResponse<DelegatedAdminRightsListResponse> listAllObjectsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminRightsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String filter, final ApiCallback<DelegatedAdminRightsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminRightsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private String filter;

        private ListAllObjectsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(filter, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return DelegatedAdminRightsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminRightsListResponse execute() throws ApiException {
            ApiResponse<DelegatedAdminRightsListResponse> localVarResp = listAllObjectsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminRightsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminRightsListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(filter);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminRightsListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Delegated Admin Rights objects
     * 
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects() throws IllegalArgumentException {
        return new ListAllObjectsRequestBuilder();
    }
    private okhttp3.Call updateByNameCall(String delegatedAdminRightsName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights/{delegated-admin-rights-name}"
            .replace("{" + "delegated-admin-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminRightsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String delegatedAdminRightsName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminRightsName' is set
        if (delegatedAdminRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminRightsName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(delegatedAdminRightsName, updateRequest, _callback);

    }


    private ApiResponse<DelegatedAdminRightsResponse> updateByNameWithHttpInfo(String delegatedAdminRightsName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(delegatedAdminRightsName, updateRequest, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminRightsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String delegatedAdminRightsName, UpdateRequest updateRequest, final ApiCallback<DelegatedAdminRightsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(delegatedAdminRightsName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminRightsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String delegatedAdminRightsName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String delegatedAdminRightsName) {
            this.operations = operations;
            this.delegatedAdminRightsName = delegatedAdminRightsName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(delegatedAdminRightsName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return DelegatedAdminRightsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminRightsResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<DelegatedAdminRightsResponse> localVarResp = updateByNameWithHttpInfo(delegatedAdminRightsName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminRightsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminRightsResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(delegatedAdminRightsName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminRightsResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(delegatedAdminRightsName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Delegated Admin Rights by name
     * 
     * @param delegatedAdminRightsName Name of the Delegated Admin Rights (required)
     * @param updateRequest Update an existing Delegated Admin Rights (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Rights does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String delegatedAdminRightsName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (delegatedAdminRightsName == null) throw new IllegalArgumentException("\"delegatedAdminRightsName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, delegatedAdminRightsName);
    }
}
