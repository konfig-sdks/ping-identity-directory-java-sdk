/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddScimAttributeRequest;
import com.konfigthis.client.model.EnumscimAttributeMutabilityProp;
import com.konfigthis.client.model.EnumscimAttributeReturnedProp;
import com.konfigthis.client.model.EnumscimAttributeSchemaUrn;
import com.konfigthis.client.model.EnumscimAttributeTypeProp;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.ScimAttributeListResponse;
import com.konfigthis.client.model.ScimAttributeResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScimAttributeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScimAttributeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScimAttributeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewAttributeCall(String scimSchemaName, AddScimAttributeRequest addScimAttributeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addScimAttributeRequest;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes"
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewAttributeValidateBeforeCall(String scimSchemaName, AddScimAttributeRequest addScimAttributeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling addNewAttribute(Async)");
        }

        // verify the required parameter 'addScimAttributeRequest' is set
        if (addScimAttributeRequest == null) {
            throw new ApiException("Missing the required parameter 'addScimAttributeRequest' when calling addNewAttribute(Async)");
        }

        return addNewAttributeCall(scimSchemaName, addScimAttributeRequest, _callback);

    }


    private ApiResponse<ScimAttributeResponse> addNewAttributeWithHttpInfo(String scimSchemaName, AddScimAttributeRequest addScimAttributeRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewAttributeValidateBeforeCall(scimSchemaName, addScimAttributeRequest, null);
        Type localVarReturnType = new TypeToken<ScimAttributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewAttributeAsync(String scimSchemaName, AddScimAttributeRequest addScimAttributeRequest, final ApiCallback<ScimAttributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewAttributeValidateBeforeCall(scimSchemaName, addScimAttributeRequest, _callback);
        Type localVarReturnType = new TypeToken<ScimAttributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewAttributeRequestBuilder {
        private final String attributeName;
        private final String scimSchemaName;
        private String description;
        private List<EnumscimAttributeSchemaUrn> schemas;
        private String name;
        private EnumscimAttributeTypeProp type;
        private Boolean required;
        private Boolean caseExact;
        private Boolean multiValued;
        private List<String> canonicalValue;
        private EnumscimAttributeMutabilityProp mutability;
        private EnumscimAttributeReturnedProp returned;
        private List<String> referenceType;

        private AddNewAttributeRequestBuilder(String attributeName, String scimSchemaName) {
            this.attributeName = attributeName;
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Set description
         * @param description A description for this SCIM Attribute (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder schemas(List<EnumscimAttributeSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the attribute. (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder type(EnumscimAttributeTypeProp type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set required
         * @param required Specifies whether this attribute is required. (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder required(Boolean required) {
            this.required = required;
            return this;
        }
        
        /**
         * Set caseExact
         * @param caseExact Specifies whether the attribute values are case sensitive. (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder caseExact(Boolean caseExact) {
            this.caseExact = caseExact;
            return this;
        }
        
        /**
         * Set multiValued
         * @param multiValued Specifies whether this attribute may have multiple values. (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder multiValued(Boolean multiValued) {
            this.multiValued = multiValued;
            return this;
        }
        
        /**
         * Set canonicalValue
         * @param canonicalValue Specifies the suggested canonical type values for the attribute. (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder canonicalValue(List<String> canonicalValue) {
            this.canonicalValue = canonicalValue;
            return this;
        }
        
        /**
         * Set mutability
         * @param mutability  (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder mutability(EnumscimAttributeMutabilityProp mutability) {
            this.mutability = mutability;
            return this;
        }
        
        /**
         * Set returned
         * @param returned  (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder returned(EnumscimAttributeReturnedProp returned) {
            this.returned = returned;
            return this;
        }
        
        /**
         * Set referenceType
         * @param referenceType Specifies the SCIM resource types that may be referenced. This property is only applicable for attributes that are of type &#39;reference&#39;. Valid values are: A SCIM resource type (e.g., &#39;User&#39; or &#39;Group&#39;), &#39;external&#39; - indicating the resource is an external resource (e.g., such as a photo), or &#39;uri&#39; - indicating that the reference is to a service endpoint or an identifier (such as a schema urn). (optional)
         * @return AddNewAttributeRequestBuilder
         */
        public AddNewAttributeRequestBuilder referenceType(List<String> referenceType) {
            this.referenceType = referenceType;
            return this;
        }
        
        /**
         * Build call for addNewAttribute
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddScimAttributeRequest addScimAttributeRequest = buildBodyParams();
            return addNewAttributeCall(scimSchemaName, addScimAttributeRequest, _callback);
        }

        private AddScimAttributeRequest buildBodyParams() {
            AddScimAttributeRequest addScimAttributeRequest = new AddScimAttributeRequest();
            return addScimAttributeRequest;
        }

        /**
         * Execute addNewAttribute request
         * @return ScimAttributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public ScimAttributeResponse execute() throws ApiException {
            AddScimAttributeRequest addScimAttributeRequest = buildBodyParams();
            ApiResponse<ScimAttributeResponse> localVarResp = addNewAttributeWithHttpInfo(scimSchemaName, addScimAttributeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewAttribute request with HTTP info returned
         * @return ApiResponse&lt;ScimAttributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimAttributeResponse> executeWithHttpInfo() throws ApiException {
            AddScimAttributeRequest addScimAttributeRequest = buildBodyParams();
            return addNewAttributeWithHttpInfo(scimSchemaName, addScimAttributeRequest);
        }

        /**
         * Execute addNewAttribute request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimAttributeResponse> _callback) throws ApiException {
            AddScimAttributeRequest addScimAttributeRequest = buildBodyParams();
            return addNewAttributeAsync(scimSchemaName, addScimAttributeRequest, _callback);
        }
    }

    /**
     * Add a new SCIM Attribute to the config
     * 
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @param addScimAttributeRequest Create a new SCIM Attribute in the config (required)
     * @return AddNewAttributeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The SCIM Attribute already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewAttributeRequestBuilder addNewAttribute(String attributeName, String scimSchemaName) throws IllegalArgumentException {
        if (attributeName == null) throw new IllegalArgumentException("\"attributeName\" is required but got null");
            

        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new AddNewAttributeRequestBuilder(attributeName, scimSchemaName);
    }
    private okhttp3.Call deleteAttributeCall(String scimAttributeName, String scimSchemaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}"
            .replace("{" + "scim-attribute-name" + "}", localVarApiClient.escapeString(scimAttributeName.toString()))
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttributeValidateBeforeCall(String scimAttributeName, String scimSchemaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimAttributeName' is set
        if (scimAttributeName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeName' when calling deleteAttribute(Async)");
        }

        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling deleteAttribute(Async)");
        }

        return deleteAttributeCall(scimAttributeName, scimSchemaName, _callback);

    }


    private ApiResponse<Void> deleteAttributeWithHttpInfo(String scimAttributeName, String scimSchemaName) throws ApiException {
        okhttp3.Call localVarCall = deleteAttributeValidateBeforeCall(scimAttributeName, scimSchemaName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAttributeAsync(String scimAttributeName, String scimSchemaName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttributeValidateBeforeCall(scimAttributeName, scimSchemaName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAttributeRequestBuilder {
        private final String scimAttributeName;
        private final String scimSchemaName;

        private DeleteAttributeRequestBuilder(String scimAttributeName, String scimSchemaName) {
            this.scimAttributeName = scimAttributeName;
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Build call for deleteAttribute
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAttributeCall(scimAttributeName, scimSchemaName, _callback);
        }


        /**
         * Execute deleteAttribute request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAttributeWithHttpInfo(scimAttributeName, scimSchemaName);
        }

        /**
         * Execute deleteAttribute request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAttributeWithHttpInfo(scimAttributeName, scimSchemaName);
        }

        /**
         * Execute deleteAttribute request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The SCIM Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAttributeAsync(scimAttributeName, scimSchemaName, _callback);
        }
    }

    /**
     * Delete a SCIM Attribute
     * 
     * @param scimAttributeName Name of the SCIM Attribute (required)
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @return DeleteAttributeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The SCIM Attribute cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAttributeRequestBuilder deleteAttribute(String scimAttributeName, String scimSchemaName) throws IllegalArgumentException {
        if (scimAttributeName == null) throw new IllegalArgumentException("\"scimAttributeName\" is required but got null");
            

        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new DeleteAttributeRequestBuilder(scimAttributeName, scimSchemaName);
    }
    private okhttp3.Call getSingleAttributeCall(String scimAttributeName, String scimSchemaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}"
            .replace("{" + "scim-attribute-name" + "}", localVarApiClient.escapeString(scimAttributeName.toString()))
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleAttributeValidateBeforeCall(String scimAttributeName, String scimSchemaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimAttributeName' is set
        if (scimAttributeName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeName' when calling getSingleAttribute(Async)");
        }

        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling getSingleAttribute(Async)");
        }

        return getSingleAttributeCall(scimAttributeName, scimSchemaName, _callback);

    }


    private ApiResponse<ScimAttributeResponse> getSingleAttributeWithHttpInfo(String scimAttributeName, String scimSchemaName) throws ApiException {
        okhttp3.Call localVarCall = getSingleAttributeValidateBeforeCall(scimAttributeName, scimSchemaName, null);
        Type localVarReturnType = new TypeToken<ScimAttributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAttributeAsync(String scimAttributeName, String scimSchemaName, final ApiCallback<ScimAttributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleAttributeValidateBeforeCall(scimAttributeName, scimSchemaName, _callback);
        Type localVarReturnType = new TypeToken<ScimAttributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleAttributeRequestBuilder {
        private final String scimAttributeName;
        private final String scimSchemaName;

        private GetSingleAttributeRequestBuilder(String scimAttributeName, String scimSchemaName) {
            this.scimAttributeName = scimAttributeName;
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Build call for getSingleAttribute
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleAttributeCall(scimAttributeName, scimSchemaName, _callback);
        }


        /**
         * Execute getSingleAttribute request
         * @return ScimAttributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ScimAttributeResponse execute() throws ApiException {
            ApiResponse<ScimAttributeResponse> localVarResp = getSingleAttributeWithHttpInfo(scimAttributeName, scimSchemaName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleAttribute request with HTTP info returned
         * @return ApiResponse&lt;ScimAttributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimAttributeResponse> executeWithHttpInfo() throws ApiException {
            return getSingleAttributeWithHttpInfo(scimAttributeName, scimSchemaName);
        }

        /**
         * Execute getSingleAttribute request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimAttributeResponse> _callback) throws ApiException {
            return getSingleAttributeAsync(scimAttributeName, scimSchemaName, _callback);
        }
    }

    /**
     * Returns a single SCIM Attribute
     * 
     * @param scimAttributeName Name of the SCIM Attribute (required)
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @return GetSingleAttributeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleAttributeRequestBuilder getSingleAttribute(String scimAttributeName, String scimSchemaName) throws IllegalArgumentException {
        if (scimAttributeName == null) throw new IllegalArgumentException("\"scimAttributeName\" is required but got null");
            

        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new GetSingleAttributeRequestBuilder(scimAttributeName, scimSchemaName);
    }
    private okhttp3.Call listAllAttributesCall(String scimSchemaName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes"
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllAttributesValidateBeforeCall(String scimSchemaName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling listAllAttributes(Async)");
        }

        return listAllAttributesCall(scimSchemaName, filter, _callback);

    }


    private ApiResponse<ScimAttributeListResponse> listAllAttributesWithHttpInfo(String scimSchemaName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllAttributesValidateBeforeCall(scimSchemaName, filter, null);
        Type localVarReturnType = new TypeToken<ScimAttributeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAttributesAsync(String scimSchemaName, String filter, final ApiCallback<ScimAttributeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllAttributesValidateBeforeCall(scimSchemaName, filter, _callback);
        Type localVarReturnType = new TypeToken<ScimAttributeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllAttributesRequestBuilder {
        private final String scimSchemaName;
        private String filter;

        private ListAllAttributesRequestBuilder(String scimSchemaName) {
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllAttributesRequestBuilder
         */
        public ListAllAttributesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllAttributesCall(scimSchemaName, filter, _callback);
        }


        /**
         * Execute listAllAttributes request
         * @return ScimAttributeListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ScimAttributeListResponse execute() throws ApiException {
            ApiResponse<ScimAttributeListResponse> localVarResp = listAllAttributesWithHttpInfo(scimSchemaName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllAttributes request with HTTP info returned
         * @return ApiResponse&lt;ScimAttributeListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimAttributeListResponse> executeWithHttpInfo() throws ApiException {
            return listAllAttributesWithHttpInfo(scimSchemaName, filter);
        }

        /**
         * Execute listAllAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimAttributeListResponse> _callback) throws ApiException {
            return listAllAttributesAsync(scimSchemaName, filter, _callback);
        }
    }

    /**
     * Returns a list of all SCIM Attribute objects
     * 
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @return ListAllAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllAttributesRequestBuilder listAllAttributes(String scimSchemaName) throws IllegalArgumentException {
        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new ListAllAttributesRequestBuilder(scimSchemaName);
    }
    private okhttp3.Call updateByNameCall(String scimAttributeName, String scimSchemaName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/scim-schemas/{scim-schema-name}/scim-attributes/{scim-attribute-name}"
            .replace("{" + "scim-attribute-name" + "}", localVarApiClient.escapeString(scimAttributeName.toString()))
            .replace("{" + "scim-schema-name" + "}", localVarApiClient.escapeString(scimSchemaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String scimAttributeName, String scimSchemaName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scimAttributeName' is set
        if (scimAttributeName == null) {
            throw new ApiException("Missing the required parameter 'scimAttributeName' when calling updateByName(Async)");
        }

        // verify the required parameter 'scimSchemaName' is set
        if (scimSchemaName == null) {
            throw new ApiException("Missing the required parameter 'scimSchemaName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(scimAttributeName, scimSchemaName, updateRequest, _callback);

    }


    private ApiResponse<ScimAttributeResponse> updateByNameWithHttpInfo(String scimAttributeName, String scimSchemaName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(scimAttributeName, scimSchemaName, updateRequest, null);
        Type localVarReturnType = new TypeToken<ScimAttributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String scimAttributeName, String scimSchemaName, UpdateRequest updateRequest, final ApiCallback<ScimAttributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(scimAttributeName, scimSchemaName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<ScimAttributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String scimAttributeName;
        private final String scimSchemaName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String scimAttributeName, String scimSchemaName) {
            this.operations = operations;
            this.scimAttributeName = scimAttributeName;
            this.scimSchemaName = scimSchemaName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(scimAttributeName, scimSchemaName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return ScimAttributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ScimAttributeResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<ScimAttributeResponse> localVarResp = updateByNameWithHttpInfo(scimAttributeName, scimSchemaName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;ScimAttributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScimAttributeResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(scimAttributeName, scimSchemaName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScimAttributeResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(scimAttributeName, scimSchemaName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing SCIM Attribute by name
     * 
     * @param scimAttributeName Name of the SCIM Attribute (required)
     * @param scimSchemaName Name of the SCIM Schema (required)
     * @param updateRequest Update an existing SCIM Attribute (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The SCIM Attribute does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String scimAttributeName, String scimSchemaName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (scimAttributeName == null) throw new IllegalArgumentException("\"scimAttributeName\" is required but got null");
            

        if (scimSchemaName == null) throw new IllegalArgumentException("\"scimSchemaName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, scimAttributeName, scimSchemaName);
    }
}
