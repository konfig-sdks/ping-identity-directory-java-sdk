/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddLocalDbIndexRequest;
import com.konfigthis.client.model.EnumlocalDbIndexCacheModeProp;
import com.konfigthis.client.model.EnumlocalDbIndexIndexTypeProp;
import com.konfigthis.client.model.EnumlocalDbIndexSchemaUrn;
import com.konfigthis.client.model.LocalDbIndexListResponse;
import com.konfigthis.client.model.LocalDbIndexResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LocalDbIndexApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocalDbIndexApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LocalDbIndexApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewIndexCall(String backendName, AddLocalDbIndexRequest addLocalDbIndexRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addLocalDbIndexRequest;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-indexes"
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewIndexValidateBeforeCall(String backendName, AddLocalDbIndexRequest addLocalDbIndexRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling addNewIndex(Async)");
        }

        // verify the required parameter 'addLocalDbIndexRequest' is set
        if (addLocalDbIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'addLocalDbIndexRequest' when calling addNewIndex(Async)");
        }

        return addNewIndexCall(backendName, addLocalDbIndexRequest, _callback);

    }


    private ApiResponse<LocalDbIndexResponse> addNewIndexWithHttpInfo(String backendName, AddLocalDbIndexRequest addLocalDbIndexRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewIndexValidateBeforeCall(backendName, addLocalDbIndexRequest, null);
        Type localVarReturnType = new TypeToken<LocalDbIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewIndexAsync(String backendName, AddLocalDbIndexRequest addLocalDbIndexRequest, final ApiCallback<LocalDbIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewIndexValidateBeforeCall(backendName, addLocalDbIndexRequest, _callback);
        Type localVarReturnType = new TypeToken<LocalDbIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewIndexRequestBuilder {
        private final String indexName;
        private final String backendName;
        private List<EnumlocalDbIndexSchemaUrn> schemas;
        private String attribute;
        private Integer indexEntryLimit;
        private Integer substringIndexEntryLimit;
        private Boolean maintainMatchCountForKeysExceedingEntryLimit;
        private List<EnumlocalDbIndexIndexTypeProp> indexType;
        private Integer substringLength;
        private Boolean primeIndex;
        private Boolean primeInternalNodesOnly;
        private List<String> equalityIndexFilter;
        private Boolean maintainEqualityIndexWithoutFilter;
        private EnumlocalDbIndexCacheModeProp cacheMode;

        private AddNewIndexRequestBuilder(String indexName, String backendName) {
            this.indexName = indexName;
            this.backendName = backendName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder schemas(List<EnumlocalDbIndexSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set attribute
         * @param attribute Specifies the name of the attribute for which the index is to be maintained. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder attribute(String attribute) {
            this.attribute = attribute;
            return this;
        }
        
        /**
         * Set indexEntryLimit
         * @param indexEntryLimit Specifies the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder indexEntryLimit(Integer indexEntryLimit) {
            this.indexEntryLimit = indexEntryLimit;
            return this;
        }
        
        /**
         * Set substringIndexEntryLimit
         * @param substringIndexEntryLimit Specifies, for substring indexes, the maximum number of entries that are allowed to match a given index key before that particular index key is no longer maintained. Setting a large limit can dramatically increase the database size on disk and have a big impact on server performance if the indexed attribute is modified frequently. When a very large limit is required, creating a dedicated composite index with an index-filter-pattern of (attr&#x3D;*?*) will give the best balance between search and update performance. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder substringIndexEntryLimit(Integer substringIndexEntryLimit) {
            this.substringIndexEntryLimit = substringIndexEntryLimit;
            return this;
        }
        
        /**
         * Set maintainMatchCountForKeysExceedingEntryLimit
         * @param maintainMatchCountForKeysExceedingEntryLimit Indicates whether to continue to maintain a count of the number of matching entries for an index key even after that count exceeds the index entry limit. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder maintainMatchCountForKeysExceedingEntryLimit(Boolean maintainMatchCountForKeysExceedingEntryLimit) {
            this.maintainMatchCountForKeysExceedingEntryLimit = maintainMatchCountForKeysExceedingEntryLimit;
            return this;
        }
        
        /**
         * Set indexType
         * @param indexType  (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder indexType(List<EnumlocalDbIndexIndexTypeProp> indexType) {
            this.indexType = indexType;
            return this;
        }
        
        /**
         * Set substringLength
         * @param substringLength The length of substrings in a substring index. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder substringLength(Integer substringLength) {
            this.substringLength = substringLength;
            return this;
        }
        
        /**
         * Set primeIndex
         * @param primeIndex If this option is enabled and this index&#39;s backend is configured to prime indexes, then this index will be loaded at startup. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder primeIndex(Boolean primeIndex) {
            this.primeIndex = primeIndex;
            return this;
        }
        
        /**
         * Set primeInternalNodesOnly
         * @param primeInternalNodesOnly If this option is enabled and this index&#39;s backend is configured to prime indexes using the preload method, then only the internal database nodes (i.e., the database keys but not values) should be primed when the backend is initialized. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder primeInternalNodesOnly(Boolean primeInternalNodesOnly) {
            this.primeInternalNodesOnly = primeInternalNodesOnly;
            return this;
        }
        
        /**
         * Set equalityIndexFilter
         * @param equalityIndexFilter A search filter that may be used in conjunction with an equality component for the associated attribute type. If an equality index filter is defined, then an additional equality index will be maintained for the associated attribute, but only for entries which match the provided filter. Further, the index will be used only for searches containing an equality component with the associated attribute type ANDed with this filter. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder equalityIndexFilter(List<String> equalityIndexFilter) {
            this.equalityIndexFilter = equalityIndexFilter;
            return this;
        }
        
        /**
         * Set maintainEqualityIndexWithoutFilter
         * @param maintainEqualityIndexWithoutFilter Indicates whether to maintain a separate equality index for the associated attribute without any filter, in addition to maintaining an index for each equality index filter that is defined. If this is false, then the attribute will not be indexed for equality by itself but only in conjunction with the defined equality index filters. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder maintainEqualityIndexWithoutFilter(Boolean maintainEqualityIndexWithoutFilter) {
            this.maintainEqualityIndexWithoutFilter = maintainEqualityIndexWithoutFilter;
            return this;
        }
        
        /**
         * Set cacheMode
         * @param cacheMode  (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder cacheMode(EnumlocalDbIndexCacheModeProp cacheMode) {
            this.cacheMode = cacheMode;
            return this;
        }
        
        /**
         * Build call for addNewIndex
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddLocalDbIndexRequest addLocalDbIndexRequest = buildBodyParams();
            return addNewIndexCall(backendName, addLocalDbIndexRequest, _callback);
        }

        private AddLocalDbIndexRequest buildBodyParams() {
            AddLocalDbIndexRequest addLocalDbIndexRequest = new AddLocalDbIndexRequest();
            return addLocalDbIndexRequest;
        }

        /**
         * Execute addNewIndex request
         * @return LocalDbIndexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbIndexResponse execute() throws ApiException {
            AddLocalDbIndexRequest addLocalDbIndexRequest = buildBodyParams();
            ApiResponse<LocalDbIndexResponse> localVarResp = addNewIndexWithHttpInfo(backendName, addLocalDbIndexRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewIndex request with HTTP info returned
         * @return ApiResponse&lt;LocalDbIndexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbIndexResponse> executeWithHttpInfo() throws ApiException {
            AddLocalDbIndexRequest addLocalDbIndexRequest = buildBodyParams();
            return addNewIndexWithHttpInfo(backendName, addLocalDbIndexRequest);
        }

        /**
         * Execute addNewIndex request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbIndexResponse> _callback) throws ApiException {
            AddLocalDbIndexRequest addLocalDbIndexRequest = buildBodyParams();
            return addNewIndexAsync(backendName, addLocalDbIndexRequest, _callback);
        }
    }

    /**
     * Add a new Local DB Index to the config
     * 
     * @param backendName Name of the Backend (required)
     * @param addLocalDbIndexRequest Create a new Local DB Index in the config (required)
     * @return AddNewIndexRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Local DB Index already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewIndexRequestBuilder addNewIndex(String indexName, String backendName) throws IllegalArgumentException {
        if (indexName == null) throw new IllegalArgumentException("\"indexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new AddNewIndexRequestBuilder(indexName, backendName);
    }
    private okhttp3.Call deleteIndexCall(String localDbIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-indexes/{local-db-index-name}"
            .replace("{" + "local-db-index-name" + "}", localVarApiClient.escapeString(localDbIndexName.toString()))
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIndexValidateBeforeCall(String localDbIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localDbIndexName' is set
        if (localDbIndexName == null) {
            throw new ApiException("Missing the required parameter 'localDbIndexName' when calling deleteIndex(Async)");
        }

        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling deleteIndex(Async)");
        }

        return deleteIndexCall(localDbIndexName, backendName, _callback);

    }


    private ApiResponse<Void> deleteIndexWithHttpInfo(String localDbIndexName, String backendName) throws ApiException {
        okhttp3.Call localVarCall = deleteIndexValidateBeforeCall(localDbIndexName, backendName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteIndexAsync(String localDbIndexName, String backendName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIndexValidateBeforeCall(localDbIndexName, backendName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteIndexRequestBuilder {
        private final String localDbIndexName;
        private final String backendName;

        private DeleteIndexRequestBuilder(String localDbIndexName, String backendName) {
            this.localDbIndexName = localDbIndexName;
            this.backendName = backendName;
        }

        /**
         * Build call for deleteIndex
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteIndexCall(localDbIndexName, backendName, _callback);
        }


        /**
         * Execute deleteIndex request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteIndexWithHttpInfo(localDbIndexName, backendName);
        }

        /**
         * Execute deleteIndex request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteIndexWithHttpInfo(localDbIndexName, backendName);
        }

        /**
         * Execute deleteIndex request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteIndexAsync(localDbIndexName, backendName, _callback);
        }
    }

    /**
     * Delete a Local DB Index
     * 
     * @param localDbIndexName Name of the Local DB Index (required)
     * @param backendName Name of the Backend (required)
     * @return DeleteIndexRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Local DB Index cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteIndexRequestBuilder deleteIndex(String localDbIndexName, String backendName) throws IllegalArgumentException {
        if (localDbIndexName == null) throw new IllegalArgumentException("\"localDbIndexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new DeleteIndexRequestBuilder(localDbIndexName, backendName);
    }
    private okhttp3.Call getAllIndexesCall(String backendName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-indexes"
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllIndexesValidateBeforeCall(String backendName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling getAllIndexes(Async)");
        }

        return getAllIndexesCall(backendName, filter, _callback);

    }


    private ApiResponse<LocalDbIndexListResponse> getAllIndexesWithHttpInfo(String backendName, String filter) throws ApiException {
        okhttp3.Call localVarCall = getAllIndexesValidateBeforeCall(backendName, filter, null);
        Type localVarReturnType = new TypeToken<LocalDbIndexListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllIndexesAsync(String backendName, String filter, final ApiCallback<LocalDbIndexListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllIndexesValidateBeforeCall(backendName, filter, _callback);
        Type localVarReturnType = new TypeToken<LocalDbIndexListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllIndexesRequestBuilder {
        private final String backendName;
        private String filter;

        private GetAllIndexesRequestBuilder(String backendName) {
            this.backendName = backendName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return GetAllIndexesRequestBuilder
         */
        public GetAllIndexesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAllIndexes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllIndexesCall(backendName, filter, _callback);
        }


        /**
         * Execute getAllIndexes request
         * @return LocalDbIndexListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbIndexListResponse execute() throws ApiException {
            ApiResponse<LocalDbIndexListResponse> localVarResp = getAllIndexesWithHttpInfo(backendName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllIndexes request with HTTP info returned
         * @return ApiResponse&lt;LocalDbIndexListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbIndexListResponse> executeWithHttpInfo() throws ApiException {
            return getAllIndexesWithHttpInfo(backendName, filter);
        }

        /**
         * Execute getAllIndexes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbIndexListResponse> _callback) throws ApiException {
            return getAllIndexesAsync(backendName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Local DB Index objects
     * 
     * @param backendName Name of the Backend (required)
     * @return GetAllIndexesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public GetAllIndexesRequestBuilder getAllIndexes(String backendName) throws IllegalArgumentException {
        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new GetAllIndexesRequestBuilder(backendName);
    }
    private okhttp3.Call getSingleCall(String localDbIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-indexes/{local-db-index-name}"
            .replace("{" + "local-db-index-name" + "}", localVarApiClient.escapeString(localDbIndexName.toString()))
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String localDbIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localDbIndexName' is set
        if (localDbIndexName == null) {
            throw new ApiException("Missing the required parameter 'localDbIndexName' when calling getSingle(Async)");
        }

        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling getSingle(Async)");
        }

        return getSingleCall(localDbIndexName, backendName, _callback);

    }


    private ApiResponse<LocalDbIndexResponse> getSingleWithHttpInfo(String localDbIndexName, String backendName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(localDbIndexName, backendName, null);
        Type localVarReturnType = new TypeToken<LocalDbIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String localDbIndexName, String backendName, final ApiCallback<LocalDbIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(localDbIndexName, backendName, _callback);
        Type localVarReturnType = new TypeToken<LocalDbIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String localDbIndexName;
        private final String backendName;

        private GetSingleRequestBuilder(String localDbIndexName, String backendName) {
            this.localDbIndexName = localDbIndexName;
            this.backendName = backendName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(localDbIndexName, backendName, _callback);
        }


        /**
         * Execute getSingle request
         * @return LocalDbIndexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbIndexResponse execute() throws ApiException {
            ApiResponse<LocalDbIndexResponse> localVarResp = getSingleWithHttpInfo(localDbIndexName, backendName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;LocalDbIndexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbIndexResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(localDbIndexName, backendName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbIndexResponse> _callback) throws ApiException {
            return getSingleAsync(localDbIndexName, backendName, _callback);
        }
    }

    /**
     * Returns a single Local DB Index
     * 
     * @param localDbIndexName Name of the Local DB Index (required)
     * @param backendName Name of the Backend (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String localDbIndexName, String backendName) throws IllegalArgumentException {
        if (localDbIndexName == null) throw new IllegalArgumentException("\"localDbIndexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new GetSingleRequestBuilder(localDbIndexName, backendName);
    }
    private okhttp3.Call updateByNameCall(String localDbIndexName, String backendName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-indexes/{local-db-index-name}"
            .replace("{" + "local-db-index-name" + "}", localVarApiClient.escapeString(localDbIndexName.toString()))
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String localDbIndexName, String backendName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localDbIndexName' is set
        if (localDbIndexName == null) {
            throw new ApiException("Missing the required parameter 'localDbIndexName' when calling updateByName(Async)");
        }

        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(localDbIndexName, backendName, updateRequest, _callback);

    }


    private ApiResponse<LocalDbIndexResponse> updateByNameWithHttpInfo(String localDbIndexName, String backendName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(localDbIndexName, backendName, updateRequest, null);
        Type localVarReturnType = new TypeToken<LocalDbIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String localDbIndexName, String backendName, UpdateRequest updateRequest, final ApiCallback<LocalDbIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(localDbIndexName, backendName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<LocalDbIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String localDbIndexName;
        private final String backendName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String localDbIndexName, String backendName) {
            this.operations = operations;
            this.localDbIndexName = localDbIndexName;
            this.backendName = backendName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(localDbIndexName, backendName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return LocalDbIndexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbIndexResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<LocalDbIndexResponse> localVarResp = updateByNameWithHttpInfo(localDbIndexName, backendName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;LocalDbIndexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbIndexResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(localDbIndexName, backendName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbIndexResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(localDbIndexName, backendName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Local DB Index by name
     * 
     * @param localDbIndexName Name of the Local DB Index (required)
     * @param backendName Name of the Backend (required)
     * @param updateRequest Update an existing Local DB Index (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Local DB Index does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String localDbIndexName, String backendName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (localDbIndexName == null) throw new IllegalArgumentException("\"localDbIndexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, localDbIndexName, backendName);
    }
}
