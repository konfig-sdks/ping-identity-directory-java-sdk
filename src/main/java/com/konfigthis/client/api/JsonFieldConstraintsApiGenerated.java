/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddJsonFieldConstraintsRequest;
import com.konfigthis.client.model.EnumjsonFieldConstraintsCacheModeProp;
import com.konfigthis.client.model.EnumjsonFieldConstraintsIsArrayProp;
import com.konfigthis.client.model.EnumjsonFieldConstraintsSchemaUrn;
import com.konfigthis.client.model.EnumjsonFieldConstraintsValueTypeProp;
import com.konfigthis.client.model.JsonFieldConstraintsListResponse;
import com.konfigthis.client.model.JsonFieldConstraintsResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JsonFieldConstraintsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JsonFieldConstraintsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JsonFieldConstraintsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewFieldCall(String jsonAttributeConstraintsName, AddJsonFieldConstraintsRequest addJsonFieldConstraintsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addJsonFieldConstraintsRequest;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints/{json-attribute-constraints-name}/json-field-constraints"
            .replace("{" + "json-attribute-constraints-name" + "}", localVarApiClient.escapeString(jsonAttributeConstraintsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewFieldValidateBeforeCall(String jsonAttributeConstraintsName, AddJsonFieldConstraintsRequest addJsonFieldConstraintsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jsonAttributeConstraintsName' is set
        if (jsonAttributeConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonAttributeConstraintsName' when calling addNewField(Async)");
        }

        // verify the required parameter 'addJsonFieldConstraintsRequest' is set
        if (addJsonFieldConstraintsRequest == null) {
            throw new ApiException("Missing the required parameter 'addJsonFieldConstraintsRequest' when calling addNewField(Async)");
        }

        return addNewFieldCall(jsonAttributeConstraintsName, addJsonFieldConstraintsRequest, _callback);

    }


    private ApiResponse<JsonFieldConstraintsResponse> addNewFieldWithHttpInfo(String jsonAttributeConstraintsName, AddJsonFieldConstraintsRequest addJsonFieldConstraintsRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewFieldValidateBeforeCall(jsonAttributeConstraintsName, addJsonFieldConstraintsRequest, null);
        Type localVarReturnType = new TypeToken<JsonFieldConstraintsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewFieldAsync(String jsonAttributeConstraintsName, AddJsonFieldConstraintsRequest addJsonFieldConstraintsRequest, final ApiCallback<JsonFieldConstraintsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewFieldValidateBeforeCall(jsonAttributeConstraintsName, addJsonFieldConstraintsRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonFieldConstraintsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewFieldRequestBuilder {
        private final String jsonField;
        private final String jsonAttributeConstraintsName;
        private String description;
        private List<EnumjsonFieldConstraintsSchemaUrn> schemas;
        private EnumjsonFieldConstraintsValueTypeProp valueType;
        private Boolean isRequired;
        private EnumjsonFieldConstraintsIsArrayProp isArray;
        private Boolean allowNullValue;
        private Boolean allowEmptyObject;
        private Boolean indexValues;
        private Integer indexEntryLimit;
        private Boolean primeIndex;
        private EnumjsonFieldConstraintsCacheModeProp cacheMode;
        private Boolean tokenizeValues;
        private List<String> allowedValue;
        private List<String> allowedValueRegularExpression;
        private String minimumNumericValue;
        private String maximumNumericValue;
        private Integer minimumValueLength;
        private Integer maximumValueLength;
        private Integer minimumValueCount;
        private Integer maximumValueCount;

        private AddNewFieldRequestBuilder(String jsonField, String jsonAttributeConstraintsName) {
            this.jsonField = jsonField;
            this.jsonAttributeConstraintsName = jsonAttributeConstraintsName;
        }

        /**
         * Set description
         * @param description A description for this JSON Field Constraints (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder schemas(List<EnumjsonFieldConstraintsSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set valueType
         * @param valueType  (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder valueType(EnumjsonFieldConstraintsValueTypeProp valueType) {
            this.valueType = valueType;
            return this;
        }
        
        /**
         * Set isRequired
         * @param isRequired Indicates whether the target field must be present in JSON objects stored as values of the associated attribute type. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder isRequired(Boolean isRequired) {
            this.isRequired = isRequired;
            return this;
        }
        
        /**
         * Set isArray
         * @param isArray  (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder isArray(EnumjsonFieldConstraintsIsArrayProp isArray) {
            this.isArray = isArray;
            return this;
        }
        
        /**
         * Set allowNullValue
         * @param allowNullValue Indicates whether the target field may have a value that is the JSON null value as an alternative to a value (or array of values) of the specified value-type. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder allowNullValue(Boolean allowNullValue) {
            this.allowNullValue = allowNullValue;
            return this;
        }
        
        /**
         * Set allowEmptyObject
         * @param allowEmptyObject Indicates whether the target field may have a value that is an empty JSON object (i.e., a JSON object with zero fields). This may only be set to true if value-type property is set to object. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder allowEmptyObject(Boolean allowEmptyObject) {
            this.allowEmptyObject = allowEmptyObject;
            return this;
        }
        
        /**
         * Set indexValues
         * @param indexValues Indicates whether backends that support JSON indexing should maintain an index for values of the target field. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder indexValues(Boolean indexValues) {
            this.indexValues = indexValues;
            return this;
        }
        
        /**
         * Set indexEntryLimit
         * @param indexEntryLimit The maximum number of entries that may contain a particular value for the target field before the server will stop maintaining the index for that value. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder indexEntryLimit(Integer indexEntryLimit) {
            this.indexEntryLimit = indexEntryLimit;
            return this;
        }
        
        /**
         * Set primeIndex
         * @param primeIndex Indicates whether backends that support database priming should load the contents of the associated JSON index into memory whenever the backend is opened. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder primeIndex(Boolean primeIndex) {
            this.primeIndex = primeIndex;
            return this;
        }
        
        /**
         * Set cacheMode
         * @param cacheMode  (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder cacheMode(EnumjsonFieldConstraintsCacheModeProp cacheMode) {
            this.cacheMode = cacheMode;
            return this;
        }
        
        /**
         * Set tokenizeValues
         * @param tokenizeValues Indicates whether the backend should attempt to assign a compact token for each distinct value for the target field in an attempt to reduce the encoded size of the field in JSON objects. These tokens would be assigned prior to using any from the token set used for automatic compaction of some JSON string values. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder tokenizeValues(Boolean tokenizeValues) {
            this.tokenizeValues = tokenizeValues;
            return this;
        }
        
        /**
         * Set allowedValue
         * @param allowedValue Specifies an explicit set of string values that will be the only values permitted for the target field. If a set of allowed values is defined, then the server will reject any attempt to store a JSON object with a value for the target field that is not included in that set. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder allowedValue(List<String> allowedValue) {
            this.allowedValue = allowedValue;
            return this;
        }
        
        /**
         * Set allowedValueRegularExpression
         * @param allowedValueRegularExpression Specifies an explicit set of regular expressions that may be used to restrict the set of values that may be used for the target field. If a set of allowed value regular expressions is defined, then the server will reject any attempt to store a JSON object with a value for the target field that does not match at least one of those regular expressions. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder allowedValueRegularExpression(List<String> allowedValueRegularExpression) {
            this.allowedValueRegularExpression = allowedValueRegularExpression;
            return this;
        }
        
        /**
         * Set minimumNumericValue
         * @param minimumNumericValue Specifies the smallest numeric value that may be used as the value for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is less than that minimum numeric value. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder minimumNumericValue(String minimumNumericValue) {
            this.minimumNumericValue = minimumNumericValue;
            return this;
        }
        
        /**
         * Set maximumNumericValue
         * @param maximumNumericValue Specifies the largest numeric value that may be used as the value for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is greater than that maximum numeric value. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder maximumNumericValue(String maximumNumericValue) {
            this.maximumNumericValue = maximumNumericValue;
            return this;
        }
        
        /**
         * Set minimumValueLength
         * @param minimumValueLength Specifies the smallest number of characters that may be present in string values of the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is shorter than that minimum value length. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder minimumValueLength(Integer minimumValueLength) {
            this.minimumValueLength = minimumValueLength;
            return this;
        }
        
        /**
         * Set maximumValueLength
         * @param maximumValueLength Specifies the largest number of characters that may be present in string values of the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is longer than that maximum value length. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder maximumValueLength(Integer maximumValueLength) {
            this.maximumValueLength = maximumValueLength;
            return this;
        }
        
        /**
         * Set minimumValueCount
         * @param minimumValueCount Specifies the smallest number of elements that may be present in an array of values for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is an array with fewer than this number of elements. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder minimumValueCount(Integer minimumValueCount) {
            this.minimumValueCount = minimumValueCount;
            return this;
        }
        
        /**
         * Set maximumValueCount
         * @param maximumValueCount Specifies the largest number of elements that may be present in an array of values for the target field. If configured, then the server will reject any attempt to store a JSON object with a value for the target field that is an array with more than this number of elements. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder maximumValueCount(Integer maximumValueCount) {
            this.maximumValueCount = maximumValueCount;
            return this;
        }
        
        /**
         * Build call for addNewField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Field Constraints already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddJsonFieldConstraintsRequest addJsonFieldConstraintsRequest = buildBodyParams();
            return addNewFieldCall(jsonAttributeConstraintsName, addJsonFieldConstraintsRequest, _callback);
        }

        private AddJsonFieldConstraintsRequest buildBodyParams() {
            AddJsonFieldConstraintsRequest addJsonFieldConstraintsRequest = new AddJsonFieldConstraintsRequest();
            return addJsonFieldConstraintsRequest;
        }

        /**
         * Execute addNewField request
         * @return JsonFieldConstraintsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Field Constraints already exists </td><td>  -  </td></tr>
         </table>
         */
        public JsonFieldConstraintsResponse execute() throws ApiException {
            AddJsonFieldConstraintsRequest addJsonFieldConstraintsRequest = buildBodyParams();
            ApiResponse<JsonFieldConstraintsResponse> localVarResp = addNewFieldWithHttpInfo(jsonAttributeConstraintsName, addJsonFieldConstraintsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewField request with HTTP info returned
         * @return ApiResponse&lt;JsonFieldConstraintsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Field Constraints already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonFieldConstraintsResponse> executeWithHttpInfo() throws ApiException {
            AddJsonFieldConstraintsRequest addJsonFieldConstraintsRequest = buildBodyParams();
            return addNewFieldWithHttpInfo(jsonAttributeConstraintsName, addJsonFieldConstraintsRequest);
        }

        /**
         * Execute addNewField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Field Constraints already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonFieldConstraintsResponse> _callback) throws ApiException {
            AddJsonFieldConstraintsRequest addJsonFieldConstraintsRequest = buildBodyParams();
            return addNewFieldAsync(jsonAttributeConstraintsName, addJsonFieldConstraintsRequest, _callback);
        }
    }

    /**
     * Add a new JSON Field Constraints to the config
     * 
     * @param jsonAttributeConstraintsName Name of the JSON Attribute Constraints (required)
     * @param addJsonFieldConstraintsRequest Create a new JSON Field Constraints in the config (required)
     * @return AddNewFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The JSON Field Constraints already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewFieldRequestBuilder addNewField(String jsonField, String jsonAttributeConstraintsName) throws IllegalArgumentException {
        if (jsonField == null) throw new IllegalArgumentException("\"jsonField\" is required but got null");
            

        if (jsonAttributeConstraintsName == null) throw new IllegalArgumentException("\"jsonAttributeConstraintsName\" is required but got null");
            

        return new AddNewFieldRequestBuilder(jsonField, jsonAttributeConstraintsName);
    }
    private okhttp3.Call deleteFieldConstraintsCall(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints/{json-attribute-constraints-name}/json-field-constraints/{json-field-constraints-name}"
            .replace("{" + "json-field-constraints-name" + "}", localVarApiClient.escapeString(jsonFieldConstraintsName.toString()))
            .replace("{" + "json-attribute-constraints-name" + "}", localVarApiClient.escapeString(jsonAttributeConstraintsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldConstraintsValidateBeforeCall(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jsonFieldConstraintsName' is set
        if (jsonFieldConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonFieldConstraintsName' when calling deleteFieldConstraints(Async)");
        }

        // verify the required parameter 'jsonAttributeConstraintsName' is set
        if (jsonAttributeConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonAttributeConstraintsName' when calling deleteFieldConstraints(Async)");
        }

        return deleteFieldConstraintsCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, _callback);

    }


    private ApiResponse<Void> deleteFieldConstraintsWithHttpInfo(String jsonFieldConstraintsName, String jsonAttributeConstraintsName) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldConstraintsValidateBeforeCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFieldConstraintsAsync(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldConstraintsValidateBeforeCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFieldConstraintsRequestBuilder {
        private final String jsonFieldConstraintsName;
        private final String jsonAttributeConstraintsName;

        private DeleteFieldConstraintsRequestBuilder(String jsonFieldConstraintsName, String jsonAttributeConstraintsName) {
            this.jsonFieldConstraintsName = jsonFieldConstraintsName;
            this.jsonAttributeConstraintsName = jsonAttributeConstraintsName;
        }

        /**
         * Build call for deleteFieldConstraints
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Field Constraints cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFieldConstraintsCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, _callback);
        }


        /**
         * Execute deleteFieldConstraints request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Field Constraints cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFieldConstraintsWithHttpInfo(jsonFieldConstraintsName, jsonAttributeConstraintsName);
        }

        /**
         * Execute deleteFieldConstraints request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Field Constraints cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFieldConstraintsWithHttpInfo(jsonFieldConstraintsName, jsonAttributeConstraintsName);
        }

        /**
         * Execute deleteFieldConstraints request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Field Constraints cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFieldConstraintsAsync(jsonFieldConstraintsName, jsonAttributeConstraintsName, _callback);
        }
    }

    /**
     * Delete a JSON Field Constraints
     * 
     * @param jsonFieldConstraintsName Name of the JSON Field Constraints (required)
     * @param jsonAttributeConstraintsName Name of the JSON Attribute Constraints (required)
     * @return DeleteFieldConstraintsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The JSON Field Constraints cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFieldConstraintsRequestBuilder deleteFieldConstraints(String jsonFieldConstraintsName, String jsonAttributeConstraintsName) throws IllegalArgumentException {
        if (jsonFieldConstraintsName == null) throw new IllegalArgumentException("\"jsonFieldConstraintsName\" is required but got null");
            

        if (jsonAttributeConstraintsName == null) throw new IllegalArgumentException("\"jsonAttributeConstraintsName\" is required but got null");
            

        return new DeleteFieldConstraintsRequestBuilder(jsonFieldConstraintsName, jsonAttributeConstraintsName);
    }
    private okhttp3.Call getSingleFieldConstraintsCall(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints/{json-attribute-constraints-name}/json-field-constraints/{json-field-constraints-name}"
            .replace("{" + "json-field-constraints-name" + "}", localVarApiClient.escapeString(jsonFieldConstraintsName.toString()))
            .replace("{" + "json-attribute-constraints-name" + "}", localVarApiClient.escapeString(jsonAttributeConstraintsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleFieldConstraintsValidateBeforeCall(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jsonFieldConstraintsName' is set
        if (jsonFieldConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonFieldConstraintsName' when calling getSingleFieldConstraints(Async)");
        }

        // verify the required parameter 'jsonAttributeConstraintsName' is set
        if (jsonAttributeConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonAttributeConstraintsName' when calling getSingleFieldConstraints(Async)");
        }

        return getSingleFieldConstraintsCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, _callback);

    }


    private ApiResponse<JsonFieldConstraintsResponse> getSingleFieldConstraintsWithHttpInfo(String jsonFieldConstraintsName, String jsonAttributeConstraintsName) throws ApiException {
        okhttp3.Call localVarCall = getSingleFieldConstraintsValidateBeforeCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, null);
        Type localVarReturnType = new TypeToken<JsonFieldConstraintsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleFieldConstraintsAsync(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, final ApiCallback<JsonFieldConstraintsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleFieldConstraintsValidateBeforeCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, _callback);
        Type localVarReturnType = new TypeToken<JsonFieldConstraintsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleFieldConstraintsRequestBuilder {
        private final String jsonFieldConstraintsName;
        private final String jsonAttributeConstraintsName;

        private GetSingleFieldConstraintsRequestBuilder(String jsonFieldConstraintsName, String jsonAttributeConstraintsName) {
            this.jsonFieldConstraintsName = jsonFieldConstraintsName;
            this.jsonAttributeConstraintsName = jsonAttributeConstraintsName;
        }

        /**
         * Build call for getSingleFieldConstraints
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleFieldConstraintsCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, _callback);
        }


        /**
         * Execute getSingleFieldConstraints request
         * @return JsonFieldConstraintsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public JsonFieldConstraintsResponse execute() throws ApiException {
            ApiResponse<JsonFieldConstraintsResponse> localVarResp = getSingleFieldConstraintsWithHttpInfo(jsonFieldConstraintsName, jsonAttributeConstraintsName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleFieldConstraints request with HTTP info returned
         * @return ApiResponse&lt;JsonFieldConstraintsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonFieldConstraintsResponse> executeWithHttpInfo() throws ApiException {
            return getSingleFieldConstraintsWithHttpInfo(jsonFieldConstraintsName, jsonAttributeConstraintsName);
        }

        /**
         * Execute getSingleFieldConstraints request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonFieldConstraintsResponse> _callback) throws ApiException {
            return getSingleFieldConstraintsAsync(jsonFieldConstraintsName, jsonAttributeConstraintsName, _callback);
        }
    }

    /**
     * Returns a single JSON Field Constraints
     * 
     * @param jsonFieldConstraintsName Name of the JSON Field Constraints (required)
     * @param jsonAttributeConstraintsName Name of the JSON Attribute Constraints (required)
     * @return GetSingleFieldConstraintsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleFieldConstraintsRequestBuilder getSingleFieldConstraints(String jsonFieldConstraintsName, String jsonAttributeConstraintsName) throws IllegalArgumentException {
        if (jsonFieldConstraintsName == null) throw new IllegalArgumentException("\"jsonFieldConstraintsName\" is required but got null");
            

        if (jsonAttributeConstraintsName == null) throw new IllegalArgumentException("\"jsonAttributeConstraintsName\" is required but got null");
            

        return new GetSingleFieldConstraintsRequestBuilder(jsonFieldConstraintsName, jsonAttributeConstraintsName);
    }
    private okhttp3.Call listAllJsonFieldConstraintsCall(String jsonAttributeConstraintsName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints/{json-attribute-constraints-name}/json-field-constraints"
            .replace("{" + "json-attribute-constraints-name" + "}", localVarApiClient.escapeString(jsonAttributeConstraintsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllJsonFieldConstraintsValidateBeforeCall(String jsonAttributeConstraintsName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jsonAttributeConstraintsName' is set
        if (jsonAttributeConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonAttributeConstraintsName' when calling listAllJsonFieldConstraints(Async)");
        }

        return listAllJsonFieldConstraintsCall(jsonAttributeConstraintsName, filter, _callback);

    }


    private ApiResponse<JsonFieldConstraintsListResponse> listAllJsonFieldConstraintsWithHttpInfo(String jsonAttributeConstraintsName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllJsonFieldConstraintsValidateBeforeCall(jsonAttributeConstraintsName, filter, null);
        Type localVarReturnType = new TypeToken<JsonFieldConstraintsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllJsonFieldConstraintsAsync(String jsonAttributeConstraintsName, String filter, final ApiCallback<JsonFieldConstraintsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllJsonFieldConstraintsValidateBeforeCall(jsonAttributeConstraintsName, filter, _callback);
        Type localVarReturnType = new TypeToken<JsonFieldConstraintsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllJsonFieldConstraintsRequestBuilder {
        private final String jsonAttributeConstraintsName;
        private String filter;

        private ListAllJsonFieldConstraintsRequestBuilder(String jsonAttributeConstraintsName) {
            this.jsonAttributeConstraintsName = jsonAttributeConstraintsName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllJsonFieldConstraintsRequestBuilder
         */
        public ListAllJsonFieldConstraintsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllJsonFieldConstraints
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllJsonFieldConstraintsCall(jsonAttributeConstraintsName, filter, _callback);
        }


        /**
         * Execute listAllJsonFieldConstraints request
         * @return JsonFieldConstraintsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public JsonFieldConstraintsListResponse execute() throws ApiException {
            ApiResponse<JsonFieldConstraintsListResponse> localVarResp = listAllJsonFieldConstraintsWithHttpInfo(jsonAttributeConstraintsName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllJsonFieldConstraints request with HTTP info returned
         * @return ApiResponse&lt;JsonFieldConstraintsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonFieldConstraintsListResponse> executeWithHttpInfo() throws ApiException {
            return listAllJsonFieldConstraintsWithHttpInfo(jsonAttributeConstraintsName, filter);
        }

        /**
         * Execute listAllJsonFieldConstraints request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonFieldConstraintsListResponse> _callback) throws ApiException {
            return listAllJsonFieldConstraintsAsync(jsonAttributeConstraintsName, filter, _callback);
        }
    }

    /**
     * Returns a list of all JSON Field Constraints objects
     * 
     * @param jsonAttributeConstraintsName Name of the JSON Attribute Constraints (required)
     * @return ListAllJsonFieldConstraintsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllJsonFieldConstraintsRequestBuilder listAllJsonFieldConstraints(String jsonAttributeConstraintsName) throws IllegalArgumentException {
        if (jsonAttributeConstraintsName == null) throw new IllegalArgumentException("\"jsonAttributeConstraintsName\" is required but got null");
            

        return new ListAllJsonFieldConstraintsRequestBuilder(jsonAttributeConstraintsName);
    }
    private okhttp3.Call updateByNameCall(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints/{json-attribute-constraints-name}/json-field-constraints/{json-field-constraints-name}"
            .replace("{" + "json-field-constraints-name" + "}", localVarApiClient.escapeString(jsonFieldConstraintsName.toString()))
            .replace("{" + "json-attribute-constraints-name" + "}", localVarApiClient.escapeString(jsonAttributeConstraintsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jsonFieldConstraintsName' is set
        if (jsonFieldConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonFieldConstraintsName' when calling updateByName(Async)");
        }

        // verify the required parameter 'jsonAttributeConstraintsName' is set
        if (jsonAttributeConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonAttributeConstraintsName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, updateRequest, _callback);

    }


    private ApiResponse<JsonFieldConstraintsResponse> updateByNameWithHttpInfo(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, updateRequest, null);
        Type localVarReturnType = new TypeToken<JsonFieldConstraintsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String jsonFieldConstraintsName, String jsonAttributeConstraintsName, UpdateRequest updateRequest, final ApiCallback<JsonFieldConstraintsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonFieldConstraintsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String jsonFieldConstraintsName;
        private final String jsonAttributeConstraintsName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String jsonFieldConstraintsName, String jsonAttributeConstraintsName) {
            this.operations = operations;
            this.jsonFieldConstraintsName = jsonFieldConstraintsName;
            this.jsonAttributeConstraintsName = jsonAttributeConstraintsName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(jsonFieldConstraintsName, jsonAttributeConstraintsName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return JsonFieldConstraintsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public JsonFieldConstraintsResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<JsonFieldConstraintsResponse> localVarResp = updateByNameWithHttpInfo(jsonFieldConstraintsName, jsonAttributeConstraintsName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;JsonFieldConstraintsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonFieldConstraintsResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(jsonFieldConstraintsName, jsonAttributeConstraintsName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonFieldConstraintsResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(jsonFieldConstraintsName, jsonAttributeConstraintsName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing JSON Field Constraints by name
     * 
     * @param jsonFieldConstraintsName Name of the JSON Field Constraints (required)
     * @param jsonAttributeConstraintsName Name of the JSON Attribute Constraints (required)
     * @param updateRequest Update an existing JSON Field Constraints (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The JSON Field Constraints does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String jsonFieldConstraintsName, String jsonAttributeConstraintsName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (jsonFieldConstraintsName == null) throw new IllegalArgumentException("\"jsonFieldConstraintsName\" is required but got null");
            

        if (jsonAttributeConstraintsName == null) throw new IllegalArgumentException("\"jsonAttributeConstraintsName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, jsonFieldConstraintsName, jsonAttributeConstraintsName);
    }
}
