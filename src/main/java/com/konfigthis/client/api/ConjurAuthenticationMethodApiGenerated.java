/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddApiKeyConjurAuthenticationMethodRequest;
import com.konfigthis.client.model.ApiKeyConjurAuthenticationMethodResponse;
import com.konfigthis.client.model.ConjurAuthenticationMethodListResponse;
import com.konfigthis.client.model.EnumapiKeyConjurAuthenticationMethodSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConjurAuthenticationMethodApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConjurAuthenticationMethodApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConjurAuthenticationMethodApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewMethodCall(AddApiKeyConjurAuthenticationMethodRequest addApiKeyConjurAuthenticationMethodRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addApiKeyConjurAuthenticationMethodRequest;

        // create path and map variables
        String localVarPath = "/conjur-authentication-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewMethodValidateBeforeCall(AddApiKeyConjurAuthenticationMethodRequest addApiKeyConjurAuthenticationMethodRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addApiKeyConjurAuthenticationMethodRequest' is set
        if (addApiKeyConjurAuthenticationMethodRequest == null) {
            throw new ApiException("Missing the required parameter 'addApiKeyConjurAuthenticationMethodRequest' when calling addNewMethod(Async)");
        }

        return addNewMethodCall(addApiKeyConjurAuthenticationMethodRequest, _callback);

    }


    private ApiResponse<ApiKeyConjurAuthenticationMethodResponse> addNewMethodWithHttpInfo(AddApiKeyConjurAuthenticationMethodRequest addApiKeyConjurAuthenticationMethodRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewMethodValidateBeforeCall(addApiKeyConjurAuthenticationMethodRequest, null);
        Type localVarReturnType = new TypeToken<ApiKeyConjurAuthenticationMethodResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewMethodAsync(AddApiKeyConjurAuthenticationMethodRequest addApiKeyConjurAuthenticationMethodRequest, final ApiCallback<ApiKeyConjurAuthenticationMethodResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewMethodValidateBeforeCall(addApiKeyConjurAuthenticationMethodRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiKeyConjurAuthenticationMethodResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewMethodRequestBuilder {
        private final String methodName;
        private String description;
        private List<EnumapiKeyConjurAuthenticationMethodSchemaUrn> schemas;
        private String username;
        private String password;
        private String apiKey;

        private AddNewMethodRequestBuilder(String methodName) {
            this.methodName = methodName;
        }

        /**
         * Set description
         * @param description A description for this Conjur Authentication Method (optional)
         * @return AddNewMethodRequestBuilder
         */
        public AddNewMethodRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewMethodRequestBuilder
         */
        public AddNewMethodRequestBuilder schemas(List<EnumapiKeyConjurAuthenticationMethodSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set username
         * @param username The username for the user to authenticate. (optional)
         * @return AddNewMethodRequestBuilder
         */
        public AddNewMethodRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set password
         * @param password The password for the user to authenticate. This will be used to obtain an API key for the target user. (optional)
         * @return AddNewMethodRequestBuilder
         */
        public AddNewMethodRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set apiKey
         * @param apiKey The API key for the user to authenticate. (optional)
         * @return AddNewMethodRequestBuilder
         */
        public AddNewMethodRequestBuilder apiKey(String apiKey) {
            this.apiKey = apiKey;
            return this;
        }
        
        /**
         * Build call for addNewMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Conjur Authentication Method already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddApiKeyConjurAuthenticationMethodRequest addApiKeyConjurAuthenticationMethodRequest = buildBodyParams();
            return addNewMethodCall(addApiKeyConjurAuthenticationMethodRequest, _callback);
        }

        private AddApiKeyConjurAuthenticationMethodRequest buildBodyParams() {
            AddApiKeyConjurAuthenticationMethodRequest addApiKeyConjurAuthenticationMethodRequest = new AddApiKeyConjurAuthenticationMethodRequest();
            return addApiKeyConjurAuthenticationMethodRequest;
        }

        /**
         * Execute addNewMethod request
         * @return ApiKeyConjurAuthenticationMethodResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Conjur Authentication Method already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiKeyConjurAuthenticationMethodResponse execute() throws ApiException {
            AddApiKeyConjurAuthenticationMethodRequest addApiKeyConjurAuthenticationMethodRequest = buildBodyParams();
            ApiResponse<ApiKeyConjurAuthenticationMethodResponse> localVarResp = addNewMethodWithHttpInfo(addApiKeyConjurAuthenticationMethodRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewMethod request with HTTP info returned
         * @return ApiResponse&lt;ApiKeyConjurAuthenticationMethodResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Conjur Authentication Method already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApiKeyConjurAuthenticationMethodResponse> executeWithHttpInfo() throws ApiException {
            AddApiKeyConjurAuthenticationMethodRequest addApiKeyConjurAuthenticationMethodRequest = buildBodyParams();
            return addNewMethodWithHttpInfo(addApiKeyConjurAuthenticationMethodRequest);
        }

        /**
         * Execute addNewMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Conjur Authentication Method already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApiKeyConjurAuthenticationMethodResponse> _callback) throws ApiException {
            AddApiKeyConjurAuthenticationMethodRequest addApiKeyConjurAuthenticationMethodRequest = buildBodyParams();
            return addNewMethodAsync(addApiKeyConjurAuthenticationMethodRequest, _callback);
        }
    }

    /**
     * Add a new Conjur Authentication Method to the config
     * 
     * @param addApiKeyConjurAuthenticationMethodRequest Create a new Conjur Authentication Method in the config (required)
     * @return AddNewMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Conjur Authentication Method already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewMethodRequestBuilder addNewMethod(String methodName) throws IllegalArgumentException {
        if (methodName == null) throw new IllegalArgumentException("\"methodName\" is required but got null");
            

        return new AddNewMethodRequestBuilder(methodName);
    }
    private okhttp3.Call deleteMethodCall(String conjurAuthenticationMethodName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conjur-authentication-methods/{conjur-authentication-method-name}"
            .replace("{" + "conjur-authentication-method-name" + "}", localVarApiClient.escapeString(conjurAuthenticationMethodName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMethodValidateBeforeCall(String conjurAuthenticationMethodName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conjurAuthenticationMethodName' is set
        if (conjurAuthenticationMethodName == null) {
            throw new ApiException("Missing the required parameter 'conjurAuthenticationMethodName' when calling deleteMethod(Async)");
        }

        return deleteMethodCall(conjurAuthenticationMethodName, _callback);

    }


    private ApiResponse<Void> deleteMethodWithHttpInfo(String conjurAuthenticationMethodName) throws ApiException {
        okhttp3.Call localVarCall = deleteMethodValidateBeforeCall(conjurAuthenticationMethodName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMethodAsync(String conjurAuthenticationMethodName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMethodValidateBeforeCall(conjurAuthenticationMethodName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMethodRequestBuilder {
        private final String conjurAuthenticationMethodName;

        private DeleteMethodRequestBuilder(String conjurAuthenticationMethodName) {
            this.conjurAuthenticationMethodName = conjurAuthenticationMethodName;
        }

        /**
         * Build call for deleteMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Conjur Authentication Method cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMethodCall(conjurAuthenticationMethodName, _callback);
        }


        /**
         * Execute deleteMethod request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Conjur Authentication Method cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMethodWithHttpInfo(conjurAuthenticationMethodName);
        }

        /**
         * Execute deleteMethod request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Conjur Authentication Method cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMethodWithHttpInfo(conjurAuthenticationMethodName);
        }

        /**
         * Execute deleteMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Conjur Authentication Method cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMethodAsync(conjurAuthenticationMethodName, _callback);
        }
    }

    /**
     * Delete a Conjur Authentication Method
     * 
     * @param conjurAuthenticationMethodName Name of the Conjur Authentication Method (required)
     * @return DeleteMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Conjur Authentication Method cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMethodRequestBuilder deleteMethod(String conjurAuthenticationMethodName) throws IllegalArgumentException {
        if (conjurAuthenticationMethodName == null) throw new IllegalArgumentException("\"conjurAuthenticationMethodName\" is required but got null");
            

        return new DeleteMethodRequestBuilder(conjurAuthenticationMethodName);
    }
    private okhttp3.Call getMethodCall(String conjurAuthenticationMethodName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conjur-authentication-methods/{conjur-authentication-method-name}"
            .replace("{" + "conjur-authentication-method-name" + "}", localVarApiClient.escapeString(conjurAuthenticationMethodName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMethodValidateBeforeCall(String conjurAuthenticationMethodName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conjurAuthenticationMethodName' is set
        if (conjurAuthenticationMethodName == null) {
            throw new ApiException("Missing the required parameter 'conjurAuthenticationMethodName' when calling getMethod(Async)");
        }

        return getMethodCall(conjurAuthenticationMethodName, _callback);

    }


    private ApiResponse<ApiKeyConjurAuthenticationMethodResponse> getMethodWithHttpInfo(String conjurAuthenticationMethodName) throws ApiException {
        okhttp3.Call localVarCall = getMethodValidateBeforeCall(conjurAuthenticationMethodName, null);
        Type localVarReturnType = new TypeToken<ApiKeyConjurAuthenticationMethodResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMethodAsync(String conjurAuthenticationMethodName, final ApiCallback<ApiKeyConjurAuthenticationMethodResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMethodValidateBeforeCall(conjurAuthenticationMethodName, _callback);
        Type localVarReturnType = new TypeToken<ApiKeyConjurAuthenticationMethodResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMethodRequestBuilder {
        private final String conjurAuthenticationMethodName;

        private GetMethodRequestBuilder(String conjurAuthenticationMethodName) {
            this.conjurAuthenticationMethodName = conjurAuthenticationMethodName;
        }

        /**
         * Build call for getMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMethodCall(conjurAuthenticationMethodName, _callback);
        }


        /**
         * Execute getMethod request
         * @return ApiKeyConjurAuthenticationMethodResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiKeyConjurAuthenticationMethodResponse execute() throws ApiException {
            ApiResponse<ApiKeyConjurAuthenticationMethodResponse> localVarResp = getMethodWithHttpInfo(conjurAuthenticationMethodName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMethod request with HTTP info returned
         * @return ApiResponse&lt;ApiKeyConjurAuthenticationMethodResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApiKeyConjurAuthenticationMethodResponse> executeWithHttpInfo() throws ApiException {
            return getMethodWithHttpInfo(conjurAuthenticationMethodName);
        }

        /**
         * Execute getMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApiKeyConjurAuthenticationMethodResponse> _callback) throws ApiException {
            return getMethodAsync(conjurAuthenticationMethodName, _callback);
        }
    }

    /**
     * Returns a single Conjur Authentication Method
     * 
     * @param conjurAuthenticationMethodName Name of the Conjur Authentication Method (required)
     * @return GetMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetMethodRequestBuilder getMethod(String conjurAuthenticationMethodName) throws IllegalArgumentException {
        if (conjurAuthenticationMethodName == null) throw new IllegalArgumentException("\"conjurAuthenticationMethodName\" is required but got null");
            

        return new GetMethodRequestBuilder(conjurAuthenticationMethodName);
    }
    private okhttp3.Call listAllMethodsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conjur-authentication-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllMethodsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAllMethodsCall(filter, _callback);

    }


    private ApiResponse<ConjurAuthenticationMethodListResponse> listAllMethodsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllMethodsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<ConjurAuthenticationMethodListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllMethodsAsync(String filter, final ApiCallback<ConjurAuthenticationMethodListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllMethodsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<ConjurAuthenticationMethodListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllMethodsRequestBuilder {
        private String filter;

        private ListAllMethodsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllMethodsRequestBuilder
         */
        public ListAllMethodsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllMethods
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllMethodsCall(filter, _callback);
        }


        /**
         * Execute listAllMethods request
         * @return ConjurAuthenticationMethodListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ConjurAuthenticationMethodListResponse execute() throws ApiException {
            ApiResponse<ConjurAuthenticationMethodListResponse> localVarResp = listAllMethodsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllMethods request with HTTP info returned
         * @return ApiResponse&lt;ConjurAuthenticationMethodListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConjurAuthenticationMethodListResponse> executeWithHttpInfo() throws ApiException {
            return listAllMethodsWithHttpInfo(filter);
        }

        /**
         * Execute listAllMethods request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConjurAuthenticationMethodListResponse> _callback) throws ApiException {
            return listAllMethodsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Conjur Authentication Method objects
     * 
     * @return ListAllMethodsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllMethodsRequestBuilder listAllMethods() throws IllegalArgumentException {
        return new ListAllMethodsRequestBuilder();
    }
    private okhttp3.Call updateByMethodNameCall(String conjurAuthenticationMethodName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/conjur-authentication-methods/{conjur-authentication-method-name}"
            .replace("{" + "conjur-authentication-method-name" + "}", localVarApiClient.escapeString(conjurAuthenticationMethodName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByMethodNameValidateBeforeCall(String conjurAuthenticationMethodName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conjurAuthenticationMethodName' is set
        if (conjurAuthenticationMethodName == null) {
            throw new ApiException("Missing the required parameter 'conjurAuthenticationMethodName' when calling updateByMethodName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByMethodName(Async)");
        }

        return updateByMethodNameCall(conjurAuthenticationMethodName, updateRequest, _callback);

    }


    private ApiResponse<ApiKeyConjurAuthenticationMethodResponse> updateByMethodNameWithHttpInfo(String conjurAuthenticationMethodName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByMethodNameValidateBeforeCall(conjurAuthenticationMethodName, updateRequest, null);
        Type localVarReturnType = new TypeToken<ApiKeyConjurAuthenticationMethodResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByMethodNameAsync(String conjurAuthenticationMethodName, UpdateRequest updateRequest, final ApiCallback<ApiKeyConjurAuthenticationMethodResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByMethodNameValidateBeforeCall(conjurAuthenticationMethodName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiKeyConjurAuthenticationMethodResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByMethodNameRequestBuilder {
        private final List<Operation> operations;
        private final String conjurAuthenticationMethodName;

        private UpdateByMethodNameRequestBuilder(List<Operation> operations, String conjurAuthenticationMethodName) {
            this.operations = operations;
            this.conjurAuthenticationMethodName = conjurAuthenticationMethodName;
        }

        /**
         * Build call for updateByMethodName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByMethodNameCall(conjurAuthenticationMethodName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByMethodName request
         * @return ApiKeyConjurAuthenticationMethodResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiKeyConjurAuthenticationMethodResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<ApiKeyConjurAuthenticationMethodResponse> localVarResp = updateByMethodNameWithHttpInfo(conjurAuthenticationMethodName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByMethodName request with HTTP info returned
         * @return ApiResponse&lt;ApiKeyConjurAuthenticationMethodResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApiKeyConjurAuthenticationMethodResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByMethodNameWithHttpInfo(conjurAuthenticationMethodName, updateRequest);
        }

        /**
         * Execute updateByMethodName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApiKeyConjurAuthenticationMethodResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByMethodNameAsync(conjurAuthenticationMethodName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Conjur Authentication Method by name
     * 
     * @param conjurAuthenticationMethodName Name of the Conjur Authentication Method (required)
     * @param updateRequest Update an existing Conjur Authentication Method (required)
     * @return UpdateByMethodNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Conjur Authentication Method does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByMethodNameRequestBuilder updateByMethodName(List<Operation> operations, String conjurAuthenticationMethodName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (conjurAuthenticationMethodName == null) throw new IllegalArgumentException("\"conjurAuthenticationMethodName\" is required but got null");
            

        return new UpdateByMethodNameRequestBuilder(operations, conjurAuthenticationMethodName);
    }
}
