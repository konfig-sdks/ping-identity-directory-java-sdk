/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddPrometheusMonitorAttributeMetricRequest;
import com.konfigthis.client.model.EnumprometheusMonitorAttributeMetricMetricTypeProp;
import com.konfigthis.client.model.EnumprometheusMonitorAttributeMetricSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.PrometheusMonitorAttributeMetricListResponse;
import com.konfigthis.client.model.PrometheusMonitorAttributeMetricResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PrometheusMonitorAttributeMetricApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrometheusMonitorAttributeMetricApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PrometheusMonitorAttributeMetricApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewMetricToConfigCall(String httpServletExtensionName, AddPrometheusMonitorAttributeMetricRequest addPrometheusMonitorAttributeMetricRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addPrometheusMonitorAttributeMetricRequest;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics"
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewMetricToConfigValidateBeforeCall(String httpServletExtensionName, AddPrometheusMonitorAttributeMetricRequest addPrometheusMonitorAttributeMetricRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling addNewMetricToConfig(Async)");
        }

        // verify the required parameter 'addPrometheusMonitorAttributeMetricRequest' is set
        if (addPrometheusMonitorAttributeMetricRequest == null) {
            throw new ApiException("Missing the required parameter 'addPrometheusMonitorAttributeMetricRequest' when calling addNewMetricToConfig(Async)");
        }

        return addNewMetricToConfigCall(httpServletExtensionName, addPrometheusMonitorAttributeMetricRequest, _callback);

    }


    private ApiResponse<PrometheusMonitorAttributeMetricResponse> addNewMetricToConfigWithHttpInfo(String httpServletExtensionName, AddPrometheusMonitorAttributeMetricRequest addPrometheusMonitorAttributeMetricRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewMetricToConfigValidateBeforeCall(httpServletExtensionName, addPrometheusMonitorAttributeMetricRequest, null);
        Type localVarReturnType = new TypeToken<PrometheusMonitorAttributeMetricResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewMetricToConfigAsync(String httpServletExtensionName, AddPrometheusMonitorAttributeMetricRequest addPrometheusMonitorAttributeMetricRequest, final ApiCallback<PrometheusMonitorAttributeMetricResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewMetricToConfigValidateBeforeCall(httpServletExtensionName, addPrometheusMonitorAttributeMetricRequest, _callback);
        Type localVarReturnType = new TypeToken<PrometheusMonitorAttributeMetricResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewMetricToConfigRequestBuilder {
        private final String metricName;
        private final String httpServletExtensionName;
        private List<EnumprometheusMonitorAttributeMetricSchemaUrn> schemas;
        private String monitorAttributeName;
        private String monitorObjectClassName;
        private EnumprometheusMonitorAttributeMetricMetricTypeProp metricType;
        private String filter;
        private String metricDescription;
        private List<String> labelNameValuePair;

        private AddNewMetricToConfigRequestBuilder(String metricName, String httpServletExtensionName) {
            this.metricName = metricName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewMetricToConfigRequestBuilder
         */
        public AddNewMetricToConfigRequestBuilder schemas(List<EnumprometheusMonitorAttributeMetricSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set monitorAttributeName
         * @param monitorAttributeName The name of the monitor attribute that contains the numeric value to be published. (optional)
         * @return AddNewMetricToConfigRequestBuilder
         */
        public AddNewMetricToConfigRequestBuilder monitorAttributeName(String monitorAttributeName) {
            this.monitorAttributeName = monitorAttributeName;
            return this;
        }
        
        /**
         * Set monitorObjectClassName
         * @param monitorObjectClassName The name of the object class for monitor entries that contain the monitor attribute. (optional)
         * @return AddNewMetricToConfigRequestBuilder
         */
        public AddNewMetricToConfigRequestBuilder monitorObjectClassName(String monitorObjectClassName) {
            this.monitorObjectClassName = monitorObjectClassName;
            return this;
        }
        
        /**
         * Set metricType
         * @param metricType  (optional)
         * @return AddNewMetricToConfigRequestBuilder
         */
        public AddNewMetricToConfigRequestBuilder metricType(EnumprometheusMonitorAttributeMetricMetricTypeProp metricType) {
            this.metricType = metricType;
            return this;
        }
        
        /**
         * Set filter
         * @param filter A filter that may be used to restrict the set of monitor entries for which the metric should be generated. (optional)
         * @return AddNewMetricToConfigRequestBuilder
         */
        public AddNewMetricToConfigRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set metricDescription
         * @param metricDescription A human-readable description that should be published as part of the metric definition. (optional)
         * @return AddNewMetricToConfigRequestBuilder
         */
        public AddNewMetricToConfigRequestBuilder metricDescription(String metricDescription) {
            this.metricDescription = metricDescription;
            return this;
        }
        
        /**
         * Set labelNameValuePair
         * @param labelNameValuePair A set of name-value pairs for labels that should be included in the published metric for the target attribute. (optional)
         * @return AddNewMetricToConfigRequestBuilder
         */
        public AddNewMetricToConfigRequestBuilder labelNameValuePair(List<String> labelNameValuePair) {
            this.labelNameValuePair = labelNameValuePair;
            return this;
        }
        
        /**
         * Build call for addNewMetricToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddPrometheusMonitorAttributeMetricRequest addPrometheusMonitorAttributeMetricRequest = buildBodyParams();
            return addNewMetricToConfigCall(httpServletExtensionName, addPrometheusMonitorAttributeMetricRequest, _callback);
        }

        private AddPrometheusMonitorAttributeMetricRequest buildBodyParams() {
            AddPrometheusMonitorAttributeMetricRequest addPrometheusMonitorAttributeMetricRequest = new AddPrometheusMonitorAttributeMetricRequest();
            return addPrometheusMonitorAttributeMetricRequest;
        }

        /**
         * Execute addNewMetricToConfig request
         * @return PrometheusMonitorAttributeMetricResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric already exists </td><td>  -  </td></tr>
         </table>
         */
        public PrometheusMonitorAttributeMetricResponse execute() throws ApiException {
            AddPrometheusMonitorAttributeMetricRequest addPrometheusMonitorAttributeMetricRequest = buildBodyParams();
            ApiResponse<PrometheusMonitorAttributeMetricResponse> localVarResp = addNewMetricToConfigWithHttpInfo(httpServletExtensionName, addPrometheusMonitorAttributeMetricRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewMetricToConfig request with HTTP info returned
         * @return ApiResponse&lt;PrometheusMonitorAttributeMetricResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PrometheusMonitorAttributeMetricResponse> executeWithHttpInfo() throws ApiException {
            AddPrometheusMonitorAttributeMetricRequest addPrometheusMonitorAttributeMetricRequest = buildBodyParams();
            return addNewMetricToConfigWithHttpInfo(httpServletExtensionName, addPrometheusMonitorAttributeMetricRequest);
        }

        /**
         * Execute addNewMetricToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PrometheusMonitorAttributeMetricResponse> _callback) throws ApiException {
            AddPrometheusMonitorAttributeMetricRequest addPrometheusMonitorAttributeMetricRequest = buildBodyParams();
            return addNewMetricToConfigAsync(httpServletExtensionName, addPrometheusMonitorAttributeMetricRequest, _callback);
        }
    }

    /**
     * Add a new Prometheus Monitor Attribute Metric to the config
     * 
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @param addPrometheusMonitorAttributeMetricRequest Create a new Prometheus Monitor Attribute Metric in the config (required)
     * @return AddNewMetricToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewMetricToConfigRequestBuilder addNewMetricToConfig(String metricName, String httpServletExtensionName) throws IllegalArgumentException {
        if (metricName == null) throw new IllegalArgumentException("\"metricName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new AddNewMetricToConfigRequestBuilder(metricName, httpServletExtensionName);
    }
    private okhttp3.Call deleteMetricCall(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics/{prometheus-monitor-attribute-metric-name}"
            .replace("{" + "prometheus-monitor-attribute-metric-name" + "}", localVarApiClient.escapeString(prometheusMonitorAttributeMetricName.toString()))
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMetricValidateBeforeCall(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'prometheusMonitorAttributeMetricName' is set
        if (prometheusMonitorAttributeMetricName == null) {
            throw new ApiException("Missing the required parameter 'prometheusMonitorAttributeMetricName' when calling deleteMetric(Async)");
        }

        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling deleteMetric(Async)");
        }

        return deleteMetricCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, _callback);

    }


    private ApiResponse<Void> deleteMetricWithHttpInfo(String prometheusMonitorAttributeMetricName, String httpServletExtensionName) throws ApiException {
        okhttp3.Call localVarCall = deleteMetricValidateBeforeCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMetricAsync(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMetricValidateBeforeCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMetricRequestBuilder {
        private final String prometheusMonitorAttributeMetricName;
        private final String httpServletExtensionName;

        private DeleteMetricRequestBuilder(String prometheusMonitorAttributeMetricName, String httpServletExtensionName) {
            this.prometheusMonitorAttributeMetricName = prometheusMonitorAttributeMetricName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Build call for deleteMetric
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMetricCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, _callback);
        }


        /**
         * Execute deleteMetric request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMetricWithHttpInfo(prometheusMonitorAttributeMetricName, httpServletExtensionName);
        }

        /**
         * Execute deleteMetric request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMetricWithHttpInfo(prometheusMonitorAttributeMetricName, httpServletExtensionName);
        }

        /**
         * Execute deleteMetric request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMetricAsync(prometheusMonitorAttributeMetricName, httpServletExtensionName, _callback);
        }
    }

    /**
     * Delete a Prometheus Monitor Attribute Metric
     * 
     * @param prometheusMonitorAttributeMetricName Name of the Prometheus Monitor Attribute Metric (required)
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @return DeleteMetricRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Prometheus Monitor Attribute Metric cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMetricRequestBuilder deleteMetric(String prometheusMonitorAttributeMetricName, String httpServletExtensionName) throws IllegalArgumentException {
        if (prometheusMonitorAttributeMetricName == null) throw new IllegalArgumentException("\"prometheusMonitorAttributeMetricName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new DeleteMetricRequestBuilder(prometheusMonitorAttributeMetricName, httpServletExtensionName);
    }
    private okhttp3.Call getSingleMetricCall(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics/{prometheus-monitor-attribute-metric-name}"
            .replace("{" + "prometheus-monitor-attribute-metric-name" + "}", localVarApiClient.escapeString(prometheusMonitorAttributeMetricName.toString()))
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleMetricValidateBeforeCall(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'prometheusMonitorAttributeMetricName' is set
        if (prometheusMonitorAttributeMetricName == null) {
            throw new ApiException("Missing the required parameter 'prometheusMonitorAttributeMetricName' when calling getSingleMetric(Async)");
        }

        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling getSingleMetric(Async)");
        }

        return getSingleMetricCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, _callback);

    }


    private ApiResponse<PrometheusMonitorAttributeMetricResponse> getSingleMetricWithHttpInfo(String prometheusMonitorAttributeMetricName, String httpServletExtensionName) throws ApiException {
        okhttp3.Call localVarCall = getSingleMetricValidateBeforeCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, null);
        Type localVarReturnType = new TypeToken<PrometheusMonitorAttributeMetricResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleMetricAsync(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, final ApiCallback<PrometheusMonitorAttributeMetricResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleMetricValidateBeforeCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, _callback);
        Type localVarReturnType = new TypeToken<PrometheusMonitorAttributeMetricResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleMetricRequestBuilder {
        private final String prometheusMonitorAttributeMetricName;
        private final String httpServletExtensionName;

        private GetSingleMetricRequestBuilder(String prometheusMonitorAttributeMetricName, String httpServletExtensionName) {
            this.prometheusMonitorAttributeMetricName = prometheusMonitorAttributeMetricName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Build call for getSingleMetric
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleMetricCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, _callback);
        }


        /**
         * Execute getSingleMetric request
         * @return PrometheusMonitorAttributeMetricResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
         </table>
         */
        public PrometheusMonitorAttributeMetricResponse execute() throws ApiException {
            ApiResponse<PrometheusMonitorAttributeMetricResponse> localVarResp = getSingleMetricWithHttpInfo(prometheusMonitorAttributeMetricName, httpServletExtensionName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleMetric request with HTTP info returned
         * @return ApiResponse&lt;PrometheusMonitorAttributeMetricResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PrometheusMonitorAttributeMetricResponse> executeWithHttpInfo() throws ApiException {
            return getSingleMetricWithHttpInfo(prometheusMonitorAttributeMetricName, httpServletExtensionName);
        }

        /**
         * Execute getSingleMetric request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PrometheusMonitorAttributeMetricResponse> _callback) throws ApiException {
            return getSingleMetricAsync(prometheusMonitorAttributeMetricName, httpServletExtensionName, _callback);
        }
    }

    /**
     * Returns a single Prometheus Monitor Attribute Metric
     * 
     * @param prometheusMonitorAttributeMetricName Name of the Prometheus Monitor Attribute Metric (required)
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @return GetSingleMetricRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleMetricRequestBuilder getSingleMetric(String prometheusMonitorAttributeMetricName, String httpServletExtensionName) throws IllegalArgumentException {
        if (prometheusMonitorAttributeMetricName == null) throw new IllegalArgumentException("\"prometheusMonitorAttributeMetricName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new GetSingleMetricRequestBuilder(prometheusMonitorAttributeMetricName, httpServletExtensionName);
    }
    private okhttp3.Call listAllObjectsCall(String httpServletExtensionName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics"
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String httpServletExtensionName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling listAllObjects(Async)");
        }

        return listAllObjectsCall(httpServletExtensionName, filter, _callback);

    }


    private ApiResponse<PrometheusMonitorAttributeMetricListResponse> listAllObjectsWithHttpInfo(String httpServletExtensionName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(httpServletExtensionName, filter, null);
        Type localVarReturnType = new TypeToken<PrometheusMonitorAttributeMetricListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String httpServletExtensionName, String filter, final ApiCallback<PrometheusMonitorAttributeMetricListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(httpServletExtensionName, filter, _callback);
        Type localVarReturnType = new TypeToken<PrometheusMonitorAttributeMetricListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private final String httpServletExtensionName;
        private String filter;

        private ListAllObjectsRequestBuilder(String httpServletExtensionName) {
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(httpServletExtensionName, filter, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return PrometheusMonitorAttributeMetricListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public PrometheusMonitorAttributeMetricListResponse execute() throws ApiException {
            ApiResponse<PrometheusMonitorAttributeMetricListResponse> localVarResp = listAllObjectsWithHttpInfo(httpServletExtensionName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;PrometheusMonitorAttributeMetricListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PrometheusMonitorAttributeMetricListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(httpServletExtensionName, filter);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PrometheusMonitorAttributeMetricListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(httpServletExtensionName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Prometheus Monitor Attribute Metric objects
     * 
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects(String httpServletExtensionName) throws IllegalArgumentException {
        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new ListAllObjectsRequestBuilder(httpServletExtensionName);
    }
    private okhttp3.Call updateBynameCall(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/http-servlet-extensions/{http-servlet-extension-name}/prometheus-monitor-attribute-metrics/{prometheus-monitor-attribute-metric-name}"
            .replace("{" + "prometheus-monitor-attribute-metric-name" + "}", localVarApiClient.escapeString(prometheusMonitorAttributeMetricName.toString()))
            .replace("{" + "http-servlet-extension-name" + "}", localVarApiClient.escapeString(httpServletExtensionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBynameValidateBeforeCall(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'prometheusMonitorAttributeMetricName' is set
        if (prometheusMonitorAttributeMetricName == null) {
            throw new ApiException("Missing the required parameter 'prometheusMonitorAttributeMetricName' when calling updateByname(Async)");
        }

        // verify the required parameter 'httpServletExtensionName' is set
        if (httpServletExtensionName == null) {
            throw new ApiException("Missing the required parameter 'httpServletExtensionName' when calling updateByname(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByname(Async)");
        }

        return updateBynameCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, updateRequest, _callback);

    }


    private ApiResponse<PrometheusMonitorAttributeMetricResponse> updateBynameWithHttpInfo(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBynameValidateBeforeCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, updateRequest, null);
        Type localVarReturnType = new TypeToken<PrometheusMonitorAttributeMetricResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBynameAsync(String prometheusMonitorAttributeMetricName, String httpServletExtensionName, UpdateRequest updateRequest, final ApiCallback<PrometheusMonitorAttributeMetricResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBynameValidateBeforeCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<PrometheusMonitorAttributeMetricResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBynameRequestBuilder {
        private final List<Operation> operations;
        private final String prometheusMonitorAttributeMetricName;
        private final String httpServletExtensionName;

        private UpdateBynameRequestBuilder(List<Operation> operations, String prometheusMonitorAttributeMetricName, String httpServletExtensionName) {
            this.operations = operations;
            this.prometheusMonitorAttributeMetricName = prometheusMonitorAttributeMetricName;
            this.httpServletExtensionName = httpServletExtensionName;
        }

        /**
         * Build call for updateByname
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateBynameCall(prometheusMonitorAttributeMetricName, httpServletExtensionName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByname request
         * @return PrometheusMonitorAttributeMetricResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
         </table>
         */
        public PrometheusMonitorAttributeMetricResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<PrometheusMonitorAttributeMetricResponse> localVarResp = updateBynameWithHttpInfo(prometheusMonitorAttributeMetricName, httpServletExtensionName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByname request with HTTP info returned
         * @return ApiResponse&lt;PrometheusMonitorAttributeMetricResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PrometheusMonitorAttributeMetricResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateBynameWithHttpInfo(prometheusMonitorAttributeMetricName, httpServletExtensionName, updateRequest);
        }

        /**
         * Execute updateByname request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PrometheusMonitorAttributeMetricResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateBynameAsync(prometheusMonitorAttributeMetricName, httpServletExtensionName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Prometheus Monitor Attribute Metric by name
     * 
     * @param prometheusMonitorAttributeMetricName Name of the Prometheus Monitor Attribute Metric (required)
     * @param httpServletExtensionName Name of the HTTP Servlet Extension (required)
     * @param updateRequest Update an existing Prometheus Monitor Attribute Metric (required)
     * @return UpdateBynameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Prometheus Monitor Attribute Metric does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBynameRequestBuilder updateByname(List<Operation> operations, String prometheusMonitorAttributeMetricName, String httpServletExtensionName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (prometheusMonitorAttributeMetricName == null) throw new IllegalArgumentException("\"prometheusMonitorAttributeMetricName\" is required but got null");
            

        if (httpServletExtensionName == null) throw new IllegalArgumentException("\"httpServletExtensionName\" is required but got null");
            

        return new UpdateBynameRequestBuilder(operations, prometheusMonitorAttributeMetricName, httpServletExtensionName);
    }
}
