/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddStatsdMonitoringEndpointRequest;
import com.konfigthis.client.model.EnummonitoringEndpointConnectionTypeProp;
import com.konfigthis.client.model.EnumstatsdMonitoringEndpointSchemaUrn;
import com.konfigthis.client.model.MonitoringEndpointListResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.StatsdMonitoringEndpointResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MonitoringEndpointApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MonitoringEndpointApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MonitoringEndpointApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewConfigCall(AddStatsdMonitoringEndpointRequest addStatsdMonitoringEndpointRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addStatsdMonitoringEndpointRequest;

        // create path and map variables
        String localVarPath = "/monitoring-endpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewConfigValidateBeforeCall(AddStatsdMonitoringEndpointRequest addStatsdMonitoringEndpointRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addStatsdMonitoringEndpointRequest' is set
        if (addStatsdMonitoringEndpointRequest == null) {
            throw new ApiException("Missing the required parameter 'addStatsdMonitoringEndpointRequest' when calling addNewConfig(Async)");
        }

        return addNewConfigCall(addStatsdMonitoringEndpointRequest, _callback);

    }


    private ApiResponse<StatsdMonitoringEndpointResponse> addNewConfigWithHttpInfo(AddStatsdMonitoringEndpointRequest addStatsdMonitoringEndpointRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(addStatsdMonitoringEndpointRequest, null);
        Type localVarReturnType = new TypeToken<StatsdMonitoringEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewConfigAsync(AddStatsdMonitoringEndpointRequest addStatsdMonitoringEndpointRequest, final ApiCallback<StatsdMonitoringEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(addStatsdMonitoringEndpointRequest, _callback);
        Type localVarReturnType = new TypeToken<StatsdMonitoringEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewConfigRequestBuilder {
        private final String endpointName;
        private List<EnumstatsdMonitoringEndpointSchemaUrn> schemas;
        private String hostname;
        private Integer serverPort;
        private EnummonitoringEndpointConnectionTypeProp connectionType;
        private String trustManagerProvider;
        private List<String> additionalTags;
        private Boolean enabled;

        private AddNewConfigRequestBuilder(String endpointName) {
            this.endpointName = endpointName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder schemas(List<EnumstatsdMonitoringEndpointSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set hostname
         * @param hostname The name of the host where this StatsD Monitoring Endpoint should send metric data. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder hostname(String hostname) {
            this.hostname = hostname;
            return this;
        }
        
        /**
         * Set serverPort
         * @param serverPort Specifies the port number of the endpoint where metric data should be sent. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder serverPort(Integer serverPort) {
            this.serverPort = serverPort;
            return this;
        }
        
        /**
         * Set connectionType
         * @param connectionType  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder connectionType(EnummonitoringEndpointConnectionTypeProp connectionType) {
            this.connectionType = connectionType;
            return this;
        }
        
        /**
         * Set trustManagerProvider
         * @param trustManagerProvider The trust manager provider to use if SSL over TCP is to be used for connection-level security. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder trustManagerProvider(String trustManagerProvider) {
            this.trustManagerProvider = trustManagerProvider;
            return this;
        }
        
        /**
         * Set additionalTags
         * @param additionalTags Specifies any optional additional tags to include in StatsD messages. Any additional tags will be appended to the end of each StatsD message, separated by commas. Tags should be written in a [key]:[value] format (\\\&quot;host:server1\\\&quot;, for example). (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder additionalTags(List<String> additionalTags) {
            this.additionalTags = additionalTags;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Indicates whether this Monitoring Endpoint is enabled for use in the Directory Server. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Build call for addNewConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Monitoring Endpoint already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddStatsdMonitoringEndpointRequest addStatsdMonitoringEndpointRequest = buildBodyParams();
            return addNewConfigCall(addStatsdMonitoringEndpointRequest, _callback);
        }

        private AddStatsdMonitoringEndpointRequest buildBodyParams() {
            AddStatsdMonitoringEndpointRequest addStatsdMonitoringEndpointRequest = new AddStatsdMonitoringEndpointRequest();
            return addStatsdMonitoringEndpointRequest;
        }

        /**
         * Execute addNewConfig request
         * @return StatsdMonitoringEndpointResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Monitoring Endpoint already exists </td><td>  -  </td></tr>
         </table>
         */
        public StatsdMonitoringEndpointResponse execute() throws ApiException {
            AddStatsdMonitoringEndpointRequest addStatsdMonitoringEndpointRequest = buildBodyParams();
            ApiResponse<StatsdMonitoringEndpointResponse> localVarResp = addNewConfigWithHttpInfo(addStatsdMonitoringEndpointRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewConfig request with HTTP info returned
         * @return ApiResponse&lt;StatsdMonitoringEndpointResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Monitoring Endpoint already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatsdMonitoringEndpointResponse> executeWithHttpInfo() throws ApiException {
            AddStatsdMonitoringEndpointRequest addStatsdMonitoringEndpointRequest = buildBodyParams();
            return addNewConfigWithHttpInfo(addStatsdMonitoringEndpointRequest);
        }

        /**
         * Execute addNewConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Monitoring Endpoint already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatsdMonitoringEndpointResponse> _callback) throws ApiException {
            AddStatsdMonitoringEndpointRequest addStatsdMonitoringEndpointRequest = buildBodyParams();
            return addNewConfigAsync(addStatsdMonitoringEndpointRequest, _callback);
        }
    }

    /**
     * Add a new Monitoring Endpoint to the config
     * 
     * @param addStatsdMonitoringEndpointRequest Create a new Monitoring Endpoint in the config (required)
     * @return AddNewConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Monitoring Endpoint already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewConfigRequestBuilder addNewConfig(String endpointName) throws IllegalArgumentException {
        if (endpointName == null) throw new IllegalArgumentException("\"endpointName\" is required but got null");
            

        return new AddNewConfigRequestBuilder(endpointName);
    }
    private okhttp3.Call deleteMonitoringEndpointCall(String monitoringEndpointName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/monitoring-endpoints/{monitoring-endpoint-name}"
            .replace("{" + "monitoring-endpoint-name" + "}", localVarApiClient.escapeString(monitoringEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMonitoringEndpointValidateBeforeCall(String monitoringEndpointName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitoringEndpointName' is set
        if (monitoringEndpointName == null) {
            throw new ApiException("Missing the required parameter 'monitoringEndpointName' when calling deleteMonitoringEndpoint(Async)");
        }

        return deleteMonitoringEndpointCall(monitoringEndpointName, _callback);

    }


    private ApiResponse<Void> deleteMonitoringEndpointWithHttpInfo(String monitoringEndpointName) throws ApiException {
        okhttp3.Call localVarCall = deleteMonitoringEndpointValidateBeforeCall(monitoringEndpointName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMonitoringEndpointAsync(String monitoringEndpointName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMonitoringEndpointValidateBeforeCall(monitoringEndpointName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMonitoringEndpointRequestBuilder {
        private final String monitoringEndpointName;

        private DeleteMonitoringEndpointRequestBuilder(String monitoringEndpointName) {
            this.monitoringEndpointName = monitoringEndpointName;
        }

        /**
         * Build call for deleteMonitoringEndpoint
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Monitoring Endpoint cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMonitoringEndpointCall(monitoringEndpointName, _callback);
        }


        /**
         * Execute deleteMonitoringEndpoint request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Monitoring Endpoint cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMonitoringEndpointWithHttpInfo(monitoringEndpointName);
        }

        /**
         * Execute deleteMonitoringEndpoint request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Monitoring Endpoint cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMonitoringEndpointWithHttpInfo(monitoringEndpointName);
        }

        /**
         * Execute deleteMonitoringEndpoint request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Monitoring Endpoint cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMonitoringEndpointAsync(monitoringEndpointName, _callback);
        }
    }

    /**
     * Delete a Monitoring Endpoint
     * 
     * @param monitoringEndpointName Name of the Monitoring Endpoint (required)
     * @return DeleteMonitoringEndpointRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Monitoring Endpoint cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMonitoringEndpointRequestBuilder deleteMonitoringEndpoint(String monitoringEndpointName) throws IllegalArgumentException {
        if (monitoringEndpointName == null) throw new IllegalArgumentException("\"monitoringEndpointName\" is required but got null");
            

        return new DeleteMonitoringEndpointRequestBuilder(monitoringEndpointName);
    }
    private okhttp3.Call getSingleEndpointCall(String monitoringEndpointName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/monitoring-endpoints/{monitoring-endpoint-name}"
            .replace("{" + "monitoring-endpoint-name" + "}", localVarApiClient.escapeString(monitoringEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleEndpointValidateBeforeCall(String monitoringEndpointName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitoringEndpointName' is set
        if (monitoringEndpointName == null) {
            throw new ApiException("Missing the required parameter 'monitoringEndpointName' when calling getSingleEndpoint(Async)");
        }

        return getSingleEndpointCall(monitoringEndpointName, _callback);

    }


    private ApiResponse<StatsdMonitoringEndpointResponse> getSingleEndpointWithHttpInfo(String monitoringEndpointName) throws ApiException {
        okhttp3.Call localVarCall = getSingleEndpointValidateBeforeCall(monitoringEndpointName, null);
        Type localVarReturnType = new TypeToken<StatsdMonitoringEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleEndpointAsync(String monitoringEndpointName, final ApiCallback<StatsdMonitoringEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleEndpointValidateBeforeCall(monitoringEndpointName, _callback);
        Type localVarReturnType = new TypeToken<StatsdMonitoringEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleEndpointRequestBuilder {
        private final String monitoringEndpointName;

        private GetSingleEndpointRequestBuilder(String monitoringEndpointName) {
            this.monitoringEndpointName = monitoringEndpointName;
        }

        /**
         * Build call for getSingleEndpoint
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleEndpointCall(monitoringEndpointName, _callback);
        }


        /**
         * Execute getSingleEndpoint request
         * @return StatsdMonitoringEndpointResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
         </table>
         */
        public StatsdMonitoringEndpointResponse execute() throws ApiException {
            ApiResponse<StatsdMonitoringEndpointResponse> localVarResp = getSingleEndpointWithHttpInfo(monitoringEndpointName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleEndpoint request with HTTP info returned
         * @return ApiResponse&lt;StatsdMonitoringEndpointResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatsdMonitoringEndpointResponse> executeWithHttpInfo() throws ApiException {
            return getSingleEndpointWithHttpInfo(monitoringEndpointName);
        }

        /**
         * Execute getSingleEndpoint request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatsdMonitoringEndpointResponse> _callback) throws ApiException {
            return getSingleEndpointAsync(monitoringEndpointName, _callback);
        }
    }

    /**
     * Returns a single Monitoring Endpoint
     * 
     * @param monitoringEndpointName Name of the Monitoring Endpoint (required)
     * @return GetSingleEndpointRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleEndpointRequestBuilder getSingleEndpoint(String monitoringEndpointName) throws IllegalArgumentException {
        if (monitoringEndpointName == null) throw new IllegalArgumentException("\"monitoringEndpointName\" is required but got null");
            

        return new GetSingleEndpointRequestBuilder(monitoringEndpointName);
    }
    private okhttp3.Call listAllObjectsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/monitoring-endpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAllObjectsCall(filter, _callback);

    }


    private ApiResponse<MonitoringEndpointListResponse> listAllObjectsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<MonitoringEndpointListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String filter, final ApiCallback<MonitoringEndpointListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<MonitoringEndpointListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private String filter;

        private ListAllObjectsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(filter, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return MonitoringEndpointListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public MonitoringEndpointListResponse execute() throws ApiException {
            ApiResponse<MonitoringEndpointListResponse> localVarResp = listAllObjectsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;MonitoringEndpointListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MonitoringEndpointListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(filter);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MonitoringEndpointListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Monitoring Endpoint objects
     * 
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects() throws IllegalArgumentException {
        return new ListAllObjectsRequestBuilder();
    }
    private okhttp3.Call updateByNameCall(String monitoringEndpointName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/monitoring-endpoints/{monitoring-endpoint-name}"
            .replace("{" + "monitoring-endpoint-name" + "}", localVarApiClient.escapeString(monitoringEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String monitoringEndpointName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'monitoringEndpointName' is set
        if (monitoringEndpointName == null) {
            throw new ApiException("Missing the required parameter 'monitoringEndpointName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(monitoringEndpointName, updateRequest, _callback);

    }


    private ApiResponse<StatsdMonitoringEndpointResponse> updateByNameWithHttpInfo(String monitoringEndpointName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(monitoringEndpointName, updateRequest, null);
        Type localVarReturnType = new TypeToken<StatsdMonitoringEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String monitoringEndpointName, UpdateRequest updateRequest, final ApiCallback<StatsdMonitoringEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(monitoringEndpointName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<StatsdMonitoringEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String monitoringEndpointName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String monitoringEndpointName) {
            this.operations = operations;
            this.monitoringEndpointName = monitoringEndpointName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(monitoringEndpointName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return StatsdMonitoringEndpointResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
         </table>
         */
        public StatsdMonitoringEndpointResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<StatsdMonitoringEndpointResponse> localVarResp = updateByNameWithHttpInfo(monitoringEndpointName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;StatsdMonitoringEndpointResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StatsdMonitoringEndpointResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(monitoringEndpointName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StatsdMonitoringEndpointResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(monitoringEndpointName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Monitoring Endpoint by name
     * 
     * @param monitoringEndpointName Name of the Monitoring Endpoint (required)
     * @param updateRequest Update an existing Monitoring Endpoint (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Monitoring Endpoint does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String monitoringEndpointName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (monitoringEndpointName == null) throw new IllegalArgumentException("\"monitoringEndpointName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, monitoringEndpointName);
    }
}
