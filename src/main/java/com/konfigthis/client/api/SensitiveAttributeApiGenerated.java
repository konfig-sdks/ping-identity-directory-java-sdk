/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddSensitiveAttributeRequest;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInAddProp;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInCompareProp;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInFilterProp;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInModifyProp;
import com.konfigthis.client.model.EnumsensitiveAttributeAllowInReturnedEntriesProp;
import com.konfigthis.client.model.EnumsensitiveAttributeSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.SensitiveAttributeListResponse;
import com.konfigthis.client.model.SensitiveAttributeResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SensitiveAttributeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SensitiveAttributeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SensitiveAttributeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewConfigCall(AddSensitiveAttributeRequest addSensitiveAttributeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSensitiveAttributeRequest;

        // create path and map variables
        String localVarPath = "/sensitive-attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewConfigValidateBeforeCall(AddSensitiveAttributeRequest addSensitiveAttributeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addSensitiveAttributeRequest' is set
        if (addSensitiveAttributeRequest == null) {
            throw new ApiException("Missing the required parameter 'addSensitiveAttributeRequest' when calling addNewConfig(Async)");
        }

        return addNewConfigCall(addSensitiveAttributeRequest, _callback);

    }


    private ApiResponse<SensitiveAttributeResponse> addNewConfigWithHttpInfo(AddSensitiveAttributeRequest addSensitiveAttributeRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(addSensitiveAttributeRequest, null);
        Type localVarReturnType = new TypeToken<SensitiveAttributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewConfigAsync(AddSensitiveAttributeRequest addSensitiveAttributeRequest, final ApiCallback<SensitiveAttributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(addSensitiveAttributeRequest, _callback);
        Type localVarReturnType = new TypeToken<SensitiveAttributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewConfigRequestBuilder {
        private final String attributeName;
        private String description;
        private List<EnumsensitiveAttributeSchemaUrn> schemas;
        private List<String> attributeType;
        private Boolean includeDefaultSensitiveOperationalAttributes;
        private EnumsensitiveAttributeAllowInReturnedEntriesProp allowInReturnedEntries;
        private EnumsensitiveAttributeAllowInFilterProp allowInFilter;
        private EnumsensitiveAttributeAllowInAddProp allowInAdd;
        private EnumsensitiveAttributeAllowInCompareProp allowInCompare;
        private EnumsensitiveAttributeAllowInModifyProp allowInModify;

        private AddNewConfigRequestBuilder(String attributeName) {
            this.attributeName = attributeName;
        }

        /**
         * Set description
         * @param description A description for this Sensitive Attribute (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder schemas(List<EnumsensitiveAttributeSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set attributeType
         * @param attributeType The name(s) or OID(s) of the attribute types for attributes whose values may be considered sensitive. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder attributeType(List<String> attributeType) {
            this.attributeType = attributeType;
            return this;
        }
        
        /**
         * Set includeDefaultSensitiveOperationalAttributes
         * @param includeDefaultSensitiveOperationalAttributes Indicates whether to automatically include any server-generated operational attributes that may contain sensitive data. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder includeDefaultSensitiveOperationalAttributes(Boolean includeDefaultSensitiveOperationalAttributes) {
            this.includeDefaultSensitiveOperationalAttributes = includeDefaultSensitiveOperationalAttributes;
            return this;
        }
        
        /**
         * Set allowInReturnedEntries
         * @param allowInReturnedEntries  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder allowInReturnedEntries(EnumsensitiveAttributeAllowInReturnedEntriesProp allowInReturnedEntries) {
            this.allowInReturnedEntries = allowInReturnedEntries;
            return this;
        }
        
        /**
         * Set allowInFilter
         * @param allowInFilter  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder allowInFilter(EnumsensitiveAttributeAllowInFilterProp allowInFilter) {
            this.allowInFilter = allowInFilter;
            return this;
        }
        
        /**
         * Set allowInAdd
         * @param allowInAdd  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder allowInAdd(EnumsensitiveAttributeAllowInAddProp allowInAdd) {
            this.allowInAdd = allowInAdd;
            return this;
        }
        
        /**
         * Set allowInCompare
         * @param allowInCompare  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder allowInCompare(EnumsensitiveAttributeAllowInCompareProp allowInCompare) {
            this.allowInCompare = allowInCompare;
            return this;
        }
        
        /**
         * Set allowInModify
         * @param allowInModify  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder allowInModify(EnumsensitiveAttributeAllowInModifyProp allowInModify) {
            this.allowInModify = allowInModify;
            return this;
        }
        
        /**
         * Build call for addNewConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Sensitive Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddSensitiveAttributeRequest addSensitiveAttributeRequest = buildBodyParams();
            return addNewConfigCall(addSensitiveAttributeRequest, _callback);
        }

        private AddSensitiveAttributeRequest buildBodyParams() {
            AddSensitiveAttributeRequest addSensitiveAttributeRequest = new AddSensitiveAttributeRequest();
            return addSensitiveAttributeRequest;
        }

        /**
         * Execute addNewConfig request
         * @return SensitiveAttributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Sensitive Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public SensitiveAttributeResponse execute() throws ApiException {
            AddSensitiveAttributeRequest addSensitiveAttributeRequest = buildBodyParams();
            ApiResponse<SensitiveAttributeResponse> localVarResp = addNewConfigWithHttpInfo(addSensitiveAttributeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewConfig request with HTTP info returned
         * @return ApiResponse&lt;SensitiveAttributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Sensitive Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SensitiveAttributeResponse> executeWithHttpInfo() throws ApiException {
            AddSensitiveAttributeRequest addSensitiveAttributeRequest = buildBodyParams();
            return addNewConfigWithHttpInfo(addSensitiveAttributeRequest);
        }

        /**
         * Execute addNewConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Sensitive Attribute already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SensitiveAttributeResponse> _callback) throws ApiException {
            AddSensitiveAttributeRequest addSensitiveAttributeRequest = buildBodyParams();
            return addNewConfigAsync(addSensitiveAttributeRequest, _callback);
        }
    }

    /**
     * Add a new Sensitive Attribute to the config
     * 
     * @param addSensitiveAttributeRequest Create a new Sensitive Attribute in the config (required)
     * @return AddNewConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Sensitive Attribute already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewConfigRequestBuilder addNewConfig(String attributeName) throws IllegalArgumentException {
        if (attributeName == null) throw new IllegalArgumentException("\"attributeName\" is required but got null");
            

        return new AddNewConfigRequestBuilder(attributeName);
    }
    private okhttp3.Call deleteSensitiveAttributeCall(String sensitiveAttributeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensitive-attributes/{sensitive-attribute-name}"
            .replace("{" + "sensitive-attribute-name" + "}", localVarApiClient.escapeString(sensitiveAttributeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSensitiveAttributeValidateBeforeCall(String sensitiveAttributeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensitiveAttributeName' is set
        if (sensitiveAttributeName == null) {
            throw new ApiException("Missing the required parameter 'sensitiveAttributeName' when calling deleteSensitiveAttribute(Async)");
        }

        return deleteSensitiveAttributeCall(sensitiveAttributeName, _callback);

    }


    private ApiResponse<Void> deleteSensitiveAttributeWithHttpInfo(String sensitiveAttributeName) throws ApiException {
        okhttp3.Call localVarCall = deleteSensitiveAttributeValidateBeforeCall(sensitiveAttributeName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSensitiveAttributeAsync(String sensitiveAttributeName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSensitiveAttributeValidateBeforeCall(sensitiveAttributeName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSensitiveAttributeRequestBuilder {
        private final String sensitiveAttributeName;

        private DeleteSensitiveAttributeRequestBuilder(String sensitiveAttributeName) {
            this.sensitiveAttributeName = sensitiveAttributeName;
        }

        /**
         * Build call for deleteSensitiveAttribute
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Sensitive Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSensitiveAttributeCall(sensitiveAttributeName, _callback);
        }


        /**
         * Execute deleteSensitiveAttribute request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Sensitive Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSensitiveAttributeWithHttpInfo(sensitiveAttributeName);
        }

        /**
         * Execute deleteSensitiveAttribute request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Sensitive Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSensitiveAttributeWithHttpInfo(sensitiveAttributeName);
        }

        /**
         * Execute deleteSensitiveAttribute request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Sensitive Attribute cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSensitiveAttributeAsync(sensitiveAttributeName, _callback);
        }
    }

    /**
     * Delete a Sensitive Attribute
     * 
     * @param sensitiveAttributeName Name of the Sensitive Attribute (required)
     * @return DeleteSensitiveAttributeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Sensitive Attribute cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSensitiveAttributeRequestBuilder deleteSensitiveAttribute(String sensitiveAttributeName) throws IllegalArgumentException {
        if (sensitiveAttributeName == null) throw new IllegalArgumentException("\"sensitiveAttributeName\" is required but got null");
            

        return new DeleteSensitiveAttributeRequestBuilder(sensitiveAttributeName);
    }
    private okhttp3.Call getAllCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensitive-attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return getAllCall(filter, _callback);

    }


    private ApiResponse<SensitiveAttributeListResponse> getAllWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<SensitiveAttributeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String filter, final ApiCallback<SensitiveAttributeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<SensitiveAttributeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private String filter;

        private GetAllRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(filter, _callback);
        }


        /**
         * Execute getAll request
         * @return SensitiveAttributeListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public SensitiveAttributeListResponse execute() throws ApiException {
            ApiResponse<SensitiveAttributeListResponse> localVarResp = getAllWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;SensitiveAttributeListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SensitiveAttributeListResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(filter);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SensitiveAttributeListResponse> _callback) throws ApiException {
            return getAllAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Sensitive Attribute objects
     * 
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getSingleCall(String sensitiveAttributeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sensitive-attributes/{sensitive-attribute-name}"
            .replace("{" + "sensitive-attribute-name" + "}", localVarApiClient.escapeString(sensitiveAttributeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String sensitiveAttributeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensitiveAttributeName' is set
        if (sensitiveAttributeName == null) {
            throw new ApiException("Missing the required parameter 'sensitiveAttributeName' when calling getSingle(Async)");
        }

        return getSingleCall(sensitiveAttributeName, _callback);

    }


    private ApiResponse<SensitiveAttributeResponse> getSingleWithHttpInfo(String sensitiveAttributeName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(sensitiveAttributeName, null);
        Type localVarReturnType = new TypeToken<SensitiveAttributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String sensitiveAttributeName, final ApiCallback<SensitiveAttributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(sensitiveAttributeName, _callback);
        Type localVarReturnType = new TypeToken<SensitiveAttributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String sensitiveAttributeName;

        private GetSingleRequestBuilder(String sensitiveAttributeName) {
            this.sensitiveAttributeName = sensitiveAttributeName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(sensitiveAttributeName, _callback);
        }


        /**
         * Execute getSingle request
         * @return SensitiveAttributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public SensitiveAttributeResponse execute() throws ApiException {
            ApiResponse<SensitiveAttributeResponse> localVarResp = getSingleWithHttpInfo(sensitiveAttributeName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;SensitiveAttributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SensitiveAttributeResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(sensitiveAttributeName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SensitiveAttributeResponse> _callback) throws ApiException {
            return getSingleAsync(sensitiveAttributeName, _callback);
        }
    }

    /**
     * Returns a single Sensitive Attribute
     * 
     * @param sensitiveAttributeName Name of the Sensitive Attribute (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String sensitiveAttributeName) throws IllegalArgumentException {
        if (sensitiveAttributeName == null) throw new IllegalArgumentException("\"sensitiveAttributeName\" is required but got null");
            

        return new GetSingleRequestBuilder(sensitiveAttributeName);
    }
    private okhttp3.Call updateByNameCall(String sensitiveAttributeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/sensitive-attributes/{sensitive-attribute-name}"
            .replace("{" + "sensitive-attribute-name" + "}", localVarApiClient.escapeString(sensitiveAttributeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String sensitiveAttributeName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sensitiveAttributeName' is set
        if (sensitiveAttributeName == null) {
            throw new ApiException("Missing the required parameter 'sensitiveAttributeName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(sensitiveAttributeName, updateRequest, _callback);

    }


    private ApiResponse<SensitiveAttributeResponse> updateByNameWithHttpInfo(String sensitiveAttributeName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(sensitiveAttributeName, updateRequest, null);
        Type localVarReturnType = new TypeToken<SensitiveAttributeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String sensitiveAttributeName, UpdateRequest updateRequest, final ApiCallback<SensitiveAttributeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(sensitiveAttributeName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<SensitiveAttributeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String sensitiveAttributeName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String sensitiveAttributeName) {
            this.operations = operations;
            this.sensitiveAttributeName = sensitiveAttributeName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(sensitiveAttributeName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return SensitiveAttributeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public SensitiveAttributeResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<SensitiveAttributeResponse> localVarResp = updateByNameWithHttpInfo(sensitiveAttributeName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;SensitiveAttributeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SensitiveAttributeResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(sensitiveAttributeName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SensitiveAttributeResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(sensitiveAttributeName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Sensitive Attribute by name
     * 
     * @param sensitiveAttributeName Name of the Sensitive Attribute (required)
     * @param updateRequest Update an existing Sensitive Attribute (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Sensitive Attribute does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String sensitiveAttributeName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (sensitiveAttributeName == null) throw new IllegalArgumentException("\"sensitiveAttributeName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, sensitiveAttributeName);
    }
}
