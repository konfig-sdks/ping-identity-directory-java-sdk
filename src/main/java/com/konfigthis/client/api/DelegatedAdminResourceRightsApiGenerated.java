/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddDelegatedAdminResourceRightsRequest;
import com.konfigthis.client.model.DelegatedAdminResourceRightsListResponse;
import com.konfigthis.client.model.DelegatedAdminResourceRightsResponse;
import com.konfigthis.client.model.EnumdelegatedAdminResourceRightsAdminPermissionProp;
import com.konfigthis.client.model.EnumdelegatedAdminResourceRightsAdminScopeProp;
import com.konfigthis.client.model.EnumdelegatedAdminResourceRightsSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DelegatedAdminResourceRightsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DelegatedAdminResourceRightsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DelegatedAdminResourceRightsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewToConfigCall(String delegatedAdminRightsName, AddDelegatedAdminResourceRightsRequest addDelegatedAdminResourceRightsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDelegatedAdminResourceRightsRequest;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights"
            .replace("{" + "delegated-admin-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminRightsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewToConfigValidateBeforeCall(String delegatedAdminRightsName, AddDelegatedAdminResourceRightsRequest addDelegatedAdminResourceRightsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminRightsName' is set
        if (delegatedAdminRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminRightsName' when calling addNewToConfig(Async)");
        }

        // verify the required parameter 'addDelegatedAdminResourceRightsRequest' is set
        if (addDelegatedAdminResourceRightsRequest == null) {
            throw new ApiException("Missing the required parameter 'addDelegatedAdminResourceRightsRequest' when calling addNewToConfig(Async)");
        }

        return addNewToConfigCall(delegatedAdminRightsName, addDelegatedAdminResourceRightsRequest, _callback);

    }


    private ApiResponse<DelegatedAdminResourceRightsResponse> addNewToConfigWithHttpInfo(String delegatedAdminRightsName, AddDelegatedAdminResourceRightsRequest addDelegatedAdminResourceRightsRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewToConfigValidateBeforeCall(delegatedAdminRightsName, addDelegatedAdminResourceRightsRequest, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminResourceRightsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewToConfigAsync(String delegatedAdminRightsName, AddDelegatedAdminResourceRightsRequest addDelegatedAdminResourceRightsRequest, final ApiCallback<DelegatedAdminResourceRightsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewToConfigValidateBeforeCall(delegatedAdminRightsName, addDelegatedAdminResourceRightsRequest, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminResourceRightsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewToConfigRequestBuilder {
        private final String restResourceType;
        private final String delegatedAdminRightsName;
        private String description;
        private List<EnumdelegatedAdminResourceRightsSchemaUrn> schemas;
        private Boolean enabled;
        private List<EnumdelegatedAdminResourceRightsAdminPermissionProp> adminPermission;
        private EnumdelegatedAdminResourceRightsAdminScopeProp adminScope;
        private List<String> resourceSubtree;
        private List<String> resourcesInGroup;

        private AddNewToConfigRequestBuilder(String restResourceType, String delegatedAdminRightsName) {
            this.restResourceType = restResourceType;
            this.delegatedAdminRightsName = delegatedAdminRightsName;
        }

        /**
         * Set description
         * @param description A description for this Delegated Admin Resource Rights (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder schemas(List<EnumdelegatedAdminResourceRightsSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Indicates whether these Delegated Admin Resource Rights are enabled. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set adminPermission
         * @param adminPermission  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder adminPermission(List<EnumdelegatedAdminResourceRightsAdminPermissionProp> adminPermission) {
            this.adminPermission = adminPermission;
            return this;
        }
        
        /**
         * Set adminScope
         * @param adminScope  (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder adminScope(EnumdelegatedAdminResourceRightsAdminScopeProp adminScope) {
            this.adminScope = adminScope;
            return this;
        }
        
        /**
         * Set resourceSubtree
         * @param resourceSubtree Specifies subtrees within the search base whose entries can be managed by the administrator(s). The admin-scope must be set to resources-in-specific-subtrees. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder resourceSubtree(List<String> resourceSubtree) {
            this.resourceSubtree = resourceSubtree;
            return this;
        }
        
        /**
         * Set resourcesInGroup
         * @param resourcesInGroup Specifies groups whose members can be managed by the administrator(s). The admin-scope must be set to resources-in-specific-groups. (optional)
         * @return AddNewToConfigRequestBuilder
         */
        public AddNewToConfigRequestBuilder resourcesInGroup(List<String> resourcesInGroup) {
            this.resourcesInGroup = resourcesInGroup;
            return this;
        }
        
        /**
         * Build call for addNewToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Resource Rights already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddDelegatedAdminResourceRightsRequest addDelegatedAdminResourceRightsRequest = buildBodyParams();
            return addNewToConfigCall(delegatedAdminRightsName, addDelegatedAdminResourceRightsRequest, _callback);
        }

        private AddDelegatedAdminResourceRightsRequest buildBodyParams() {
            AddDelegatedAdminResourceRightsRequest addDelegatedAdminResourceRightsRequest = new AddDelegatedAdminResourceRightsRequest();
            return addDelegatedAdminResourceRightsRequest;
        }

        /**
         * Execute addNewToConfig request
         * @return DelegatedAdminResourceRightsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Resource Rights already exists </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminResourceRightsResponse execute() throws ApiException {
            AddDelegatedAdminResourceRightsRequest addDelegatedAdminResourceRightsRequest = buildBodyParams();
            ApiResponse<DelegatedAdminResourceRightsResponse> localVarResp = addNewToConfigWithHttpInfo(delegatedAdminRightsName, addDelegatedAdminResourceRightsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewToConfig request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminResourceRightsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Resource Rights already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminResourceRightsResponse> executeWithHttpInfo() throws ApiException {
            AddDelegatedAdminResourceRightsRequest addDelegatedAdminResourceRightsRequest = buildBodyParams();
            return addNewToConfigWithHttpInfo(delegatedAdminRightsName, addDelegatedAdminResourceRightsRequest);
        }

        /**
         * Execute addNewToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Resource Rights already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminResourceRightsResponse> _callback) throws ApiException {
            AddDelegatedAdminResourceRightsRequest addDelegatedAdminResourceRightsRequest = buildBodyParams();
            return addNewToConfigAsync(delegatedAdminRightsName, addDelegatedAdminResourceRightsRequest, _callback);
        }
    }

    /**
     * Add a new Delegated Admin Resource Rights to the config
     * 
     * @param delegatedAdminRightsName Name of the Delegated Admin Rights (required)
     * @param addDelegatedAdminResourceRightsRequest Create a new Delegated Admin Resource Rights in the config (required)
     * @return AddNewToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Delegated Admin Resource Rights already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewToConfigRequestBuilder addNewToConfig(String restResourceType, String delegatedAdminRightsName) throws IllegalArgumentException {
        if (restResourceType == null) throw new IllegalArgumentException("\"restResourceType\" is required but got null");
            

        if (delegatedAdminRightsName == null) throw new IllegalArgumentException("\"delegatedAdminRightsName\" is required but got null");
            

        return new AddNewToConfigRequestBuilder(restResourceType, delegatedAdminRightsName);
    }
    private okhttp3.Call deleteResourceRightsCall(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}"
            .replace("{" + "delegated-admin-resource-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminResourceRightsName.toString()))
            .replace("{" + "delegated-admin-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminRightsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceRightsValidateBeforeCall(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminResourceRightsName' is set
        if (delegatedAdminResourceRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminResourceRightsName' when calling deleteResourceRights(Async)");
        }

        // verify the required parameter 'delegatedAdminRightsName' is set
        if (delegatedAdminRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminRightsName' when calling deleteResourceRights(Async)");
        }

        return deleteResourceRightsCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, _callback);

    }


    private ApiResponse<Void> deleteResourceRightsWithHttpInfo(String delegatedAdminResourceRightsName, String delegatedAdminRightsName) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceRightsValidateBeforeCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteResourceRightsAsync(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceRightsValidateBeforeCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteResourceRightsRequestBuilder {
        private final String delegatedAdminResourceRightsName;
        private final String delegatedAdminRightsName;

        private DeleteResourceRightsRequestBuilder(String delegatedAdminResourceRightsName, String delegatedAdminRightsName) {
            this.delegatedAdminResourceRightsName = delegatedAdminResourceRightsName;
            this.delegatedAdminRightsName = delegatedAdminRightsName;
        }

        /**
         * Build call for deleteResourceRights
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Resource Rights cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteResourceRightsCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, _callback);
        }


        /**
         * Execute deleteResourceRights request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Resource Rights cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteResourceRightsWithHttpInfo(delegatedAdminResourceRightsName, delegatedAdminRightsName);
        }

        /**
         * Execute deleteResourceRights request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Resource Rights cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteResourceRightsWithHttpInfo(delegatedAdminResourceRightsName, delegatedAdminRightsName);
        }

        /**
         * Execute deleteResourceRights request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Delegated Admin Resource Rights cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteResourceRightsAsync(delegatedAdminResourceRightsName, delegatedAdminRightsName, _callback);
        }
    }

    /**
     * Delete a Delegated Admin Resource Rights
     * 
     * @param delegatedAdminResourceRightsName Name of the Delegated Admin Resource Rights (required)
     * @param delegatedAdminRightsName Name of the Delegated Admin Rights (required)
     * @return DeleteResourceRightsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Delegated Admin Resource Rights cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteResourceRightsRequestBuilder deleteResourceRights(String delegatedAdminResourceRightsName, String delegatedAdminRightsName) throws IllegalArgumentException {
        if (delegatedAdminResourceRightsName == null) throw new IllegalArgumentException("\"delegatedAdminResourceRightsName\" is required but got null");
            

        if (delegatedAdminRightsName == null) throw new IllegalArgumentException("\"delegatedAdminRightsName\" is required but got null");
            

        return new DeleteResourceRightsRequestBuilder(delegatedAdminResourceRightsName, delegatedAdminRightsName);
    }
    private okhttp3.Call getSingleResourceRightsCall(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}"
            .replace("{" + "delegated-admin-resource-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminResourceRightsName.toString()))
            .replace("{" + "delegated-admin-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminRightsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleResourceRightsValidateBeforeCall(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminResourceRightsName' is set
        if (delegatedAdminResourceRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminResourceRightsName' when calling getSingleResourceRights(Async)");
        }

        // verify the required parameter 'delegatedAdminRightsName' is set
        if (delegatedAdminRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminRightsName' when calling getSingleResourceRights(Async)");
        }

        return getSingleResourceRightsCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, _callback);

    }


    private ApiResponse<DelegatedAdminResourceRightsResponse> getSingleResourceRightsWithHttpInfo(String delegatedAdminResourceRightsName, String delegatedAdminRightsName) throws ApiException {
        okhttp3.Call localVarCall = getSingleResourceRightsValidateBeforeCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminResourceRightsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleResourceRightsAsync(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, final ApiCallback<DelegatedAdminResourceRightsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleResourceRightsValidateBeforeCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminResourceRightsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleResourceRightsRequestBuilder {
        private final String delegatedAdminResourceRightsName;
        private final String delegatedAdminRightsName;

        private GetSingleResourceRightsRequestBuilder(String delegatedAdminResourceRightsName, String delegatedAdminRightsName) {
            this.delegatedAdminResourceRightsName = delegatedAdminResourceRightsName;
            this.delegatedAdminRightsName = delegatedAdminRightsName;
        }

        /**
         * Build call for getSingleResourceRights
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleResourceRightsCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, _callback);
        }


        /**
         * Execute getSingleResourceRights request
         * @return DelegatedAdminResourceRightsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminResourceRightsResponse execute() throws ApiException {
            ApiResponse<DelegatedAdminResourceRightsResponse> localVarResp = getSingleResourceRightsWithHttpInfo(delegatedAdminResourceRightsName, delegatedAdminRightsName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleResourceRights request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminResourceRightsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminResourceRightsResponse> executeWithHttpInfo() throws ApiException {
            return getSingleResourceRightsWithHttpInfo(delegatedAdminResourceRightsName, delegatedAdminRightsName);
        }

        /**
         * Execute getSingleResourceRights request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminResourceRightsResponse> _callback) throws ApiException {
            return getSingleResourceRightsAsync(delegatedAdminResourceRightsName, delegatedAdminRightsName, _callback);
        }
    }

    /**
     * Returns a single Delegated Admin Resource Rights
     * 
     * @param delegatedAdminResourceRightsName Name of the Delegated Admin Resource Rights (required)
     * @param delegatedAdminRightsName Name of the Delegated Admin Rights (required)
     * @return GetSingleResourceRightsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleResourceRightsRequestBuilder getSingleResourceRights(String delegatedAdminResourceRightsName, String delegatedAdminRightsName) throws IllegalArgumentException {
        if (delegatedAdminResourceRightsName == null) throw new IllegalArgumentException("\"delegatedAdminResourceRightsName\" is required but got null");
            

        if (delegatedAdminRightsName == null) throw new IllegalArgumentException("\"delegatedAdminRightsName\" is required but got null");
            

        return new GetSingleResourceRightsRequestBuilder(delegatedAdminResourceRightsName, delegatedAdminRightsName);
    }
    private okhttp3.Call listAllObjectsCall(String delegatedAdminRightsName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights"
            .replace("{" + "delegated-admin-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminRightsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String delegatedAdminRightsName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminRightsName' is set
        if (delegatedAdminRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminRightsName' when calling listAllObjects(Async)");
        }

        return listAllObjectsCall(delegatedAdminRightsName, filter, _callback);

    }


    private ApiResponse<DelegatedAdminResourceRightsListResponse> listAllObjectsWithHttpInfo(String delegatedAdminRightsName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(delegatedAdminRightsName, filter, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminResourceRightsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String delegatedAdminRightsName, String filter, final ApiCallback<DelegatedAdminResourceRightsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(delegatedAdminRightsName, filter, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminResourceRightsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private final String delegatedAdminRightsName;
        private String filter;

        private ListAllObjectsRequestBuilder(String delegatedAdminRightsName) {
            this.delegatedAdminRightsName = delegatedAdminRightsName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(delegatedAdminRightsName, filter, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return DelegatedAdminResourceRightsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminResourceRightsListResponse execute() throws ApiException {
            ApiResponse<DelegatedAdminResourceRightsListResponse> localVarResp = listAllObjectsWithHttpInfo(delegatedAdminRightsName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminResourceRightsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminResourceRightsListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(delegatedAdminRightsName, filter);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminResourceRightsListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(delegatedAdminRightsName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Delegated Admin Resource Rights objects
     * 
     * @param delegatedAdminRightsName Name of the Delegated Admin Rights (required)
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects(String delegatedAdminRightsName) throws IllegalArgumentException {
        if (delegatedAdminRightsName == null) throw new IllegalArgumentException("\"delegatedAdminRightsName\" is required but got null");
            

        return new ListAllObjectsRequestBuilder(delegatedAdminRightsName);
    }
    private okhttp3.Call updateByNameCall(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/delegated-admin-rights/{delegated-admin-rights-name}/delegated-admin-resource-rights/{delegated-admin-resource-rights-name}"
            .replace("{" + "delegated-admin-resource-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminResourceRightsName.toString()))
            .replace("{" + "delegated-admin-rights-name" + "}", localVarApiClient.escapeString(delegatedAdminRightsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'delegatedAdminResourceRightsName' is set
        if (delegatedAdminResourceRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminResourceRightsName' when calling updateByName(Async)");
        }

        // verify the required parameter 'delegatedAdminRightsName' is set
        if (delegatedAdminRightsName == null) {
            throw new ApiException("Missing the required parameter 'delegatedAdminRightsName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, updateRequest, _callback);

    }


    private ApiResponse<DelegatedAdminResourceRightsResponse> updateByNameWithHttpInfo(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, updateRequest, null);
        Type localVarReturnType = new TypeToken<DelegatedAdminResourceRightsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String delegatedAdminResourceRightsName, String delegatedAdminRightsName, UpdateRequest updateRequest, final ApiCallback<DelegatedAdminResourceRightsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<DelegatedAdminResourceRightsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String delegatedAdminResourceRightsName;
        private final String delegatedAdminRightsName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String delegatedAdminResourceRightsName, String delegatedAdminRightsName) {
            this.operations = operations;
            this.delegatedAdminResourceRightsName = delegatedAdminResourceRightsName;
            this.delegatedAdminRightsName = delegatedAdminRightsName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(delegatedAdminResourceRightsName, delegatedAdminRightsName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return DelegatedAdminResourceRightsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DelegatedAdminResourceRightsResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<DelegatedAdminResourceRightsResponse> localVarResp = updateByNameWithHttpInfo(delegatedAdminResourceRightsName, delegatedAdminRightsName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;DelegatedAdminResourceRightsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DelegatedAdminResourceRightsResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(delegatedAdminResourceRightsName, delegatedAdminRightsName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DelegatedAdminResourceRightsResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(delegatedAdminResourceRightsName, delegatedAdminRightsName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Delegated Admin Resource Rights by name
     * 
     * @param delegatedAdminResourceRightsName Name of the Delegated Admin Resource Rights (required)
     * @param delegatedAdminRightsName Name of the Delegated Admin Rights (required)
     * @param updateRequest Update an existing Delegated Admin Resource Rights (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Delegated Admin Resource Rights does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String delegatedAdminResourceRightsName, String delegatedAdminRightsName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (delegatedAdminResourceRightsName == null) throw new IllegalArgumentException("\"delegatedAdminResourceRightsName\" is required but got null");
            

        if (delegatedAdminRightsName == null) throw new IllegalArgumentException("\"delegatedAdminRightsName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, delegatedAdminResourceRightsName, delegatedAdminRightsName);
    }
}
