/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddDebugTargetRequest;
import com.konfigthis.client.model.DebugTargetListResponse;
import com.konfigthis.client.model.DebugTargetResponse;
import com.konfigthis.client.model.EnumdebugTargetDebugCategoryProp;
import com.konfigthis.client.model.EnumdebugTargetDebugLevelProp;
import com.konfigthis.client.model.EnumdebugTargetSchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DebugTargetApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DebugTargetApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DebugTargetApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewDebugTargetCall(String logPublisherName, AddDebugTargetRequest addDebugTargetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addDebugTargetRequest;

        // create path and map variables
        String localVarPath = "/log-publishers/{log-publisher-name}/debug-targets"
            .replace("{" + "log-publisher-name" + "}", localVarApiClient.escapeString(logPublisherName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewDebugTargetValidateBeforeCall(String logPublisherName, AddDebugTargetRequest addDebugTargetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logPublisherName' is set
        if (logPublisherName == null) {
            throw new ApiException("Missing the required parameter 'logPublisherName' when calling addNewDebugTarget(Async)");
        }

        // verify the required parameter 'addDebugTargetRequest' is set
        if (addDebugTargetRequest == null) {
            throw new ApiException("Missing the required parameter 'addDebugTargetRequest' when calling addNewDebugTarget(Async)");
        }

        return addNewDebugTargetCall(logPublisherName, addDebugTargetRequest, _callback);

    }


    private ApiResponse<DebugTargetResponse> addNewDebugTargetWithHttpInfo(String logPublisherName, AddDebugTargetRequest addDebugTargetRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewDebugTargetValidateBeforeCall(logPublisherName, addDebugTargetRequest, null);
        Type localVarReturnType = new TypeToken<DebugTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewDebugTargetAsync(String logPublisherName, AddDebugTargetRequest addDebugTargetRequest, final ApiCallback<DebugTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewDebugTargetValidateBeforeCall(logPublisherName, addDebugTargetRequest, _callback);
        Type localVarReturnType = new TypeToken<DebugTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewDebugTargetRequestBuilder {
        private final String targetName;
        private final String logPublisherName;
        private String description;
        private List<EnumdebugTargetSchemaUrn> schemas;
        private String debugScope;
        private EnumdebugTargetDebugLevelProp debugLevel;
        private List<EnumdebugTargetDebugCategoryProp> debugCategory;
        private Boolean omitMethodEntryArguments;
        private Boolean omitMethodReturnValue;
        private Boolean includeThrowableCause;
        private Integer throwableStackFrames;

        private AddNewDebugTargetRequestBuilder(String targetName, String logPublisherName) {
            this.targetName = targetName;
            this.logPublisherName = logPublisherName;
        }

        /**
         * Set description
         * @param description A description for this Debug Target (optional)
         * @return AddNewDebugTargetRequestBuilder
         */
        public AddNewDebugTargetRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewDebugTargetRequestBuilder
         */
        public AddNewDebugTargetRequestBuilder schemas(List<EnumdebugTargetSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set debugScope
         * @param debugScope Specifies the fully-qualified Java package, class, or method affected by the settings in this target definition. Use the number character (#) to separate the class name and the method name (that is, com.unboundid.directory.server.core.DirectoryServer#startUp). (optional)
         * @return AddNewDebugTargetRequestBuilder
         */
        public AddNewDebugTargetRequestBuilder debugScope(String debugScope) {
            this.debugScope = debugScope;
            return this;
        }
        
        /**
         * Set debugLevel
         * @param debugLevel  (optional)
         * @return AddNewDebugTargetRequestBuilder
         */
        public AddNewDebugTargetRequestBuilder debugLevel(EnumdebugTargetDebugLevelProp debugLevel) {
            this.debugLevel = debugLevel;
            return this;
        }
        
        /**
         * Set debugCategory
         * @param debugCategory  (optional)
         * @return AddNewDebugTargetRequestBuilder
         */
        public AddNewDebugTargetRequestBuilder debugCategory(List<EnumdebugTargetDebugCategoryProp> debugCategory) {
            this.debugCategory = debugCategory;
            return this;
        }
        
        /**
         * Set omitMethodEntryArguments
         * @param omitMethodEntryArguments Specifies the property to indicate whether to include method arguments in debug messages. (optional)
         * @return AddNewDebugTargetRequestBuilder
         */
        public AddNewDebugTargetRequestBuilder omitMethodEntryArguments(Boolean omitMethodEntryArguments) {
            this.omitMethodEntryArguments = omitMethodEntryArguments;
            return this;
        }
        
        /**
         * Set omitMethodReturnValue
         * @param omitMethodReturnValue Specifies the property to indicate whether to include the return value in debug messages. (optional)
         * @return AddNewDebugTargetRequestBuilder
         */
        public AddNewDebugTargetRequestBuilder omitMethodReturnValue(Boolean omitMethodReturnValue) {
            this.omitMethodReturnValue = omitMethodReturnValue;
            return this;
        }
        
        /**
         * Set includeThrowableCause
         * @param includeThrowableCause Specifies the property to indicate whether to include the cause of exceptions in exception thrown and caught messages. (optional)
         * @return AddNewDebugTargetRequestBuilder
         */
        public AddNewDebugTargetRequestBuilder includeThrowableCause(Boolean includeThrowableCause) {
            this.includeThrowableCause = includeThrowableCause;
            return this;
        }
        
        /**
         * Set throwableStackFrames
         * @param throwableStackFrames Specifies the property to indicate the number of stack frames to include in the stack trace for method entry and exception thrown messages. (optional)
         * @return AddNewDebugTargetRequestBuilder
         */
        public AddNewDebugTargetRequestBuilder throwableStackFrames(Integer throwableStackFrames) {
            this.throwableStackFrames = throwableStackFrames;
            return this;
        }
        
        /**
         * Build call for addNewDebugTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Debug Target already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddDebugTargetRequest addDebugTargetRequest = buildBodyParams();
            return addNewDebugTargetCall(logPublisherName, addDebugTargetRequest, _callback);
        }

        private AddDebugTargetRequest buildBodyParams() {
            AddDebugTargetRequest addDebugTargetRequest = new AddDebugTargetRequest();
            return addDebugTargetRequest;
        }

        /**
         * Execute addNewDebugTarget request
         * @return DebugTargetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Debug Target already exists </td><td>  -  </td></tr>
         </table>
         */
        public DebugTargetResponse execute() throws ApiException {
            AddDebugTargetRequest addDebugTargetRequest = buildBodyParams();
            ApiResponse<DebugTargetResponse> localVarResp = addNewDebugTargetWithHttpInfo(logPublisherName, addDebugTargetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewDebugTarget request with HTTP info returned
         * @return ApiResponse&lt;DebugTargetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Debug Target already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DebugTargetResponse> executeWithHttpInfo() throws ApiException {
            AddDebugTargetRequest addDebugTargetRequest = buildBodyParams();
            return addNewDebugTargetWithHttpInfo(logPublisherName, addDebugTargetRequest);
        }

        /**
         * Execute addNewDebugTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Debug Target already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DebugTargetResponse> _callback) throws ApiException {
            AddDebugTargetRequest addDebugTargetRequest = buildBodyParams();
            return addNewDebugTargetAsync(logPublisherName, addDebugTargetRequest, _callback);
        }
    }

    /**
     * Add a new Debug Target to the config
     * 
     * @param logPublisherName Name of the Log Publisher (required)
     * @param addDebugTargetRequest Create a new Debug Target in the config (required)
     * @return AddNewDebugTargetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Debug Target already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewDebugTargetRequestBuilder addNewDebugTarget(String targetName, String logPublisherName) throws IllegalArgumentException {
        if (targetName == null) throw new IllegalArgumentException("\"targetName\" is required but got null");
            

        if (logPublisherName == null) throw new IllegalArgumentException("\"logPublisherName\" is required but got null");
            

        return new AddNewDebugTargetRequestBuilder(targetName, logPublisherName);
    }
    private okhttp3.Call deleteDebugTargetCall(String debugTargetName, String logPublisherName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}"
            .replace("{" + "debug-target-name" + "}", localVarApiClient.escapeString(debugTargetName.toString()))
            .replace("{" + "log-publisher-name" + "}", localVarApiClient.escapeString(logPublisherName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDebugTargetValidateBeforeCall(String debugTargetName, String logPublisherName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'debugTargetName' is set
        if (debugTargetName == null) {
            throw new ApiException("Missing the required parameter 'debugTargetName' when calling deleteDebugTarget(Async)");
        }

        // verify the required parameter 'logPublisherName' is set
        if (logPublisherName == null) {
            throw new ApiException("Missing the required parameter 'logPublisherName' when calling deleteDebugTarget(Async)");
        }

        return deleteDebugTargetCall(debugTargetName, logPublisherName, _callback);

    }


    private ApiResponse<Void> deleteDebugTargetWithHttpInfo(String debugTargetName, String logPublisherName) throws ApiException {
        okhttp3.Call localVarCall = deleteDebugTargetValidateBeforeCall(debugTargetName, logPublisherName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDebugTargetAsync(String debugTargetName, String logPublisherName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDebugTargetValidateBeforeCall(debugTargetName, logPublisherName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDebugTargetRequestBuilder {
        private final String debugTargetName;
        private final String logPublisherName;

        private DeleteDebugTargetRequestBuilder(String debugTargetName, String logPublisherName) {
            this.debugTargetName = debugTargetName;
            this.logPublisherName = logPublisherName;
        }

        /**
         * Build call for deleteDebugTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Debug Target cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDebugTargetCall(debugTargetName, logPublisherName, _callback);
        }


        /**
         * Execute deleteDebugTarget request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Debug Target cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDebugTargetWithHttpInfo(debugTargetName, logPublisherName);
        }

        /**
         * Execute deleteDebugTarget request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Debug Target cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDebugTargetWithHttpInfo(debugTargetName, logPublisherName);
        }

        /**
         * Execute deleteDebugTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Debug Target cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDebugTargetAsync(debugTargetName, logPublisherName, _callback);
        }
    }

    /**
     * Delete a Debug Target
     * 
     * @param debugTargetName Name of the Debug Target (required)
     * @param logPublisherName Name of the Log Publisher (required)
     * @return DeleteDebugTargetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Debug Target cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDebugTargetRequestBuilder deleteDebugTarget(String debugTargetName, String logPublisherName) throws IllegalArgumentException {
        if (debugTargetName == null) throw new IllegalArgumentException("\"debugTargetName\" is required but got null");
            

        if (logPublisherName == null) throw new IllegalArgumentException("\"logPublisherName\" is required but got null");
            

        return new DeleteDebugTargetRequestBuilder(debugTargetName, logPublisherName);
    }
    private okhttp3.Call getSingleDebugTargetCall(String debugTargetName, String logPublisherName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}"
            .replace("{" + "debug-target-name" + "}", localVarApiClient.escapeString(debugTargetName.toString()))
            .replace("{" + "log-publisher-name" + "}", localVarApiClient.escapeString(logPublisherName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleDebugTargetValidateBeforeCall(String debugTargetName, String logPublisherName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'debugTargetName' is set
        if (debugTargetName == null) {
            throw new ApiException("Missing the required parameter 'debugTargetName' when calling getSingleDebugTarget(Async)");
        }

        // verify the required parameter 'logPublisherName' is set
        if (logPublisherName == null) {
            throw new ApiException("Missing the required parameter 'logPublisherName' when calling getSingleDebugTarget(Async)");
        }

        return getSingleDebugTargetCall(debugTargetName, logPublisherName, _callback);

    }


    private ApiResponse<DebugTargetResponse> getSingleDebugTargetWithHttpInfo(String debugTargetName, String logPublisherName) throws ApiException {
        okhttp3.Call localVarCall = getSingleDebugTargetValidateBeforeCall(debugTargetName, logPublisherName, null);
        Type localVarReturnType = new TypeToken<DebugTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleDebugTargetAsync(String debugTargetName, String logPublisherName, final ApiCallback<DebugTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleDebugTargetValidateBeforeCall(debugTargetName, logPublisherName, _callback);
        Type localVarReturnType = new TypeToken<DebugTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleDebugTargetRequestBuilder {
        private final String debugTargetName;
        private final String logPublisherName;

        private GetSingleDebugTargetRequestBuilder(String debugTargetName, String logPublisherName) {
            this.debugTargetName = debugTargetName;
            this.logPublisherName = logPublisherName;
        }

        /**
         * Build call for getSingleDebugTarget
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleDebugTargetCall(debugTargetName, logPublisherName, _callback);
        }


        /**
         * Execute getSingleDebugTarget request
         * @return DebugTargetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DebugTargetResponse execute() throws ApiException {
            ApiResponse<DebugTargetResponse> localVarResp = getSingleDebugTargetWithHttpInfo(debugTargetName, logPublisherName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleDebugTarget request with HTTP info returned
         * @return ApiResponse&lt;DebugTargetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DebugTargetResponse> executeWithHttpInfo() throws ApiException {
            return getSingleDebugTargetWithHttpInfo(debugTargetName, logPublisherName);
        }

        /**
         * Execute getSingleDebugTarget request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DebugTargetResponse> _callback) throws ApiException {
            return getSingleDebugTargetAsync(debugTargetName, logPublisherName, _callback);
        }
    }

    /**
     * Returns a single Debug Target
     * 
     * @param debugTargetName Name of the Debug Target (required)
     * @param logPublisherName Name of the Log Publisher (required)
     * @return GetSingleDebugTargetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleDebugTargetRequestBuilder getSingleDebugTarget(String debugTargetName, String logPublisherName) throws IllegalArgumentException {
        if (debugTargetName == null) throw new IllegalArgumentException("\"debugTargetName\" is required but got null");
            

        if (logPublisherName == null) throw new IllegalArgumentException("\"logPublisherName\" is required but got null");
            

        return new GetSingleDebugTargetRequestBuilder(debugTargetName, logPublisherName);
    }
    private okhttp3.Call listAllDebugTargetsCall(String logPublisherName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/log-publishers/{log-publisher-name}/debug-targets"
            .replace("{" + "log-publisher-name" + "}", localVarApiClient.escapeString(logPublisherName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllDebugTargetsValidateBeforeCall(String logPublisherName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'logPublisherName' is set
        if (logPublisherName == null) {
            throw new ApiException("Missing the required parameter 'logPublisherName' when calling listAllDebugTargets(Async)");
        }

        return listAllDebugTargetsCall(logPublisherName, filter, _callback);

    }


    private ApiResponse<DebugTargetListResponse> listAllDebugTargetsWithHttpInfo(String logPublisherName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllDebugTargetsValidateBeforeCall(logPublisherName, filter, null);
        Type localVarReturnType = new TypeToken<DebugTargetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllDebugTargetsAsync(String logPublisherName, String filter, final ApiCallback<DebugTargetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllDebugTargetsValidateBeforeCall(logPublisherName, filter, _callback);
        Type localVarReturnType = new TypeToken<DebugTargetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllDebugTargetsRequestBuilder {
        private final String logPublisherName;
        private String filter;

        private ListAllDebugTargetsRequestBuilder(String logPublisherName) {
            this.logPublisherName = logPublisherName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllDebugTargetsRequestBuilder
         */
        public ListAllDebugTargetsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllDebugTargets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllDebugTargetsCall(logPublisherName, filter, _callback);
        }


        /**
         * Execute listAllDebugTargets request
         * @return DebugTargetListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public DebugTargetListResponse execute() throws ApiException {
            ApiResponse<DebugTargetListResponse> localVarResp = listAllDebugTargetsWithHttpInfo(logPublisherName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllDebugTargets request with HTTP info returned
         * @return ApiResponse&lt;DebugTargetListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DebugTargetListResponse> executeWithHttpInfo() throws ApiException {
            return listAllDebugTargetsWithHttpInfo(logPublisherName, filter);
        }

        /**
         * Execute listAllDebugTargets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DebugTargetListResponse> _callback) throws ApiException {
            return listAllDebugTargetsAsync(logPublisherName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Debug Target objects
     * 
     * @param logPublisherName Name of the Log Publisher (required)
     * @return ListAllDebugTargetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllDebugTargetsRequestBuilder listAllDebugTargets(String logPublisherName) throws IllegalArgumentException {
        if (logPublisherName == null) throw new IllegalArgumentException("\"logPublisherName\" is required but got null");
            

        return new ListAllDebugTargetsRequestBuilder(logPublisherName);
    }
    private okhttp3.Call updateByNameCall(String debugTargetName, String logPublisherName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/log-publishers/{log-publisher-name}/debug-targets/{debug-target-name}"
            .replace("{" + "debug-target-name" + "}", localVarApiClient.escapeString(debugTargetName.toString()))
            .replace("{" + "log-publisher-name" + "}", localVarApiClient.escapeString(logPublisherName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String debugTargetName, String logPublisherName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'debugTargetName' is set
        if (debugTargetName == null) {
            throw new ApiException("Missing the required parameter 'debugTargetName' when calling updateByName(Async)");
        }

        // verify the required parameter 'logPublisherName' is set
        if (logPublisherName == null) {
            throw new ApiException("Missing the required parameter 'logPublisherName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(debugTargetName, logPublisherName, updateRequest, _callback);

    }


    private ApiResponse<DebugTargetResponse> updateByNameWithHttpInfo(String debugTargetName, String logPublisherName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(debugTargetName, logPublisherName, updateRequest, null);
        Type localVarReturnType = new TypeToken<DebugTargetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String debugTargetName, String logPublisherName, UpdateRequest updateRequest, final ApiCallback<DebugTargetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(debugTargetName, logPublisherName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<DebugTargetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String debugTargetName;
        private final String logPublisherName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String debugTargetName, String logPublisherName) {
            this.operations = operations;
            this.debugTargetName = debugTargetName;
            this.logPublisherName = logPublisherName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(debugTargetName, logPublisherName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return DebugTargetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
         </table>
         */
        public DebugTargetResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<DebugTargetResponse> localVarResp = updateByNameWithHttpInfo(debugTargetName, logPublisherName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;DebugTargetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DebugTargetResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(debugTargetName, logPublisherName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DebugTargetResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(debugTargetName, logPublisherName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Debug Target by name
     * 
     * @param debugTargetName Name of the Debug Target (required)
     * @param logPublisherName Name of the Log Publisher (required)
     * @param updateRequest Update an existing Debug Target (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Debug Target does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String debugTargetName, String logPublisherName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (debugTargetName == null) throw new IllegalArgumentException("\"debugTargetName\" is required but got null");
            

        if (logPublisherName == null) throw new IllegalArgumentException("\"logPublisherName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, debugTargetName, logPublisherName);
    }
}
