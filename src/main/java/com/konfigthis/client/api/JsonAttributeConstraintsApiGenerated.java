/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddJsonAttributeConstraintsRequest;
import com.konfigthis.client.model.EnumjsonAttributeConstraintsSchemaUrn;
import com.konfigthis.client.model.JsonAttributeConstraintsListResponse;
import com.konfigthis.client.model.JsonAttributeConstraintsResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JsonAttributeConstraintsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JsonAttributeConstraintsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JsonAttributeConstraintsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewConfigCall(AddJsonAttributeConstraintsRequest addJsonAttributeConstraintsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addJsonAttributeConstraintsRequest;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewConfigValidateBeforeCall(AddJsonAttributeConstraintsRequest addJsonAttributeConstraintsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addJsonAttributeConstraintsRequest' is set
        if (addJsonAttributeConstraintsRequest == null) {
            throw new ApiException("Missing the required parameter 'addJsonAttributeConstraintsRequest' when calling addNewConfig(Async)");
        }

        return addNewConfigCall(addJsonAttributeConstraintsRequest, _callback);

    }


    private ApiResponse<JsonAttributeConstraintsResponse> addNewConfigWithHttpInfo(AddJsonAttributeConstraintsRequest addJsonAttributeConstraintsRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(addJsonAttributeConstraintsRequest, null);
        Type localVarReturnType = new TypeToken<JsonAttributeConstraintsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewConfigAsync(AddJsonAttributeConstraintsRequest addJsonAttributeConstraintsRequest, final ApiCallback<JsonAttributeConstraintsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewConfigValidateBeforeCall(addJsonAttributeConstraintsRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonAttributeConstraintsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewConfigRequestBuilder {
        private final String attributeType;
        private String description;
        private List<EnumjsonAttributeConstraintsSchemaUrn> schemas;
        private Boolean enabled;
        private Boolean allowUnnamedFields;

        private AddNewConfigRequestBuilder(String attributeType) {
            this.attributeType = attributeType;
        }

        /**
         * Set description
         * @param description A description for this JSON Attribute Constraints (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder schemas(List<EnumjsonAttributeConstraintsSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Indicates whether this JSON Attribute Constraints is enabled. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set allowUnnamedFields
         * @param allowUnnamedFields Indicates whether JSON objects stored as values of attributes with the associated attribute-type will be permitted to include fields for which there is no subordinate json-field-constraints definition. If unnamed fields are allowed, then no constraints will be imposed on the values of those fields. However, if unnamed fields are not allowed, then the server will reject any attempt to store a JSON object with a field for which there is no corresponding json-fields-constraints definition. (optional)
         * @return AddNewConfigRequestBuilder
         */
        public AddNewConfigRequestBuilder allowUnnamedFields(Boolean allowUnnamedFields) {
            this.allowUnnamedFields = allowUnnamedFields;
            return this;
        }
        
        /**
         * Build call for addNewConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Attribute Constraints already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddJsonAttributeConstraintsRequest addJsonAttributeConstraintsRequest = buildBodyParams();
            return addNewConfigCall(addJsonAttributeConstraintsRequest, _callback);
        }

        private AddJsonAttributeConstraintsRequest buildBodyParams() {
            AddJsonAttributeConstraintsRequest addJsonAttributeConstraintsRequest = new AddJsonAttributeConstraintsRequest();
            return addJsonAttributeConstraintsRequest;
        }

        /**
         * Execute addNewConfig request
         * @return JsonAttributeConstraintsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Attribute Constraints already exists </td><td>  -  </td></tr>
         </table>
         */
        public JsonAttributeConstraintsResponse execute() throws ApiException {
            AddJsonAttributeConstraintsRequest addJsonAttributeConstraintsRequest = buildBodyParams();
            ApiResponse<JsonAttributeConstraintsResponse> localVarResp = addNewConfigWithHttpInfo(addJsonAttributeConstraintsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewConfig request with HTTP info returned
         * @return ApiResponse&lt;JsonAttributeConstraintsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Attribute Constraints already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonAttributeConstraintsResponse> executeWithHttpInfo() throws ApiException {
            AddJsonAttributeConstraintsRequest addJsonAttributeConstraintsRequest = buildBodyParams();
            return addNewConfigWithHttpInfo(addJsonAttributeConstraintsRequest);
        }

        /**
         * Execute addNewConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Attribute Constraints already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonAttributeConstraintsResponse> _callback) throws ApiException {
            AddJsonAttributeConstraintsRequest addJsonAttributeConstraintsRequest = buildBodyParams();
            return addNewConfigAsync(addJsonAttributeConstraintsRequest, _callback);
        }
    }

    /**
     * Add a new JSON Attribute Constraints to the config
     * 
     * @param addJsonAttributeConstraintsRequest Create a new JSON Attribute Constraints in the config (required)
     * @return AddNewConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The JSON Attribute Constraints already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewConfigRequestBuilder addNewConfig(String attributeType) throws IllegalArgumentException {
        if (attributeType == null) throw new IllegalArgumentException("\"attributeType\" is required but got null");
            

        return new AddNewConfigRequestBuilder(attributeType);
    }
    private okhttp3.Call deleteJsonAttributeConstraintsCall(String jsonAttributeConstraintsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints/{json-attribute-constraints-name}"
            .replace("{" + "json-attribute-constraints-name" + "}", localVarApiClient.escapeString(jsonAttributeConstraintsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJsonAttributeConstraintsValidateBeforeCall(String jsonAttributeConstraintsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jsonAttributeConstraintsName' is set
        if (jsonAttributeConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonAttributeConstraintsName' when calling deleteJsonAttributeConstraints(Async)");
        }

        return deleteJsonAttributeConstraintsCall(jsonAttributeConstraintsName, _callback);

    }


    private ApiResponse<Void> deleteJsonAttributeConstraintsWithHttpInfo(String jsonAttributeConstraintsName) throws ApiException {
        okhttp3.Call localVarCall = deleteJsonAttributeConstraintsValidateBeforeCall(jsonAttributeConstraintsName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteJsonAttributeConstraintsAsync(String jsonAttributeConstraintsName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJsonAttributeConstraintsValidateBeforeCall(jsonAttributeConstraintsName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteJsonAttributeConstraintsRequestBuilder {
        private final String jsonAttributeConstraintsName;

        private DeleteJsonAttributeConstraintsRequestBuilder(String jsonAttributeConstraintsName) {
            this.jsonAttributeConstraintsName = jsonAttributeConstraintsName;
        }

        /**
         * Build call for deleteJsonAttributeConstraints
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Attribute Constraints cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteJsonAttributeConstraintsCall(jsonAttributeConstraintsName, _callback);
        }


        /**
         * Execute deleteJsonAttributeConstraints request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Attribute Constraints cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteJsonAttributeConstraintsWithHttpInfo(jsonAttributeConstraintsName);
        }

        /**
         * Execute deleteJsonAttributeConstraints request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Attribute Constraints cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteJsonAttributeConstraintsWithHttpInfo(jsonAttributeConstraintsName);
        }

        /**
         * Execute deleteJsonAttributeConstraints request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The JSON Attribute Constraints cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteJsonAttributeConstraintsAsync(jsonAttributeConstraintsName, _callback);
        }
    }

    /**
     * Delete a JSON Attribute Constraints
     * 
     * @param jsonAttributeConstraintsName Name of the JSON Attribute Constraints (required)
     * @return DeleteJsonAttributeConstraintsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The JSON Attribute Constraints cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteJsonAttributeConstraintsRequestBuilder deleteJsonAttributeConstraints(String jsonAttributeConstraintsName) throws IllegalArgumentException {
        if (jsonAttributeConstraintsName == null) throw new IllegalArgumentException("\"jsonAttributeConstraintsName\" is required but got null");
            

        return new DeleteJsonAttributeConstraintsRequestBuilder(jsonAttributeConstraintsName);
    }
    private okhttp3.Call getAllObjectsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllObjectsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return getAllObjectsCall(filter, _callback);

    }


    private ApiResponse<JsonAttributeConstraintsListResponse> getAllObjectsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = getAllObjectsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<JsonAttributeConstraintsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllObjectsAsync(String filter, final ApiCallback<JsonAttributeConstraintsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllObjectsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<JsonAttributeConstraintsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllObjectsRequestBuilder {
        private String filter;

        private GetAllObjectsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return GetAllObjectsRequestBuilder
         */
        public GetAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllObjectsCall(filter, _callback);
        }


        /**
         * Execute getAllObjects request
         * @return JsonAttributeConstraintsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public JsonAttributeConstraintsListResponse execute() throws ApiException {
            ApiResponse<JsonAttributeConstraintsListResponse> localVarResp = getAllObjectsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllObjects request with HTTP info returned
         * @return ApiResponse&lt;JsonAttributeConstraintsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonAttributeConstraintsListResponse> executeWithHttpInfo() throws ApiException {
            return getAllObjectsWithHttpInfo(filter);
        }

        /**
         * Execute getAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonAttributeConstraintsListResponse> _callback) throws ApiException {
            return getAllObjectsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all JSON Attribute Constraints objects
     * 
     * @return GetAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public GetAllObjectsRequestBuilder getAllObjects() throws IllegalArgumentException {
        return new GetAllObjectsRequestBuilder();
    }
    private okhttp3.Call getSingleJsonAttributeConstraintsCall(String jsonAttributeConstraintsName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints/{json-attribute-constraints-name}"
            .replace("{" + "json-attribute-constraints-name" + "}", localVarApiClient.escapeString(jsonAttributeConstraintsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleJsonAttributeConstraintsValidateBeforeCall(String jsonAttributeConstraintsName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jsonAttributeConstraintsName' is set
        if (jsonAttributeConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonAttributeConstraintsName' when calling getSingleJsonAttributeConstraints(Async)");
        }

        return getSingleJsonAttributeConstraintsCall(jsonAttributeConstraintsName, _callback);

    }


    private ApiResponse<JsonAttributeConstraintsResponse> getSingleJsonAttributeConstraintsWithHttpInfo(String jsonAttributeConstraintsName) throws ApiException {
        okhttp3.Call localVarCall = getSingleJsonAttributeConstraintsValidateBeforeCall(jsonAttributeConstraintsName, null);
        Type localVarReturnType = new TypeToken<JsonAttributeConstraintsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleJsonAttributeConstraintsAsync(String jsonAttributeConstraintsName, final ApiCallback<JsonAttributeConstraintsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleJsonAttributeConstraintsValidateBeforeCall(jsonAttributeConstraintsName, _callback);
        Type localVarReturnType = new TypeToken<JsonAttributeConstraintsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleJsonAttributeConstraintsRequestBuilder {
        private final String jsonAttributeConstraintsName;

        private GetSingleJsonAttributeConstraintsRequestBuilder(String jsonAttributeConstraintsName) {
            this.jsonAttributeConstraintsName = jsonAttributeConstraintsName;
        }

        /**
         * Build call for getSingleJsonAttributeConstraints
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleJsonAttributeConstraintsCall(jsonAttributeConstraintsName, _callback);
        }


        /**
         * Execute getSingleJsonAttributeConstraints request
         * @return JsonAttributeConstraintsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public JsonAttributeConstraintsResponse execute() throws ApiException {
            ApiResponse<JsonAttributeConstraintsResponse> localVarResp = getSingleJsonAttributeConstraintsWithHttpInfo(jsonAttributeConstraintsName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleJsonAttributeConstraints request with HTTP info returned
         * @return ApiResponse&lt;JsonAttributeConstraintsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonAttributeConstraintsResponse> executeWithHttpInfo() throws ApiException {
            return getSingleJsonAttributeConstraintsWithHttpInfo(jsonAttributeConstraintsName);
        }

        /**
         * Execute getSingleJsonAttributeConstraints request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonAttributeConstraintsResponse> _callback) throws ApiException {
            return getSingleJsonAttributeConstraintsAsync(jsonAttributeConstraintsName, _callback);
        }
    }

    /**
     * Returns a single JSON Attribute Constraints
     * 
     * @param jsonAttributeConstraintsName Name of the JSON Attribute Constraints (required)
     * @return GetSingleJsonAttributeConstraintsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleJsonAttributeConstraintsRequestBuilder getSingleJsonAttributeConstraints(String jsonAttributeConstraintsName) throws IllegalArgumentException {
        if (jsonAttributeConstraintsName == null) throw new IllegalArgumentException("\"jsonAttributeConstraintsName\" is required but got null");
            

        return new GetSingleJsonAttributeConstraintsRequestBuilder(jsonAttributeConstraintsName);
    }
    private okhttp3.Call updateByNameCall(String jsonAttributeConstraintsName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/json-attribute-constraints/{json-attribute-constraints-name}"
            .replace("{" + "json-attribute-constraints-name" + "}", localVarApiClient.escapeString(jsonAttributeConstraintsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String jsonAttributeConstraintsName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jsonAttributeConstraintsName' is set
        if (jsonAttributeConstraintsName == null) {
            throw new ApiException("Missing the required parameter 'jsonAttributeConstraintsName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(jsonAttributeConstraintsName, updateRequest, _callback);

    }


    private ApiResponse<JsonAttributeConstraintsResponse> updateByNameWithHttpInfo(String jsonAttributeConstraintsName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(jsonAttributeConstraintsName, updateRequest, null);
        Type localVarReturnType = new TypeToken<JsonAttributeConstraintsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String jsonAttributeConstraintsName, UpdateRequest updateRequest, final ApiCallback<JsonAttributeConstraintsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(jsonAttributeConstraintsName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<JsonAttributeConstraintsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String jsonAttributeConstraintsName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String jsonAttributeConstraintsName) {
            this.operations = operations;
            this.jsonAttributeConstraintsName = jsonAttributeConstraintsName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(jsonAttributeConstraintsName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return JsonAttributeConstraintsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public JsonAttributeConstraintsResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<JsonAttributeConstraintsResponse> localVarResp = updateByNameWithHttpInfo(jsonAttributeConstraintsName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;JsonAttributeConstraintsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JsonAttributeConstraintsResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(jsonAttributeConstraintsName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JsonAttributeConstraintsResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(jsonAttributeConstraintsName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing JSON Attribute Constraints by name
     * 
     * @param jsonAttributeConstraintsName Name of the JSON Attribute Constraints (required)
     * @param updateRequest Update an existing JSON Attribute Constraints (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The JSON Attribute Constraints does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String jsonAttributeConstraintsName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (jsonAttributeConstraintsName == null) throw new IllegalArgumentException("\"jsonAttributeConstraintsName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, jsonAttributeConstraintsName);
    }
}
