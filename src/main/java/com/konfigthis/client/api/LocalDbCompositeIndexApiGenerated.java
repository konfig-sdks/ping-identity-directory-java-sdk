/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddLocalDbCompositeIndexRequest;
import com.konfigthis.client.model.EnumlocalDbCompositeIndexCacheModeProp;
import com.konfigthis.client.model.EnumlocalDbCompositeIndexSchemaUrn;
import com.konfigthis.client.model.LocalDbCompositeIndexListResponse;
import com.konfigthis.client.model.LocalDbCompositeIndexResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LocalDbCompositeIndexApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocalDbCompositeIndexApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LocalDbCompositeIndexApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewIndexCall(String backendName, AddLocalDbCompositeIndexRequest addLocalDbCompositeIndexRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addLocalDbCompositeIndexRequest;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-composite-indexes"
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewIndexValidateBeforeCall(String backendName, AddLocalDbCompositeIndexRequest addLocalDbCompositeIndexRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling addNewIndex(Async)");
        }

        // verify the required parameter 'addLocalDbCompositeIndexRequest' is set
        if (addLocalDbCompositeIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'addLocalDbCompositeIndexRequest' when calling addNewIndex(Async)");
        }

        return addNewIndexCall(backendName, addLocalDbCompositeIndexRequest, _callback);

    }


    private ApiResponse<LocalDbCompositeIndexResponse> addNewIndexWithHttpInfo(String backendName, AddLocalDbCompositeIndexRequest addLocalDbCompositeIndexRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewIndexValidateBeforeCall(backendName, addLocalDbCompositeIndexRequest, null);
        Type localVarReturnType = new TypeToken<LocalDbCompositeIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewIndexAsync(String backendName, AddLocalDbCompositeIndexRequest addLocalDbCompositeIndexRequest, final ApiCallback<LocalDbCompositeIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewIndexValidateBeforeCall(backendName, addLocalDbCompositeIndexRequest, _callback);
        Type localVarReturnType = new TypeToken<LocalDbCompositeIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewIndexRequestBuilder {
        private final String indexName;
        private final String backendName;
        private String description;
        private List<EnumlocalDbCompositeIndexSchemaUrn> schemas;
        private String indexFilterPattern;
        private String indexBaseDNPattern;
        private Integer indexEntryLimit;
        private Boolean primeIndex;
        private Boolean primeInternalNodesOnly;
        private EnumlocalDbCompositeIndexCacheModeProp cacheMode;

        private AddNewIndexRequestBuilder(String indexName, String backendName) {
            this.indexName = indexName;
            this.backendName = backendName;
        }

        /**
         * Set description
         * @param description A description for this Local DB Composite Index (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder schemas(List<EnumlocalDbCompositeIndexSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set indexFilterPattern
         * @param indexFilterPattern A filter pattern that identifies which entries to include in the index. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder indexFilterPattern(String indexFilterPattern) {
            this.indexFilterPattern = indexFilterPattern;
            return this;
        }
        
        /**
         * Set indexBaseDNPattern
         * @param indexBaseDNPattern An optional base DN pattern that identifies portions of the DIT in which entries to index may exist. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder indexBaseDNPattern(String indexBaseDNPattern) {
            this.indexBaseDNPattern = indexBaseDNPattern;
            return this;
        }
        
        /**
         * Set indexEntryLimit
         * @param indexEntryLimit The maximum number of entries that any single index key will be allowed to match before the server stops maintaining the ID set for that index key. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder indexEntryLimit(Integer indexEntryLimit) {
            this.indexEntryLimit = indexEntryLimit;
            return this;
        }
        
        /**
         * Set primeIndex
         * @param primeIndex Indicates whether the server should load the contents of this index into memory when the backend is being opened. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder primeIndex(Boolean primeIndex) {
            this.primeIndex = primeIndex;
            return this;
        }
        
        /**
         * Set primeInternalNodesOnly
         * @param primeInternalNodesOnly Indicates whether to only prime the internal nodes of the index database, rather than priming both internal and leaf nodes. (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder primeInternalNodesOnly(Boolean primeInternalNodesOnly) {
            this.primeInternalNodesOnly = primeInternalNodesOnly;
            return this;
        }
        
        /**
         * Set cacheMode
         * @param cacheMode  (optional)
         * @return AddNewIndexRequestBuilder
         */
        public AddNewIndexRequestBuilder cacheMode(EnumlocalDbCompositeIndexCacheModeProp cacheMode) {
            this.cacheMode = cacheMode;
            return this;
        }
        
        /**
         * Build call for addNewIndex
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Composite Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddLocalDbCompositeIndexRequest addLocalDbCompositeIndexRequest = buildBodyParams();
            return addNewIndexCall(backendName, addLocalDbCompositeIndexRequest, _callback);
        }

        private AddLocalDbCompositeIndexRequest buildBodyParams() {
            AddLocalDbCompositeIndexRequest addLocalDbCompositeIndexRequest = new AddLocalDbCompositeIndexRequest();
            return addLocalDbCompositeIndexRequest;
        }

        /**
         * Execute addNewIndex request
         * @return LocalDbCompositeIndexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Composite Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbCompositeIndexResponse execute() throws ApiException {
            AddLocalDbCompositeIndexRequest addLocalDbCompositeIndexRequest = buildBodyParams();
            ApiResponse<LocalDbCompositeIndexResponse> localVarResp = addNewIndexWithHttpInfo(backendName, addLocalDbCompositeIndexRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewIndex request with HTTP info returned
         * @return ApiResponse&lt;LocalDbCompositeIndexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Composite Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbCompositeIndexResponse> executeWithHttpInfo() throws ApiException {
            AddLocalDbCompositeIndexRequest addLocalDbCompositeIndexRequest = buildBodyParams();
            return addNewIndexWithHttpInfo(backendName, addLocalDbCompositeIndexRequest);
        }

        /**
         * Execute addNewIndex request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Composite Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbCompositeIndexResponse> _callback) throws ApiException {
            AddLocalDbCompositeIndexRequest addLocalDbCompositeIndexRequest = buildBodyParams();
            return addNewIndexAsync(backendName, addLocalDbCompositeIndexRequest, _callback);
        }
    }

    /**
     * Add a new Local DB Composite Index to the config
     * 
     * @param backendName Name of the Backend (required)
     * @param addLocalDbCompositeIndexRequest Create a new Local DB Composite Index in the config (required)
     * @return AddNewIndexRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Local DB Composite Index already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewIndexRequestBuilder addNewIndex(String indexName, String backendName) throws IllegalArgumentException {
        if (indexName == null) throw new IllegalArgumentException("\"indexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new AddNewIndexRequestBuilder(indexName, backendName);
    }
    private okhttp3.Call deleteCompositeIndexCall(String localDbCompositeIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-composite-indexes/{local-db-composite-index-name}"
            .replace("{" + "local-db-composite-index-name" + "}", localVarApiClient.escapeString(localDbCompositeIndexName.toString()))
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCompositeIndexValidateBeforeCall(String localDbCompositeIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localDbCompositeIndexName' is set
        if (localDbCompositeIndexName == null) {
            throw new ApiException("Missing the required parameter 'localDbCompositeIndexName' when calling deleteCompositeIndex(Async)");
        }

        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling deleteCompositeIndex(Async)");
        }

        return deleteCompositeIndexCall(localDbCompositeIndexName, backendName, _callback);

    }


    private ApiResponse<Void> deleteCompositeIndexWithHttpInfo(String localDbCompositeIndexName, String backendName) throws ApiException {
        okhttp3.Call localVarCall = deleteCompositeIndexValidateBeforeCall(localDbCompositeIndexName, backendName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCompositeIndexAsync(String localDbCompositeIndexName, String backendName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCompositeIndexValidateBeforeCall(localDbCompositeIndexName, backendName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCompositeIndexRequestBuilder {
        private final String localDbCompositeIndexName;
        private final String backendName;

        private DeleteCompositeIndexRequestBuilder(String localDbCompositeIndexName, String backendName) {
            this.localDbCompositeIndexName = localDbCompositeIndexName;
            this.backendName = backendName;
        }

        /**
         * Build call for deleteCompositeIndex
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Composite Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCompositeIndexCall(localDbCompositeIndexName, backendName, _callback);
        }


        /**
         * Execute deleteCompositeIndex request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Composite Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCompositeIndexWithHttpInfo(localDbCompositeIndexName, backendName);
        }

        /**
         * Execute deleteCompositeIndex request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Composite Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCompositeIndexWithHttpInfo(localDbCompositeIndexName, backendName);
        }

        /**
         * Execute deleteCompositeIndex request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB Composite Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCompositeIndexAsync(localDbCompositeIndexName, backendName, _callback);
        }
    }

    /**
     * Delete a Local DB Composite Index
     * 
     * @param localDbCompositeIndexName Name of the Local DB Composite Index (required)
     * @param backendName Name of the Backend (required)
     * @return DeleteCompositeIndexRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Local DB Composite Index cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCompositeIndexRequestBuilder deleteCompositeIndex(String localDbCompositeIndexName, String backendName) throws IllegalArgumentException {
        if (localDbCompositeIndexName == null) throw new IllegalArgumentException("\"localDbCompositeIndexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new DeleteCompositeIndexRequestBuilder(localDbCompositeIndexName, backendName);
    }
    private okhttp3.Call getSingleCall(String localDbCompositeIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-composite-indexes/{local-db-composite-index-name}"
            .replace("{" + "local-db-composite-index-name" + "}", localVarApiClient.escapeString(localDbCompositeIndexName.toString()))
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String localDbCompositeIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localDbCompositeIndexName' is set
        if (localDbCompositeIndexName == null) {
            throw new ApiException("Missing the required parameter 'localDbCompositeIndexName' when calling getSingle(Async)");
        }

        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling getSingle(Async)");
        }

        return getSingleCall(localDbCompositeIndexName, backendName, _callback);

    }


    private ApiResponse<LocalDbCompositeIndexResponse> getSingleWithHttpInfo(String localDbCompositeIndexName, String backendName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(localDbCompositeIndexName, backendName, null);
        Type localVarReturnType = new TypeToken<LocalDbCompositeIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String localDbCompositeIndexName, String backendName, final ApiCallback<LocalDbCompositeIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(localDbCompositeIndexName, backendName, _callback);
        Type localVarReturnType = new TypeToken<LocalDbCompositeIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String localDbCompositeIndexName;
        private final String backendName;

        private GetSingleRequestBuilder(String localDbCompositeIndexName, String backendName) {
            this.localDbCompositeIndexName = localDbCompositeIndexName;
            this.backendName = backendName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(localDbCompositeIndexName, backendName, _callback);
        }


        /**
         * Execute getSingle request
         * @return LocalDbCompositeIndexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbCompositeIndexResponse execute() throws ApiException {
            ApiResponse<LocalDbCompositeIndexResponse> localVarResp = getSingleWithHttpInfo(localDbCompositeIndexName, backendName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;LocalDbCompositeIndexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbCompositeIndexResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(localDbCompositeIndexName, backendName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbCompositeIndexResponse> _callback) throws ApiException {
            return getSingleAsync(localDbCompositeIndexName, backendName, _callback);
        }
    }

    /**
     * Returns a single Local DB Composite Index
     * 
     * @param localDbCompositeIndexName Name of the Local DB Composite Index (required)
     * @param backendName Name of the Backend (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String localDbCompositeIndexName, String backendName) throws IllegalArgumentException {
        if (localDbCompositeIndexName == null) throw new IllegalArgumentException("\"localDbCompositeIndexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new GetSingleRequestBuilder(localDbCompositeIndexName, backendName);
    }
    private okhttp3.Call listAllObjectsCall(String backendName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-composite-indexes"
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String backendName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling listAllObjects(Async)");
        }

        return listAllObjectsCall(backendName, filter, _callback);

    }


    private ApiResponse<LocalDbCompositeIndexListResponse> listAllObjectsWithHttpInfo(String backendName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(backendName, filter, null);
        Type localVarReturnType = new TypeToken<LocalDbCompositeIndexListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String backendName, String filter, final ApiCallback<LocalDbCompositeIndexListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(backendName, filter, _callback);
        Type localVarReturnType = new TypeToken<LocalDbCompositeIndexListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private final String backendName;
        private String filter;

        private ListAllObjectsRequestBuilder(String backendName) {
            this.backendName = backendName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(backendName, filter, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return LocalDbCompositeIndexListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbCompositeIndexListResponse execute() throws ApiException {
            ApiResponse<LocalDbCompositeIndexListResponse> localVarResp = listAllObjectsWithHttpInfo(backendName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;LocalDbCompositeIndexListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbCompositeIndexListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(backendName, filter);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbCompositeIndexListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(backendName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Local DB Composite Index objects
     * 
     * @param backendName Name of the Backend (required)
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects(String backendName) throws IllegalArgumentException {
        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new ListAllObjectsRequestBuilder(backendName);
    }
    private okhttp3.Call updateByNameCall(String localDbCompositeIndexName, String backendName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-composite-indexes/{local-db-composite-index-name}"
            .replace("{" + "local-db-composite-index-name" + "}", localVarApiClient.escapeString(localDbCompositeIndexName.toString()))
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String localDbCompositeIndexName, String backendName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localDbCompositeIndexName' is set
        if (localDbCompositeIndexName == null) {
            throw new ApiException("Missing the required parameter 'localDbCompositeIndexName' when calling updateByName(Async)");
        }

        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(localDbCompositeIndexName, backendName, updateRequest, _callback);

    }


    private ApiResponse<LocalDbCompositeIndexResponse> updateByNameWithHttpInfo(String localDbCompositeIndexName, String backendName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(localDbCompositeIndexName, backendName, updateRequest, null);
        Type localVarReturnType = new TypeToken<LocalDbCompositeIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String localDbCompositeIndexName, String backendName, UpdateRequest updateRequest, final ApiCallback<LocalDbCompositeIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(localDbCompositeIndexName, backendName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<LocalDbCompositeIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String localDbCompositeIndexName;
        private final String backendName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String localDbCompositeIndexName, String backendName) {
            this.operations = operations;
            this.localDbCompositeIndexName = localDbCompositeIndexName;
            this.backendName = backendName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(localDbCompositeIndexName, backendName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return LocalDbCompositeIndexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbCompositeIndexResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<LocalDbCompositeIndexResponse> localVarResp = updateByNameWithHttpInfo(localDbCompositeIndexName, backendName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;LocalDbCompositeIndexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbCompositeIndexResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(localDbCompositeIndexName, backendName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbCompositeIndexResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(localDbCompositeIndexName, backendName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Local DB Composite Index by name
     * 
     * @param localDbCompositeIndexName Name of the Local DB Composite Index (required)
     * @param backendName Name of the Backend (required)
     * @param updateRequest Update an existing Local DB Composite Index (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Local DB Composite Index does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String localDbCompositeIndexName, String backendName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (localDbCompositeIndexName == null) throw new IllegalArgumentException("\"localDbCompositeIndexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, localDbCompositeIndexName, backendName);
    }
}
