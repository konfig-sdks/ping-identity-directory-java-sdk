/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddHttpServletCrossOriginPolicyRequest;
import com.konfigthis.client.model.EnumhttpServletCrossOriginPolicySchemaUrn;
import com.konfigthis.client.model.HttpServletCrossOriginPolicyListResponse;
import com.konfigthis.client.model.HttpServletCrossOriginPolicyResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class HttpServletCrossOriginPolicyApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HttpServletCrossOriginPolicyApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public HttpServletCrossOriginPolicyApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewPolicyCall(AddHttpServletCrossOriginPolicyRequest addHttpServletCrossOriginPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addHttpServletCrossOriginPolicyRequest;

        // create path and map variables
        String localVarPath = "/http-servlet-cross-origin-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewPolicyValidateBeforeCall(AddHttpServletCrossOriginPolicyRequest addHttpServletCrossOriginPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addHttpServletCrossOriginPolicyRequest' is set
        if (addHttpServletCrossOriginPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'addHttpServletCrossOriginPolicyRequest' when calling addNewPolicy(Async)");
        }

        return addNewPolicyCall(addHttpServletCrossOriginPolicyRequest, _callback);

    }


    private ApiResponse<HttpServletCrossOriginPolicyResponse> addNewPolicyWithHttpInfo(AddHttpServletCrossOriginPolicyRequest addHttpServletCrossOriginPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewPolicyValidateBeforeCall(addHttpServletCrossOriginPolicyRequest, null);
        Type localVarReturnType = new TypeToken<HttpServletCrossOriginPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewPolicyAsync(AddHttpServletCrossOriginPolicyRequest addHttpServletCrossOriginPolicyRequest, final ApiCallback<HttpServletCrossOriginPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewPolicyValidateBeforeCall(addHttpServletCrossOriginPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<HttpServletCrossOriginPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewPolicyRequestBuilder {
        private final String policyName;
        private String description;
        private List<EnumhttpServletCrossOriginPolicySchemaUrn> schemas;
        private List<String> corsAllowedMethods;
        private List<String> corsAllowedOrigins;
        private List<String> corsExposedHeaders;
        private List<String> corsAllowedHeaders;
        private String corsPreflightMaxAge;
        private Boolean corsAllowCredentials;

        private AddNewPolicyRequestBuilder(String policyName) {
            this.policyName = policyName;
        }

        /**
         * Set description
         * @param description A description for this HTTP Servlet Cross Origin Policy (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder schemas(List<EnumhttpServletCrossOriginPolicySchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set corsAllowedMethods
         * @param corsAllowedMethods A list of HTTP methods allowed for cross-origin access to resources. i.e. one or more of GET, POST, PUT, DELETE, etc. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder corsAllowedMethods(List<String> corsAllowedMethods) {
            this.corsAllowedMethods = corsAllowedMethods;
            return this;
        }
        
        /**
         * Set corsAllowedOrigins
         * @param corsAllowedOrigins A list of origins that are allowed to execute cross-origin requests. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder corsAllowedOrigins(List<String> corsAllowedOrigins) {
            this.corsAllowedOrigins = corsAllowedOrigins;
            return this;
        }
        
        /**
         * Set corsExposedHeaders
         * @param corsExposedHeaders A list of HTTP headers other than the simple response headers that browsers are allowed to access. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder corsExposedHeaders(List<String> corsExposedHeaders) {
            this.corsExposedHeaders = corsExposedHeaders;
            return this;
        }
        
        /**
         * Set corsAllowedHeaders
         * @param corsAllowedHeaders A list of HTTP headers that are supported by the resource and can be specified in a cross-origin request. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder corsAllowedHeaders(List<String> corsAllowedHeaders) {
            this.corsAllowedHeaders = corsAllowedHeaders;
            return this;
        }
        
        /**
         * Set corsPreflightMaxAge
         * @param corsPreflightMaxAge The maximum amount of time that a preflight request can be cached by a client. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder corsPreflightMaxAge(String corsPreflightMaxAge) {
            this.corsPreflightMaxAge = corsPreflightMaxAge;
            return this;
        }
        
        /**
         * Set corsAllowCredentials
         * @param corsAllowCredentials Indicates whether the servlet extension allows CORS requests with username/password credentials. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder corsAllowCredentials(Boolean corsAllowCredentials) {
            this.corsAllowCredentials = corsAllowCredentials;
            return this;
        }
        
        /**
         * Build call for addNewPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddHttpServletCrossOriginPolicyRequest addHttpServletCrossOriginPolicyRequest = buildBodyParams();
            return addNewPolicyCall(addHttpServletCrossOriginPolicyRequest, _callback);
        }

        private AddHttpServletCrossOriginPolicyRequest buildBodyParams() {
            AddHttpServletCrossOriginPolicyRequest addHttpServletCrossOriginPolicyRequest = new AddHttpServletCrossOriginPolicyRequest();
            return addHttpServletCrossOriginPolicyRequest;
        }

        /**
         * Execute addNewPolicy request
         * @return HttpServletCrossOriginPolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy already exists </td><td>  -  </td></tr>
         </table>
         */
        public HttpServletCrossOriginPolicyResponse execute() throws ApiException {
            AddHttpServletCrossOriginPolicyRequest addHttpServletCrossOriginPolicyRequest = buildBodyParams();
            ApiResponse<HttpServletCrossOriginPolicyResponse> localVarResp = addNewPolicyWithHttpInfo(addHttpServletCrossOriginPolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewPolicy request with HTTP info returned
         * @return ApiResponse&lt;HttpServletCrossOriginPolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HttpServletCrossOriginPolicyResponse> executeWithHttpInfo() throws ApiException {
            AddHttpServletCrossOriginPolicyRequest addHttpServletCrossOriginPolicyRequest = buildBodyParams();
            return addNewPolicyWithHttpInfo(addHttpServletCrossOriginPolicyRequest);
        }

        /**
         * Execute addNewPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HttpServletCrossOriginPolicyResponse> _callback) throws ApiException {
            AddHttpServletCrossOriginPolicyRequest addHttpServletCrossOriginPolicyRequest = buildBodyParams();
            return addNewPolicyAsync(addHttpServletCrossOriginPolicyRequest, _callback);
        }
    }

    /**
     * Add a new HTTP Servlet Cross Origin Policy to the config
     * 
     * @param addHttpServletCrossOriginPolicyRequest Create a new HTTP Servlet Cross Origin Policy in the config (required)
     * @return AddNewPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewPolicyRequestBuilder addNewPolicy(String policyName) throws IllegalArgumentException {
        if (policyName == null) throw new IllegalArgumentException("\"policyName\" is required but got null");
            

        return new AddNewPolicyRequestBuilder(policyName);
    }
    private okhttp3.Call deletePolicyCall(String httpServletCrossOriginPolicyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-cross-origin-policies/{http-servlet-cross-origin-policy-name}"
            .replace("{" + "http-servlet-cross-origin-policy-name" + "}", localVarApiClient.escapeString(httpServletCrossOriginPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyValidateBeforeCall(String httpServletCrossOriginPolicyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpServletCrossOriginPolicyName' is set
        if (httpServletCrossOriginPolicyName == null) {
            throw new ApiException("Missing the required parameter 'httpServletCrossOriginPolicyName' when calling deletePolicy(Async)");
        }

        return deletePolicyCall(httpServletCrossOriginPolicyName, _callback);

    }


    private ApiResponse<Void> deletePolicyWithHttpInfo(String httpServletCrossOriginPolicyName) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(httpServletCrossOriginPolicyName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePolicyAsync(String httpServletCrossOriginPolicyName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(httpServletCrossOriginPolicyName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePolicyRequestBuilder {
        private final String httpServletCrossOriginPolicyName;

        private DeletePolicyRequestBuilder(String httpServletCrossOriginPolicyName) {
            this.httpServletCrossOriginPolicyName = httpServletCrossOriginPolicyName;
        }

        /**
         * Build call for deletePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePolicyCall(httpServletCrossOriginPolicyName, _callback);
        }


        /**
         * Execute deletePolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePolicyWithHttpInfo(httpServletCrossOriginPolicyName);
        }

        /**
         * Execute deletePolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePolicyWithHttpInfo(httpServletCrossOriginPolicyName);
        }

        /**
         * Execute deletePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePolicyAsync(httpServletCrossOriginPolicyName, _callback);
        }
    }

    /**
     * Delete a HTTP Servlet Cross Origin Policy
     * 
     * @param httpServletCrossOriginPolicyName Name of the HTTP Servlet Cross Origin Policy (required)
     * @return DeletePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The HTTP Servlet Cross Origin Policy cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeletePolicyRequestBuilder deletePolicy(String httpServletCrossOriginPolicyName) throws IllegalArgumentException {
        if (httpServletCrossOriginPolicyName == null) throw new IllegalArgumentException("\"httpServletCrossOriginPolicyName\" is required but got null");
            

        return new DeletePolicyRequestBuilder(httpServletCrossOriginPolicyName);
    }
    private okhttp3.Call getSinglePolicyCall(String httpServletCrossOriginPolicyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-cross-origin-policies/{http-servlet-cross-origin-policy-name}"
            .replace("{" + "http-servlet-cross-origin-policy-name" + "}", localVarApiClient.escapeString(httpServletCrossOriginPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSinglePolicyValidateBeforeCall(String httpServletCrossOriginPolicyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpServletCrossOriginPolicyName' is set
        if (httpServletCrossOriginPolicyName == null) {
            throw new ApiException("Missing the required parameter 'httpServletCrossOriginPolicyName' when calling getSinglePolicy(Async)");
        }

        return getSinglePolicyCall(httpServletCrossOriginPolicyName, _callback);

    }


    private ApiResponse<HttpServletCrossOriginPolicyResponse> getSinglePolicyWithHttpInfo(String httpServletCrossOriginPolicyName) throws ApiException {
        okhttp3.Call localVarCall = getSinglePolicyValidateBeforeCall(httpServletCrossOriginPolicyName, null);
        Type localVarReturnType = new TypeToken<HttpServletCrossOriginPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSinglePolicyAsync(String httpServletCrossOriginPolicyName, final ApiCallback<HttpServletCrossOriginPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSinglePolicyValidateBeforeCall(httpServletCrossOriginPolicyName, _callback);
        Type localVarReturnType = new TypeToken<HttpServletCrossOriginPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSinglePolicyRequestBuilder {
        private final String httpServletCrossOriginPolicyName;

        private GetSinglePolicyRequestBuilder(String httpServletCrossOriginPolicyName) {
            this.httpServletCrossOriginPolicyName = httpServletCrossOriginPolicyName;
        }

        /**
         * Build call for getSinglePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSinglePolicyCall(httpServletCrossOriginPolicyName, _callback);
        }


        /**
         * Execute getSinglePolicy request
         * @return HttpServletCrossOriginPolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public HttpServletCrossOriginPolicyResponse execute() throws ApiException {
            ApiResponse<HttpServletCrossOriginPolicyResponse> localVarResp = getSinglePolicyWithHttpInfo(httpServletCrossOriginPolicyName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSinglePolicy request with HTTP info returned
         * @return ApiResponse&lt;HttpServletCrossOriginPolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HttpServletCrossOriginPolicyResponse> executeWithHttpInfo() throws ApiException {
            return getSinglePolicyWithHttpInfo(httpServletCrossOriginPolicyName);
        }

        /**
         * Execute getSinglePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HttpServletCrossOriginPolicyResponse> _callback) throws ApiException {
            return getSinglePolicyAsync(httpServletCrossOriginPolicyName, _callback);
        }
    }

    /**
     * Returns a single HTTP Servlet Cross Origin Policy
     * 
     * @param httpServletCrossOriginPolicyName Name of the HTTP Servlet Cross Origin Policy (required)
     * @return GetSinglePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSinglePolicyRequestBuilder getSinglePolicy(String httpServletCrossOriginPolicyName) throws IllegalArgumentException {
        if (httpServletCrossOriginPolicyName == null) throw new IllegalArgumentException("\"httpServletCrossOriginPolicyName\" is required but got null");
            

        return new GetSinglePolicyRequestBuilder(httpServletCrossOriginPolicyName);
    }
    private okhttp3.Call listAllPoliciesCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/http-servlet-cross-origin-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllPoliciesValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAllPoliciesCall(filter, _callback);

    }


    private ApiResponse<HttpServletCrossOriginPolicyListResponse> listAllPoliciesWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllPoliciesValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<HttpServletCrossOriginPolicyListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllPoliciesAsync(String filter, final ApiCallback<HttpServletCrossOriginPolicyListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllPoliciesValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<HttpServletCrossOriginPolicyListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllPoliciesRequestBuilder {
        private String filter;

        private ListAllPoliciesRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllPoliciesRequestBuilder
         */
        public ListAllPoliciesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllPoliciesCall(filter, _callback);
        }


        /**
         * Execute listAllPolicies request
         * @return HttpServletCrossOriginPolicyListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public HttpServletCrossOriginPolicyListResponse execute() throws ApiException {
            ApiResponse<HttpServletCrossOriginPolicyListResponse> localVarResp = listAllPoliciesWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllPolicies request with HTTP info returned
         * @return ApiResponse&lt;HttpServletCrossOriginPolicyListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HttpServletCrossOriginPolicyListResponse> executeWithHttpInfo() throws ApiException {
            return listAllPoliciesWithHttpInfo(filter);
        }

        /**
         * Execute listAllPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HttpServletCrossOriginPolicyListResponse> _callback) throws ApiException {
            return listAllPoliciesAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all HTTP Servlet Cross Origin Policy objects
     * 
     * @return ListAllPoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllPoliciesRequestBuilder listAllPolicies() throws IllegalArgumentException {
        return new ListAllPoliciesRequestBuilder();
    }
    private okhttp3.Call updateByNameCall(String httpServletCrossOriginPolicyName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/http-servlet-cross-origin-policies/{http-servlet-cross-origin-policy-name}"
            .replace("{" + "http-servlet-cross-origin-policy-name" + "}", localVarApiClient.escapeString(httpServletCrossOriginPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String httpServletCrossOriginPolicyName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'httpServletCrossOriginPolicyName' is set
        if (httpServletCrossOriginPolicyName == null) {
            throw new ApiException("Missing the required parameter 'httpServletCrossOriginPolicyName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(httpServletCrossOriginPolicyName, updateRequest, _callback);

    }


    private ApiResponse<HttpServletCrossOriginPolicyResponse> updateByNameWithHttpInfo(String httpServletCrossOriginPolicyName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(httpServletCrossOriginPolicyName, updateRequest, null);
        Type localVarReturnType = new TypeToken<HttpServletCrossOriginPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String httpServletCrossOriginPolicyName, UpdateRequest updateRequest, final ApiCallback<HttpServletCrossOriginPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(httpServletCrossOriginPolicyName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<HttpServletCrossOriginPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String httpServletCrossOriginPolicyName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String httpServletCrossOriginPolicyName) {
            this.operations = operations;
            this.httpServletCrossOriginPolicyName = httpServletCrossOriginPolicyName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(httpServletCrossOriginPolicyName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return HttpServletCrossOriginPolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public HttpServletCrossOriginPolicyResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<HttpServletCrossOriginPolicyResponse> localVarResp = updateByNameWithHttpInfo(httpServletCrossOriginPolicyName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;HttpServletCrossOriginPolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HttpServletCrossOriginPolicyResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(httpServletCrossOriginPolicyName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HttpServletCrossOriginPolicyResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(httpServletCrossOriginPolicyName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing HTTP Servlet Cross Origin Policy by name
     * 
     * @param httpServletCrossOriginPolicyName Name of the HTTP Servlet Cross Origin Policy (required)
     * @param updateRequest Update an existing HTTP Servlet Cross Origin Policy (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The HTTP Servlet Cross Origin Policy does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String httpServletCrossOriginPolicyName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (httpServletCrossOriginPolicyName == null) throw new IllegalArgumentException("\"httpServletCrossOriginPolicyName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, httpServletCrossOriginPolicyName);
    }
}
