/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddSoftDeletePolicyRequest;
import com.konfigthis.client.model.EnumsoftDeletePolicySchemaUrn;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.SoftDeletePolicyListResponse;
import com.konfigthis.client.model.SoftDeletePolicyResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SoftDeletePolicyApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SoftDeletePolicyApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SoftDeletePolicyApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewPolicyCall(AddSoftDeletePolicyRequest addSoftDeletePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addSoftDeletePolicyRequest;

        // create path and map variables
        String localVarPath = "/soft-delete-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewPolicyValidateBeforeCall(AddSoftDeletePolicyRequest addSoftDeletePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addSoftDeletePolicyRequest' is set
        if (addSoftDeletePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'addSoftDeletePolicyRequest' when calling addNewPolicy(Async)");
        }

        return addNewPolicyCall(addSoftDeletePolicyRequest, _callback);

    }


    private ApiResponse<SoftDeletePolicyResponse> addNewPolicyWithHttpInfo(AddSoftDeletePolicyRequest addSoftDeletePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewPolicyValidateBeforeCall(addSoftDeletePolicyRequest, null);
        Type localVarReturnType = new TypeToken<SoftDeletePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewPolicyAsync(AddSoftDeletePolicyRequest addSoftDeletePolicyRequest, final ApiCallback<SoftDeletePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewPolicyValidateBeforeCall(addSoftDeletePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<SoftDeletePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewPolicyRequestBuilder {
        private final String policyName;
        private String description;
        private List<EnumsoftDeletePolicySchemaUrn> schemas;
        private String autoSoftDeleteConnectionCriteria;
        private String autoSoftDeleteRequestCriteria;
        private String softDeleteRetentionTime;
        private Integer softDeleteRetainNumberOfEntries;

        private AddNewPolicyRequestBuilder(String policyName) {
            this.policyName = policyName;
        }

        /**
         * Set description
         * @param description A description for this Soft Delete Policy (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder schemas(List<EnumsoftDeletePolicySchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set autoSoftDeleteConnectionCriteria
         * @param autoSoftDeleteConnectionCriteria Connection criteria used to automatically identify a delete operation for processing as a soft delete request. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder autoSoftDeleteConnectionCriteria(String autoSoftDeleteConnectionCriteria) {
            this.autoSoftDeleteConnectionCriteria = autoSoftDeleteConnectionCriteria;
            return this;
        }
        
        /**
         * Set autoSoftDeleteRequestCriteria
         * @param autoSoftDeleteRequestCriteria Request criteria used to automatically identify a delete operation for processing as a soft delete request. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder autoSoftDeleteRequestCriteria(String autoSoftDeleteRequestCriteria) {
            this.autoSoftDeleteRequestCriteria = autoSoftDeleteRequestCriteria;
            return this;
        }
        
        /**
         * Set softDeleteRetentionTime
         * @param softDeleteRetentionTime Specifies the maximum length of time that soft delete entries are retained before they are eligible to purged automatically. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder softDeleteRetentionTime(String softDeleteRetentionTime) {
            this.softDeleteRetentionTime = softDeleteRetentionTime;
            return this;
        }
        
        /**
         * Set softDeleteRetainNumberOfEntries
         * @param softDeleteRetainNumberOfEntries Specifies the number of soft deleted entries to retain before the oldest entries are purged. (optional)
         * @return AddNewPolicyRequestBuilder
         */
        public AddNewPolicyRequestBuilder softDeleteRetainNumberOfEntries(Integer softDeleteRetainNumberOfEntries) {
            this.softDeleteRetainNumberOfEntries = softDeleteRetainNumberOfEntries;
            return this;
        }
        
        /**
         * Build call for addNewPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Soft Delete Policy already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddSoftDeletePolicyRequest addSoftDeletePolicyRequest = buildBodyParams();
            return addNewPolicyCall(addSoftDeletePolicyRequest, _callback);
        }

        private AddSoftDeletePolicyRequest buildBodyParams() {
            AddSoftDeletePolicyRequest addSoftDeletePolicyRequest = new AddSoftDeletePolicyRequest();
            return addSoftDeletePolicyRequest;
        }

        /**
         * Execute addNewPolicy request
         * @return SoftDeletePolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Soft Delete Policy already exists </td><td>  -  </td></tr>
         </table>
         */
        public SoftDeletePolicyResponse execute() throws ApiException {
            AddSoftDeletePolicyRequest addSoftDeletePolicyRequest = buildBodyParams();
            ApiResponse<SoftDeletePolicyResponse> localVarResp = addNewPolicyWithHttpInfo(addSoftDeletePolicyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewPolicy request with HTTP info returned
         * @return ApiResponse&lt;SoftDeletePolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Soft Delete Policy already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SoftDeletePolicyResponse> executeWithHttpInfo() throws ApiException {
            AddSoftDeletePolicyRequest addSoftDeletePolicyRequest = buildBodyParams();
            return addNewPolicyWithHttpInfo(addSoftDeletePolicyRequest);
        }

        /**
         * Execute addNewPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Soft Delete Policy already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SoftDeletePolicyResponse> _callback) throws ApiException {
            AddSoftDeletePolicyRequest addSoftDeletePolicyRequest = buildBodyParams();
            return addNewPolicyAsync(addSoftDeletePolicyRequest, _callback);
        }
    }

    /**
     * Add a new Soft Delete Policy to the config
     * 
     * @param addSoftDeletePolicyRequest Create a new Soft Delete Policy in the config (required)
     * @return AddNewPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Soft Delete Policy already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewPolicyRequestBuilder addNewPolicy(String policyName) throws IllegalArgumentException {
        if (policyName == null) throw new IllegalArgumentException("\"policyName\" is required but got null");
            

        return new AddNewPolicyRequestBuilder(policyName);
    }
    private okhttp3.Call deletePolicyCall(String softDeletePolicyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/soft-delete-policies/{soft-delete-policy-name}"
            .replace("{" + "soft-delete-policy-name" + "}", localVarApiClient.escapeString(softDeletePolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePolicyValidateBeforeCall(String softDeletePolicyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'softDeletePolicyName' is set
        if (softDeletePolicyName == null) {
            throw new ApiException("Missing the required parameter 'softDeletePolicyName' when calling deletePolicy(Async)");
        }

        return deletePolicyCall(softDeletePolicyName, _callback);

    }


    private ApiResponse<Void> deletePolicyWithHttpInfo(String softDeletePolicyName) throws ApiException {
        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(softDeletePolicyName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePolicyAsync(String softDeletePolicyName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePolicyValidateBeforeCall(softDeletePolicyName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePolicyRequestBuilder {
        private final String softDeletePolicyName;

        private DeletePolicyRequestBuilder(String softDeletePolicyName) {
            this.softDeletePolicyName = softDeletePolicyName;
        }

        /**
         * Build call for deletePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Soft Delete Policy cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePolicyCall(softDeletePolicyName, _callback);
        }


        /**
         * Execute deletePolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Soft Delete Policy cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePolicyWithHttpInfo(softDeletePolicyName);
        }

        /**
         * Execute deletePolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Soft Delete Policy cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePolicyWithHttpInfo(softDeletePolicyName);
        }

        /**
         * Execute deletePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Soft Delete Policy cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePolicyAsync(softDeletePolicyName, _callback);
        }
    }

    /**
     * Delete a Soft Delete Policy
     * 
     * @param softDeletePolicyName Name of the Soft Delete Policy (required)
     * @return DeletePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Soft Delete Policy cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeletePolicyRequestBuilder deletePolicy(String softDeletePolicyName) throws IllegalArgumentException {
        if (softDeletePolicyName == null) throw new IllegalArgumentException("\"softDeletePolicyName\" is required but got null");
            

        return new DeletePolicyRequestBuilder(softDeletePolicyName);
    }
    private okhttp3.Call getSingleSoftDeletePolicyCall(String softDeletePolicyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/soft-delete-policies/{soft-delete-policy-name}"
            .replace("{" + "soft-delete-policy-name" + "}", localVarApiClient.escapeString(softDeletePolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleSoftDeletePolicyValidateBeforeCall(String softDeletePolicyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'softDeletePolicyName' is set
        if (softDeletePolicyName == null) {
            throw new ApiException("Missing the required parameter 'softDeletePolicyName' when calling getSingleSoftDeletePolicy(Async)");
        }

        return getSingleSoftDeletePolicyCall(softDeletePolicyName, _callback);

    }


    private ApiResponse<SoftDeletePolicyResponse> getSingleSoftDeletePolicyWithHttpInfo(String softDeletePolicyName) throws ApiException {
        okhttp3.Call localVarCall = getSingleSoftDeletePolicyValidateBeforeCall(softDeletePolicyName, null);
        Type localVarReturnType = new TypeToken<SoftDeletePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleSoftDeletePolicyAsync(String softDeletePolicyName, final ApiCallback<SoftDeletePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleSoftDeletePolicyValidateBeforeCall(softDeletePolicyName, _callback);
        Type localVarReturnType = new TypeToken<SoftDeletePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleSoftDeletePolicyRequestBuilder {
        private final String softDeletePolicyName;

        private GetSingleSoftDeletePolicyRequestBuilder(String softDeletePolicyName) {
            this.softDeletePolicyName = softDeletePolicyName;
        }

        /**
         * Build call for getSingleSoftDeletePolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleSoftDeletePolicyCall(softDeletePolicyName, _callback);
        }


        /**
         * Execute getSingleSoftDeletePolicy request
         * @return SoftDeletePolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public SoftDeletePolicyResponse execute() throws ApiException {
            ApiResponse<SoftDeletePolicyResponse> localVarResp = getSingleSoftDeletePolicyWithHttpInfo(softDeletePolicyName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleSoftDeletePolicy request with HTTP info returned
         * @return ApiResponse&lt;SoftDeletePolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SoftDeletePolicyResponse> executeWithHttpInfo() throws ApiException {
            return getSingleSoftDeletePolicyWithHttpInfo(softDeletePolicyName);
        }

        /**
         * Execute getSingleSoftDeletePolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SoftDeletePolicyResponse> _callback) throws ApiException {
            return getSingleSoftDeletePolicyAsync(softDeletePolicyName, _callback);
        }
    }

    /**
     * Returns a single Soft Delete Policy
     * 
     * @param softDeletePolicyName Name of the Soft Delete Policy (required)
     * @return GetSingleSoftDeletePolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleSoftDeletePolicyRequestBuilder getSingleSoftDeletePolicy(String softDeletePolicyName) throws IllegalArgumentException {
        if (softDeletePolicyName == null) throw new IllegalArgumentException("\"softDeletePolicyName\" is required but got null");
            

        return new GetSingleSoftDeletePolicyRequestBuilder(softDeletePolicyName);
    }
    private okhttp3.Call listAllObjectsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/soft-delete-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllObjectsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listAllObjectsCall(filter, _callback);

    }


    private ApiResponse<SoftDeletePolicyListResponse> listAllObjectsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<SoftDeletePolicyListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllObjectsAsync(String filter, final ApiCallback<SoftDeletePolicyListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllObjectsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<SoftDeletePolicyListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllObjectsRequestBuilder {
        private String filter;

        private ListAllObjectsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListAllObjectsRequestBuilder
         */
        public ListAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllObjectsCall(filter, _callback);
        }


        /**
         * Execute listAllObjects request
         * @return SoftDeletePolicyListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public SoftDeletePolicyListResponse execute() throws ApiException {
            ApiResponse<SoftDeletePolicyListResponse> localVarResp = listAllObjectsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllObjects request with HTTP info returned
         * @return ApiResponse&lt;SoftDeletePolicyListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SoftDeletePolicyListResponse> executeWithHttpInfo() throws ApiException {
            return listAllObjectsWithHttpInfo(filter);
        }

        /**
         * Execute listAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SoftDeletePolicyListResponse> _callback) throws ApiException {
            return listAllObjectsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Soft Delete Policy objects
     * 
     * @return ListAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListAllObjectsRequestBuilder listAllObjects() throws IllegalArgumentException {
        return new ListAllObjectsRequestBuilder();
    }
    private okhttp3.Call updateByNameCall(String softDeletePolicyName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/soft-delete-policies/{soft-delete-policy-name}"
            .replace("{" + "soft-delete-policy-name" + "}", localVarApiClient.escapeString(softDeletePolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String softDeletePolicyName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'softDeletePolicyName' is set
        if (softDeletePolicyName == null) {
            throw new ApiException("Missing the required parameter 'softDeletePolicyName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(softDeletePolicyName, updateRequest, _callback);

    }


    private ApiResponse<SoftDeletePolicyResponse> updateByNameWithHttpInfo(String softDeletePolicyName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(softDeletePolicyName, updateRequest, null);
        Type localVarReturnType = new TypeToken<SoftDeletePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String softDeletePolicyName, UpdateRequest updateRequest, final ApiCallback<SoftDeletePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(softDeletePolicyName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<SoftDeletePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String softDeletePolicyName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String softDeletePolicyName) {
            this.operations = operations;
            this.softDeletePolicyName = softDeletePolicyName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(softDeletePolicyName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return SoftDeletePolicyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public SoftDeletePolicyResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<SoftDeletePolicyResponse> localVarResp = updateByNameWithHttpInfo(softDeletePolicyName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;SoftDeletePolicyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SoftDeletePolicyResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(softDeletePolicyName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SoftDeletePolicyResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(softDeletePolicyName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Soft Delete Policy by name
     * 
     * @param softDeletePolicyName Name of the Soft Delete Policy (required)
     * @param updateRequest Update an existing Soft Delete Policy (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Soft Delete Policy does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String softDeletePolicyName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (softDeletePolicyName == null) throw new IllegalArgumentException("\"softDeletePolicyName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, softDeletePolicyName);
    }
}
