/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddKeyPairRequest;
import com.konfigthis.client.model.EnumkeyPairKeyAlgorithmProp;
import com.konfigthis.client.model.EnumkeyPairSchemaUrn;
import com.konfigthis.client.model.KeyPairListResponse;
import com.konfigthis.client.model.KeyPairResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class KeyPairApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KeyPairApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public KeyPairApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewKeyPairCall(AddKeyPairRequest addKeyPairRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addKeyPairRequest;

        // create path and map variables
        String localVarPath = "/key-pairs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewKeyPairValidateBeforeCall(AddKeyPairRequest addKeyPairRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addKeyPairRequest' is set
        if (addKeyPairRequest == null) {
            throw new ApiException("Missing the required parameter 'addKeyPairRequest' when calling createNewKeyPair(Async)");
        }

        return createNewKeyPairCall(addKeyPairRequest, _callback);

    }


    private ApiResponse<KeyPairResponse> createNewKeyPairWithHttpInfo(AddKeyPairRequest addKeyPairRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewKeyPairValidateBeforeCall(addKeyPairRequest, null);
        Type localVarReturnType = new TypeToken<KeyPairResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewKeyPairAsync(AddKeyPairRequest addKeyPairRequest, final ApiCallback<KeyPairResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewKeyPairValidateBeforeCall(addKeyPairRequest, _callback);
        Type localVarReturnType = new TypeToken<KeyPairResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewKeyPairRequestBuilder {
        private final String pairName;
        private List<EnumkeyPairSchemaUrn> schemas;
        private EnumkeyPairKeyAlgorithmProp keyAlgorithm;
        private String selfSignedCertificateValidity;
        private String subjectDN;
        private String certificateChain;
        private String privateKey;

        private CreateNewKeyPairRequestBuilder(String pairName) {
            this.pairName = pairName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return CreateNewKeyPairRequestBuilder
         */
        public CreateNewKeyPairRequestBuilder schemas(List<EnumkeyPairSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set keyAlgorithm
         * @param keyAlgorithm  (optional)
         * @return CreateNewKeyPairRequestBuilder
         */
        public CreateNewKeyPairRequestBuilder keyAlgorithm(EnumkeyPairKeyAlgorithmProp keyAlgorithm) {
            this.keyAlgorithm = keyAlgorithm;
            return this;
        }
        
        /**
         * Set selfSignedCertificateValidity
         * @param selfSignedCertificateValidity The validity period for a self-signed certificate. If not specified, the self-signed certificate will be valid for approximately 20 years. This is not used when importing an existing key-pair. The system will not automatically rotate expired certificates. It is up to the administrator to do that when that happens. (optional)
         * @return CreateNewKeyPairRequestBuilder
         */
        public CreateNewKeyPairRequestBuilder selfSignedCertificateValidity(String selfSignedCertificateValidity) {
            this.selfSignedCertificateValidity = selfSignedCertificateValidity;
            return this;
        }
        
        /**
         * Set subjectDN
         * @param subjectDN The DN that should be used as the subject for the self-signed certificate and certificate signing request. This is not used when importing an existing key-pair. (optional)
         * @return CreateNewKeyPairRequestBuilder
         */
        public CreateNewKeyPairRequestBuilder subjectDN(String subjectDN) {
            this.subjectDN = subjectDN;
            return this;
        }
        
        /**
         * Set certificateChain
         * @param certificateChain The PEM-encoded X.509 certificate chain. (optional)
         * @return CreateNewKeyPairRequestBuilder
         */
        public CreateNewKeyPairRequestBuilder certificateChain(String certificateChain) {
            this.certificateChain = certificateChain;
            return this;
        }
        
        /**
         * Set privateKey
         * @param privateKey The base64-encoded private key that is encrypted using the preferred encryption settings definition. (optional)
         * @return CreateNewKeyPairRequestBuilder
         */
        public CreateNewKeyPairRequestBuilder privateKey(String privateKey) {
            this.privateKey = privateKey;
            return this;
        }
        
        /**
         * Build call for createNewKeyPair
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Key Pair already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddKeyPairRequest addKeyPairRequest = buildBodyParams();
            return createNewKeyPairCall(addKeyPairRequest, _callback);
        }

        private AddKeyPairRequest buildBodyParams() {
            AddKeyPairRequest addKeyPairRequest = new AddKeyPairRequest();
            return addKeyPairRequest;
        }

        /**
         * Execute createNewKeyPair request
         * @return KeyPairResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Key Pair already exists </td><td>  -  </td></tr>
         </table>
         */
        public KeyPairResponse execute() throws ApiException {
            AddKeyPairRequest addKeyPairRequest = buildBodyParams();
            ApiResponse<KeyPairResponse> localVarResp = createNewKeyPairWithHttpInfo(addKeyPairRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewKeyPair request with HTTP info returned
         * @return ApiResponse&lt;KeyPairResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Key Pair already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPairResponse> executeWithHttpInfo() throws ApiException {
            AddKeyPairRequest addKeyPairRequest = buildBodyParams();
            return createNewKeyPairWithHttpInfo(addKeyPairRequest);
        }

        /**
         * Execute createNewKeyPair request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Key Pair already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPairResponse> _callback) throws ApiException {
            AddKeyPairRequest addKeyPairRequest = buildBodyParams();
            return createNewKeyPairAsync(addKeyPairRequest, _callback);
        }
    }

    /**
     * Add a new Key Pair to the config
     * 
     * @param addKeyPairRequest Create a new Key Pair in the config (required)
     * @return CreateNewKeyPairRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Key Pair already exists </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewKeyPairRequestBuilder createNewKeyPair(String pairName) throws IllegalArgumentException {
        if (pairName == null) throw new IllegalArgumentException("\"pairName\" is required but got null");
            

        return new CreateNewKeyPairRequestBuilder(pairName);
    }
    private okhttp3.Call deleteKeyPairCall(String keyPairName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/key-pairs/{key-pair-name}"
            .replace("{" + "key-pair-name" + "}", localVarApiClient.escapeString(keyPairName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeyPairValidateBeforeCall(String keyPairName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyPairName' is set
        if (keyPairName == null) {
            throw new ApiException("Missing the required parameter 'keyPairName' when calling deleteKeyPair(Async)");
        }

        return deleteKeyPairCall(keyPairName, _callback);

    }


    private ApiResponse<Void> deleteKeyPairWithHttpInfo(String keyPairName) throws ApiException {
        okhttp3.Call localVarCall = deleteKeyPairValidateBeforeCall(keyPairName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteKeyPairAsync(String keyPairName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeyPairValidateBeforeCall(keyPairName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteKeyPairRequestBuilder {
        private final String keyPairName;

        private DeleteKeyPairRequestBuilder(String keyPairName) {
            this.keyPairName = keyPairName;
        }

        /**
         * Build call for deleteKeyPair
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Key Pair cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteKeyPairCall(keyPairName, _callback);
        }


        /**
         * Execute deleteKeyPair request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Key Pair cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteKeyPairWithHttpInfo(keyPairName);
        }

        /**
         * Execute deleteKeyPair request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Key Pair cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteKeyPairWithHttpInfo(keyPairName);
        }

        /**
         * Execute deleteKeyPair request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Key Pair cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteKeyPairAsync(keyPairName, _callback);
        }
    }

    /**
     * Delete a Key Pair
     * 
     * @param keyPairName Name of the Key Pair (required)
     * @return DeleteKeyPairRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Key Pair cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteKeyPairRequestBuilder deleteKeyPair(String keyPairName) throws IllegalArgumentException {
        if (keyPairName == null) throw new IllegalArgumentException("\"keyPairName\" is required but got null");
            

        return new DeleteKeyPairRequestBuilder(keyPairName);
    }
    private okhttp3.Call getSingleKeyPairCall(String keyPairName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/key-pairs/{key-pair-name}"
            .replace("{" + "key-pair-name" + "}", localVarApiClient.escapeString(keyPairName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleKeyPairValidateBeforeCall(String keyPairName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyPairName' is set
        if (keyPairName == null) {
            throw new ApiException("Missing the required parameter 'keyPairName' when calling getSingleKeyPair(Async)");
        }

        return getSingleKeyPairCall(keyPairName, _callback);

    }


    private ApiResponse<KeyPairResponse> getSingleKeyPairWithHttpInfo(String keyPairName) throws ApiException {
        okhttp3.Call localVarCall = getSingleKeyPairValidateBeforeCall(keyPairName, null);
        Type localVarReturnType = new TypeToken<KeyPairResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleKeyPairAsync(String keyPairName, final ApiCallback<KeyPairResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleKeyPairValidateBeforeCall(keyPairName, _callback);
        Type localVarReturnType = new TypeToken<KeyPairResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleKeyPairRequestBuilder {
        private final String keyPairName;

        private GetSingleKeyPairRequestBuilder(String keyPairName) {
            this.keyPairName = keyPairName;
        }

        /**
         * Build call for getSingleKeyPair
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleKeyPairCall(keyPairName, _callback);
        }


        /**
         * Execute getSingleKeyPair request
         * @return KeyPairResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public KeyPairResponse execute() throws ApiException {
            ApiResponse<KeyPairResponse> localVarResp = getSingleKeyPairWithHttpInfo(keyPairName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleKeyPair request with HTTP info returned
         * @return ApiResponse&lt;KeyPairResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPairResponse> executeWithHttpInfo() throws ApiException {
            return getSingleKeyPairWithHttpInfo(keyPairName);
        }

        /**
         * Execute getSingleKeyPair request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPairResponse> _callback) throws ApiException {
            return getSingleKeyPairAsync(keyPairName, _callback);
        }
    }

    /**
     * Returns a single Key Pair
     * 
     * @param keyPairName Name of the Key Pair (required)
     * @return GetSingleKeyPairRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleKeyPairRequestBuilder getSingleKeyPair(String keyPairName) throws IllegalArgumentException {
        if (keyPairName == null) throw new IllegalArgumentException("\"keyPairName\" is required but got null");
            

        return new GetSingleKeyPairRequestBuilder(keyPairName);
    }
    private okhttp3.Call listObjectsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/key-pairs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return listObjectsCall(filter, _callback);

    }


    private ApiResponse<KeyPairListResponse> listObjectsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<KeyPairListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listObjectsAsync(String filter, final ApiCallback<KeyPairListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<KeyPairListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListObjectsRequestBuilder {
        private String filter;

        private ListObjectsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListObjectsRequestBuilder
         */
        public ListObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listObjectsCall(filter, _callback);
        }


        /**
         * Execute listObjects request
         * @return KeyPairListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public KeyPairListResponse execute() throws ApiException {
            ApiResponse<KeyPairListResponse> localVarResp = listObjectsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listObjects request with HTTP info returned
         * @return ApiResponse&lt;KeyPairListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPairListResponse> executeWithHttpInfo() throws ApiException {
            return listObjectsWithHttpInfo(filter);
        }

        /**
         * Execute listObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPairListResponse> _callback) throws ApiException {
            return listObjectsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Key Pair objects
     * 
     * @return ListObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectsRequestBuilder listObjects() throws IllegalArgumentException {
        return new ListObjectsRequestBuilder();
    }
    private okhttp3.Call updateByNameCall(String keyPairName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/key-pairs/{key-pair-name}"
            .replace("{" + "key-pair-name" + "}", localVarApiClient.escapeString(keyPairName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String keyPairName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'keyPairName' is set
        if (keyPairName == null) {
            throw new ApiException("Missing the required parameter 'keyPairName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(keyPairName, updateRequest, _callback);

    }


    private ApiResponse<KeyPairResponse> updateByNameWithHttpInfo(String keyPairName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(keyPairName, updateRequest, null);
        Type localVarReturnType = new TypeToken<KeyPairResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String keyPairName, UpdateRequest updateRequest, final ApiCallback<KeyPairResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(keyPairName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<KeyPairResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String keyPairName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String keyPairName) {
            this.operations = operations;
            this.keyPairName = keyPairName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(keyPairName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return KeyPairResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public KeyPairResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<KeyPairResponse> localVarResp = updateByNameWithHttpInfo(keyPairName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;KeyPairResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KeyPairResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(keyPairName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KeyPairResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(keyPairName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Key Pair by name
     * 
     * @param keyPairName Name of the Key Pair (required)
     * @param updateRequest Update an existing Key Pair (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Key Pair does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String keyPairName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (keyPairName == null) throw new IllegalArgumentException("\"keyPairName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, keyPairName);
    }
}
