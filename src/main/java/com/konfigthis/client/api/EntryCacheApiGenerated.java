/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddFifoEntryCacheRequest;
import com.konfigthis.client.model.EntryCacheListResponse;
import com.konfigthis.client.model.EnumfifoEntryCacheSchemaUrn;
import com.konfigthis.client.model.FifoEntryCacheResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EntryCacheApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EntryCacheApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EntryCacheApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewCacheCall(AddFifoEntryCacheRequest addFifoEntryCacheRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFifoEntryCacheRequest;

        // create path and map variables
        String localVarPath = "/entry-caches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewCacheValidateBeforeCall(AddFifoEntryCacheRequest addFifoEntryCacheRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addFifoEntryCacheRequest' is set
        if (addFifoEntryCacheRequest == null) {
            throw new ApiException("Missing the required parameter 'addFifoEntryCacheRequest' when calling addNewCache(Async)");
        }

        return addNewCacheCall(addFifoEntryCacheRequest, _callback);

    }


    private ApiResponse<FifoEntryCacheResponse> addNewCacheWithHttpInfo(AddFifoEntryCacheRequest addFifoEntryCacheRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewCacheValidateBeforeCall(addFifoEntryCacheRequest, null);
        Type localVarReturnType = new TypeToken<FifoEntryCacheResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewCacheAsync(AddFifoEntryCacheRequest addFifoEntryCacheRequest, final ApiCallback<FifoEntryCacheResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewCacheValidateBeforeCall(addFifoEntryCacheRequest, _callback);
        Type localVarReturnType = new TypeToken<FifoEntryCacheResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewCacheRequestBuilder {
        private final String cacheName;
        private String description;
        private List<EnumfifoEntryCacheSchemaUrn> schemas;
        private Integer maxMemoryPercent;
        private Integer maxEntries;
        private Boolean onlyCacheFrequentlyAccessed;
        private List<String> includeFilter;
        private List<String> excludeFilter;
        private Integer minCacheEntryValueCount;
        private List<String> minCacheEntryAttribute;
        private Boolean enabled;
        private Integer cacheLevel;
        private Boolean cacheUnindexedSearchResults;

        private AddNewCacheRequestBuilder(String cacheName) {
            this.cacheName = cacheName;
        }

        /**
         * Set description
         * @param description A description for this Entry Cache (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder schemas(List<EnumfifoEntryCacheSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set maxMemoryPercent
         * @param maxMemoryPercent Specifies the maximum amount of memory, as a percentage of the total maximum JVM heap size, that this cache should occupy when full. If the amount of memory the cache is using is greater than this amount, then an attempt to put a new entry in the cache will be ignored and will cause the oldest entry to be purged. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder maxMemoryPercent(Integer maxMemoryPercent) {
            this.maxMemoryPercent = maxMemoryPercent;
            return this;
        }
        
        /**
         * Set maxEntries
         * @param maxEntries Specifies the maximum number of entries that will be allowed in the cache. Once the cache reaches this size, then adding new entries will cause existing entries to be purged, starting with the oldest. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder maxEntries(Integer maxEntries) {
            this.maxEntries = maxEntries;
            return this;
        }
        
        /**
         * Set onlyCacheFrequentlyAccessed
         * @param onlyCacheFrequentlyAccessed Specifies that the cache should only store entries which are accessed much more frequently than the average entry. The cache will observe attempts to place entries in the cache and compare an entry&#39;s accesses to the average entry&#39;s. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder onlyCacheFrequentlyAccessed(Boolean onlyCacheFrequentlyAccessed) {
            this.onlyCacheFrequentlyAccessed = onlyCacheFrequentlyAccessed;
            return this;
        }
        
        /**
         * Set includeFilter
         * @param includeFilter The set of filters that define the entries that should be included in the cache. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder includeFilter(List<String> includeFilter) {
            this.includeFilter = includeFilter;
            return this;
        }
        
        /**
         * Set excludeFilter
         * @param excludeFilter The set of filters that define the entries that should be excluded from the cache. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder excludeFilter(List<String> excludeFilter) {
            this.excludeFilter = excludeFilter;
            return this;
        }
        
        /**
         * Set minCacheEntryValueCount
         * @param minCacheEntryValueCount Specifies the minimum number of attribute values (optionally across a specified subset of attributes as defined in the min-cache-entry-attributes property) for entries that should be held in the cache. Entries with fewer than this number of attribute values will be excluded from the cache. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder minCacheEntryValueCount(Integer minCacheEntryValueCount) {
            this.minCacheEntryValueCount = minCacheEntryValueCount;
            return this;
        }
        
        /**
         * Set minCacheEntryAttribute
         * @param minCacheEntryAttribute Specifies the names of the attribute types for which the min-cache-entry-value-count property should apply. If no attribute types are specified, then all user attributes will be examined. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder minCacheEntryAttribute(List<String> minCacheEntryAttribute) {
            this.minCacheEntryAttribute = minCacheEntryAttribute;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled Indicates whether the Entry Cache is enabled. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Set cacheLevel
         * @param cacheLevel Specifies the cache level in the cache order if more than one instance of the cache is configured. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder cacheLevel(Integer cacheLevel) {
            this.cacheLevel = cacheLevel;
            return this;
        }
        
        /**
         * Set cacheUnindexedSearchResults
         * @param cacheUnindexedSearchResults Indicates whether the entry cache should be updated with entries that have been returned to the client during the course of processing an unindexed search. (optional)
         * @return AddNewCacheRequestBuilder
         */
        public AddNewCacheRequestBuilder cacheUnindexedSearchResults(Boolean cacheUnindexedSearchResults) {
            this.cacheUnindexedSearchResults = cacheUnindexedSearchResults;
            return this;
        }
        
        /**
         * Build call for addNewCache
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Entry Cache already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddFifoEntryCacheRequest addFifoEntryCacheRequest = buildBodyParams();
            return addNewCacheCall(addFifoEntryCacheRequest, _callback);
        }

        private AddFifoEntryCacheRequest buildBodyParams() {
            AddFifoEntryCacheRequest addFifoEntryCacheRequest = new AddFifoEntryCacheRequest();
            return addFifoEntryCacheRequest;
        }

        /**
         * Execute addNewCache request
         * @return FifoEntryCacheResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Entry Cache already exists </td><td>  -  </td></tr>
         </table>
         */
        public FifoEntryCacheResponse execute() throws ApiException {
            AddFifoEntryCacheRequest addFifoEntryCacheRequest = buildBodyParams();
            ApiResponse<FifoEntryCacheResponse> localVarResp = addNewCacheWithHttpInfo(addFifoEntryCacheRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewCache request with HTTP info returned
         * @return ApiResponse&lt;FifoEntryCacheResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Entry Cache already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FifoEntryCacheResponse> executeWithHttpInfo() throws ApiException {
            AddFifoEntryCacheRequest addFifoEntryCacheRequest = buildBodyParams();
            return addNewCacheWithHttpInfo(addFifoEntryCacheRequest);
        }

        /**
         * Execute addNewCache request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Entry Cache already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FifoEntryCacheResponse> _callback) throws ApiException {
            AddFifoEntryCacheRequest addFifoEntryCacheRequest = buildBodyParams();
            return addNewCacheAsync(addFifoEntryCacheRequest, _callback);
        }
    }

    /**
     * Add a new Entry Cache to the config
     * 
     * @param addFifoEntryCacheRequest Create a new Entry Cache in the config (required)
     * @return AddNewCacheRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Entry Cache already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewCacheRequestBuilder addNewCache(String cacheName) throws IllegalArgumentException {
        if (cacheName == null) throw new IllegalArgumentException("\"cacheName\" is required but got null");
            

        return new AddNewCacheRequestBuilder(cacheName);
    }
    private okhttp3.Call deleteEntryCacheCall(String entryCacheName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entry-caches/{entry-cache-name}"
            .replace("{" + "entry-cache-name" + "}", localVarApiClient.escapeString(entryCacheName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntryCacheValidateBeforeCall(String entryCacheName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entryCacheName' is set
        if (entryCacheName == null) {
            throw new ApiException("Missing the required parameter 'entryCacheName' when calling deleteEntryCache(Async)");
        }

        return deleteEntryCacheCall(entryCacheName, _callback);

    }


    private ApiResponse<Void> deleteEntryCacheWithHttpInfo(String entryCacheName) throws ApiException {
        okhttp3.Call localVarCall = deleteEntryCacheValidateBeforeCall(entryCacheName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEntryCacheAsync(String entryCacheName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntryCacheValidateBeforeCall(entryCacheName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEntryCacheRequestBuilder {
        private final String entryCacheName;

        private DeleteEntryCacheRequestBuilder(String entryCacheName) {
            this.entryCacheName = entryCacheName;
        }

        /**
         * Build call for deleteEntryCache
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Entry Cache cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEntryCacheCall(entryCacheName, _callback);
        }


        /**
         * Execute deleteEntryCache request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Entry Cache cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEntryCacheWithHttpInfo(entryCacheName);
        }

        /**
         * Execute deleteEntryCache request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Entry Cache cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEntryCacheWithHttpInfo(entryCacheName);
        }

        /**
         * Execute deleteEntryCache request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Entry Cache cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEntryCacheAsync(entryCacheName, _callback);
        }
    }

    /**
     * Delete a Entry Cache
     * 
     * @param entryCacheName Name of the Entry Cache (required)
     * @return DeleteEntryCacheRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Entry Cache cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEntryCacheRequestBuilder deleteEntryCache(String entryCacheName) throws IllegalArgumentException {
        if (entryCacheName == null) throw new IllegalArgumentException("\"entryCacheName\" is required but got null");
            

        return new DeleteEntryCacheRequestBuilder(entryCacheName);
    }
    private okhttp3.Call getAllObjectsCall(String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entry-caches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllObjectsValidateBeforeCall(String filter, final ApiCallback _callback) throws ApiException {
        return getAllObjectsCall(filter, _callback);

    }


    private ApiResponse<EntryCacheListResponse> getAllObjectsWithHttpInfo(String filter) throws ApiException {
        okhttp3.Call localVarCall = getAllObjectsValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<EntryCacheListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllObjectsAsync(String filter, final ApiCallback<EntryCacheListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllObjectsValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<EntryCacheListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllObjectsRequestBuilder {
        private String filter;

        private GetAllObjectsRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return GetAllObjectsRequestBuilder
         */
        public GetAllObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getAllObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllObjectsCall(filter, _callback);
        }


        /**
         * Execute getAllObjects request
         * @return EntryCacheListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public EntryCacheListResponse execute() throws ApiException {
            ApiResponse<EntryCacheListResponse> localVarResp = getAllObjectsWithHttpInfo(filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllObjects request with HTTP info returned
         * @return ApiResponse&lt;EntryCacheListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntryCacheListResponse> executeWithHttpInfo() throws ApiException {
            return getAllObjectsWithHttpInfo(filter);
        }

        /**
         * Execute getAllObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntryCacheListResponse> _callback) throws ApiException {
            return getAllObjectsAsync(filter, _callback);
        }
    }

    /**
     * Returns a list of all Entry Cache objects
     * 
     * @return GetAllObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public GetAllObjectsRequestBuilder getAllObjects() throws IllegalArgumentException {
        return new GetAllObjectsRequestBuilder();
    }
    private okhttp3.Call getSingleCacheCall(String entryCacheName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/entry-caches/{entry-cache-name}"
            .replace("{" + "entry-cache-name" + "}", localVarApiClient.escapeString(entryCacheName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleCacheValidateBeforeCall(String entryCacheName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entryCacheName' is set
        if (entryCacheName == null) {
            throw new ApiException("Missing the required parameter 'entryCacheName' when calling getSingleCache(Async)");
        }

        return getSingleCacheCall(entryCacheName, _callback);

    }


    private ApiResponse<FifoEntryCacheResponse> getSingleCacheWithHttpInfo(String entryCacheName) throws ApiException {
        okhttp3.Call localVarCall = getSingleCacheValidateBeforeCall(entryCacheName, null);
        Type localVarReturnType = new TypeToken<FifoEntryCacheResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleCacheAsync(String entryCacheName, final ApiCallback<FifoEntryCacheResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleCacheValidateBeforeCall(entryCacheName, _callback);
        Type localVarReturnType = new TypeToken<FifoEntryCacheResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleCacheRequestBuilder {
        private final String entryCacheName;

        private GetSingleCacheRequestBuilder(String entryCacheName) {
            this.entryCacheName = entryCacheName;
        }

        /**
         * Build call for getSingleCache
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCacheCall(entryCacheName, _callback);
        }


        /**
         * Execute getSingleCache request
         * @return FifoEntryCacheResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
         </table>
         */
        public FifoEntryCacheResponse execute() throws ApiException {
            ApiResponse<FifoEntryCacheResponse> localVarResp = getSingleCacheWithHttpInfo(entryCacheName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleCache request with HTTP info returned
         * @return ApiResponse&lt;FifoEntryCacheResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FifoEntryCacheResponse> executeWithHttpInfo() throws ApiException {
            return getSingleCacheWithHttpInfo(entryCacheName);
        }

        /**
         * Execute getSingleCache request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FifoEntryCacheResponse> _callback) throws ApiException {
            return getSingleCacheAsync(entryCacheName, _callback);
        }
    }

    /**
     * Returns a single Entry Cache
     * 
     * @param entryCacheName Name of the Entry Cache (required)
     * @return GetSingleCacheRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleCacheRequestBuilder getSingleCache(String entryCacheName) throws IllegalArgumentException {
        if (entryCacheName == null) throw new IllegalArgumentException("\"entryCacheName\" is required but got null");
            

        return new GetSingleCacheRequestBuilder(entryCacheName);
    }
    private okhttp3.Call updateByNameCall(String entryCacheName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/entry-caches/{entry-cache-name}"
            .replace("{" + "entry-cache-name" + "}", localVarApiClient.escapeString(entryCacheName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String entryCacheName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entryCacheName' is set
        if (entryCacheName == null) {
            throw new ApiException("Missing the required parameter 'entryCacheName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(entryCacheName, updateRequest, _callback);

    }


    private ApiResponse<FifoEntryCacheResponse> updateByNameWithHttpInfo(String entryCacheName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(entryCacheName, updateRequest, null);
        Type localVarReturnType = new TypeToken<FifoEntryCacheResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String entryCacheName, UpdateRequest updateRequest, final ApiCallback<FifoEntryCacheResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(entryCacheName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<FifoEntryCacheResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String entryCacheName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String entryCacheName) {
            this.operations = operations;
            this.entryCacheName = entryCacheName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(entryCacheName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return FifoEntryCacheResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
         </table>
         */
        public FifoEntryCacheResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<FifoEntryCacheResponse> localVarResp = updateByNameWithHttpInfo(entryCacheName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;FifoEntryCacheResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FifoEntryCacheResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(entryCacheName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FifoEntryCacheResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(entryCacheName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Entry Cache by name
     * 
     * @param entryCacheName Name of the Entry Cache (required)
     * @param updateRequest Update an existing Entry Cache (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Entry Cache does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String entryCacheName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (entryCacheName == null) throw new IllegalArgumentException("\"entryCacheName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, entryCacheName);
    }
}
