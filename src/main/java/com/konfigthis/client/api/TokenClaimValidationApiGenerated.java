/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.TokenClaimValidationListResponse;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TokenClaimValidationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TokenClaimValidationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TokenClaimValidationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewClaimValidationCall(String idTokenValidatorName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/id-token-validators/{id-token-validator-name}/token-claim-validations"
            .replace("{" + "id-token-validator-name" + "}", localVarApiClient.escapeString(idTokenValidatorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewClaimValidationValidateBeforeCall(String idTokenValidatorName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idTokenValidatorName' is set
        if (idTokenValidatorName == null) {
            throw new ApiException("Missing the required parameter 'idTokenValidatorName' when calling addNewClaimValidation(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNewClaimValidation(Async)");
        }

        return addNewClaimValidationCall(idTokenValidatorName, body, _callback);

    }


    private ApiResponse<Object> addNewClaimValidationWithHttpInfo(String idTokenValidatorName, Object body) throws ApiException {
        okhttp3.Call localVarCall = addNewClaimValidationValidateBeforeCall(idTokenValidatorName, body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewClaimValidationAsync(String idTokenValidatorName, Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewClaimValidationValidateBeforeCall(idTokenValidatorName, body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewClaimValidationRequestBuilder {
        private final String idTokenValidatorName;
        private Object body;

        private AddNewClaimValidationRequestBuilder(String idTokenValidatorName) {
            this.idTokenValidatorName = idTokenValidatorName;
        }

        /**
         * Set body
         * @param body Create a new Token Claim Validation in the config (optional)
         * @return AddNewClaimValidationRequestBuilder
         */
        public AddNewClaimValidationRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for addNewClaimValidation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Token Claim Validation already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return addNewClaimValidationCall(idTokenValidatorName, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute addNewClaimValidation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Token Claim Validation already exists </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Object> localVarResp = addNewClaimValidationWithHttpInfo(idTokenValidatorName, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewClaimValidation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Token Claim Validation already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return addNewClaimValidationWithHttpInfo(idTokenValidatorName, body);
        }

        /**
         * Execute addNewClaimValidation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Token Claim Validation already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Object body = buildBodyParams();
            return addNewClaimValidationAsync(idTokenValidatorName, body, _callback);
        }
    }

    /**
     * Add a new Token Claim Validation to the config
     * 
     * @param idTokenValidatorName Name of the ID Token Validator (required)
     * @param body Create a new Token Claim Validation in the config (required)
     * @return AddNewClaimValidationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Token Claim Validation already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewClaimValidationRequestBuilder addNewClaimValidation(String idTokenValidatorName) throws IllegalArgumentException {
        if (idTokenValidatorName == null) throw new IllegalArgumentException("\"idTokenValidatorName\" is required but got null");
            

        return new AddNewClaimValidationRequestBuilder(idTokenValidatorName);
    }
    private okhttp3.Call deleteClaimValidationCall(String tokenClaimValidationName, String idTokenValidatorName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/id-token-validators/{id-token-validator-name}/token-claim-validations/{token-claim-validation-name}"
            .replace("{" + "token-claim-validation-name" + "}", localVarApiClient.escapeString(tokenClaimValidationName.toString()))
            .replace("{" + "id-token-validator-name" + "}", localVarApiClient.escapeString(idTokenValidatorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClaimValidationValidateBeforeCall(String tokenClaimValidationName, String idTokenValidatorName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenClaimValidationName' is set
        if (tokenClaimValidationName == null) {
            throw new ApiException("Missing the required parameter 'tokenClaimValidationName' when calling deleteClaimValidation(Async)");
        }

        // verify the required parameter 'idTokenValidatorName' is set
        if (idTokenValidatorName == null) {
            throw new ApiException("Missing the required parameter 'idTokenValidatorName' when calling deleteClaimValidation(Async)");
        }

        return deleteClaimValidationCall(tokenClaimValidationName, idTokenValidatorName, _callback);

    }


    private ApiResponse<Void> deleteClaimValidationWithHttpInfo(String tokenClaimValidationName, String idTokenValidatorName) throws ApiException {
        okhttp3.Call localVarCall = deleteClaimValidationValidateBeforeCall(tokenClaimValidationName, idTokenValidatorName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteClaimValidationAsync(String tokenClaimValidationName, String idTokenValidatorName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClaimValidationValidateBeforeCall(tokenClaimValidationName, idTokenValidatorName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteClaimValidationRequestBuilder {
        private final String tokenClaimValidationName;
        private final String idTokenValidatorName;

        private DeleteClaimValidationRequestBuilder(String tokenClaimValidationName, String idTokenValidatorName) {
            this.tokenClaimValidationName = tokenClaimValidationName;
            this.idTokenValidatorName = idTokenValidatorName;
        }

        /**
         * Build call for deleteClaimValidation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Token Claim Validation cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteClaimValidationCall(tokenClaimValidationName, idTokenValidatorName, _callback);
        }


        /**
         * Execute deleteClaimValidation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Token Claim Validation cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteClaimValidationWithHttpInfo(tokenClaimValidationName, idTokenValidatorName);
        }

        /**
         * Execute deleteClaimValidation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Token Claim Validation cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteClaimValidationWithHttpInfo(tokenClaimValidationName, idTokenValidatorName);
        }

        /**
         * Execute deleteClaimValidation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Token Claim Validation cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteClaimValidationAsync(tokenClaimValidationName, idTokenValidatorName, _callback);
        }
    }

    /**
     * Delete a Token Claim Validation
     * 
     * @param tokenClaimValidationName Name of the Token Claim Validation (required)
     * @param idTokenValidatorName Name of the ID Token Validator (required)
     * @return DeleteClaimValidationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Token Claim Validation cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteClaimValidationRequestBuilder deleteClaimValidation(String tokenClaimValidationName, String idTokenValidatorName) throws IllegalArgumentException {
        if (tokenClaimValidationName == null) throw new IllegalArgumentException("\"tokenClaimValidationName\" is required but got null");
            

        if (idTokenValidatorName == null) throw new IllegalArgumentException("\"idTokenValidatorName\" is required but got null");
            

        return new DeleteClaimValidationRequestBuilder(tokenClaimValidationName, idTokenValidatorName);
    }
    private okhttp3.Call getSingleClaimValidationCall(String tokenClaimValidationName, String idTokenValidatorName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/id-token-validators/{id-token-validator-name}/token-claim-validations/{token-claim-validation-name}"
            .replace("{" + "token-claim-validation-name" + "}", localVarApiClient.escapeString(tokenClaimValidationName.toString()))
            .replace("{" + "id-token-validator-name" + "}", localVarApiClient.escapeString(idTokenValidatorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleClaimValidationValidateBeforeCall(String tokenClaimValidationName, String idTokenValidatorName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenClaimValidationName' is set
        if (tokenClaimValidationName == null) {
            throw new ApiException("Missing the required parameter 'tokenClaimValidationName' when calling getSingleClaimValidation(Async)");
        }

        // verify the required parameter 'idTokenValidatorName' is set
        if (idTokenValidatorName == null) {
            throw new ApiException("Missing the required parameter 'idTokenValidatorName' when calling getSingleClaimValidation(Async)");
        }

        return getSingleClaimValidationCall(tokenClaimValidationName, idTokenValidatorName, _callback);

    }


    private ApiResponse<Object> getSingleClaimValidationWithHttpInfo(String tokenClaimValidationName, String idTokenValidatorName) throws ApiException {
        okhttp3.Call localVarCall = getSingleClaimValidationValidateBeforeCall(tokenClaimValidationName, idTokenValidatorName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleClaimValidationAsync(String tokenClaimValidationName, String idTokenValidatorName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleClaimValidationValidateBeforeCall(tokenClaimValidationName, idTokenValidatorName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleClaimValidationRequestBuilder {
        private final String tokenClaimValidationName;
        private final String idTokenValidatorName;

        private GetSingleClaimValidationRequestBuilder(String tokenClaimValidationName, String idTokenValidatorName) {
            this.tokenClaimValidationName = tokenClaimValidationName;
            this.idTokenValidatorName = idTokenValidatorName;
        }

        /**
         * Build call for getSingleClaimValidation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleClaimValidationCall(tokenClaimValidationName, idTokenValidatorName, _callback);
        }


        /**
         * Execute getSingleClaimValidation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getSingleClaimValidationWithHttpInfo(tokenClaimValidationName, idTokenValidatorName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleClaimValidation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getSingleClaimValidationWithHttpInfo(tokenClaimValidationName, idTokenValidatorName);
        }

        /**
         * Execute getSingleClaimValidation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getSingleClaimValidationAsync(tokenClaimValidationName, idTokenValidatorName, _callback);
        }
    }

    /**
     * Returns a single Token Claim Validation
     * 
     * @param tokenClaimValidationName Name of the Token Claim Validation (required)
     * @param idTokenValidatorName Name of the ID Token Validator (required)
     * @return GetSingleClaimValidationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleClaimValidationRequestBuilder getSingleClaimValidation(String tokenClaimValidationName, String idTokenValidatorName) throws IllegalArgumentException {
        if (tokenClaimValidationName == null) throw new IllegalArgumentException("\"tokenClaimValidationName\" is required but got null");
            

        if (idTokenValidatorName == null) throw new IllegalArgumentException("\"idTokenValidatorName\" is required but got null");
            

        return new GetSingleClaimValidationRequestBuilder(tokenClaimValidationName, idTokenValidatorName);
    }
    private okhttp3.Call listTokenClaimValidationsCall(String idTokenValidatorName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/id-token-validators/{id-token-validator-name}/token-claim-validations"
            .replace("{" + "id-token-validator-name" + "}", localVarApiClient.escapeString(idTokenValidatorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTokenClaimValidationsValidateBeforeCall(String idTokenValidatorName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idTokenValidatorName' is set
        if (idTokenValidatorName == null) {
            throw new ApiException("Missing the required parameter 'idTokenValidatorName' when calling listTokenClaimValidations(Async)");
        }

        return listTokenClaimValidationsCall(idTokenValidatorName, filter, _callback);

    }


    private ApiResponse<TokenClaimValidationListResponse> listTokenClaimValidationsWithHttpInfo(String idTokenValidatorName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listTokenClaimValidationsValidateBeforeCall(idTokenValidatorName, filter, null);
        Type localVarReturnType = new TypeToken<TokenClaimValidationListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTokenClaimValidationsAsync(String idTokenValidatorName, String filter, final ApiCallback<TokenClaimValidationListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTokenClaimValidationsValidateBeforeCall(idTokenValidatorName, filter, _callback);
        Type localVarReturnType = new TypeToken<TokenClaimValidationListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTokenClaimValidationsRequestBuilder {
        private final String idTokenValidatorName;
        private String filter;

        private ListTokenClaimValidationsRequestBuilder(String idTokenValidatorName) {
            this.idTokenValidatorName = idTokenValidatorName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListTokenClaimValidationsRequestBuilder
         */
        public ListTokenClaimValidationsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listTokenClaimValidations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTokenClaimValidationsCall(idTokenValidatorName, filter, _callback);
        }


        /**
         * Execute listTokenClaimValidations request
         * @return TokenClaimValidationListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public TokenClaimValidationListResponse execute() throws ApiException {
            ApiResponse<TokenClaimValidationListResponse> localVarResp = listTokenClaimValidationsWithHttpInfo(idTokenValidatorName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTokenClaimValidations request with HTTP info returned
         * @return ApiResponse&lt;TokenClaimValidationListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenClaimValidationListResponse> executeWithHttpInfo() throws ApiException {
            return listTokenClaimValidationsWithHttpInfo(idTokenValidatorName, filter);
        }

        /**
         * Execute listTokenClaimValidations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenClaimValidationListResponse> _callback) throws ApiException {
            return listTokenClaimValidationsAsync(idTokenValidatorName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Token Claim Validation objects
     * 
     * @param idTokenValidatorName Name of the ID Token Validator (required)
     * @return ListTokenClaimValidationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListTokenClaimValidationsRequestBuilder listTokenClaimValidations(String idTokenValidatorName) throws IllegalArgumentException {
        if (idTokenValidatorName == null) throw new IllegalArgumentException("\"idTokenValidatorName\" is required but got null");
            

        return new ListTokenClaimValidationsRequestBuilder(idTokenValidatorName);
    }
    private okhttp3.Call updateClaimValidationByNameCall(String tokenClaimValidationName, String idTokenValidatorName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/id-token-validators/{id-token-validator-name}/token-claim-validations/{token-claim-validation-name}"
            .replace("{" + "token-claim-validation-name" + "}", localVarApiClient.escapeString(tokenClaimValidationName.toString()))
            .replace("{" + "id-token-validator-name" + "}", localVarApiClient.escapeString(idTokenValidatorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClaimValidationByNameValidateBeforeCall(String tokenClaimValidationName, String idTokenValidatorName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tokenClaimValidationName' is set
        if (tokenClaimValidationName == null) {
            throw new ApiException("Missing the required parameter 'tokenClaimValidationName' when calling updateClaimValidationByName(Async)");
        }

        // verify the required parameter 'idTokenValidatorName' is set
        if (idTokenValidatorName == null) {
            throw new ApiException("Missing the required parameter 'idTokenValidatorName' when calling updateClaimValidationByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateClaimValidationByName(Async)");
        }

        return updateClaimValidationByNameCall(tokenClaimValidationName, idTokenValidatorName, updateRequest, _callback);

    }


    private ApiResponse<Object> updateClaimValidationByNameWithHttpInfo(String tokenClaimValidationName, String idTokenValidatorName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateClaimValidationByNameValidateBeforeCall(tokenClaimValidationName, idTokenValidatorName, updateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateClaimValidationByNameAsync(String tokenClaimValidationName, String idTokenValidatorName, UpdateRequest updateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClaimValidationByNameValidateBeforeCall(tokenClaimValidationName, idTokenValidatorName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateClaimValidationByNameRequestBuilder {
        private final List<Operation> operations;
        private final String tokenClaimValidationName;
        private final String idTokenValidatorName;

        private UpdateClaimValidationByNameRequestBuilder(List<Operation> operations, String tokenClaimValidationName, String idTokenValidatorName) {
            this.operations = operations;
            this.tokenClaimValidationName = tokenClaimValidationName;
            this.idTokenValidatorName = idTokenValidatorName;
        }

        /**
         * Build call for updateClaimValidationByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateClaimValidationByNameCall(tokenClaimValidationName, idTokenValidatorName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateClaimValidationByName request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateClaimValidationByNameWithHttpInfo(tokenClaimValidationName, idTokenValidatorName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateClaimValidationByName request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateClaimValidationByNameWithHttpInfo(tokenClaimValidationName, idTokenValidatorName, updateRequest);
        }

        /**
         * Execute updateClaimValidationByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateClaimValidationByNameAsync(tokenClaimValidationName, idTokenValidatorName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Token Claim Validation by name
     * 
     * @param tokenClaimValidationName Name of the Token Claim Validation (required)
     * @param idTokenValidatorName Name of the ID Token Validator (required)
     * @param updateRequest Update an existing Token Claim Validation (required)
     * @return UpdateClaimValidationByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Token Claim Validation does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateClaimValidationByNameRequestBuilder updateClaimValidationByName(List<Operation> operations, String tokenClaimValidationName, String idTokenValidatorName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (tokenClaimValidationName == null) throw new IllegalArgumentException("\"tokenClaimValidationName\" is required but got null");
            

        if (idTokenValidatorName == null) throw new IllegalArgumentException("\"idTokenValidatorName\" is required but got null");
            

        return new UpdateClaimValidationByNameRequestBuilder(operations, tokenClaimValidationName, idTokenValidatorName);
    }
}
