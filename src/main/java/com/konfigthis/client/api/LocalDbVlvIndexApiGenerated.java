/*
 * PingData Config - OpenAPI 3.0
 * This is the PingData Configuration API
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddLocalDbVlvIndexRequest;
import com.konfigthis.client.model.EnumlocalDbVlvIndexCacheModeProp;
import com.konfigthis.client.model.EnumlocalDbVlvIndexSchemaUrn;
import com.konfigthis.client.model.EnumlocalDbVlvIndexScopeProp;
import com.konfigthis.client.model.LocalDbVlvIndexListResponse;
import com.konfigthis.client.model.LocalDbVlvIndexResponse;
import com.konfigthis.client.model.Operation;
import com.konfigthis.client.model.UpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LocalDbVlvIndexApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocalDbVlvIndexApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LocalDbVlvIndexApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewIndexToConfigCall(String backendName, AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addLocalDbVlvIndexRequest;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-vlv-indexes"
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewIndexToConfigValidateBeforeCall(String backendName, AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling addNewIndexToConfig(Async)");
        }

        // verify the required parameter 'addLocalDbVlvIndexRequest' is set
        if (addLocalDbVlvIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'addLocalDbVlvIndexRequest' when calling addNewIndexToConfig(Async)");
        }

        return addNewIndexToConfigCall(backendName, addLocalDbVlvIndexRequest, _callback);

    }


    private ApiResponse<LocalDbVlvIndexResponse> addNewIndexToConfigWithHttpInfo(String backendName, AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewIndexToConfigValidateBeforeCall(backendName, addLocalDbVlvIndexRequest, null);
        Type localVarReturnType = new TypeToken<LocalDbVlvIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewIndexToConfigAsync(String backendName, AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest, final ApiCallback<LocalDbVlvIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewIndexToConfigValidateBeforeCall(backendName, addLocalDbVlvIndexRequest, _callback);
        Type localVarReturnType = new TypeToken<LocalDbVlvIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewIndexToConfigRequestBuilder {
        private final String indexName;
        private final String backendName;
        private List<EnumlocalDbVlvIndexSchemaUrn> schemas;
        private String baseDN;
        private EnumlocalDbVlvIndexScopeProp scope;
        private String filter;
        private String sortOrder;
        private String name;
        private Integer maxBlockSize;
        private EnumlocalDbVlvIndexCacheModeProp cacheMode;

        private AddNewIndexToConfigRequestBuilder(String indexName, String backendName) {
            this.indexName = indexName;
            this.backendName = backendName;
        }

        /**
         * Set schemas
         * @param schemas  (optional)
         * @return AddNewIndexToConfigRequestBuilder
         */
        public AddNewIndexToConfigRequestBuilder schemas(List<EnumlocalDbVlvIndexSchemaUrn> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set baseDN
         * @param baseDN Specifies the base DN used in the search query that is being indexed. (optional)
         * @return AddNewIndexToConfigRequestBuilder
         */
        public AddNewIndexToConfigRequestBuilder baseDN(String baseDN) {
            this.baseDN = baseDN;
            return this;
        }
        
        /**
         * Set scope
         * @param scope  (optional)
         * @return AddNewIndexToConfigRequestBuilder
         */
        public AddNewIndexToConfigRequestBuilder scope(EnumlocalDbVlvIndexScopeProp scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set filter
         * @param filter Specifies the LDAP filter used in the query that is being indexed. (optional)
         * @return AddNewIndexToConfigRequestBuilder
         */
        public AddNewIndexToConfigRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Specifies the names of the attributes that are used to sort the entries for the query being indexed. (optional)
         * @return AddNewIndexToConfigRequestBuilder
         */
        public AddNewIndexToConfigRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set name
         * @param name Specifies a unique name for this VLV index. (optional)
         * @return AddNewIndexToConfigRequestBuilder
         */
        public AddNewIndexToConfigRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set maxBlockSize
         * @param maxBlockSize Specifies the number of entry IDs to store in a single sorted set before it must be split. (optional)
         * @return AddNewIndexToConfigRequestBuilder
         */
        public AddNewIndexToConfigRequestBuilder maxBlockSize(Integer maxBlockSize) {
            this.maxBlockSize = maxBlockSize;
            return this;
        }
        
        /**
         * Set cacheMode
         * @param cacheMode  (optional)
         * @return AddNewIndexToConfigRequestBuilder
         */
        public AddNewIndexToConfigRequestBuilder cacheMode(EnumlocalDbVlvIndexCacheModeProp cacheMode) {
            this.cacheMode = cacheMode;
            return this;
        }
        
        /**
         * Build call for addNewIndexToConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB VLV Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest = buildBodyParams();
            return addNewIndexToConfigCall(backendName, addLocalDbVlvIndexRequest, _callback);
        }

        private AddLocalDbVlvIndexRequest buildBodyParams() {
            AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest = new AddLocalDbVlvIndexRequest();
            return addLocalDbVlvIndexRequest;
        }

        /**
         * Execute addNewIndexToConfig request
         * @return LocalDbVlvIndexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB VLV Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbVlvIndexResponse execute() throws ApiException {
            AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest = buildBodyParams();
            ApiResponse<LocalDbVlvIndexResponse> localVarResp = addNewIndexToConfigWithHttpInfo(backendName, addLocalDbVlvIndexRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewIndexToConfig request with HTTP info returned
         * @return ApiResponse&lt;LocalDbVlvIndexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB VLV Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbVlvIndexResponse> executeWithHttpInfo() throws ApiException {
            AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest = buildBodyParams();
            return addNewIndexToConfigWithHttpInfo(backendName, addLocalDbVlvIndexRequest);
        }

        /**
         * Execute addNewIndexToConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB VLV Index already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbVlvIndexResponse> _callback) throws ApiException {
            AddLocalDbVlvIndexRequest addLocalDbVlvIndexRequest = buildBodyParams();
            return addNewIndexToConfigAsync(backendName, addLocalDbVlvIndexRequest, _callback);
        }
    }

    /**
     * Add a new Local DB VLV Index to the config
     * 
     * @param backendName Name of the Backend (required)
     * @param addLocalDbVlvIndexRequest Create a new Local DB VLV Index in the config (required)
     * @return AddNewIndexToConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Local DB VLV Index already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewIndexToConfigRequestBuilder addNewIndexToConfig(String indexName, String backendName) throws IllegalArgumentException {
        if (indexName == null) throw new IllegalArgumentException("\"indexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new AddNewIndexToConfigRequestBuilder(indexName, backendName);
    }
    private okhttp3.Call deleteCall(String localDbVlvIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}"
            .replace("{" + "local-db-vlv-index-name" + "}", localVarApiClient.escapeString(localDbVlvIndexName.toString()))
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String localDbVlvIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localDbVlvIndexName' is set
        if (localDbVlvIndexName == null) {
            throw new ApiException("Missing the required parameter 'localDbVlvIndexName' when calling delete(Async)");
        }

        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling delete(Async)");
        }

        return deleteCall(localDbVlvIndexName, backendName, _callback);

    }


    private ApiResponse<Void> deleteWithHttpInfo(String localDbVlvIndexName, String backendName) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(localDbVlvIndexName, backendName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAsync(String localDbVlvIndexName, String backendName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(localDbVlvIndexName, backendName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private final String localDbVlvIndexName;
        private final String backendName;

        private DeleteRequestBuilder(String localDbVlvIndexName, String backendName) {
            this.localDbVlvIndexName = localDbVlvIndexName;
            this.backendName = backendName;
        }

        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB VLV Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCall(localDbVlvIndexName, backendName, _callback);
        }


        /**
         * Execute delete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB VLV Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWithHttpInfo(localDbVlvIndexName, backendName);
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB VLV Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWithHttpInfo(localDbVlvIndexName, backendName);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> The Local DB VLV Index cannot be deleted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAsync(localDbVlvIndexName, backendName, _callback);
        }
    }

    /**
     * Delete a Local DB VLV Index
     * 
     * @param localDbVlvIndexName Name of the Local DB VLV Index (required)
     * @param backendName Name of the Backend (required)
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Local DB VLV Index cannot be deleted </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestBuilder delete(String localDbVlvIndexName, String backendName) throws IllegalArgumentException {
        if (localDbVlvIndexName == null) throw new IllegalArgumentException("\"localDbVlvIndexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new DeleteRequestBuilder(localDbVlvIndexName, backendName);
    }
    private okhttp3.Call getSingleCall(String localDbVlvIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}"
            .replace("{" + "local-db-vlv-index-name" + "}", localVarApiClient.escapeString(localDbVlvIndexName.toString()))
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleValidateBeforeCall(String localDbVlvIndexName, String backendName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localDbVlvIndexName' is set
        if (localDbVlvIndexName == null) {
            throw new ApiException("Missing the required parameter 'localDbVlvIndexName' when calling getSingle(Async)");
        }

        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling getSingle(Async)");
        }

        return getSingleCall(localDbVlvIndexName, backendName, _callback);

    }


    private ApiResponse<LocalDbVlvIndexResponse> getSingleWithHttpInfo(String localDbVlvIndexName, String backendName) throws ApiException {
        okhttp3.Call localVarCall = getSingleValidateBeforeCall(localDbVlvIndexName, backendName, null);
        Type localVarReturnType = new TypeToken<LocalDbVlvIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleAsync(String localDbVlvIndexName, String backendName, final ApiCallback<LocalDbVlvIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleValidateBeforeCall(localDbVlvIndexName, backendName, _callback);
        Type localVarReturnType = new TypeToken<LocalDbVlvIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRequestBuilder {
        private final String localDbVlvIndexName;
        private final String backendName;

        private GetSingleRequestBuilder(String localDbVlvIndexName, String backendName) {
            this.localDbVlvIndexName = localDbVlvIndexName;
            this.backendName = backendName;
        }

        /**
         * Build call for getSingle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCall(localDbVlvIndexName, backendName, _callback);
        }


        /**
         * Execute getSingle request
         * @return LocalDbVlvIndexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbVlvIndexResponse execute() throws ApiException {
            ApiResponse<LocalDbVlvIndexResponse> localVarResp = getSingleWithHttpInfo(localDbVlvIndexName, backendName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingle request with HTTP info returned
         * @return ApiResponse&lt;LocalDbVlvIndexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbVlvIndexResponse> executeWithHttpInfo() throws ApiException {
            return getSingleWithHttpInfo(localDbVlvIndexName, backendName);
        }

        /**
         * Execute getSingle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbVlvIndexResponse> _callback) throws ApiException {
            return getSingleAsync(localDbVlvIndexName, backendName, _callback);
        }
    }

    /**
     * Returns a single Local DB VLV Index
     * 
     * @param localDbVlvIndexName Name of the Local DB VLV Index (required)
     * @param backendName Name of the Backend (required)
     * @return GetSingleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRequestBuilder getSingle(String localDbVlvIndexName, String backendName) throws IllegalArgumentException {
        if (localDbVlvIndexName == null) throw new IllegalArgumentException("\"localDbVlvIndexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new GetSingleRequestBuilder(localDbVlvIndexName, backendName);
    }
    private okhttp3.Call listObjectsCall(String backendName, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-vlv-indexes"
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectsValidateBeforeCall(String backendName, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling listObjects(Async)");
        }

        return listObjectsCall(backendName, filter, _callback);

    }


    private ApiResponse<LocalDbVlvIndexListResponse> listObjectsWithHttpInfo(String backendName, String filter) throws ApiException {
        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(backendName, filter, null);
        Type localVarReturnType = new TypeToken<LocalDbVlvIndexListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listObjectsAsync(String backendName, String filter, final ApiCallback<LocalDbVlvIndexListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectsValidateBeforeCall(backendName, filter, _callback);
        Type localVarReturnType = new TypeToken<LocalDbVlvIndexListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListObjectsRequestBuilder {
        private final String backendName;
        private String filter;

        private ListObjectsRequestBuilder(String backendName) {
            this.backendName = backendName;
        }

        /**
         * Set filter
         * @param filter SCIM filter (optional)
         * @return ListObjectsRequestBuilder
         */
        public ListObjectsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for listObjects
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listObjectsCall(backendName, filter, _callback);
        }


        /**
         * Execute listObjects request
         * @return LocalDbVlvIndexListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbVlvIndexListResponse execute() throws ApiException {
            ApiResponse<LocalDbVlvIndexListResponse> localVarResp = listObjectsWithHttpInfo(backendName, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listObjects request with HTTP info returned
         * @return ApiResponse&lt;LocalDbVlvIndexListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbVlvIndexListResponse> executeWithHttpInfo() throws ApiException {
            return listObjectsWithHttpInfo(backendName, filter);
        }

        /**
         * Execute listObjects request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbVlvIndexListResponse> _callback) throws ApiException {
            return listObjectsAsync(backendName, filter, _callback);
        }
    }

    /**
     * Returns a list of all Local DB VLV Index objects
     * 
     * @param backendName Name of the Backend (required)
     * @return ListObjectsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectsRequestBuilder listObjects(String backendName) throws IllegalArgumentException {
        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new ListObjectsRequestBuilder(backendName);
    }
    private okhttp3.Call updateByNameCall(String localDbVlvIndexName, String backendName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRequest;

        // create path and map variables
        String localVarPath = "/backends/{backend-name}/local-db-vlv-indexes/{local-db-vlv-index-name}"
            .replace("{" + "local-db-vlv-index-name" + "}", localVarApiClient.escapeString(localDbVlvIndexName.toString()))
            .replace("{" + "backend-name" + "}", localVarApiClient.escapeString(backendName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByNameValidateBeforeCall(String localDbVlvIndexName, String backendName, UpdateRequest updateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'localDbVlvIndexName' is set
        if (localDbVlvIndexName == null) {
            throw new ApiException("Missing the required parameter 'localDbVlvIndexName' when calling updateByName(Async)");
        }

        // verify the required parameter 'backendName' is set
        if (backendName == null) {
            throw new ApiException("Missing the required parameter 'backendName' when calling updateByName(Async)");
        }

        // verify the required parameter 'updateRequest' is set
        if (updateRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRequest' when calling updateByName(Async)");
        }

        return updateByNameCall(localDbVlvIndexName, backendName, updateRequest, _callback);

    }


    private ApiResponse<LocalDbVlvIndexResponse> updateByNameWithHttpInfo(String localDbVlvIndexName, String backendName, UpdateRequest updateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(localDbVlvIndexName, backendName, updateRequest, null);
        Type localVarReturnType = new TypeToken<LocalDbVlvIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByNameAsync(String localDbVlvIndexName, String backendName, UpdateRequest updateRequest, final ApiCallback<LocalDbVlvIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByNameValidateBeforeCall(localDbVlvIndexName, backendName, updateRequest, _callback);
        Type localVarReturnType = new TypeToken<LocalDbVlvIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByNameRequestBuilder {
        private final List<Operation> operations;
        private final String localDbVlvIndexName;
        private final String backendName;

        private UpdateByNameRequestBuilder(List<Operation> operations, String localDbVlvIndexName, String backendName) {
            this.operations = operations;
            this.localDbVlvIndexName = localDbVlvIndexName;
            this.backendName = backendName;
        }

        /**
         * Build call for updateByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameCall(localDbVlvIndexName, backendName, updateRequest, _callback);
        }

        private UpdateRequest buildBodyParams() {
            UpdateRequest updateRequest = new UpdateRequest();
            updateRequest.operations(this.operations);
            return updateRequest;
        }

        /**
         * Execute updateByName request
         * @return LocalDbVlvIndexResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public LocalDbVlvIndexResponse execute() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            ApiResponse<LocalDbVlvIndexResponse> localVarResp = updateByNameWithHttpInfo(localDbVlvIndexName, backendName, updateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByName request with HTTP info returned
         * @return ApiResponse&lt;LocalDbVlvIndexResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LocalDbVlvIndexResponse> executeWithHttpInfo() throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameWithHttpInfo(localDbVlvIndexName, backendName, updateRequest);
        }

        /**
         * Execute updateByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LocalDbVlvIndexResponse> _callback) throws ApiException {
            UpdateRequest updateRequest = buildBodyParams();
            return updateByNameAsync(localDbVlvIndexName, backendName, updateRequest, _callback);
        }
    }

    /**
     * Update an existing Local DB VLV Index by name
     * 
     * @param localDbVlvIndexName Name of the Local DB VLV Index (required)
     * @param backendName Name of the Backend (required)
     * @param updateRequest Update an existing Local DB VLV Index (required)
     * @return UpdateByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Requestor cannot be authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Requestor does not have the required privileges </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Local DB VLV Index does not exist </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByNameRequestBuilder updateByName(List<Operation> operations, String localDbVlvIndexName, String backendName) throws IllegalArgumentException {
        if (operations == null) throw new IllegalArgumentException("\"operations\" is required but got null");
        if (localDbVlvIndexName == null) throw new IllegalArgumentException("\"localDbVlvIndexName\" is required but got null");
            

        if (backendName == null) throw new IllegalArgumentException("\"backendName\" is required but got null");
            

        return new UpdateByNameRequestBuilder(operations, localDbVlvIndexName, backendName);
    }
}
